Cannot find config of logging-methods file for project: {cassandra}, just use default guard methods. Please check the config in RunConfig.java and re-run mvn install in the utils module.
2020-08-25 10:50:41 [INFO] - [Spark] Starting analysis ...
2020-08-25 10:54:47 [INFO] - [Spark] Done!
2020-08-25 10:54:53 [INFO] - [Call Graph] Refine call graph in 6.0s , new call graph has 227898  edges (original : 610357)
2020-08-25 10:54:53 [INFO] - [AliasAnalysis] must alias to identity locals analysis ...
2020-08-25 10:54:55 [INFO] - [AliasAnalysis] complete in  1.6s
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.StringIndexOutOfBoundsException: void <init>(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.StringIndexOutOfBoundsException: void <init>(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.StringIndexOutOfBoundsException: void <init>(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.StringBuilder: java.lang.String toString()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.StringIndexOutOfBoundsException: void <init>(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.StringIndexOutOfBoundsException: void <init>(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.StringIndexOutOfBoundsException: void <init>(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.spi.ThrowableProxy: void <init>(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode getTreeNode(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.helpers.ThrowableToStringArray: void extract(java.util.List,java.lang.Throwable,java.lang.StackTraceElement[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.util.StatusPrinter: void buildStr(java.lang.StringBuilder,java.lang.String,ch.qos.logback.core.status.Status)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableAsList: com.google.common.collect.UnmodifiableListIterator listIterator(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashtable: java.lang.Object[] help_copy(java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashtable: java.lang.Object[] help_copy(java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashtable: java.lang.Object putIfMatch(org.cliffc.high_scale_lib.NonBlockingHashtable,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashtable: java.lang.Object putIfMatch(org.cliffc.high_scale_lib.NonBlockingHashtable,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashtable: java.lang.Object putIfMatch(org.cliffc.high_scale_lib.NonBlockingHashtable,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashtable: java.lang.Object get_impl(org.cliffc.high_scale_lib.NonBlockingHashtable,java.lang.Object[],java.lang.Object,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashtable: java.lang.Object get_impl(org.cliffc.high_scale_lib.NonBlockingHashtable,java.lang.Object[],java.lang.Object,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashMap: java.lang.Object[] help_copy(java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashMap: java.lang.Object putIfMatch(org.cliffc.high_scale_lib.NonBlockingHashMap,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashMap$CHM: java.lang.Object[] access$000(org.cliffc.high_scale_lib.NonBlockingHashMap$CHM,org.cliffc.high_scale_lib.NonBlockingHashMap,java.lang.Object[],int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashMap: java.lang.Object putIfMatch(org.cliffc.high_scale_lib.NonBlockingHashMap,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashMap$CHM: java.lang.Object[] access$000(org.cliffc.high_scale_lib.NonBlockingHashMap$CHM,org.cliffc.high_scale_lib.NonBlockingHashMap,java.lang.Object[],int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashMap: java.lang.Object putIfMatch(org.cliffc.high_scale_lib.NonBlockingHashMap,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashMap: java.lang.Object get_impl(org.cliffc.high_scale_lib.NonBlockingHashMap,java.lang.Object[],java.lang.Object,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.cliffc.high_scale_lib.NonBlockingHashMap: java.lang.Object get_impl(org.cliffc.high_scale_lib.NonBlockingHashMap,java.lang.Object[],java.lang.Object,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ForwardingMapEntry: java.lang.Object getKey()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ForwardingMapEntry: java.lang.Object getKey()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap$EntrySet$1: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap$EntrySet$1: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap$EntrySet$1: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap$EntrySet$1: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap$EntrySet$1: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap$EntrySet$1: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger square()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger square()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger square()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger square(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger square(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger square(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger square(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger square(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TimeZone: java.util.TimeZone getDefaultRef()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.NodeCursor: void <init>(java.lang.Object[],org.apache.cassandra.utils.btree.NodeCursor,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.security.Provider: java.util.Set entrySet()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseRows: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserSequence: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileDescriptor: void closeAll(java.io.Closeable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.LimitingRebufferer: void closeReader()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.LimitingRebufferer: void release()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.zip.InflaterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileDescriptor: void closeAll(java.io.Closeable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.charset.Charset: java.nio.charset.Charset lookup(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.charset.Charset: java.nio.charset.Charset lookup(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedMap: java.util.Collection values()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: void <init>(java.util.concurrent.ConcurrentSkipListMap$SubMap)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$HashIterator: void advance()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.util.TreeMap$Entry getLowerEntry(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absLowFence()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: java.util.ListIterator listIterator(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: java.util.ListIterator listIterator(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: java.util.ListIterator listIterator(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: java.util.ListIterator listIterator(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: java.util.ListIterator listIterator(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: java.util.ListIterator listIterator(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$1: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.LoggerContext: ch.qos.logback.core.spi.FilterReply getTurboFilterChainDecision_0_3OrMore(org.slf4j.Marker,ch.qos.logback.classic.Logger,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_1(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.spi.TurboFilterList: ch.qos.logback.core.spi.FilterReply getTurboFilterChainDecision(org.slf4j.Marker,ch.qos.logback.classic.Logger,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void buildLoggingEventAndAppend(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.LimitingRebufferer: org.apache.cassandra.io.util.ChannelProxy channel()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern$BackRef: boolean study(java.util.regex.Pattern$TreeInfo)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.misc.FDBigInteger: sun.misc.FDBigInteger big5powRec(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.misc.FDBigInteger: sun.misc.FDBigInteger big5powRec(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound: com.google.common.collect.Range get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: void compile()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.MutableBigInteger: java.math.MutableBigInteger divideKnuth(java.math.MutableBigInteger,java.math.MutableBigInteger)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.MutableBigInteger: java.math.MutableBigInteger divide2n1n(java.math.MutableBigInteger,java.math.MutableBigInteger)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigInteger: void toString(java.math.BigInteger,java.lang.StringBuilder,int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData transformAndFilter(org.apache.cassandra.db.DeletionTime,com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row transformAndFilter(org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.rows.Row$Deletion,com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.db.rows.Row merge(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableList$SubList: com.google.common.collect.ImmutableList subList(int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator: void validateIterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.util.TreeMap$Entry buildFromSorted(int,int,int,int,java.util.Iterator,java.io.ObjectInputStream,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet: java.util.Comparator comparator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet: java.util.Comparator comparator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void addToMap()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: void runUnlockedCleanup()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: void tryExpireEntries()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getLiveEntry(java.lang.Object,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: void postReadCleanup()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: void postReadCleanup()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: void postReadCleanup()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: void postReadCleanup()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound: java.util.Iterator entryIterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.util.TreeMap$Entry getLowerEntry(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractNavigableMap: java.util.Map$Entry lowerEntry(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ConditionalSpecialCasing: char[] lookUpTable(java.lang.String,int,java.util.Locale,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ConditionalSpecialCasing: char[] lookUpTable(java.lang.String,int,java.util.Locale,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.ReversedType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$6: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.security.MessageDigest: byte[] digest()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.misc.URLClassPath$JarLoader: sun.misc.Resource getResource(java.lang.String,boolean,java.util.Set)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void reBufferAt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream: void reBuffer()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.security.util.DerIndefLenConverter: void writeTag()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.misc.IOUtils: byte[] readNBytes(java.io.InputStream,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jna.NativeString: java.lang.String toString()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jna.NativeString: java.lang.String toString()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: void <init>(java.lang.String,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.security.x509.AlgorithmId: java.lang.String getName()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flushBuffer()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.PrintStream: void print(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.PrintStream: void print(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.cs.StreamEncoder: void flushLeftoverChar(java.nio.CharBuffer,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.cs.StreamEncoder: void writeBytes()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.cs.StreamEncoder: void writeBytes()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.OutputStreamWriter: void flushBuffer()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.PrintStream: void print(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.PrintStream: void print(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.PrintStream: void print(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.PrintStream: void print(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.PrintStream: void print(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.String: void <init>(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: void removeCollectedEntry(com.google.common.collect.MapMakerInternalMap$ReferenceEntry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: void expireEntries()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.text.normalizer.Utility: void recursiveAppendNumber(java.lang.StringBuffer,int,int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeSet: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.statements.ModificationStatement: void addFunctionsTo(java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList$SubList: java.lang.Object remove(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void fill()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: void apply(java.lang.Object[],java.util.function.Consumer,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: void validate(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: void validate(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: void validate(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: void validate(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: void validate(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: void validate(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getNextLoader(int[],int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.LocaleObjectCache: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.BaseLocale: sun.util.locale.BaseLocale getInstance(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList$SubList: void add(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: void add(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter: java.lang.String examineAliases(java.util.spi.TimeZoneNameProvider,java.util.Locale,java.lang.String,java.lang.String,int,java.util.Map)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleServiceProviderPool: void config(java.lang.Class,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter getAdapter(java.lang.Class,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter getAdapter(java.lang.Class,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.SetSerializer: java.lang.String toString(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.SetSerializer: java.lang.String toString(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.SetSerializer: java.lang.String toString(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.ReversedType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.ListSerializer: java.lang.String toString(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractCompositeType: java.lang.String getString(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractCompositeType: java.lang.String getString(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.TupleType: java.lang.String getString(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void closeInternal()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref$GlobalState: java.lang.Throwable release(org.apache.cassandra.utils.concurrent.Ref$State,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void maybeInit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.util.TreeMap$Entry getEntry(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.PriorityQueue: void siftUp(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void removeIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList$1: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList$1: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList$1: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TreeMultimap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators: void clear(java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeSet: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMultimap$Values: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedMap: java.lang.Object remove(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMultimap$Values: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMultimap$Values: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator: java.util.ListIterator getDelegateListIterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: void apply(java.lang.Object[],java.util.function.Consumer,com.google.common.base.Predicate,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void maybeInit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void maybeInit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.UnfilteredRows: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void maybeInit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void maybeInit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$ReverseComparator2: int compare(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeSet: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.FileHandle: org.apache.cassandra.io.util.FileDataInput createReader(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void access$200(org.apache.cassandra.db.columniterator.AbstractSSTableIterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void closeInternal()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void maybeInit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.PartitionColumns columns()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.PartitionColumns columns()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators: java.lang.Object getNext(java.util.Iterator,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.AbstractBTreePartition: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.Channels$1: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.Channels$1: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean remove(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.SafeMemoryWriter: void reallocate(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeSlow(long,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.DataOutputBuffer: void doFlush(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.DataOutputBuffer: void doFlush(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.DataOutputBuffer: void doFlush(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.ch.FileChannelImpl: int write(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.codahale.metrics.MetricRegistry: void registerAll(java.lang.String,com.codahale.metrics.MetricSet)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.codahale.metrics.MetricRegistry: com.codahale.metrics.Metric register(java.lang.String,com.codahale.metrics.Metric)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMultimap$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_1(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void update(org.apache.cassandra.db.DeletionTime)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseRows: void add(org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.BaseIterator add(org.apache.cassandra.db.transform.BaseIterator,org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.BaseIterator add(org.apache.cassandra.db.transform.BaseIterator,org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] build(java.util.Collection,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.db.rows.Row merge(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.ExecutionList: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_1(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.FBUtilities: java.lang.Object waitOnFuture(java.util.concurrent.Future)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.ExecutionList: void execute()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_1(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void warn(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.ExecutionList: void execute()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.ExecutionList: void execute()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures$ChainingListenableFuture: boolean cancel(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures$FallbackFuture: boolean cancel(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.CloseFuture$Forwarding: void <init>(java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.util.Map)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.SessionManager: com.datastax.driver.core.CloseFuture closeAsync()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.SessionManager: com.datastax.driver.core.CloseFuture closeAsync()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.cache.LocalCache$LoadingValueReference: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean remove(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean remove(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean remove(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean remove(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.cache.LocalCache$LoadingValueReference: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterOutputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterOutputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterOutputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterOutputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedWriter: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.Channels$1: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.cs.StreamEncoder: void writeBytes()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.cs.StreamEncoder: void writeBytes()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.nio.cs.StreamEncoder: void implFlushBuffer()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter getAdapter(java.lang.Class,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter getAdapter(java.lang.Class,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.codahale.metrics.Histogram: void update(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.repair.Validator$CountingDigest: void engineUpdate(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.hadoop.mapreduce.InputSplit: void <init>()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void info(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedReader: void fill()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.security.MessageDigest: void update(byte)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.jar.JarVerifier: void processEntry(sun.security.util.ManifestEntryVerifier)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.jar.JarVerifier: void update(int,byte[],int,int,sun.security.util.ManifestEntryVerifier)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.jar.JarVerifier: void update(int,byte[],int,int,sun.security.util.ManifestEntryVerifier)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedReader: void fill()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedReader: void fill()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void info(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedReader: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.commitlog.CommitLogDescriptor: org.apache.cassandra.db.commitlog.CommitLogDescriptor fromFileName(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.JVMStabilityInspector: void inspectThrowable(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.SharedExecutorPool: void schedule(org.apache.cassandra.concurrent.SEPWorker$Work)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.Executors$DelegatedExecutorService: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ForkJoinTask: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ForkJoinTask: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.ReadExecutionController: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.ReadExecutionController: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ForkJoinPool: void tryAddWorker(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator merge(java.util.List,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator merge(java.util.List,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.FBUtilities: void closeAll(java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ForkJoinTask: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.shaded.netty.util.concurrent.DefaultPromise: void notifyListeners()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(org.slf4j.Marker,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void info(org.slf4j.Marker,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void warn(org.slf4j.Marker,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.IntervalTree$IntervalNode: void <init>(org.apache.cassandra.utils.IntervalTree,java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.IntervalTree$IntervalNode: void <init>(org.apache.cassandra.utils.IntervalTree,java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Comparator getComparator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Iterator keyIterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$NavigableSubMap: java.util.TreeMap$Entry absLowFence()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Spliterator spliterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Spliterator spliterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.Sink$ChainedReference: void end()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode getTreeNode(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList$SubList: boolean addAll(int,java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: boolean addAll(int,java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.db.RowIndexEntry getPosition(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.io.sstable.format.SSTableReader$Operator,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.util.Map)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.FieldSelector$1: java.lang.String getColumnName()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.functions.FunctionResolver: org.apache.cassandra.cql3.functions.Function get(java.lang.String,org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: void freeze()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple: void freeze()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple: void freeze()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String,org.apache.cassandra.schema.Types)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String,org.apache.cassandra.schema.Types)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String,org.apache.cassandra.schema.Types)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.AssignmentTestable$TestResult: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAll(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification,java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <javax.management.openmbean.CompositeDataSupport: void <init>(javax.management.openmbean.CompositeType,java.util.Map)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData transformAndFilter(org.apache.cassandra.db.DeletionTime,com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.sstable.format.big.BigTableReader: org.apache.cassandra.db.RowIndexEntry getPosition(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.io.sstable.format.SSTableReader$Operator,boolean,boolean,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.AbstractCell: org.apache.cassandra.db.rows.Cell purge(org.apache.cassandra.db.DeletionPurger,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: void delayedExecute(java.util.concurrent.RunnableScheduledFuture)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData transformAndFilter(org.apache.cassandra.db.DeletionTime,com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: int copyIntoArray(java.lang.Object[],int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.parser.SignatureParser: sun.reflect.generics.tree.FieldTypeSignature parseFieldTypeSignature()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.tree.ClassTypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class toClass(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.tree.ClassTypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.scope.AbstractScope: java.lang.reflect.TypeVariable lookup(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.tree.ClassTypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.generics.tree.ClassTypeSignature: void accept(sun.reflect.generics.visitor.TypeTreeVisitor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeToken: java.lang.Class getRawType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.Types$JavaVersion$1: java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.Types: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.Types: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver$TypeTable$1: java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.CodecRegistry: com.datastax.driver.core.TypeCodec findCodec(com.datastax.driver.core.DataType,com.google.common.reflect.TypeToken)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.CodecRegistry: com.datastax.driver.core.TypeCodec findCodec(com.datastax.driver.core.DataType,com.google.common.reflect.TypeToken)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.CodecRegistry: com.datastax.driver.core.TypeCodec findCodec(com.datastax.driver.core.DataType,com.google.common.reflect.TypeToken)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.CodecRegistry: com.datastax.driver.core.TypeCodec findCodec(com.datastax.driver.core.DataType,com.google.common.reflect.TypeToken)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean remove(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean remove(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeSet: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode getTreeNode(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.Collectors$lambda_mapMerger_7__302: java.lang.Object apply(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ConcurrentSkipListMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ConcurrentSkipListMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.Collectors$lambda_groupingBy_45__300: void accept(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void removeInvalidPreparedStatementsForFunction(java.lang.String,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void removeInvalidPreparedStatementsForFunction(java.lang.String,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: void dropCf(java.util.UUID)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.view.ViewManager: void reload()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Collections2$FilteredCollection: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection: java.lang.Object[] toArray(java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.AbstractPipeline: java.lang.Object evaluate(java.util.stream.TerminalOp)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: void forEachRemaining(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableList$1: void forEachRemaining(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$lambda_entryConsumer_0__507: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList$ArrayListSpliterator: void forEachRemaining(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.Collectors$lambda_groupingBy_47__301: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedMap: void replaceAll(java.util.function.BiFunction)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.AbstractPipeline: java.lang.Object evaluate(java.util.stream.TerminalOp)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeSet: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMultimap$Values: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.AbstractPipeline: java.lang.Object evaluate(java.util.stream.TerminalOp)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.node.ArrayNode compactionStrategyMap(java.util.function.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.node.ArrayNode: java.lang.String toString()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.node.ObjectNode: java.lang.String toString()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedMap: java.util.Set keySet()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void abort()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture listFuture(com.google.common.collect.ImmutableList,boolean,java.util.concurrent.Executor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: com.google.common.collect.UnmodifiableIterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: com.google.common.collect.UnmodifiableIterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: com.google.common.collect.UnmodifiableIterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.gms.Gossiper: void addLocalApplicationState(org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void filterAndLog_0_Or3Plus(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.AbstractSession: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ForkJoinTask: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.Throwables: java.lang.Throwable perform(java.lang.Throwable,java.util.stream.Stream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.Throwables$lambda_null_0__557: void perform()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.gms.Gossiper: void stop()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.FBUtilities: java.lang.Object waitOnFuture(java.util.concurrent.Future)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable commit(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable commit(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable commit(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable commit(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable commit(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable dropSSTables(com.google.common.base.Predicate,org.apache.cassandra.db.compaction.OperationType,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable apply(com.google.common.base.Function,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable commit(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder: void flushHistogram()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.SafeMemory: void free()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Optional: void ifPresent(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void abort()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Optional: void ifPresent(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void prepareToCommit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void prepareToCommit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Optional: void ifPresent(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.SafeMemory: void free()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void prepareToCommit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Object finish()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Object finish()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.DataOutputBuffer: void doFlush(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.TypeParser: java.lang.String stringifyTypeParameters(java.util.List,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.TypeParser: java.lang.String stringifyTypeParameters(java.util.List,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.TypeParser: java.lang.String stringifyTypeParameters(java.util.List,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.String toString(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.TypeParser: java.lang.String stringifyTypeParameters(java.util.List,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.TupleType: java.lang.String toString()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void prepareToCommit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.stream.AbstractPipeline: java.lang.Object evaluate(java.util.stream.TerminalOp)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void prepareToCommit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Optional: void ifPresent(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void prepareToCommit()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.SafeMemoryWriter: void reallocate(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: void delayedExecute(java.util.concurrent.RunnableScheduledFuture)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableEnumSet: com.google.common.collect.ImmutableSet asImmutable(java.util.EnumSet)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableEnumSet: com.google.common.collect.ImmutableSet asImmutable(java.util.EnumSet)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore createColumnFamilyStore(org.apache.cassandra.db.Keyspace,java.lang.String,org.apache.cassandra.config.CFMetaData,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.view.ViewManager: void reload()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractCompositeType: void validate(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractCompositeType: void validate(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.CollectionType: void validateCellValue(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.schema.Functions$Builder: org.apache.cassandra.schema.Functions$Builder add(org.apache.cassandra.cql3.functions.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Terms: void addFunctions(java.lang.Iterable,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Terms: void addFunctions(java.lang.Iterable,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Terms: void addFunctions(java.lang.Iterable,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Terms: void addFunctions(java.lang.Iterable,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Terms: void addFunctions(java.lang.Iterable,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Terms: void addFunctions(java.lang.Iterable,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Tuples$DelayedValue: void addFunctionsTo(java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.String deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType deepCloneWithoutSubtype()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperClassChain(java.lang.reflect.Type,java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeBase: java.lang.String toCanonical()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeBase: java.lang.String toCanonical()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeBase: java.lang.String toCanonical()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.SimpleType: java.lang.String buildCanonicalName()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType findType(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: org.codehaus.jackson.JsonLocation getCurrentLocation()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: org.codehaus.jackson.JsonToken getCurrentToken()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: java.lang.String getText()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.StdDeserializationContext: java.lang.String _calcName(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: org.codehaus.jackson.JsonLocation getTokenLocation()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: java.lang.String getCurrentName()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonToken nextToken()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonToken nextToken()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: org.codehaus.jackson.JsonParser skipChildren()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: java.lang.Object getEmbeddedObject()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: java.math.BigDecimal getDecimalValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: org.codehaus.jackson.JsonParser$NumberType getNumberType()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: java.math.BigInteger getBigIntegerValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: java.lang.Object _deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: java.lang.Number getNumberValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.util.ClassUtil: void _addSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.util.ClassUtil: void _addSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.'annotation'.AnnotationParser: java.util.Map parseAnnotations2(byte[],sun.reflect.ConstantPool,java.lang.Class,java.lang.Class[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.'annotation'.AnnotationParser: void skipMemberValue(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.'annotation'.AnnotationParser: void skipAnnotation(java.nio.ByteBuffer,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.'annotation'.AnnotationParser: java.lang.'annotation'.Annotation parseAnnotation2(java.nio.ByteBuffer,sun.reflect.ConstantPool,java.lang.Class,boolean,java.lang.Class[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.reflect.'annotation'.AnnotationParser: java.lang.Class toClass(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void _collectAndResolve(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.jsontype.NamedType,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector,java.util.HashMap)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.introspect.POJOPropertyBuilder: org.codehaus.jackson.map.introspect.AnnotationMap _mergeAnnotations(int,org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node: org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node withoutIgnored()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node: org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node withoutIgnored()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node: org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node withoutNonVisible()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node: org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node append(org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node: org.codehaus.jackson.map.introspect.POJOPropertyBuilder$Node trimByVisibility()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFields(java.util.Map,java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$InnerClassProperty: org.codehaus.jackson.map.deser.SettableBeanProperty withValueDeserializer(org.codehaus.jackson.map.JsonDeserializer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.type.JavaType parseType(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Calendar: void setTime(java.util.Date)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: char[] getTextCharacters()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserDelegate: org.codehaus.jackson.ObjectCodec getCodec()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.TokenBuffer: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.TokenBuffer: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: java.lang.Object _deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: java.lang.Object _deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.util.JsonParserSequence: void addFlattenedActiveParsers(java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: java.lang.Object _deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: java.lang.Object deserializeTypedFromArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: java.lang.Object _deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: java.lang.Object _deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: java.lang.Object deserializeTypedFromArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: java.lang.Object deserializeTypedFromArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: java.lang.Object deserializeTypedFromArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$InnerClassProperty: void set(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$ManagedReferenceProperty: void set(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.util.Collection deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.MapDeserializer: void _readAndBind(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.util.Map)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.StdDeserializerProvider$WrappedDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.BeanDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$SetterlessProperty: void deserializeAndSet(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$SetterlessProperty: void deserializeAndSet(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$SetterlessProperty: void deserializeAndSet(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$SetterlessProperty: void deserializeAndSet(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.SettableBeanProperty$SetterlessProperty: void deserializeAndSet(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleResources: java.lang.String getDateTimePattern(int,int,java.util.Calendar)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter getAdapter(java.lang.Class,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter getAdapter(java.lang.Class,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.Format$FieldDelegate)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter getAdapter(java.lang.Class,java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.UserTypes$DelayedValue: java.nio.ByteBuffer[] bindInternal(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Tuples$DelayedValue: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.ListType: java.lang.String setOrListToJsonString(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.UserType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <sun.security.provider.SecureRandom: void engineNextBytes(byte[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractCollectionCodec: java.nio.ByteBuffer serialize(java.lang.Object,com.datastax.driver.core.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractCollectionCodec: java.nio.ByteBuffer serialize(java.lang.Object,com.datastax.driver.core.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractCollectionCodec: java.nio.ByteBuffer serialize(java.lang.Object,com.datastax.driver.core.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractCollectionCodec: java.lang.Object deserialize(java.nio.ByteBuffer,com.datastax.driver.core.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractCollectionCodec: java.lang.Object deserialize(java.nio.ByteBuffer,com.datastax.driver.core.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractCollectionCodec: java.lang.Object deserialize(java.nio.ByteBuffer,com.datastax.driver.core.ProtocolVersion)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: void delayedExecute(java.util.concurrent.RunnableScheduledFuture)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Tuples$DelayedValue: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Tuples$DelayedValue: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Term$NonTerminal: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Term$NonTerminal: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Term$NonTerminal: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Term$NonTerminal: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Term$NonTerminal: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Json$DelayedColumnValue: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.List bounds(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.TokenFilter: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.RestrictionSet: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractNavigableMap: java.util.Map$Entry lastEntry()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractNavigableMap: java.util.Map$Entry lowerEntry(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.List values(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeSet: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.List getColumnDefs()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.UserTypes$Literal: java.lang.String getText()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.ReversedType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.ReversedType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.ReversedType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.functions.FunctionCall$Raw: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Tuples$DelayedValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Tuples$DelayedValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.UserTypes$DelayedValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.TokenFilter: org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: void addColumnMapping(org.apache.cassandra.cql3.selection.SelectionColumnMapping,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.FieldSelector$1: void addColumnMapping(org.apache.cassandra.cql3.selection.SelectionColumnMapping,org.apache.cassandra.cql3.ColumnSpecification)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.SelectorFactories: org.apache.cassandra.cql3.selection.SelectorFactories createFactoriesAndCollectColumnDefinitions(java.util.List,java.util.List,org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.SelectorFactories: org.apache.cassandra.cql3.selection.SelectorFactories createFactoriesAndCollectColumnDefinitions(java.util.List,java.util.List,org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.SelectorFactories: org.apache.cassandra.cql3.selection.SelectorFactories createFactoriesAndCollectColumnDefinitions(java.util.List,java.util.List,org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection: org.apache.cassandra.cql3.selection.Selector$Factory newSelectorFactory(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.Set getRestrictions(org.apache.cassandra.config.ColumnDefinition)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.spi.ThrowableProxyVO: ch.qos.logback.classic.spi.ThrowableProxyVO build(ch.qos.logback.classic.spi.IThrowableProxy)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.spi.ThrowableProxyVO: ch.qos.logback.classic.spi.ThrowableProxyVO build(ch.qos.logback.classic.spi.IThrowableProxy)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.CloseFuture$Forwarding: void <init>(java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.SessionManager: com.datastax.driver.core.CloseFuture closeAsync()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.ControlConnection: com.datastax.driver.core.Connection reconnectInternal(java.util.Iterator,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.shaded.netty.util.internal.logging.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.Cluster: com.datastax.driver.core.Metadata getMetadata()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeCqlNameParser: com.datastax.driver.core.DataType parse(java.lang.String,com.datastax.driver.core.Cluster,java.lang.String,java.util.Map,java.util.Map,boolean,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeCqlNameParser: com.datastax.driver.core.DataType parse(java.lang.String,com.datastax.driver.core.Cluster,java.lang.String,java.util.Map,java.util.Map,boolean,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeCqlNameParser: com.datastax.driver.core.DataType parse(java.lang.String,com.datastax.driver.core.Cluster,java.lang.String,java.util.Map,java.util.Map,boolean,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeCqlNameParser: com.datastax.driver.core.DataType parse(java.lang.String,com.datastax.driver.core.Cluster,java.lang.String,java.util.Map,java.util.Map,boolean,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeCqlNameParser: com.datastax.driver.core.DataType parse(java.lang.String,com.datastax.driver.core.Cluster,java.lang.String,java.util.Map,java.util.Map,boolean,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeCqlNameParser: com.datastax.driver.core.DataType parse(java.lang.String,com.datastax.driver.core.Cluster,java.lang.String,java.util.Map,java.util.Map,boolean,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeClassNameParser: com.datastax.driver.core.DataType parseOne(java.lang.String,com.datastax.driver.core.ProtocolVersion,com.datastax.driver.core.CodecRegistry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeClassNameParser: com.datastax.driver.core.DataType parseOne(java.lang.String,com.datastax.driver.core.ProtocolVersion,com.datastax.driver.core.CodecRegistry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeClassNameParser: com.datastax.driver.core.DataType parseOne(java.lang.String,com.datastax.driver.core.ProtocolVersion,com.datastax.driver.core.CodecRegistry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeClassNameParser: com.datastax.driver.core.DataType parseOne(java.lang.String,com.datastax.driver.core.ProtocolVersion,com.datastax.driver.core.CodecRegistry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeClassNameParser: com.datastax.driver.core.DataType parseOne(java.lang.String,com.datastax.driver.core.ProtocolVersion,com.datastax.driver.core.CodecRegistry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.DataTypeClassNameParser: com.datastax.driver.core.DataType parseOne(java.lang.String,com.datastax.driver.core.ProtocolVersion,com.datastax.driver.core.CodecRegistry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractMapCodec: java.lang.Object parse(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractMapCodec: java.lang.Object parse(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractMapCodec: java.lang.Object parse(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractMapCodec: java.lang.Object parse(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.driver.core.TypeCodec$AbstractMapCodec: java.lang.Object parse(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.datastax.shaded.netty.util.internal.JavassistTypeParameterMatcherGenerator: java.lang.String typeName(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <javassist.ClassPool: javassist.CtClass getAndRename(java.lang.String,java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture listFuture(com.google.common.collect.ImmutableList,boolean,java.util.concurrent.Executor)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.BaseIterator add(org.apache.cassandra.db.transform.BaseIterator,org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.UnfilteredPartitions: org.apache.cassandra.config.CFMetaData metadata()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] buildInternal(java.lang.Iterable,int,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.NodeBuilder: void ensureRoom(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.db.rows.Row merge(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.Recycler: boolean recycle(java.lang.Object,io.netty.util.Recycler$Handle)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.FBUtilities: void closeAll(java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.LogFile: java.lang.String toString(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: java.util.concurrent.CompletableFuture applyInternal(org.apache.cassandra.db.Mutation,boolean,boolean,boolean,boolean,java.util.concurrent.CompletableFuture)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.SEPExecutor: void maybeExecuteImmediately(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow: void apply(java.util.function.Consumer,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: void apply(org.apache.cassandra.db.Mutation,boolean,boolean,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Mutation: void apply()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Mutation: void apply(boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Mutation: void apply()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: void apply(org.apache.cassandra.db.Mutation,boolean,boolean,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Function)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1: java.lang.Object setValue(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.Class erase(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.Class erase(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.Class erase(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: void prepare(java.util.Map,java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: void prepare(java.util.Map,java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.reflect.Type fixGenericArray(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.reflect.Type[] resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.reflect.Type[] resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.reflect.Type[] resolve(java.lang.reflect.Type,java.lang.reflect.Type[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.TypeResolver: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.finder.MethodFinder: java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.finder.MethodFinder: java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.beans.finder.MethodFinder: java.lang.reflect.Method findAccessibleMethod(java.lang.reflect.Method)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.beans.Introspector: java.lang.reflect.Method internalFindMethod(java.lang.Class,java.lang.String,int,java.lang.Class[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.beans.Introspector: void <init>(java.lang.Class,java.lang.Class,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.subst.Parser: ch.qos.logback.core.subst.Node E()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.subst.Parser: ch.qos.logback.core.subst.Node E()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.subst.Parser: ch.qos.logback.core.subst.Node E()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.subst.Parser: ch.qos.logback.core.subst.Node E()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.subst.Parser: ch.qos.logback.core.subst.Node E()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.subst.NodeToStringTransformer: void compileNode(ch.qos.logback.core.subst.Node,java.lang.StringBuilder,java.util.Stack)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.subst.NodeToStringTransformer: void compileNode(ch.qos.logback.core.subst.Node,java.lang.StringBuilder,java.util.Stack)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.core.subst.NodeToStringTransformer: void compileNode(ch.qos.logback.core.subst.Node,java.lang.StringBuilder,java.util.Stack)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void handleParentLevelChange(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.codehaus.janino.ClassBodyEvaluator: void <init>()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: void <init>(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.LoggerContext: void reset()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void recursiveReset()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BasePartitions: void add(org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BasePartitions: void add(org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.partitions.PartitionIterator apply(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseRows: org.apache.cassandra.db.PartitionColumns columns()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.DualPivotQuicksort: void sort(int[],int,int,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.DualPivotQuicksort: void sort(int[],int,int,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.DualPivotQuicksort: void sort(int[],int,int,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.DualPivotQuicksort: void sort(int[],int,int,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.DualPivotQuicksort: void sort(int[],int,int,boolean)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Filter: org.apache.cassandra.db.rows.RowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: void maybeBuild()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Mutation: void apply()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.service.StorageProxy: void sendToHintedEndpoints(org.apache.cassandra.db.Mutation,java.lang.Iterable,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.String,org.apache.cassandra.concurrent.Stage)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void fill()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: com.sun.jmx.mbeanserver.MXBeanMapping mappingForType(java.lang.reflect.Type,com.sun.jmx.mbeanserver.MXBeanMappingFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.MXBeanIntrospector: java.lang.String typeName(java.lang.reflect.Type)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: com.sun.jmx.mbeanserver.MXBeanMapping mappingForType(java.lang.reflect.Type,com.sun.jmx.mbeanserver.MXBeanMappingFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: com.sun.jmx.mbeanserver.MXBeanMapping mappingForType(java.lang.reflect.Type,com.sun.jmx.mbeanserver.MXBeanMappingFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: com.sun.jmx.mbeanserver.MXBeanMapping mappingForType(java.lang.reflect.Type,com.sun.jmx.mbeanserver.MXBeanMappingFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory: com.sun.jmx.mbeanserver.MXBeanMapping mappingForType(java.lang.reflect.Type,com.sun.jmx.mbeanserver.MXBeanMappingFactory)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList: java.lang.Object set(int,java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.SubList$1: void set(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: void remove()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.lang.reflect.WeakCache$Factory: java.lang.Object get()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.IntervalTree$IntervalNode: void searchInternal(org.apache.cassandra.utils.Interval,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.IntervalTree$IntervalNode: void searchInternal(org.apache.cassandra.utils.Interval,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.IntervalTree$IntervalNode: void searchInternal(org.apache.cassandra.utils.Interval,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.IntervalTree$IntervalNode: void searchInternal(org.apache.cassandra.utils.Interval,java.util.List)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Mutation: void apply()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.gms.Gossiper: void convict(java.net.InetAddress,double)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.Mutation: void apply()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.RecognitionException: void <init>(org.antlr.runtime.IntStream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.RecognitionException: void <init>(org.antlr.runtime.IntStream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.NoViableAltException: void <init>(java.lang.String,int,int,org.antlr.runtime.IntStream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.NoViableAltException: void <init>(java.lang.String,int,int,org.antlr.runtime.IntStream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.BufferedTokenStream: void sync(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.BufferedTokenStream: void sync(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.BufferedTokenStream: void sync(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.BufferedTokenStream: void sync(int)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.NoViableAltException: void <init>(java.lang.String,int,int,org.antlr.runtime.IntStream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.RecognitionException: void <init>(org.antlr.runtime.IntStream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.NoViableAltException: void <init>(java.lang.String,int,int,org.antlr.runtime.IntStream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.NoViableAltException: void <init>(java.lang.String,int,int,org.antlr.runtime.IntStream)>
2020-08-25 10:54:55 [DEBUG] - Worst case for method <org.antlr.runtime.RecognitionException: void <init>(org.antlr.runtime.IntStream)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.antlr.runtime.NoViableAltException: void <init>(java.lang.String,int,int,org.antlr.runtime.IntStream)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.antlr.runtime.NoViableAltException: void <init>(java.lang.String,int,int,org.antlr.runtime.IntStream)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Tuples$Literal tupleLiteral()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: void relation(org.apache.cassandra.cql3.WhereClause$Builder)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.selection.Selectable$Raw unaliasedSelector()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.selection.Selectable$Raw unaliasedSelector()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.selection.Selectable$Raw unaliasedSelector()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.auth.FunctionResource: java.util.Set applicablePermissions()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.sun.jna.NativeString: java.lang.String toString()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.sun.jna.NativeString: java.lang.String toString()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Collection: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Collection: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$Collection: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$UserDefined: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.CQL3Type$UserDefined: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.QueryOptions makeInternalOptions(org.apache.cassandra.cql3.statements.ParsedStatement$Prepared,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.partitions.PartitionIterator apply(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.SEPExecutor: void maybeExecuteImmediately(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.service.DataResolver: org.apache.cassandra.db.partitions.PartitionIterator resolve()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterables$8: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedList: java.util.List subList(int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.partitions.PartitionIterator apply(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.metrics.LatencyMetrics: void addNano(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.SEPExecutor: void maybeExecuteImmediately(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.codahale.metrics.Histogram: void update(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] transformAndFilter(java.lang.Object[],com.google.common.base.Function)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row updateAllTimestamp(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.EncodingStats$Collector: org.apache.cassandra.db.rows.EncodingStats collect(org.apache.cassandra.db.rows.Row,java.util.Iterator,org.apache.cassandra.db.DeletionInfo)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.codahale.metrics.Histogram: void update(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.partitions.PartitionIterator apply(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.FieldSelector: void reset()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.ScalarFunctionSelector: java.nio.ByteBuffer getOutput(org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.ScalarFunctionSelector: java.nio.ByteBuffer getOutput(org.apache.cassandra.transport.ProtocolVersion)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.FieldSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.FieldSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.FieldSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.SelectorFactories: java.util.List newInstances(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.SelectorFactories: java.util.List newInstances(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.selection.FieldSelector$1: org.apache.cassandra.cql3.selection.Selector newInstance(org.apache.cassandra.cql3.QueryOptions)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.QueryOptions makeInternalOptions(org.apache.cassandra.cql3.statements.ParsedStatement$Prepared,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.service.StorageProxy: void sendToHintedEndpoints(org.apache.cassandra.db.Mutation,java.lang.Iterable,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.String,org.apache.cassandra.concurrent.Stage)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: java.util.concurrent.CompletableFuture applyInternal(org.apache.cassandra.db.Mutation,boolean,boolean,boolean,boolean,java.util.concurrent.CompletableFuture)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <jdk.nashorn.api.scripting.AbstractJSObject: void <init>()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <jdk.nashorn.api.scripting.AbstractJSObject: void <init>()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <jdk.nashorn.api.scripting.AbstractJSObject: void <init>()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <jdk.nashorn.api.scripting.AbstractJSObject: void <init>()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <jdk.nashorn.api.scripting.AbstractJSObject: void <init>()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ConstructorVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodType: java.lang.invoke.MethodType makeImpl(java.lang.Class,java.lang.Class[],boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodType: java.lang.invoke.MethodType makeImpl(java.lang.Class,java.lang.Class[],boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.String debugString()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MemberName internalMemberName()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.invoke.util.BytecodeDescriptor: java.lang.Class parseSig(java.lang.String,int[],int,java.lang.ClassLoader)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <jdk.internal.org.objectweb.asm.Handler: jdk.internal.org.objectweb.asm.Handler remove(jdk.internal.org.objectweb.asm.Handler,jdk.internal.org.objectweb.asm.Label,jdk.internal.org.objectweb.asm.Label)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <jdk.internal.org.objectweb.asm.ClassWriter: byte[] toByteArray()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.Invokers: java.lang.invoke.MethodHandle basicInvoker()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fillToRight(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fillToRight(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asCollector(java.lang.Class,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.security.Permissions: void add(java.security.Permission)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.ClassValue: java.lang.Object get(java.lang.Class)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.Functions$Builder: org.apache.cassandra.schema.Functions$Builder add(org.apache.cassandra.cql3.functions.Function)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.Functions$Builder: org.apache.cassandra.schema.Functions$Builder add(org.apache.cassandra.cql3.functions.Function)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.FBUtilities: java.lang.Object waitOnFuture(java.util.concurrent.Future)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.FBUtilities: java.lang.Object waitOnFuture(java.util.concurrent.Future)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.compaction.CompactionStrategyManager: void shutdown()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: void dropCf(java.util.UUID)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void removeInvalidPreparedStatementsForFunction(java.lang.String,java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void removeInvalidPreparedStatementsForFunction(java.lang.String,java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Mutation: void apply()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeSet: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore getIfExists(java.util.UUID)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.FileUtils: void deleteRecursiveOnExit(java.io.File)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.FileUtils: void deleteRecursive(java.io.File)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.SafeMemory: void free()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.SafeMemory: void free()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.sstable.Downsampling: java.util.List getSamplingPattern(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractQueue: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.Type capture(java.lang.reflect.Type)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.Type capture(java.lang.reflect.Type)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.Type capture(java.lang.reflect.Type)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.reflect.TypeToken: java.lang.reflect.Type subtypeBound(java.lang.reflect.WildcardType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.reflect.TypeToken: java.lang.reflect.Type supertypeBound(java.lang.reflect.WildcardType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.datastax.driver.core.CodecRegistry: com.datastax.driver.core.TypeCodec findCodec(com.datastax.driver.core.DataType,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.datastax.driver.core.CodecRegistry: com.datastax.driver.core.TypeCodec findCodec(com.datastax.driver.core.DataType,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.datastax.driver.core.CodecRegistry: com.datastax.driver.core.TypeCodec findCodec(com.datastax.driver.core.DataType,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.datastax.driver.core.CodecRegistry: com.datastax.driver.core.TypeCodec findCodec(com.datastax.driver.core.DataType,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.cache.LocalCache$LoadingValueReference$1: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures$ImmediateFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.service.DataResolver: void compareResponses()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.nio.channels.Channels$1: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.nio.channels.Channels$1: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: java.util.List getFields(java.lang.Class)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.datastax.driver.core.CloseFuture$Forwarding: com.datastax.driver.core.CloseFuture force()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.concurrent.CompletableFuture$AsyncRun: void run()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Mutation: void apply(boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row transformAndFilter(org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.rows.Row$Deletion,com.google.common.base.Function)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.db.rows.Row merge(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.view.TableViews$1: java.util.Collection buildNext()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators: java.lang.Object getOnlyElement(java.util.Iterator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.stream.Sink$ChainedReference: void begin(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.stream.Sink$ChainedReference: void begin(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <javax.crypto.Cipher: void chooseFirstProvider()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.Hex: java.lang.String wrapCharArray(char[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.EncryptionContext: void <init>(org.apache.cassandra.config.TransparentDataEncryptionOptions)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.EncryptionContext: void <init>(org.apache.cassandra.config.TransparentDataEncryptionOptions)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.EncryptionContext: void <init>(org.apache.cassandra.config.TransparentDataEncryptionOptions,byte[],boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.stream.ReferencePipeline$3$1: void accept(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$Hashable initHelper(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,byte,byte)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$Hashable initHelper(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,byte,byte)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$Hashable splitHelper(org.apache.cassandra.utils.MerkleTree$Hashable,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,byte,org.apache.cassandra.dht.Token)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$Hashable splitHelper(org.apache.cassandra.utils.MerkleTree$Hashable,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,byte,org.apache.cassandra.dht.Token)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.FBUtilities: java.lang.Object waitOnFuture(java.util.concurrent.Future)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.Futures$1: void run()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.WrappedRunnable: void run()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.rows.Unfiltered advance(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.rows.Unfiltered advance(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.Filter: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseRows: void add(org.apache.cassandra.db.transform.Transformation)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap: void clear()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: void maybeBuild()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.PartitionUpdate: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.concurrent.CountedCompleter: void tryComplete()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator: java.util.Spliterator trySplit()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.SubList: java.lang.Object remove(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.SubList: java.lang.Object remove(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.SubList: java.lang.Object remove(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.SubList: java.lang.Object remove(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.SubList$1: void remove()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList$SubList: void removeRange(int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.SubList: void removeRange(int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void clear()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void clear()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMultimap$Values: void clear()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMultimap$Values: void clear()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ForwardingCollection: void clear()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ForwardingCollection: void clear()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator: void remove()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ForwardingCollection: void clear()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.statements.BatchStatement: java.lang.Iterable getFunctions()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.RestrictionSet: void addFunctionsTo(java.util.List)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.TokenFilter: void addFunctionsTo(java.util.List)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.restrictions.RestrictionSet: void addFunctionsTo(java.util.List)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.statements.BatchStatement: java.lang.Iterable getFunctions()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FilterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.text.normalizer.UnicodeSet: void applyPattern(sun.text.normalizer.RuleCharacterIterator,sun.text.normalizer.SymbolTable,java.lang.StringBuffer,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$SynchronizedCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.security.util.DerOutputStream: void putOrderedSetOf(byte,sun.security.util.DerEncoder[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.security.util.DerOutputStream: void putOrderedSetOf(byte,sun.security.util.DerEncoder[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.security.util.DerOutputStream: void putOrderedSetOf(byte,sun.security.util.DerEncoder[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.security.util.DerOutputStream: void putOrderedSetOf(byte,sun.security.util.DerEncoder[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.security.pkcs.SignerInfo: void <init>(sun.security.util.DerInputStream,boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint: void permits(sun.security.util.ConstraintsParameters)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.security.util.DisabledAlgorithmConstraints$UsageConstraint: void permits(sun.security.util.ConstraintsParameters)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.util.logging.PlatformLogger$DefaultLoggerProxy: void doLog(sun.util.logging.PlatformLogger$Level,java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.security.pkcs.PKCS7: sun.security.pkcs.SignerInfo[] verify(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <javax.crypto.Cipher: void chooseFirstProvider()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <javax.crypto.Cipher: void chooseFirstProvider()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.misc.CompoundEnumeration: java.lang.Object nextElement()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.core.pattern.parser.Parser: ch.qos.logback.core.pattern.parser.Node E()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.core.pattern.parser.Parser: ch.qos.logback.core.pattern.parser.Node E()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.core.pattern.parser.Compiler: ch.qos.logback.core.pattern.Converter compile()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.core.pattern.ConverterUtil: void startConverters(ch.qos.logback.core.pattern.Converter)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.CollectionSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.EncodingStats$Collector: org.apache.cassandra.db.rows.EncodingStats collect(org.apache.cassandra.db.rows.Row,java.util.Iterator,org.apache.cassandra.db.DeletionInfo)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.db.rows.Row merge(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.partitions.AbstractBTreePartition: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMultimap$Itr: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.marshal.AbstractType expandUserTypes(org.apache.cassandra.db.marshal.AbstractType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.marshal.AbstractType expandUserTypes(org.apache.cassandra.db.marshal.AbstractType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.marshal.AbstractType expandUserTypes(org.apache.cassandra.db.marshal.AbstractType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.marshal.AbstractType expandUserTypes(org.apache.cassandra.db.marshal.AbstractType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.marshal.AbstractType expandUserTypes(org.apache.cassandra.db.marshal.AbstractType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractList$Itr: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.db.marshal.AbstractType updateWith(org.apache.cassandra.db.marshal.AbstractType,java.lang.String,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.db.marshal.AbstractType updateWith(org.apache.cassandra.db.marshal.AbstractType,java.lang.String,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.db.marshal.AbstractType updateWith(org.apache.cassandra.db.marshal.AbstractType,java.lang.String,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.db.marshal.AbstractType updateWith(org.apache.cassandra.db.marshal.AbstractType,java.lang.String,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.db.marshal.AbstractType updateWith(org.apache.cassandra.db.marshal.AbstractType,java.lang.String,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void <init>(java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.MmappedRegions: void closeQuietly()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.MmapRebufferer: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.MmapRebufferer: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.MmapRebufferer: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.MmapRebufferer: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.SafeMemory: void free()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void error(java.lang.String,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.Rows$lambda_collectStats_0__109: void accept(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: boolean applyForwards(java.lang.Object[],java.util.function.Consumer,com.google.common.base.Predicate)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void updateLocalDeletionTime(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void update(org.apache.cassandra.db.DeletionTime)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.RegularImmutableSortedMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ArrayList: void forEach(java.util.function.Consumer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TransformedIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractSequentialList: java.lang.Object get(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Collections2$FilteredCollection: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void execute(java.lang.Runnable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Sets$3: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap: int compare(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] transformAndFilter(java.lang.Object[],com.google.common.base.Function)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] transformAndFilter(java.lang.Object[],org.apache.cassandra.utils.btree.BTree$FiltrationTracker)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] buildInternal(java.lang.Iterable,int,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractNavigableMap: java.util.Map$Entry firstEntry()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators: java.lang.Object getNext(java.util.Iterator,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.util.locale.provider.AuxLocaleProviderAdapter: java.util.spi.LocaleServiceProvider getLocaleServiceProvider(java.lang.Class)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$CharProperty clazz(boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$CharProperty clazz(boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$CharProperty clazz(boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.util.regex.Pattern$CharProperty clazz(boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.LimitingRebufferer: org.apache.cassandra.io.util.Rebufferer$BufferHolder rebuffer(long)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peek()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.ReadCommand$1MetricRecording: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.ReadCommand$1MetricRecording: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.OutputStream: void write(byte[])>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.Logger: void buildLoggingEventAndAppend(java.lang.String,org.slf4j.Marker,ch.qos.logback.classic.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.slf4j.helpers.SubstituteLogger: void error(java.lang.String,java.lang.Throwable)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.LimitingRebufferer: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.FileInputStream: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.nio.channels.Channels$WritableByteChannelImpl: void implCloseChannel()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.DataOutputStream: void write(int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flushBuffer()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void write(byte[],int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flushBuffer()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.io.BufferedOutputStream: void flush()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: void print(java.lang.StringBuilder,java.math.BigDecimal,java.util.Locale,java.util.Formatter$Flags,char,int,boolean)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.time.LocalTime: java.lang.Object query(java.time.temporal.TemporalQuery)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.time.LocalTime: java.lang.Object query(java.time.temporal.TemporalQuery)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.time.LocalTime: java.lang.Object query(java.time.temporal.TemporalQuery)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.time.temporal.TemporalAccessor,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Formatter$FormatSpecifier: java.lang.Appendable print(java.lang.StringBuilder,java.util.Calendar,char,java.util.Locale)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Calendar: void setTime(java.util.Date)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.Calendar: void setTime(java.util.Date)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.util.BuddhistCalendar: void add(int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.lang.ThreadLocal: java.lang.Object get()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.LegacyLayout$7: org.apache.cassandra.db.LegacyLayout$LegacyCell computeNext()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$PeekingImpl: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound: java.util.Iterator entryIterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$2: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Maps$FilteredEntryMap$EntrySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableMapKeySet: com.google.common.collect.UnmodifiableIterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.TreeMap$KeySet: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Collections2$FilteredCollection: java.util.Iterator iterator()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection: void refreshIfEmpty()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.Iterators$5: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.AbstractMap$1$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.ResourceBundle: java.util.ResourceBundle findBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.List,int,java.util.ResourceBundle$Control,java.util.ResourceBundle)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: java.lang.Object next()>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.pattern.ThrowableProxyConverter: void recursiveAppend(java.lang.StringBuilder,java.lang.String,int,ch.qos.logback.classic.spi.IThrowableProxy)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <ch.qos.logback.classic.pattern.ThrowableProxyConverter: void recursiveAppend(java.lang.StringBuilder,java.lang.String,int,ch.qos.logback.classic.spi.IThrowableProxy)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.text.SimpleDateFormat: void zeroPaddingNumber(int,int,int,java.lang.StringBuffer)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.serializers.ListSerializer: java.lang.String toString(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.SafeConstructor: java.util.List mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.SafeConstructor: java.util.List mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.Constructor$ConstructScalar: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq: void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq: void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.thrift.protocol.TProtocolUtil: void skip(org.apache.thrift.protocol.TProtocol,byte,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.thrift.protocol.TProtocolUtil: void skip(org.apache.thrift.protocol.TProtocol,byte,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.thrift.protocol.TProtocolUtil: void skip(org.apache.thrift.protocol.TProtocol,byte,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.thrift.protocol.TProtocolUtil: void skip(org.apache.thrift.protocol.TProtocol,byte,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.thrift.protocol.TProtocolUtil: void skip(org.apache.thrift.protocol.TProtocol,byte,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeNode(org.yaml.snakeyaml.nodes.Node)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeMappingNode(java.lang.String)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.IndexExpression: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.Column: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.Column: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.EndpointDetails: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.TokenRange: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.InvalidRequestException: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.CqlRow: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.Column: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.TokenRange: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.InvalidRequestException: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.TokenRange: void read(org.apache.thrift.protocol.TProtocol)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture andTree(java.util.concurrent.CompletableFuture[],int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture andTree(java.util.concurrent.CompletableFuture[],int,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.management.MappedMXBeanType$ListMXBeanType: java.lang.Object toJavaTypeData(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.management.MappedMXBeanType$ListMXBeanType: java.lang.Object toJavaTypeData(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.management.MappedMXBeanType$ListMXBeanType: java.lang.Object toJavaTypeData(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <sun.management.MappedMXBeanType$ListMXBeanType: java.lang.Object toJavaTypeData(java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer: void serialize(org.apache.cassandra.utils.MerkleTree$Inner,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.db.ColumnFamilyStore: void scrubDataDirectories(org.apache.cassandra.config.CFMetaData)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ReverseOrdering: java.lang.Object max(java.lang.Object,java.lang.Object)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ReverseOrdering: java.lang.Object min(java.util.Iterator)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer: java.lang.Object deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer: java.lang.Object deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-08-25 10:54:56 [DEBUG] - Worst case for method <com.google.common.collect.ReverseOrdering: java.lang.Object max(java.lang.Iterable)>
2020-08-25 10:54:56 [INFO] - [LocalityAnalysis] 36401 methods analyszed in 1.1s
2020-08-25 10:54:56 [INFO] - Find overhead at method <org.apache.cassandra.service.SnapshotVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 4 units and 1 lines
2020-08-25 10:54:56 [INFO] - 	 -> $stack14 = <org.apache.cassandra.service.SnapshotVerbHandler: org.slf4j.Logger logger> AT LINE 43 with ID [7b527e3b-de91]
2020-08-25 10:54:56 [INFO] - 	 -> $stack13 = command.<org.apache.cassandra.db.SnapshotCommand: java.lang.String snapshot_name> AT LINE 43 with ID [7b527e3b-de91]
2020-08-25 10:54:56 [INFO] - 	 -> $stack12 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 43 with ID [7b527e3b-de91]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Enqueuing response to snapshot request {} to {}", $stack13, $stack12) AT LINE 43 with ID [7b527e3b-de91]
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if $stack16 >= 2 goto $stack5 = virtualinvoke this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.dht.Token$TokenFactory getTokenFactory()>() at line 2486 don't merge! Need manual examination!
2020-08-25 10:54:56 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void handleStateMoving(java.net.InetAddress,java.lang.String[])> has 5 units and 2 lines
2020-08-25 10:54:56 [INFO] - 	 -> $stack8 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2480 with ID [5d138891-ef86]
2020-08-25 10:54:56 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2480 with ID [5d138891-ef86]
2020-08-25 10:54:56 [INFO] - 	 -> if $stack9 == 0 goto $stack10 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2480 with ID [5d138891-ef86]
2020-08-25 10:54:56 [INFO] - 	 -> $stack12 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2481 with ID [5d138891-ef86]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} state moving, new token {}", endpoint, token) AT LINE 2481 with ID [5d138891-ef86]
2020-08-25 10:54:56 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamSession$KeepAliveTask: void run()> has 12 units and 2 lines
2020-08-25 10:54:56 [INFO] - 	 -> $stack3 = staticinvoke <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger access$000()>() AT LINE 823 with ID [0aa57abc-6eb6]
2020-08-25 10:54:56 [INFO] - 	 -> $stack4 = this.<org.apache.cassandra.streaming.StreamSession$KeepAliveTask: org.apache.cassandra.streaming.StreamSession this$0> AT LINE 823 with ID [0aa57abc-6eb6]
2020-08-25 10:54:56 [INFO] - 	 -> $stack6 = virtualinvoke $stack4.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 823 with ID [0aa57abc-6eb6]
2020-08-25 10:54:56 [INFO] - 	 -> $stack7 = this.<org.apache.cassandra.streaming.StreamSession$KeepAliveTask: org.apache.cassandra.streaming.StreamSession this$0> AT LINE 823 with ID [0aa57abc-6eb6]
2020-08-25 10:54:56 [INFO] - 	 -> $stack8 = $stack7.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 823 with ID [0aa57abc-6eb6]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("[Stream #{}] Sending keep-alive to {}.", $stack6, $stack8) AT LINE 823 with ID [0aa57abc-6eb6]
2020-08-25 10:54:56 [INFO] - 	 -> $stack15 = staticinvoke <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger access$000()>() AT LINE 836 with ID [57f4bb55-6b49]
2020-08-25 10:54:56 [INFO] - 	 -> $stack16 = this.<org.apache.cassandra.streaming.StreamSession$KeepAliveTask: org.apache.cassandra.streaming.StreamSession this$0> AT LINE 836 with ID [57f4bb55-6b49]
2020-08-25 10:54:56 [INFO] - 	 -> $stack18 = virtualinvoke $stack16.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 836 with ID [57f4bb55-6b49]
2020-08-25 10:54:56 [INFO] - 	 -> $stack19 = this.<org.apache.cassandra.streaming.StreamSession$KeepAliveTask: org.apache.cassandra.streaming.StreamSession this$0> AT LINE 836 with ID [57f4bb55-6b49]
2020-08-25 10:54:56 [INFO] - 	 -> $stack20 = $stack19.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 836 with ID [57f4bb55-6b49]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("[Stream #{}] Skip sending keep-alive to {} (previous was not yet sent).", $stack18, $stack20) AT LINE 836 with ID [57f4bb55-6b49]
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if $stack1 != null goto $stack2 = <org.apache.cassandra.service.GCInspector: java.lang.reflect.Field BITS_TOTAL_CAPACITY> at line 319 don't merge! Need manual examination!
2020-08-25 10:54:56 [WARN] - No overhead is found at method <org.apache.cassandra.service.GCInspector: long getAllocatedDirectMemory()>
2020-08-25 10:54:56 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.util.List get_slice(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:56 [INFO] - 	 -> $stack14 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 293 with ID [75687670-426e]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String)>("get_slice") AT LINE 293 with ID [75687670-426e]
2020-08-25 10:54:56 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.partitions.PartitionIterator getRangeSlice(org.apache.cassandra.db.PartitionRangeReadCommand,org.apache.cassandra.db.ConsistencyLevel,long)> has 14 units and 2 lines
2020-08-25 10:54:56 [INFO] - 	 -> $stack31 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack30 = newarray (java.lang.Object)[4] AT LINE 2285 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack34 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(resultsPerRange) AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack30[0] = $stack34 AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack36 = virtualinvoke command.<org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.filter.DataLimits limits()>() AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack37 = virtualinvoke $stack36.<org.apache.cassandra.db.filter.DataLimits: int count()>() AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack37) AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack30[1] = $stack38 AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack40 = virtualinvoke ranges.<org.apache.cassandra.service.StorageProxy$RangeIterator: int rangeCount()>() AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack40) AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack30[2] = $stack41 AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(concurrencyFactor) AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> $stack30[3] = $stack43 AT LINE 2286 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack31.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Estimated result rows per range: {}; requested rows: {}, ranges.size(): {}; concurrent range requests: {}", $stack30) AT LINE 2285 with ID [2cf21f01-4282]
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if $stack5 == 0 goto $stack8 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> at line 137 don't merge! Need manual examination!
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if epSchemaVersion != null goto $stack4 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> at line 132 don't merge! Need manual examination!
2020-08-25 10:54:56 [INFO] - Find overhead at method <org.apache.cassandra.service.MigrationManager: void lambda$maybeScheduleSchemaPull$0(java.net.InetAddress)> has 18 units and 6 lines
2020-08-25 10:54:56 [INFO] - 	 -> $stack21 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 134 with ID [a17600d9-617d]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack21.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("epState vanished for {}, not submitting migration task", endpoint) AT LINE 134 with ID [a17600d9-617d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack20 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 139 with ID [f3e43b15-bf45]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Not submitting migration task for {} because our versions match ({})", endpoint, epSchemaVersion) AT LINE 139 with ID [f3e43b15-bf45]
2020-08-25 10:54:56 [INFO] - 	 -> $stack8 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 144 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack6 = newarray (java.lang.Object)[4] AT LINE 142 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack6[0] = endpoint AT LINE 142 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack7 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> AT LINE 144 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack11 = virtualinvoke $stack7.<org.apache.cassandra.config.Schema: java.util.UUID getRealVersion()>() AT LINE 144 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack12 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>($stack11) AT LINE 144 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack6[1] = $stack12 AT LINE 144 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack13 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> AT LINE 145 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack15 = virtualinvoke $stack13.<org.apache.cassandra.config.Schema: java.util.UUID getAltVersion()>() AT LINE 145 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack16 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>($stack15) AT LINE 145 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack6[2] = $stack16 AT LINE 145 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack18 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>(epSchemaVersion) AT LINE 146 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> $stack6[3] = $stack18 AT LINE 146 with ID [05959006-cc6d]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("submitting migration task for {}, schema version mismatch: local/real={}, local/compatible={}, remote={}", $stack6) AT LINE 142 with ID [05959006-cc6d]
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if $stack113 >= 0 goto (branch) at line 1549 don't merge! Need manual examination!
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if l29 == null goto interfaceinvoke partition.<org.apache.cassandra.db.rows.UnfilteredRowIterator: void close()>() at line 1579 don't merge! Need manual examination!
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if partition == null goto (branch) at line 1595 don't merge! Need manual examination!
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if $stack76 == 0 goto $stack77 = new java.util.ArrayList at line 1579 don't merge! Need manual examination!
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if $stack47 != 0 goto $stack48 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> at line 1553 don't merge! Need manual examination!
2020-08-25 10:54:56 [WARN] - Both branch of IfStmt if $stack45 == 0 goto $stack46 = virtualinvoke anticompactionGroup.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals()>() at line 1546 don't merge! Need manual examination!
2020-08-25 10:54:56 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager: int antiCompactGroup(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction,long)> has 18 units and 8 lines
2020-08-25 10:54:56 [INFO] - 	 -> repairedKeyCount = 0L AT LINE 1563 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> unrepairedKeyCount = 0L AT LINE 1564 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> repairedKeyCount = repairedKeyCount + 1L AT LINE 1587 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> unrepairedKeyCount = unrepairedKeyCount + 1L AT LINE 1593 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack84 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1610 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack83 = newarray (java.lang.Object)[5] AT LINE 1610 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack87 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(repairedKeyCount) AT LINE 1610 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack83[0] = $stack87 AT LINE 1610 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack88 = repairedKeyCount + unrepairedKeyCount AT LINE 1611 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack90 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack88) AT LINE 1611 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack83[1] = $stack90 AT LINE 1611 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack91 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 1612 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack93 = virtualinvoke $stack91.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 1612 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack83[2] = $stack93 AT LINE 1612 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack95 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getColumnFamilyName()>() AT LINE 1613 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack83[3] = $stack95 AT LINE 1613 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> $stack83[4] = anticompactionGroup AT LINE 1613 with ID [b96a2616-8ce8]
2020-08-25 10:54:56 [INFO] - 	 -> interfaceinvoke $stack84.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Repaired {} keys out of {} for {}/{} in {}", $stack83) AT LINE 1610 with ID [b96a2616-8ce8]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack251 > 0 goto return at line 744 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack249 <= 128 goto $stack250 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 741 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack237 != 0 goto $stack238 = newarray (java.lang.Class)[1] at line 724 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack224 < 2048 goto $stack227 = <org.apache.cassandra.config.DatabaseDescriptor$2: int[] $SwitchMap$org$apache$cassandra$config$Config$DiskOptimizationStrategy> at line 706 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack222 > 0 goto $stack223 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 704 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack285 != 0 goto $stack221 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 704 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack215 >= $stack218 goto $stack219 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 693 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack208 < 2048 goto $stack209 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 687 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack206 > 0 goto $stack207 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 684 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack204 >= 0 goto $stack205 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 681 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack199 >= 0 goto $stack200 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 678 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack196 >= 0 goto $stack197 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 676 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack189 >= 0 goto $stack190 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 662 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack182 >= 0 goto (branch) at line 648 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack175 >= 0 goto (branch) at line 632 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack168 > 0 goto (branch) at line 616 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack161 > 0 goto (branch) at line 600 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack154 <= 1536 goto $stack155 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 590 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack152 > 0 goto $stack153 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 587 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack143 <= 0 goto $stack144 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 579 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack139 >= 0 goto $stack140 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 577 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack456 == 0 goto $stack457 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: java.nio.file.FileStore guessFileStore(java.lang.String)>(datadir) at line 535 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack453 == 0 goto $stack454 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 533 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack450 == 0 goto $stack451 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 531 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if datadir != null goto $stack448 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 529 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack132 >= 1 goto $stack133 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 565 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack128 == 0 goto $stack129 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 557 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack123 == 0 goto $stack124 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 555 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack118 == 0 goto $stack119 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 553 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if ctor >= clazz goto $stack113 = preferredSize#29 cmp 68719476736L at line 527 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack85 < 2048 goto $stack86 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 436 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack83 > 0 goto $stack84 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 434 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack81 > 0 goto $stack82 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 431 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack70 > 0 goto $stack73 = <org.apache.cassandra.config.DatabaseDescriptor: org.slf4j.Logger logger> at line 423 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack65 >= 0 goto $stack66 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 418 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack54 >= 2 goto $stack55 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 403 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack587 == 0 goto $stack53 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 404 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack50 >= 2 goto $stack51 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 393 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack48 <= 0 goto $stack49 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 389 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack35 >= 0 goto $stack36 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 381 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack633 == 0 goto $stack636 = <org.apache.cassandra.config.DatabaseDescriptor: org.slf4j.Logger logger> at line 343 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack631 > 0 goto $stack632 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 341 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 != 0 goto $stack19 = <org.apache.cassandra.config.DatabaseDescriptor: org.slf4j.Logger logger> at line 355 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack13 > 0 goto $stack14 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 351 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 != null goto $stack9 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> at line 332 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.config.DatabaseDescriptor: void applySimpleConfig()> has 10 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack636 = <org.apache.cassandra.config.DatabaseDescriptor: org.slf4j.Logger logger> AT LINE 347 with ID [8244b54b-ea6b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack634 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> AT LINE 347 with ID [8244b54b-ea6b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack635 = $stack634.<org.apache.cassandra.config.Config: double commitlog_sync_batch_window_in_ms> AT LINE 347 with ID [8244b54b-ea6b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack638 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack635) AT LINE 347 with ID [8244b54b-ea6b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack636.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Syncing log with a batch window of {}", $stack638) AT LINE 347 with ID [8244b54b-ea6b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.config.DatabaseDescriptor: org.slf4j.Logger logger> AT LINE 359 with ID [5673e2a0-54f6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config conf> AT LINE 359 with ID [5673e2a0-54f6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = $stack17.<org.apache.cassandra.config.Config: int commitlog_sync_period_in_ms> AT LINE 359 with ID [5673e2a0-54f6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack18) AT LINE 359 with ID [5673e2a0-54f6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Syncing log with a period of {}", $stack21) AT LINE 359 with ID [5673e2a0-54f6]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: void remove_counter(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2236 with ID [1bcf7324-2b0e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String)>("remove_counter") AT LINE 2236 with ID [1bcf7324-2b0e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto (branch) at line 329 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLog: void discardCompletedSegments(java.util.UUID,org.apache.cassandra.db.commitlog.CommitLogPosition,org.apache.cassandra.db.commitlog.CommitLogPosition)> has 23 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.db.commitlog.CommitLog: org.slf4j.Logger logger> AT LINE 304 with ID [57fcc939-8d8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = newarray (java.lang.Object)[3] AT LINE 304 with ID [57fcc939-8d8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6[0] = lowerBound AT LINE 304 with ID [57fcc939-8d8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6[1] = upperBound AT LINE 304 with ID [57fcc939-8d8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6[2] = cfId AT LINE 304 with ID [57fcc939-8d8a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("discard completed log segments for {}-{}, table {}", $stack6) AT LINE 304 with ID [57fcc939-8d8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = <org.apache.cassandra.db.commitlog.CommitLog: org.slf4j.Logger logger> AT LINE 317 with ID [07df092e-5feb]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack31.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Commit log segment {} is unused", segment) AT LINE 317 with ID [07df092e-5feb]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = <org.apache.cassandra.db.commitlog.CommitLog: org.slf4j.Logger logger> AT LINE 322 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = interfaceinvoke $stack14.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 322 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack15 == 0 goto $stack16 = virtualinvoke segment.<org.apache.cassandra.db.commitlog.CommitLogSegment: boolean contains(org.apache.cassandra.db.commitlog.CommitLogPosition)>(upperBound) AT LINE 322 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.db.commitlog.CommitLog: org.slf4j.Logger logger> AT LINE 324 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = newarray (java.lang.Object)[3] AT LINE 323 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>() AT LINE 324 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack22 == 0 goto $stack27 = " active" AT LINE 324 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = "" AT LINE 329 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack18[0] = $stack27] AT LINE 329 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = " active" AT LINE 329 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18[0] = $stack27 AT LINE 324 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18[1] = segment AT LINE 324 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = virtualinvoke segment.<org.apache.cassandra.db.commitlog.CommitLogSegment: java.lang.String dirtyString()>() AT LINE 324 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18[2] = $stack24 AT LINE 324 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Not safe to delete{} commit log segment {}; dirty is {}", $stack18) AT LINE 323 with ID [aa3dc7a2-16b6]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper$GossipTask: void run()> has 13 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = staticinvoke <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger access$100()>() AT LINE 156 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = interfaceinvoke $stack14.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 156 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack15 == 0 goto $stack16 = new java.util.ArrayList AT LINE 156 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger access$100()>() AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = this.<org.apache.cassandra.gms.Gossiper$GossipTask: org.apache.cassandra.gms.Gossiper this$0> AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = $stack41.<org.apache.cassandra.gms.Gossiper: java.util.concurrent.ConcurrentMap endpointStateMap> AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = interfaceinvoke $stack43.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($stack44) AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = (org.apache.cassandra.gms.EndpointState) $stack45 AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = virtualinvoke $stack46.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = virtualinvoke $stack47.<org.apache.cassandra.gms.HeartBeatState: int getHeartBeatVersion()>() AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack48) AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("My heartbeat is now {}", $stack49) AT LINE 157 with ID [5257d2b4-0e9a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack2 != 1 goto $stack3 = <org.apache.cassandra.service.DigestResolver: org.slf4j.Logger logger> at line 66 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.DigestResolver: org.apache.cassandra.db.partitions.PartitionIterator resolve()> has 8 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.service.DigestResolver: org.slf4j.Logger logger> AT LINE 69 with ID [87461cfe-ed0e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = interfaceinvoke $stack3.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 69 with ID [87461cfe-ed0e]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack4 == 0 goto virtualinvoke this.<org.apache.cassandra.service.DigestResolver: void compareResponses()>() AT LINE 69 with ID [87461cfe-ed0e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.service.DigestResolver: org.slf4j.Logger logger> AT LINE 70 with ID [87461cfe-ed0e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = this.<org.apache.cassandra.service.DigestResolver: org.apache.cassandra.utils.concurrent.Accumulator responses> AT LINE 70 with ID [87461cfe-ed0e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = virtualinvoke $stack11.<org.apache.cassandra.utils.concurrent.Accumulator: int size()>() AT LINE 70 with ID [87461cfe-ed0e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack14) AT LINE 70 with ID [87461cfe-ed0e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("resolving {} responses", $stack15) AT LINE 70 with ID [87461cfe-ed0e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack4 != 0 goto $stack6 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> at line 32 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.GossipShutdownVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = <org.apache.cassandra.gms.GossipShutdownVerbHandler: org.slf4j.Logger logger> AT LINE 34 with ID [cae9560f-77b7]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 34 with ID [cae9560f-77b7]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Ignoring shutdown message from {} because gossip is disabled", $stack7) AT LINE 34 with ID [cae9560f-77b7]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.utils.JMXServerUtils: void logJmxSslConfig(javax.rmi.ssl.SslRMIServerSocketFactory)> has 24 units and 7 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = <org.apache.cassandra.utils.JMXServerUtils: org.slf4j.Logger logger> AT LINE 252 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack1 = newarray (java.lang.Object)[3] AT LINE 251 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = virtualinvoke serverFactory.<javax.rmi.ssl.SslRMIServerSocketFactory: java.lang.String[] getEnabledProtocols()>() AT LINE 252 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 != null goto $stack6 = virtualinvoke serverFactory.<javax.rmi.ssl.SslRMIServerSocketFactory: java.lang.String[] getEnabledProtocols()>() AT LINE 252 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = "\'JVM defaults\'" AT LINE 259 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack1[0] = $stack9] AT LINE 259 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = virtualinvoke serverFactory.<javax.rmi.ssl.SslRMIServerSocketFactory: java.lang.String[] getEnabledProtocols()>() AT LINE 254 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($stack6) AT LINE 254 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>("\',\'", "\'", "\'") AT LINE 254 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = interfaceinvoke $stack7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack8) AT LINE 254 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack1[0] = $stack9 AT LINE 254 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = virtualinvoke serverFactory.<javax.rmi.ssl.SslRMIServerSocketFactory: java.lang.String[] getEnabledCipherSuites()>() AT LINE 255 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack11 != null goto $stack12 = virtualinvoke serverFactory.<javax.rmi.ssl.SslRMIServerSocketFactory: java.lang.String[] getEnabledCipherSuites()>() AT LINE 255 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = "\'JVM defaults\'" AT LINE 259 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack1[1] = $stack15] AT LINE 259 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = virtualinvoke serverFactory.<javax.rmi.ssl.SslRMIServerSocketFactory: java.lang.String[] getEnabledCipherSuites()>() AT LINE 257 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($stack12) AT LINE 257 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>("\',\'", "\'", "\'") AT LINE 257 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = interfaceinvoke $stack13.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($stack14) AT LINE 257 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack1[1] = $stack15 AT LINE 257 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = virtualinvoke serverFactory.<javax.rmi.ssl.SslRMIServerSocketFactory: boolean getNeedClientAuth()>() AT LINE 258 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack17) AT LINE 258 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack1[2] = $stack18 AT LINE 258 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("JMX SSL configuration. { protocols: [{}], cipher_suites: [{}], require_client_auth: {} }", $stack1) AT LINE 251 with ID [6d6d6b67-d6ac]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getSSTablesForSTCS(java.util.Collection,int,int,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.slf4j.Logger logger> AT LINE 400 with ID [adbe43a5-6a06]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Got sstables {} for STCS from {}", s, sstables) AT LINE 400 with ID [adbe43a5-6a06]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.CacheService: void saveCaches()> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.service.CacheService: org.slf4j.Logger logger> AT LINE 344 with ID [45412540-f12a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void debug(java.lang.String)>("submitting cache saves") AT LINE 344 with ID [45412540-f12a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.service.CacheService: org.slf4j.Logger logger> AT LINE 351 with ID [55fc4c68-a581]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void debug(java.lang.String)>("cache saves completed") AT LINE 351 with ID [55fc4c68-a581]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.auth.AuthCache$1: java.lang.Object lambda$reload$0(java.lang.Object)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto $stack18 = virtualinvoke out.<org.apache.cassandra.io.util.DataOutputBuffer: byte[] getData()>() at line 1354 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageProxy: void sendMessagesToNonlocalDC(org.apache.cassandra.net.MessageOut,java.util.Collection,org.apache.cassandra.service.AbstractWriteResponseHandler)> has 12 units and 5 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>() AT LINE 1348 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [INFO] - 	 -> target = (java.net.InetAddress) $stack12 AT LINE 1348 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 1365 with ID [6202cd61-7d4a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id) AT LINE 1365 with ID [6202cd61-7d4a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Adding FWD message to {}@{}", $stack32, destination) AT LINE 1365 with ID [6202cd61-7d4a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = virtualinvoke out.<org.apache.cassandra.io.util.DataOutputBuffer: byte[] getData()>() AT LINE 1367 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [INFO] - 	 -> message#5 = virtualinvoke message.<org.apache.cassandra.net.MessageOut: org.apache.cassandra.net.MessageOut withParameter(java.lang.String,byte[])>("FWD_TO", $stack18) AT LINE 1367 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() AT LINE 1369 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [INFO] - 	 -> destination#6 = virtualinvoke $stack20.<org.apache.cassandra.net.MessagingService: int sendRR(org.apache.cassandra.net.MessageOut,java.net.InetAddress,org.apache.cassandra.service.AbstractWriteResponseHandler,boolean)>(message#5, target, handler, 1) AT LINE 1369 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 1370 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(destination#6) AT LINE 1370 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Sending message to {}@{}", $stack24, target) AT LINE 1370 with ID [57e88c6b-3359]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.service.GCInspector: void <clinit>()>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack79 < 0 goto (branch) at line 370 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 != 0 goto start = staticinvoke <java.lang.System: long nanoTime()>() at line 337 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.cache.AutoSavingCache$Writer: void saveCache()> has 8 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = staticinvoke <org.apache.cassandra.cache.AutoSavingCache: org.slf4j.Logger access$000()>() AT LINE 334 with ID [db4d2852-4a1b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = this.<org.apache.cassandra.cache.AutoSavingCache$Writer: org.apache.cassandra.cache.AutoSavingCache this$0> AT LINE 334 with ID [db4d2852-4a1b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = $stack12.<org.apache.cassandra.cache.AutoSavingCache: org.apache.cassandra.service.CacheService$CacheType cacheType> AT LINE 334 with ID [db4d2852-4a1b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Deleting old {} files.", $stack13) AT LINE 334 with ID [db4d2852-4a1b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack89 = staticinvoke <org.apache.cassandra.cache.AutoSavingCache: org.slf4j.Logger access$000()>() AT LINE 339 with ID [a456fa5d-c764]
2020-08-25 10:54:57 [INFO] - 	 -> $stack90 = this.<org.apache.cassandra.cache.AutoSavingCache$Writer: org.apache.cassandra.cache.AutoSavingCache this$0> AT LINE 339 with ID [a456fa5d-c764]
2020-08-25 10:54:57 [INFO] - 	 -> $stack91 = $stack90.<org.apache.cassandra.cache.AutoSavingCache: org.apache.cassandra.service.CacheService$CacheType cacheType> AT LINE 339 with ID [a456fa5d-c764]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack89.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Skipping {} save, cache is empty.", $stack91) AT LINE 339 with ID [a456fa5d-c764]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: void run()> has 21 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack1 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2210 with ID [ae1cb794-384e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = interfaceinvoke $stack1.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 2210 with ID [ae1cb794-384e]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack2 == 0 goto $stack3 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.utils.concurrent.OpOrder$Barrier val$barrier> AT LINE 2210 with ID [ae1cb794-384e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2211 with ID [ae1cb794-384e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier this$0> AT LINE 2211 with ID [ae1cb794-384e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor access$900(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>($stack46) AT LINE 2211 with ID [ae1cb794-384e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack45.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Async instance tidier for {}, before barrier", $stack48) AT LINE 2211 with ID [ae1cb794-384e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2216 with ID [dd9f2017-de62]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 2216 with ID [dd9f2017-de62]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier this$0> AT LINE 2216 with ID [dd9f2017-de62]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2217 with ID [dd9f2017-de62]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier this$0> AT LINE 2217 with ID [dd9f2017-de62]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor access$900(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>($stack40) AT LINE 2217 with ID [dd9f2017-de62]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Async instance tidier for {}, after barrier", $stack42) AT LINE 2217 with ID [dd9f2017-de62]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2231 with ID [4736d41b-a904]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = interfaceinvoke $stack18.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 2231 with ID [4736d41b-a904]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack19 == 0 goto return AT LINE 2231 with ID [4736d41b-a904]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2232 with ID [4736d41b-a904]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier this$0> AT LINE 2232 with ID [4736d41b-a904]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor access$900(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>($stack21) AT LINE 2232 with ID [4736d41b-a904]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Async instance tidier for {}, completed", $stack23) AT LINE 2232 with ID [4736d41b-a904]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack68 != null goto $stack29 = newarray (java.nio.ByteBuffer)[1] at line 2211 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack26 == 0 goto staticinvoke <org.apache.cassandra.thrift.ThriftValidation: void validateKey(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>(metadata, key) at line 2182 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: void add(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.CounterColumn,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2171 with ID [0b3fa734-9207]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String)>("add") AT LINE 2171 with ID [0b3fa734-9207]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if socket != null goto $stack3 = this.<org.apache.cassandra.thrift.ThriftSessionManager: java.util.concurrent.ConcurrentHashMap activeSocketSessions> at line 80 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.ThriftSessionManager: void connectionComplete(java.net.SocketAddress)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.thrift.ThriftSessionManager: org.slf4j.Logger logger> AT LINE 78 with ID [c7ef2aa8-5a2f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = interfaceinvoke $stack5.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 78 with ID [c7ef2aa8-5a2f]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack6 == 0 goto return AT LINE 78 with ID [c7ef2aa8-5a2f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.thrift.ThriftSessionManager: org.slf4j.Logger logger> AT LINE 79 with ID [c7ef2aa8-5a2f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("ClientState removed for socket addr {}", socket) AT LINE 79 with ID [c7ef2aa8-5a2f]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack111 >= 0 goto (branch) at line 105 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack119 <= 0 goto $stack90 = section.<org.apache.cassandra.utils.Pair: java.lang.Object right> at line 105 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack70 == 0 goto $stack73 = <org.apache.cassandra.streaming.compress.CompressedStreamReader: org.slf4j.Logger logger> at line 95 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if cfs != null goto $stack30 = <org.apache.cassandra.streaming.compress.CompressedStreamReader: org.slf4j.Logger logger> at line 76 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.compress.CompressedStreamReader: org.apache.cassandra.io.sstable.SSTableMultiWriter read(java.nio.channels.ReadableByteChannel)> has 52 units and 7 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = <org.apache.cassandra.streaming.compress.CompressedStreamReader: org.slf4j.Logger logger> AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = newarray (java.lang.Object)[7] AT LINE 79 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = this.<org.apache.cassandra.streaming.compress.CompressedStreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = virtualinvoke $stack29.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28[0] = $stack33 AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = this.<org.apache.cassandra.streaming.compress.CompressedStreamReader: int fileSeqNum> AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack34) AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28[1] = $stack36 AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = this.<org.apache.cassandra.streaming.compress.CompressedStreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = $stack37.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28[2] = $stack38 AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = this.<org.apache.cassandra.streaming.compress.CompressedStreamReader: long repairedAt> AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack39) AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28[3] = $stack41 AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalSize) AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28[4] = $stack43 AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = virtualinvoke $stack44.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28[5] = $stack46 AT LINE 80 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getColumnFamilyName()>() AT LINE 81 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28[6] = $stack48 AT LINE 81 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Start receiving file #{} from {}, repairedAt = {}, size = {}, ks = \'{}\', table = \'{}\'.", $stack28) AT LINE 79 with ID [a63d8cff-167b]
2020-08-25 10:54:57 [INFO] - 	 -> sectionIdx = 0 AT LINE 94 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack98 = <org.apache.cassandra.streaming.compress.CompressedStreamReader: org.slf4j.Logger logger> AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96 = newarray (java.lang.Object)[3] AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack97 = this.<org.apache.cassandra.streaming.compress.CompressedStreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack101 = virtualinvoke $stack97.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96[0] = $stack101 AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack102 = sectionIdx AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> sectionIdx = sectionIdx + 1 AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack104 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack102) AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96[1] = $stack104 AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack106 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(sectionLength) AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96[2] = $stack106 AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack98.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("[Stream #{}] Reading section {} with length {} from stream.", $stack96) AT LINE 100 with ID [8f10368a-e760]
2020-08-25 10:54:57 [INFO] - 	 -> $stack73 = <org.apache.cassandra.streaming.compress.CompressedStreamReader: org.slf4j.Logger logger> AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71 = newarray (java.lang.Object)[5] AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72 = this.<org.apache.cassandra.streaming.compress.CompressedStreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack76 = virtualinvoke $stack72.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71[0] = $stack76 AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack77 = this.<org.apache.cassandra.streaming.compress.CompressedStreamReader: int fileSeqNum> AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack79 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack77) AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71[1] = $stack79 AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack80 = this.<org.apache.cassandra.streaming.compress.CompressedStreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack81 = $stack80.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71[2] = $stack81 AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack83 = virtualinvoke cis.<org.apache.cassandra.streaming.compress.CompressedInputStream: long getTotalCompressedBytesRead()>() AT LINE 113 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack84 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack83) AT LINE 113 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71[3] = $stack84 AT LINE 113 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack86 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(totalSize) AT LINE 113 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71[4] = $stack86 AT LINE 113 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack73.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Finished receiving file #{} from {} readBytes = {}, totalSize = {}", $stack71) AT LINE 112 with ID [c52dec46-f2e3]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if isSeed != 0 goto this.<org.apache.cassandra.gms.Gossiper: boolean inShadowRound> = 0 at line 1442 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack27 != 0 goto slept = slept + 1000 at line 1435 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 == 0 goto includePeers = 1 at line 1428 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack37 == 0 goto (branch) at line 1421 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack59 == 0 goto $stack13 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: java.util.Set getSeeds()>() at line 1417 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: java.util.Map doShadowRound(java.util.Set)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1419 with ID [96334e01-0e6e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = this.<org.apache.cassandra.gms.Gossiper: java.util.Set seeds> AT LINE 1419 with ID [96334e01-0e6e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending shadow round GOSSIP DIGEST SYN to seeds {}", $stack33) AT LINE 1419 with ID [96334e01-0e6e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1427 with ID [8c0185e9-1513]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending shadow round GOSSIP DIGEST SYN to known peers {}", peers) AT LINE 1427 with ID [8c0185e9-1513]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= $stack17 goto $stack14 = <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.metrics.CQLMetrics metrics> at line 525 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack10 == $stack11 goto $stack12 = <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger logger> at line 517 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage processPrepared(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)> has 13 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger logger> AT LINE 524 with ID [f75ea352-f3fa, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 524 with ID [f75ea352-f3fa, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack13 == 0 goto $stack14 = <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.metrics.CQLMetrics metrics> AT LINE 524 with ID [f75ea352-f3fa, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> i = 0 AT LINE 525 with ID [f75ea352-f3fa, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = interfaceinvoke variables.<java.util.List: int size()>() AT LINE 525 with ID [f75ea352-f3fa, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> if i >= $stack17 goto $stack14 = <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.metrics.CQLMetrics metrics> AT LINE 525 with ID [f75ea352-f3fa, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger logger> AT LINE 526 with ID [f75ea352-f3fa]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = i + 1 AT LINE 526 with ID [f75ea352-f3fa]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack23) AT LINE 526 with ID [f75ea352-f3fa]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = interfaceinvoke variables.<java.util.List: java.lang.Object get(int)>(i) AT LINE 526 with ID [f75ea352-f3fa]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("[{}] \'{}\'", $stack26, $stack27) AT LINE 526 with ID [f75ea352-f3fa]
2020-08-25 10:54:57 [INFO] - 	 -> i = i + 1 AT LINE 525 with ID [f75ea352-f3fa, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack17 = interfaceinvoke variables.<java.util.List: int size()>()] AT LINE 525 with ID [f75ea352-f3fa, UNKNOWN_ID]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack38 == 0 goto (branch) at line 331 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack32 == 0 goto return splits at line 328 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack26 == 0 goto $stack27 = this.<org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable: org.apache.cassandra.hadoop.cql3.CqlInputFormat this$0> at line 323 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable: java.util.List call()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = staticinvoke <org.apache.cassandra.hadoop.cql3.CqlInputFormat: org.slf4j.Logger access$400()>() AT LINE 342 with ID [2b5775f8-14b5]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack49.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("adding {}", split) AT LINE 342 with ID [2b5775f8-14b5]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.TruncateVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 8 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.db.TruncateVerbHandler: org.slf4j.Logger logger> AT LINE 53 with ID [c724bf89-03b9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = newarray (java.lang.Object)[3] AT LINE 53 with ID [c724bf89-03b9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16[0] = t AT LINE 53 with ID [c724bf89-03b9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id) AT LINE 53 with ID [c724bf89-03b9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16[1] = $stack20 AT LINE 53 with ID [c724bf89-03b9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 53 with ID [c724bf89-03b9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16[2] = $stack21 AT LINE 53 with ID [c724bf89-03b9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{} applied.  Enqueuing response to {}@{} ", $stack16) AT LINE 53 with ID [c724bf89-03b9]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack49 != 0 goto $stack3 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> at line 229 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doCommit(java.lang.Throwable)> has 12 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 211 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = interfaceinvoke $stack3.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 211 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack4 == 0 goto staticinvoke <org.apache.cassandra.utils.Throwables: void maybeFail(java.lang.Throwable)>(accumulate) AT LINE 211 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = newarray (java.lang.Object)[3] AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals> AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26[0] = $stack27 AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26[1] = $stack28 AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State logged> AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26[2] = $stack29 AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Committing transaction over {} staged: {}, logged: {}", $stack26) AT LINE 212 with ID [93fbdc0e-e0e0]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 <= 0 goto $stack10 = newarray (org.apache.cassandra.config.CFMetaData)[0] at line 2042 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_update_keyspace(org.apache.cassandra.thrift.KsDef)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2031 with ID [7b31eaf7-5f6e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void trace(java.lang.String)>("update_keyspace") AT LINE 2031 with ID [7b31eaf7-5f6e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 == 0 goto $stack7 = this.<org.apache.cassandra.streaming.StreamSession: java.util.concurrent.ScheduledFuture keepAliveFuture> at line 466 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamSession: void closeSession(org.apache.cassandra.streaming.StreamSession$State)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger logger> AT LINE 472 with ID [20f9a529-1dca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = virtualinvoke this.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 472 with ID [20f9a529-1dca]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("[Stream #{}] Finishing keep-alive task.", $stack13) AT LINE 472 with ID [20f9a529-1dca]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack4 == 0 goto $stack5 = this.<org.apache.cassandra.gms.Gossiper: java.util.concurrent.ConcurrentMap endpointStateMap> at line 1490 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void addSavedEndpoint(java.net.InetAddress)> has 12 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1492 with ID [490ede1a-b34d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void debug(java.lang.String)>("Attempt to add self as saved endpoint") AT LINE 1492 with ID [490ede1a-b34d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1500 with ID [310dc7a0-53a4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("not replacing a previous epState for {}, but reusing it: {}", ep, epState) AT LINE 1500 with ID [310dc7a0-53a4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1511 with ID [a6dde749-2438]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = interfaceinvoke $stack15.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1511 with ID [a6dde749-2438]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack16 == 0 goto return AT LINE 1511 with ID [a6dde749-2438]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1512 with ID [a6dde749-2438]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = virtualinvoke epState.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 1512 with ID [a6dde749-2438]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = virtualinvoke $stack19.<org.apache.cassandra.gms.HeartBeatState: int getGeneration()>() AT LINE 1512 with ID [a6dde749-2438]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack20) AT LINE 1512 with ID [a6dde749-2438]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Adding saved endpoint {} {}", ep, $stack21) AT LINE 1512 with ID [a6dde749-2438]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack4 != 0 goto $stack5 = this.<org.apache.cassandra.hadoop.cql3.CqlRecordReader: org.apache.cassandra.hadoop.cql3.CqlRecordReader$RowIterator rowIterator> at line 197 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.CqlRecordReader: boolean nextKeyValue()> has 7 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.hadoop.cql3.CqlRecordReader: org.slf4j.Logger logger> AT LINE 199 with ID [88ef9326-2a8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = this.<org.apache.cassandra.hadoop.cql3.CqlRecordReader: org.apache.cassandra.hadoop.cql3.CqlRecordReader$RowIterator rowIterator> AT LINE 199 with ID [88ef9326-2a8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = $stack8.<org.apache.cassandra.hadoop.cql3.CqlRecordReader$RowIterator: int totalRead> AT LINE 199 with ID [88ef9326-2a8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9) AT LINE 199 with ID [88ef9326-2a8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = this.<org.apache.cassandra.hadoop.cql3.CqlRecordReader: int totalRowCount> AT LINE 199 with ID [88ef9326-2a8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13) AT LINE 199 with ID [88ef9326-2a8a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Finished scanning {} rows (estimate was: {})", $stack12, $stack14) AT LINE 199 with ID [88ef9326-2a8a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 == 0 goto $stack25 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>(sstables) at line 1412 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack19 == 0 goto $stack20 = staticinvoke <org.apache.cassandra.dht.AbstractBounds: org.apache.cassandra.dht.AbstractBounds bounds(org.apache.cassandra.dht.RingPosition,boolean,org.apache.cassandra.dht.RingPosition,boolean)>(first, 1, last, 1) at line 1387 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 <= 0 goto (branch) at line 1398 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack37 > 0 goto $stack38 = staticinvoke <org.apache.cassandra.dht.AbstractBounds: org.apache.cassandra.dht.AbstractBounds bounds(org.apache.cassandra.dht.RingPosition,boolean,org.apache.cassandra.dht.RingPosition,boolean)>(first, 1, last, 1) at line 1396 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if first != null goto $stack36 = sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.db.DecoratedKey first> at line 1389 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 != 0 goto $stack13 = this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.lifecycle.Tracker data> at line 1368 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: java.util.Collection getOverlappingLiveSSTables(java.lang.Iterable)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1364 with ID [a04a2916-bd20]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Checking for sstables overlapping {}", sstables) AT LINE 1364 with ID [a04a2916-bd20]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if hint != null goto $stack13 = hint.<org.apache.cassandra.hints.Hint: org.apache.cassandra.db.Mutation mutation> at line 56 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hints.HintVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 11 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.service.StorageService: org.apache.cassandra.service.StorageService instance> AT LINE 50 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> address = virtualinvoke $stack11.<org.apache.cassandra.service.StorageService: java.net.InetAddress getEndpointForHostId(java.util.UUID)>(hostId) AT LINE 50 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = <org.apache.cassandra.hints.HintVerbHandler: org.slf4j.Logger logger> AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = newarray (java.lang.Object)[3] AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[0] = address AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[1] = hostId AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = message.<org.apache.cassandra.net.MessageIn: java.lang.Object payload> AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = (org.apache.cassandra.hints.HintMessage) $stack32 AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = $stack33.<org.apache.cassandra.hints.HintMessage: java.util.UUID unknownTableID> AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[2] = $stack34 AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack35.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Failed to decode and apply a hint for {}: {} - table with id {} is unknown", $stack31) AT LINE 58 with ID [8dbab86c-0793]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 <= version goto (branch) at line 901 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack21 == 0 goto (branch) at line 898 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.EndpointState getStateForVersionBiggerThan(java.net.InetAddress,int)> has 17 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 893 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = interfaceinvoke $stack42.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 893 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack43 == 0 goto $stack18 = new java.util.EnumMap AT LINE 893 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 894 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = newarray (java.lang.Object)[3] AT LINE 894 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localHbVersion) AT LINE 894 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46[0] = $stack50 AT LINE 894 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(version) AT LINE 894 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46[1] = $stack52 AT LINE 894 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46[2] = forEndpoint AT LINE 894 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack47.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("local heartbeat version {} greater than {} for {}", $stack46) AT LINE 894 with ID [3c5b8827-f4bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 908 with ID [100867e1-2ed6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = interfaceinvoke $stack28.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 908 with ID [100867e1-2ed6]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack29 == 0 goto interfaceinvoke states.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value) AT LINE 908 with ID [100867e1-2ed6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 909 with ID [100867e1-2ed6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = value.<org.apache.cassandra.gms.VersionedValue: java.lang.String value> AT LINE 909 with ID [100867e1-2ed6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Adding state {}: {}", key, $stack31) AT LINE 909 with ID [100867e1-2ed6]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.service.ReadCallback$AsyncRepairRunner: void run()>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack6 != 0 goto $stack7 = new org.apache.cassandra.auth.AuthenticatedUser at line 104 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.auth.PasswordAuthenticator: org.apache.cassandra.auth.AuthenticatedUser authenticate(java.lang.String,java.lang.String)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 != 0 goto $stack43 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> at line 387 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l0Compaction == null goto candidates = specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getCandidatesFor(int)>(mostInteresting#2) at line 382 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 == 0 goto $stack18 = new org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate at line 406 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 == 0 goto mostInteresting#5 = specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getCandidatesFor(int)>(0) at line 403 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if mostInteresting#2 <= 0 goto $stack14 = virtualinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List getLevel(int)>(0) at line 367 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack63 != 0 goto return null at line 333 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations> at line 330 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate getCompactionCandidates()> has 14 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 376 with ID [10d2858d-5d9c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(mostInteresting#2) AT LINE 376 with ID [10d2858d-5d9c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(score) AT LINE 376 with ID [10d2858d-5d9c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Compaction score for level {} is {}", $stack36, $stack37) AT LINE 376 with ID [10d2858d-5d9c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 391 with ID [f1b1e42f-92ca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = interfaceinvoke $stack48.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 391 with ID [f1b1e42f-92ca]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack49 == 0 goto $stack50 = new org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate AT LINE 391 with ID [f1b1e42f-92ca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 392 with ID [f1b1e42f-92ca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(mostInteresting#2) AT LINE 392 with ID [f1b1e42f-92ca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack57 = specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.lang.String toString(java.util.Collection)>(candidates) AT LINE 392 with ID [f1b1e42f-92ca]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack54.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Compaction candidates for L{} are {}", $stack56, $stack57) AT LINE 392 with ID [f1b1e42f-92ca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 397 with ID [8dcd6200-cd14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(mostInteresting#2) AT LINE 397 with ID [8dcd6200-cd14]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack43.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("No compaction candidates for L{}", $stack45) AT LINE 397 with ID [8dcd6200-cd14]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.view.View: void build()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.db.view.View: org.slf4j.Logger logger> AT LINE 209 with ID [42c3ab22-b736]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void debug(java.lang.String)>("Stopping current view builder due to schema change") AT LINE 209 with ID [42c3ab22-b736]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= nameCount goto return at line 296 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= nameCount goto $stack17 = new java.lang.StringBuilder at line 288 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.utils.EstimatedHistogram: void log(org.slf4j.Logger)> has 28 units and 10 lines
2020-08-25 10:54:57 [INFO] - 	 -> names = newarray (java.lang.String)[nameCount] AT LINE 285 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> maxNameLength = 0 AT LINE 287 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> i = 0 AT LINE 288 with ID [a1146e55-52a5, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> if i >= nameCount goto $stack17 = new java.lang.StringBuilder AT LINE 288 with ID [a1146e55-52a5, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = this.<org.apache.cassandra.utils.EstimatedHistogram: long[] bucketOffsets> AT LINE 290 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.cassandra.utils.EstimatedHistogram: java.lang.String nameOfRange(long[],int)>($stack39, i) AT LINE 290 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> names[i] = $stack40 AT LINE 290 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = names[i] AT LINE 291 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = virtualinvoke $stack41.<java.lang.String: int length()>() AT LINE 291 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> maxNameLength = staticinvoke <java.lang.Math: int max(int,int)>(maxNameLength, $stack42) AT LINE 291 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> i = i + 1 AT LINE 288 with ID [a1146e55-52a5, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= (branch)] AT LINE 288 with ID [a1146e55-52a5, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%") AT LINE 295 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(maxNameLength) AT LINE 295 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s: %d") AT LINE 295 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> i#8 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>() AT LINE 295 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = this.<org.apache.cassandra.utils.EstimatedHistogram: java.util.concurrent.atomic.AtomicLongArray buckets> AT LINE 298 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> count = virtualinvoke $stack22.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>(i) AT LINE 298 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = count cmp 0L AT LINE 296 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack31 != 0 goto $stack24 = newarray (java.lang.Object)[2] AT LINE 296 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= i = i + 1] AT LINE 303 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = newarray (java.lang.Object)[2] AT LINE 304 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = names[i] AT LINE 304 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24[0] = $stack25 AT LINE 304 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(count) AT LINE 304 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24[1] = $stack27 AT LINE 304 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(i#8, $stack24) AT LINE 304 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke log.<org.slf4j.Logger: void debug(java.lang.String)>($stack28) AT LINE 304 with ID [a1146e55-52a5]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.AbstractWriteResponseHandler: void onFailure(java.net.InetAddress,org.apache.cassandra.exceptions.RequestFailureReason)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.service.AbstractWriteResponseHandler: org.slf4j.Logger logger> AT LINE 170 with ID [770da816-ed7b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Got failure from {}", from) AT LINE 170 with ID [770da816-ed7b]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.SSTable: boolean delete(org.apache.cassandra.io.sstable.Descriptor,java.util.Set)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.io.sstable.SSTable: org.slf4j.Logger logger> AT LINE 105 with ID [d669388c-ed62]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Deleting sstable: {}", desc) AT LINE 105 with ID [d669388c-ed62]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 == 0 goto (branch) at line 319 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if dcLive >= endpoint#6 goto (branch) at line 323 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack59 != 0 goto return at line 295 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if builder#7 >= blockFor goto return at line 331 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack55 == 0 goto (branch) at line 307 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 == 0 goto $stack43 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] are insufficient to satisfy LOCAL_QUORUM requirement of ") at line 305 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if localLive >= blockFor goto return at line 300 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ConsistencyLevel: void assureSufficientLiveNodes(org.apache.cassandra.db.Keyspace,java.lang.Iterable)> has 24 units and 9 lines
2020-08-25 10:54:57 [INFO] - 	 -> builder = $stack40 AT LINE 304 with ID [b61f84fc-456a]
2020-08-25 10:54:57 [INFO] - 	 -> entry = interfaceinvoke liveEndpoints.<java.lang.Iterable: java.util.Iterator iterator()>() AT LINE 305 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>() AT LINE 305 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> if $stack42 == 0 goto $stack43 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] are insufficient to satisfy LOCAL_QUORUM requirement of ") AT LINE 305 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack54 = interfaceinvoke entry.<java.util.Iterator: java.lang.Object next()>() AT LINE 313 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> endpoint = (java.net.InetAddress) $stack54 AT LINE 313 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = virtualinvoke this.<org.apache.cassandra.db.ConsistencyLevel: boolean isLocal(java.net.InetAddress)>(endpoint) AT LINE 307 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> if $stack55 == 0 goto (branch) AT LINE 307 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack57 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(endpoint) AT LINE 308 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") AT LINE 308 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack42 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>()] AT LINE 309 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] are insufficient to satisfy LOCAL_QUORUM requirement of ") AT LINE 310 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(blockFor) AT LINE 310 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" live nodes in \'") AT LINE 310 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getLocalDataCenter()>() AT LINE 310 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack46) AT LINE 310 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") AT LINE 310 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = <org.apache.cassandra.db.ConsistencyLevel: org.slf4j.Logger logger> AT LINE 311 with ID [b61f84fc-456a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.String toString()>() AT LINE 311 with ID [b61f84fc-456a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack49.<org.slf4j.Logger: void trace(java.lang.String)>($stack50) AT LINE 311 with ID [b61f84fc-456a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.ConsistencyLevel: org.slf4j.Logger logger> AT LINE 333 with ID [9dbbc010-feeb]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = staticinvoke <com.google.common.collect.Iterables: java.lang.String toString(java.lang.Iterable)>(liveEndpoints) AT LINE 333 with ID [9dbbc010-feeb]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(blockFor) AT LINE 333 with ID [9dbbc010-feeb]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Live nodes {} do not satisfy ConsistencyLevel ({} required)", $stack18, $stack19) AT LINE 333 with ID [9dbbc010-feeb]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack52 != calledOnNullInput goto $stack35 = staticinvoke <org.apache.cassandra.cql3.functions.UDFunction: org.apache.cassandra.cql3.functions.UDFunction create(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String,java.lang.String)>(name, argNames, argTypes#3, arg#6, calledOnNullInput, type, body) at line 1288 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 == 0 goto $stack26 = virtualinvoke row.<org.apache.cassandra.cql3.UntypedResultSet$Row: java.lang.String getString(java.lang.String)>("return_type") at line 1266 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 == 0 goto $stack21 = new java.util.ArrayList at line 1262 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.cql3.functions.UDFunction createUDFFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row,org.apache.cassandra.schema.Types)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = <org.apache.cassandra.schema.SchemaKeyspace: org.slf4j.Logger logger> AT LINE 1290 with ID [2dc65805-80ce]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack53.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Skipping duplicate compilation of already existing UDF {}", name) AT LINE 1290 with ID [2dc65805-80ce]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack4 == 0 goto $stack5 = <org.apache.cassandra.service.CassandraDaemon: org.slf4j.Logger logger> at line 390 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.CassandraDaemon: void lambda$setup$0()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.service.CassandraDaemon: org.slf4j.Logger logger> AT LINE 394 with ID [4b5e2d07-6b3a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void debug(java.lang.String)>("Completed submission of build tasks for any materialized views defined at startup") AT LINE 394 with ID [4b5e2d07-6b3a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 >= 0 goto $stack7 = this.<org.apache.cassandra.gms.ArrivalWindow: long tLast> at line 459 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.ArrivalWindow: void add(long,java.net.InetAddress)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.gms.ArrivalWindow: org.slf4j.Logger logger> AT LINE 453 with ID [6c7dd497-c1bf]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(interArrivalTime) AT LINE 453 with ID [6c7dd497-c1bf]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Reporting interval time of {} for {}", $stack22, ep) AT LINE 453 with ID [6c7dd497-c1bf]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = <org.apache.cassandra.gms.ArrivalWindow: org.slf4j.Logger logger> AT LINE 457 with ID [2b48079e-9566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(interArrivalTime) AT LINE 457 with ID [2b48079e-9566]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Ignoring interval time of {} for {}", $stack16, ep) AT LINE 457 with ID [2b48079e-9566]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack13 == 0 goto $stack14 = <org.apache.cassandra.auth.CassandraRoleManager: org.slf4j.Logger logger> at line 437 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack31 == 0 goto $stack32 = <org.apache.cassandra.auth.CassandraRoleManager: org.slf4j.Logger logger> at line 422 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.auth.CassandraRoleManager: void convertLegacyData()>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack9 == 0 goto specialinvoke this.<org.apache.cassandra.transport.Server$EventNotifier: void send(org.apache.cassandra.transport.Event)>(event) at line 521 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.transport.Server$EventNotifier: void send(java.net.InetAddress,org.apache.cassandra.transport.Event$NodeEvent)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 512 with ID [95d28104-a2ec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = interfaceinvoke $stack3.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 512 with ID [95d28104-a2ec]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack4 == 0 goto $stack5 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 512 with ID [95d28104-a2ec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 513 with ID [95d28104-a2ec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = virtualinvoke event.<org.apache.cassandra.transport.Event$NodeEvent: java.net.InetAddress nodeAddress()>() AT LINE 513 with ID [95d28104-a2ec]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Sending event for endpoint {}, rpc address {}", endpoint, $stack14) AT LINE 513 with ID [95d28104-a2ec]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_add_column_family(org.apache.cassandra.thrift.CfDef)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1918 with ID [0d5c4ca9-d5d7]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String)>("add_column_family") AT LINE 1918 with ID [0d5c4ca9-d5d7]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack22 == 0 goto $stack5 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals> at line 468 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack35 != 0 goto $stack4 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: boolean $assertionsDisabled> at line 468 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void cancel(org.apache.cassandra.io.sstable.format.SSTableReader)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 461 with ID [5eadffa6-4f68]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Cancelling {} from transaction", cancel) AT LINE 461 with ID [5eadffa6-4f68]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.util.Map describe_schema_versions()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack1 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2152 with ID [d986e013-e70d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack1.<org.slf4j.Logger: void trace(java.lang.String)>("checking schema agreement") AT LINE 2152 with ID [d986e013-e70d]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack5 == 0 goto return at line 1878 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: void clearEphemeralSnapshots(org.apache.cassandra.db.Directories)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1880 with ID [b3148400-9eb5]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Clearing ephemeral snapshot {} leftover from previous session.", ephemeralSnapshot) AT LINE 1880 with ID [b3148400-9eb5]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 65 with ID [5664bf76-d3c3]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String)>("Disabling tombstone compactions for TWCS") AT LINE 65 with ID [5664bf76-d3c3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 68 with ID [725a940f-b25b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void debug(java.lang.String)>("Enabling tombstone compactions for TWCS") AT LINE 68 with ID [725a940f-b25b]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto $stack17 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> at line 1035 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void markDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> has 11 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1029 with ID [8afd83ab-c598]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = interfaceinvoke $stack5.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1029 with ID [8afd83ab-c598]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack6 == 0 goto virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: void markDead()>() AT LINE 1029 with ID [8afd83ab-c598]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1030 with ID [8afd83ab-c598]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack23.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("marking as down {}", addr) AT LINE 1030 with ID [8afd83ab-c598]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1037 with ID [c9642b1f-761c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = interfaceinvoke $stack17.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1037 with ID [c9642b1f-761c]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack18 == 0 goto return AT LINE 1037 with ID [c9642b1f-761c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1038 with ID [c9642b1f-761c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = this.<org.apache.cassandra.gms.Gossiper: java.util.List subscribers> AT LINE 1038 with ID [c9642b1f-761c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Notified {}", $stack19) AT LINE 1038 with ID [c9642b1f-761c]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.apache.cassandra.auth.Permission getRequiredPermission(java.lang.String)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> AT LINE 432 with ID [797a4039-1230]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Access denied, method name {} does not map to any defined permission", methodName) AT LINE 432 with ID [797a4039-1230]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack5 != 0 goto $stack6 = column.<org.apache.cassandra.thrift.Column: java.nio.ByteBuffer name> at line 461 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack4 != 0 goto $stack5 = virtualinvoke column.<org.apache.cassandra.thrift.Column: boolean isSetTimestamp()>() at line 459 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.thrift.ThriftValidation: void validateColumnData(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.thrift.Column)>
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onDown(com.datastax.driver.core.Host)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = this.<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: java.util.concurrent.CopyOnWriteArraySet liveReplicaHosts> AT LINE 158 with ID [6809434f-12b5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = virtualinvoke $stack2.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>(host) AT LINE 158 with ID [6809434f-12b5]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack3 == 0 goto return AT LINE 158 with ID [6809434f-12b5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: org.slf4j.Logger logger> AT LINE 160 with ID [6809434f-12b5]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("The host {} is now down", host) AT LINE 160 with ID [6809434f-12b5]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 != 0 goto return 0 at line 167 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.monitoring.MonitoringTask: boolean logSlowOperations(long)> has 17 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = this.<org.apache.cassandra.db.monitoring.MonitoringTask: long lastLogTime> AT LINE 169 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> elapsed = now - $stack9 AT LINE 169 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.db.monitoring.MonitoringTask: org.slf4j.Logger logger> AT LINE 172 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = interfaceinvoke $stack13.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 172 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack14 == 0 goto return 1 AT LINE 172 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.monitoring.MonitoringTask: org.slf4j.Logger logger> AT LINE 174 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = newarray (java.lang.Object)[4] AT LINE 173 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = virtualinvoke slowOperations.<org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: long num()>() AT LINE 174 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack19) AT LINE 174 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15[0] = $stack20 AT LINE 174 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(elapsed) AT LINE 175 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15[1] = $stack22 AT LINE 175 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = <org.apache.cassandra.db.monitoring.MonitoringTask: java.lang.String LINE_SEPARATOR> AT LINE 175 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15[2] = $stack23 AT LINE 175 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = virtualinvoke slowOperations.<org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: java.lang.String getLogMessage()>() AT LINE 177 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15[3] = $stack25 AT LINE 177 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("{} operations were slow in the last {} msecs:{}{}", $stack15) AT LINE 173 with ID [0854f7ff-04a1]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack34 != 0 goto (branch) at line 742 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack33 == 0 goto $stack34 = virtualinvoke expression.<org.apache.cassandra.db.filter.RowFilter$Expression: boolean isUserDefined()>() at line 733 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack13 = interfaceinvoke searchableIndexes.<java.util.Set: int size()>() at line 750 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = interfaceinvoke searchableIndexes.<java.util.Set: boolean isEmpty()>() at line 731 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 == 0 goto $stack9 = new java.util.HashSet at line 728 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.index.Index getBestIndexFor(org.apache.cassandra.db.filter.RowFilter)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = <org.apache.cassandra.index.SecondaryIndexManager: org.slf4j.Logger logger> AT LINE 738 with ID [f0131cf5-ad44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = virtualinvoke customExpression.<org.apache.cassandra.db.filter.RowFilter$CustomExpression: org.apache.cassandra.schema.IndexMetadata getTargetIndex()>() AT LINE 738 with ID [f0131cf5-ad44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = $stack45.<org.apache.cassandra.schema.IndexMetadata: java.lang.String name> AT LINE 738 with ID [f0131cf5-ad44]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack43.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Command contains a custom index expression, using target index {}", $stack46) AT LINE 738 with ID [f0131cf5-ad44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = <org.apache.cassandra.index.SecondaryIndexManager: org.slf4j.Logger logger> AT LINE 752 with ID [734ef112-98a2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack31.<org.slf4j.Logger: void trace(java.lang.String)>("No applicable indexes found") AT LINE 752 with ID [734ef112-98a2]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l3 >= l2 goto return at line 383 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if files != null goto l1 = files at line 376 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.util.FileUtils: void delete(java.io.File[])> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = <org.apache.cassandra.io.util.FileUtils: org.slf4j.Logger logger> AT LINE 379 with ID [2bf55c62-0077]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void debug(java.lang.String)>("Received null list of files to delete") AT LINE 379 with ID [2bf55c62-0077]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager$7: void execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = staticinvoke <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger access$000()>() AT LINE 500 with ID [e60c1ac5-2c59]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = virtualinvoke txn.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals()>() AT LINE 500 with ID [e60c1ac5-2c59]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Garbage collecting {}", $stack5) AT LINE 500 with ID [e60c1ac5-2c59]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.thrift.CustomTThreadPoolServer: void serve()>
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.FailureDetector: void report(java.net.InetAddress)> has 8 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 272 with ID [99fb1ddf-69d2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = interfaceinvoke $stack9.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 272 with ID [99fb1ddf-69d2]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack10 == 0 goto return AT LINE 272 with ID [99fb1ddf-69d2]
2020-08-25 10:54:57 [INFO] - 	 -> if heartbeatWindow == null goto return AT LINE 274 with ID [99fb1ddf-69d2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 273 with ID [99fb1ddf-69d2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = virtualinvoke heartbeatWindow.<org.apache.cassandra.gms.ArrivalWindow: double mean()>() AT LINE 273 with ID [99fb1ddf-69d2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack13) AT LINE 273 with ID [99fb1ddf-69d2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Average for {} is {}", ep, $stack14) AT LINE 273 with ID [99fb1ddf-69d2]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 != 0 goto $stack21 = virtualinvoke result.<org.apache.cassandra.cql3.UntypedResultSet: org.apache.cassandra.cql3.UntypedResultSet$Row one()>() at line 145 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto $stack17 = rows.<org.apache.cassandra.transport.messages.ResultMessage$Rows: org.apache.cassandra.cql3.ResultSet result> at line 141 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.auth.PasswordAuthenticator: java.lang.String queryHashedPassword(java.lang.String)>
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.transport.Server$EventNotifier: void onTopologyChange(java.net.InetAddress,org.apache.cassandra.transport.Event$TopologyChange)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 565 with ID [b8b4a4b6-1cf8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = interfaceinvoke $stack5.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 565 with ID [b8b4a4b6-1cf8]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack6 == 0 goto $stack7 = this.<org.apache.cassandra.transport.Server$EventNotifier: java.util.Map latestEvents> AT LINE 565 with ID [b8b4a4b6-1cf8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 566 with ID [b8b4a4b6-1cf8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = event.<org.apache.cassandra.transport.Event$TopologyChange: org.apache.cassandra.transport.Event$TopologyChange$Change change> AT LINE 566 with ID [b8b4a4b6-1cf8]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Topology changed event : {}, {}", endpoint, $stack23) AT LINE 566 with ID [b8b4a4b6-1cf8]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 == 0 goto $stack9 = this.<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: java.util.concurrent.CopyOnWriteArraySet liveReplicaHosts> at line 81 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 == 0 goto (branch) at line 83 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void init(com.datastax.driver.core.Cluster,java.util.Collection)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: org.slf4j.Logger logger> AT LINE 89 with ID [dd8f56f7-41f5]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Initialized with replica hosts: {}", replicaHosts) AT LINE 89 with ID [dd8f56f7-41f5]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack67 <= 0 goto (branch) at line 829 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack66 != 0 goto (branch) at line 819 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if epState == null goto (branch) at line 804 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack43 <= 0 goto (branch) at line 835 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack35 == 0 goto return at line 833 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack70 != 0 goto (branch) at line 820 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack101 >= 0 goto $stack26 = this.<org.apache.cassandra.gms.Gossiper: java.util.concurrent.ConcurrentMap endpointStateMap> at line 789 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void doStatusCheck()> has 19 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 776 with ID [ae8d11c5-c529]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = interfaceinvoke $stack13.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 776 with ID [ae8d11c5-c529]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack14 == 0 goto now = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 776 with ID [ae8d11c5-c529]
2020-08-25 10:54:57 [INFO] - 	 -> $stack105 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 777 with ID [ae8d11c5-c529]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack105.<org.slf4j.Logger: void trace(java.lang.String)>("Performing status check ...") AT LINE 777 with ID [ae8d11c5-c529]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 822 with ID [ca4cde3f-0aee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72 = interfaceinvoke $stack71.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 822 with ID [ca4cde3f-0aee]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack72 == 0 goto specialinvoke this.<org.apache.cassandra.gms.Gossiper: void evictFromMembership(java.net.InetAddress)>(endpoint) AT LINE 822 with ID [ca4cde3f-0aee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack73 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 824 with ID [ca4cde3f-0aee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack75 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(expireTime) AT LINE 824 with ID [ca4cde3f-0aee]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack73.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("time is expiring for endpoint : {} ({})", endpoint, $stack75) AT LINE 824 with ID [ca4cde3f-0aee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 837 with ID [69af3b19-2d2b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = interfaceinvoke $stack45.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 837 with ID [69af3b19-2d2b]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack46 == 0 goto $stack47 = this.<org.apache.cassandra.gms.Gossiper: java.util.Map justRemovedEndpoints> AT LINE 837 with ID [69af3b19-2d2b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 838 with ID [69af3b19-2d2b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = <org.apache.cassandra.gms.Gossiper: int QUARANTINE_DELAY> AT LINE 838 with ID [69af3b19-2d2b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack50) AT LINE 838 with ID [69af3b19-2d2b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54 = interfaceinvoke endpoint#37.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 838 with ID [69af3b19-2d2b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack51.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("{} elapsed, {} gossip quarantine over", $stack53, $stack54) AT LINE 838 with ID [69af3b19-2d2b]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l14 == null goto interfaceinvoke rowIterator.<org.apache.cassandra.db.rows.UnfilteredRowIterator: void close()>() at line 192 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if rowIterator == null goto (branch) at line 204 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l12 == null goto interfaceinvoke scanner.<org.apache.cassandra.io.sstable.ISSTableScanner: void close()>() at line 207 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if scanner == null goto (branch) at line 206 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack59 == 0 goto (branch) at line 192 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack44 == 0 goto (branch) at line 187 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if kscf != null goto $stack27 = kscf.<org.apache.cassandra.utils.Pair: java.lang.Object left> at line 160 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable: void run()> has 53 units and 14 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack68 = staticinvoke <org.apache.cassandra.streaming.StreamReceiveTask: org.slf4j.Logger access$200()>() AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69 = newarray (java.lang.Object)[4] AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70 = this.<org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable: org.apache.cassandra.streaming.StreamReceiveTask task> AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71 = $stack70.<org.apache.cassandra.streaming.StreamReceiveTask: org.apache.cassandra.streaming.StreamSession session> AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack74 = virtualinvoke $stack71.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69[0] = $stack74 AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack76 = interfaceinvoke readers.<java.util.Collection: int size()>() AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack76) AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69[1] = $stack77 AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack78 = this.<org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable: org.apache.cassandra.streaming.StreamReceiveTask task> AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack79 = $stack78.<org.apache.cassandra.streaming.StreamReceiveTask: org.apache.cassandra.streaming.StreamSession session> AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack80 = $stack79.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69[2] = $stack80 AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69[3] = readers AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack68.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Received {} sstables from {} ({})", $stack69) AT LINE 213 with ID [8dd33f77-4a8f]
2020-08-25 10:54:57 [INFO] - 	 -> reader#29 = staticinvoke <org.apache.cassandra.dht.Bounds: java.util.Set getNonOverlappingBounds(java.lang.Iterable)>(boundsToInvalidate#28) AT LINE 223 with ID [80e6ada6-3851, b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack87 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: boolean isRowCacheEnabled()>() AT LINE 225 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack87 == 0 goto $stack88 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 225 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> ks#30 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: int invalidateRowCache(java.util.Collection)>(reader#29) AT LINE 227 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> if ks#30 <= 0 goto $stack88 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 228 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack108 = staticinvoke <org.apache.cassandra.streaming.StreamReceiveTask: org.slf4j.Logger access$200()>() AT LINE 229 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack109 = newarray (java.lang.Object)[4] AT LINE 229 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack110 = this.<org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable: org.apache.cassandra.streaming.StreamReceiveTask task> AT LINE 229 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack111 = $stack110.<org.apache.cassandra.streaming.StreamReceiveTask: org.apache.cassandra.streaming.StreamSession session> AT LINE 230 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack114 = virtualinvoke $stack111.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 230 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack109[0] = $stack114 AT LINE 230 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack116 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ks#30) AT LINE 230 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack109[1] = $stack116 AT LINE 230 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack117 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 231 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119 = virtualinvoke $stack117.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 231 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack109[2] = $stack119 AT LINE 231 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack121 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getTableName()>() AT LINE 231 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack109[3] = $stack121 AT LINE 231 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack108.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Invalidated {} row cache entries on table {}.{} after stream receive task completed.", $stack109) AT LINE 229 with ID [b5c271f0-ff78]
2020-08-25 10:54:57 [INFO] - 	 -> $stack88 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 234 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack89 = virtualinvoke $stack88.<org.apache.cassandra.config.CFMetaData: boolean isCounter()>() AT LINE 234 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack89 == 0 goto (branch) AT LINE 234 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> ks#30 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: int invalidateCounterCache(java.util.Collection)>(reader#29) AT LINE 236 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> if ks#30 <= 0 goto (branch) AT LINE 237 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack92 = staticinvoke <org.apache.cassandra.streaming.StreamReceiveTask: org.slf4j.Logger access$200()>() AT LINE 238 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack93 = newarray (java.lang.Object)[4] AT LINE 238 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94 = this.<org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable: org.apache.cassandra.streaming.StreamReceiveTask task> AT LINE 238 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack95 = $stack94.<org.apache.cassandra.streaming.StreamReceiveTask: org.apache.cassandra.streaming.StreamSession session> AT LINE 239 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack98 = virtualinvoke $stack95.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 239 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack93[0] = $stack98 AT LINE 239 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack100 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ks#30) AT LINE 239 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack93[1] = $stack100 AT LINE 239 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack101 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 240 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack103 = virtualinvoke $stack101.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 240 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack93[2] = $stack103 AT LINE 240 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack105 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getTableName()>() AT LINE 240 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> $stack93[3] = $stack105 AT LINE 240 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack92.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Invalidated {} counter cache entries on table {}.{} after stream receive task completed.", $stack93) AT LINE 238 with ID [80e6ada6-3851]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack23 > 0 goto $stack11 = interfaceinvoke toDownsample.<java.util.List: int size()>() at line 295 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.apache.cassandra.utils.Pair distributeRemainingSpace(java.util.List,long)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 298 with ID [9391e002-7ba1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = entry.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry: org.apache.cassandra.io.sstable.format.SSTableReader sstable> AT LINE 298 with ID [9391e002-7ba1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = entry.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry: org.apache.cassandra.io.sstable.format.SSTableReader sstable> AT LINE 298 with ID [9391e002-7ba1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = virtualinvoke $stack24.<org.apache.cassandra.io.sstable.format.SSTableReader: int getIndexSummarySamplingLevel()>() AT LINE 298 with ID [9391e002-7ba1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28) AT LINE 298 with ID [9391e002-7ba1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack25.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Using leftover space to keep {} at the current sampling level ({})", $stack27, $stack29) AT LINE 297 with ID [9391e002-7ba1]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack6 != 0 goto $stack7 = this.<org.apache.cassandra.db.compaction.CompactionManager$15: org.apache.cassandra.db.compaction.CompactionManager this$0> at line 1655 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager$15: void run()> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = staticinvoke <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger access$000()>() AT LINE 1657 with ID [e9a45019-91ba]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = this.<org.apache.cassandra.db.compaction.CompactionManager$15: org.apache.cassandra.cache.AutoSavingCache$Writer val$writer> AT LINE 1657 with ID [e9a45019-91ba]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = virtualinvoke $stack19.<org.apache.cassandra.cache.AutoSavingCache$Writer: org.apache.cassandra.db.compaction.CompactionInfo getCompactionInfo()>() AT LINE 1657 with ID [e9a45019-91ba]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Cache flushing was already in progress: skipping {}", $stack21) AT LINE 1657 with ID [e9a45019-91ba]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack19 <= 0 goto (branch) at line 1402 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto (branch) at line 1397 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.utils.CassandraVersion NULL_VERSION> at line 1395 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 != 0 goto $stack25 = virtualinvoke result.<org.apache.cassandra.cql3.UntypedResultSet: org.apache.cassandra.cql3.UntypedResultSet$Row one()>() at line 1400 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.SystemKeyspace: java.lang.String getPreviousVersionString()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.db.SystemKeyspace: org.slf4j.Logger logger> AT LINE 1399 with ID [f9f6264f-baef]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String)>("Found unreadable versions info in pre 1.2 system.Versions table") AT LINE 1399 with ID [f9f6264f-baef]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack83 == 0 goto $stack84 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(numPartitions) at line 1451 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack22 == 0 goto $stack23 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> at line 1457 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 == 0 goto l7 = interfaceinvoke ranges.<java.util.Collection: java.util.Iterator iterator()>() at line 1448 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.utils.MerkleTrees createMerkleTrees(java.lang.Iterable,java.util.Collection,org.apache.cassandra.db.ColumnFamilyStore)> has 19 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1468 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = interfaceinvoke $stack23.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 1468 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack24 == 0 goto return tree AT LINE 1468 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = newarray (java.lang.Object)[4] AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = virtualinvoke tree.<org.apache.cassandra.utils.MerkleTrees: java.util.Collection ranges()>() AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = interfaceinvoke $stack29.<java.util.Collection: int size()>() AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack30) AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25[0] = $stack31 AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = virtualinvoke tree.<org.apache.cassandra.utils.MerkleTrees: long size()>() AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack33) AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25[1] = $stack34 AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(allPartitions) AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25[2] = $stack36 AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = <org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer serializer> AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = virtualinvoke $stack37.<org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer: long serializedSize(org.apache.cassandra.utils.MerkleTrees,int)>(tree, 0) AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack39) AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25[3] = $stack40 AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Created {} merkle trees with merkle trees size {}, {} partitions, {} bytes", $stack25) AT LINE 1471 with ID [73ed645f-a635]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if sstable#5 == null goto previousCandidate = candidate.<org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate: java.util.Collection sstables> at line 151 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack10 == 0 goto $stack11 = this.<org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 142 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if sstable != null goto $stack26 = new org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate at line 125 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getNextBackgroundTask(int)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.slf4j.Logger logger> AT LINE 127 with ID [c06601e8-675c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("No compaction necessary for {}", this) AT LINE 127 with ID [c06601e8-675c]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.MigrationManager: void passiveAnnounce(java.util.UUID,boolean)> has 7 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 616 with ID [681b5d74-fbd6]
2020-08-25 10:54:57 [INFO] - 	 -> if compatible == 0 goto $stack9 = "3.11" AT LINE 614 with ID [681b5d74-fbd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = "3.0 compatible" AT LINE 616 with ID [681b5d74-fbd6]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack10 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>(version)] AT LINE 617 with ID [681b5d74-fbd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = "3.11" AT LINE 616 with ID [681b5d74-fbd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>(version) AT LINE 616 with ID [681b5d74-fbd6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Gossiping my {} schema version {}", $stack9, $stack10) AT LINE 614 with ID [681b5d74-fbd6]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack6 == 0 goto $stack7 = this.<org.apache.cassandra.gms.Gossiper: java.util.Set seeds> at line 418 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void removeEndpoint(java.net.InetAddress)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 433 with ID [422718e4-17ec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = interfaceinvoke $stack15.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 433 with ID [422718e4-17ec]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack16 == 0 goto return AT LINE 433 with ID [422718e4-17ec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 434 with ID [422718e4-17ec]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("removing endpoint {}", endpoint) AT LINE 434 with ID [422718e4-17ec]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l16 >= l15 goto l11 = l11 + 1 at line 269 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l11 >= i goto return at line 253 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l11 >= i goto (branch) at line 236 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if newSSTableRelativePath#13 >= $stack46 goto newSSTableRelativePath#14 = this.<org.apache.cassandra.db.Directories: java.io.File[] dataPaths> at line 232 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= $stack67 goto (branch) at line 226 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= $stack29 goto $stack30 = this.<org.apache.cassandra.db.Directories: java.io.File[] dataPaths> at line 210 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.Directories: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.Directories$DataDirectory[])> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = <org.apache.cassandra.db.Directories: org.slf4j.Logger logger> AT LINE 272 with ID [be94d0a0-8f17]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack41.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Moving index file {} to {}", indexFile, destFile) AT LINE 272 with ID [be94d0a0-8f17]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack2 > 0 goto $stack3 = <org.apache.cassandra.tracing.TraceStateImpl: org.slf4j.Logger logger> at line 77 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.tracing.TraceStateImpl: void waitForPendingEvents()> has 10 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.tracing.TraceStateImpl: org.slf4j.Logger logger> AT LINE 82 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = interfaceinvoke $stack3.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 82 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack4 == 0 goto $stack6 = this.<org.apache.cassandra.tracing.TraceStateImpl: java.util.Set pendingFutures> AT LINE 82 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.tracing.TraceStateImpl: org.slf4j.Logger logger> AT LINE 84 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.tracing.TraceStateImpl: int WAIT_FOR_PENDING_EVENTS_TIMEOUT_SECS> AT LINE 84 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack16) AT LINE 84 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = this.<org.apache.cassandra.tracing.TraceStateImpl: java.util.Set pendingFutures> AT LINE 84 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = interfaceinvoke $stack20.<java.util.Set: int size()>() AT LINE 84 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack21) AT LINE 84 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Waiting for up to {} seconds for {} trace events to complete", $stack19, $stack22) AT LINE 83 with ID [f638fbd6-04ac]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack47 == 0 goto $stack29 = this.<org.apache.cassandra.hadoop.cql3.CqlRecordReader: java.lang.String cqlQuery> at line 154 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 != null goto $stack21 = this.<org.apache.cassandra.hadoop.cql3.CqlRecordReader: com.datastax.driver.core.Cluster cluster> at line 140 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == null goto locations = virtualinvoke split.<org.apache.hadoop.mapreduce.InputSplit: java.lang.String[] getLocations()>() at line 125 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.CqlRecordReader: void initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.hadoop.cql3.CqlRecordReader: org.slf4j.Logger logger> AT LINE 161 with ID [9508be39-8209]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = this.<org.apache.cassandra.hadoop.cql3.CqlRecordReader: java.lang.String cqlQuery> AT LINE 161 with ID [9508be39-8209]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("cqlQuery {}", $stack31) AT LINE 161 with ID [9508be39-8209]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = <org.apache.cassandra.hadoop.cql3.CqlRecordReader: org.slf4j.Logger logger> AT LINE 164 with ID [20f2f9dc-a283]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = this.<org.apache.cassandra.hadoop.cql3.CqlRecordReader: org.apache.cassandra.hadoop.cql3.CqlRecordReader$RowIterator rowIterator> AT LINE 164 with ID [20f2f9dc-a283]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack35.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("created {}", $stack34) AT LINE 164 with ID [20f2f9dc-a283]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if transaction != null goto $stack10 = interfaceinvoke sstables.<java.util.Collection: int size()>() at line 185 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 181 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.slf4j.Logger logger> AT LINE 187 with ID [6105a714-50de]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Unable to mark {} for compaction; probably a background compaction got to it first.  You can disable background compactions temporarily if this is a problem", sstables) AT LINE 187 with ID [6105a714-50de]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.index.Index unregisterIndex(java.lang.String)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.index.SecondaryIndexManager: org.slf4j.Logger logger> AT LINE 814 with ID [73fc506f-46fd]
2020-08-25 10:54:57 [INFO] - 	 -> if removed != null goto $stack8 = "Removed index {} from registry" AT LINE 814 with ID [73fc506f-46fd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = "Index {} was not registered" AT LINE 816 with ID [73fc506f-46fd]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>($stack8, name)] AT LINE 816 with ID [73fc506f-46fd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = "Removed index {} from registry" AT LINE 816 with ID [73fc506f-46fd]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>($stack8, name) AT LINE 814 with ID [73fc506f-46fd]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 <= 0 goto $stack15 = this.<org.apache.cassandra.net.OutboundTcpConnection: java.util.concurrent.atomic.AtomicBoolean backlogExpirationActive> at line 602 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack10 > $stack11 goto $stack12 = this.<org.apache.cassandra.net.OutboundTcpConnection: long backlogNextExpirationTime> at line 599 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.OutboundTcpConnection: void expireMessages(long)> has 11 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 625 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = interfaceinvoke $stack20.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 625 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack21 == 0 goto $stack22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> AT LINE 625 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 627 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 627 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = $stack29 - timestampNanos AT LINE 627 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> qm#9 = virtualinvoke $stack28.<java.util.concurrent.TimeUnit: long toMicros(long)>($stack30) AT LINE 627 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 628 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = virtualinvoke this.<org.apache.cassandra.net.OutboundTcpConnection: java.lang.String getName()>() AT LINE 628 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(qm#9) AT LINE 628 with ID [db700e7b-340c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Expiration of {} took {}\u03bcs", $stack34, $stack35) AT LINE 628 with ID [db700e7b-340c]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 == 0 goto (branch) at line 392 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack9 == 0 goto $stack10 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> at line 388 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 == 0 goto l3 = interfaceinvoke permittedResources.<java.util.Set: java.util.Iterator iterator()>() at line 385 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean checkExact(javax.management.ObjectName,java.util.Set)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> AT LINE 401 with ID [b6e1f56d-4d66]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Subject does not have sufficient permissions on target MBean {}", target) AT LINE 401 with ID [b6e1f56d-4d66]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: java.util.Map deserialize(org.apache.cassandra.io.sstable.Descriptor,java.util.EnumSet)> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: org.slf4j.Logger logger> AT LINE 81 with ID [ebc8f069-e5e9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Load metadata for {}", descriptor) AT LINE 81 with ID [ebc8f069-e5e9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: org.slf4j.Logger logger> AT LINE 85 with ID [e08dd416-f29c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("No sstable stats for {}", descriptor) AT LINE 85 with ID [e08dd416-f29c]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onDropColumnFamily(java.lang.String,java.lang.String)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = staticinvoke <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger access$500()>() AT LINE 762 with ID [b1fb8c15-c351]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Table {}.{} was dropped, invalidating related prepared statements", ksName, cfName) AT LINE 762 with ID [b1fb8c15-c351]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack83 == 0 goto (branch) at line 410 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack79 == 0 goto (branch) at line 407 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack74 == 0 goto (branch) at line 405 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack48 == 0 goto $stack49 = <org.apache.cassandra.concurrent.ScheduledExecutors: org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor optionalTasks> at line 403 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack134 == 0 goto (branch) at line 271 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack123 == 0 goto (branch) at line 294 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack118 == 0 goto (branch) at line 292 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 == 0 goto $stack26 = specialinvoke this.<org.apache.cassandra.service.CassandraDaemon: com.google.common.util.concurrent.ListenableFuture loadRowAndKeyCacheAsync()>() at line 287 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.CassandraDaemon: void setup()> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack113 = <org.apache.cassandra.service.CassandraDaemon: org.slf4j.Logger logger> AT LINE 289 with ID [a97a6ee5-6199]
2020-08-25 10:54:57 [INFO] - 	 -> $stack114 = interfaceinvoke $stack113.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 289 with ID [a97a6ee5-6199]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack114 == 0 goto $stack115 = staticinvoke <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>(keyspaceName) AT LINE 289 with ID [a97a6ee5-6199]
2020-08-25 10:54:57 [INFO] - 	 -> $stack127 = <org.apache.cassandra.service.CassandraDaemon: org.slf4j.Logger logger> AT LINE 290 with ID [a97a6ee5-6199]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack127.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("opening keyspace {}", keyspaceName) AT LINE 290 with ID [a97a6ee5-6199]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack86 >= 0 goto $stack87 = this.<org.apache.cassandra.streaming.StreamWriter: java.io.OutputStream compressedOutput> at line 106 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack57 == 0 goto $stack60 = <org.apache.cassandra.streaming.StreamWriter: org.slf4j.Logger logger> at line 93 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamWriter: void write(org.apache.cassandra.io.util.DataOutputStreamPlus)> has 35 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = <org.apache.cassandra.streaming.StreamWriter: org.slf4j.Logger logger> AT LINE 78 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = newarray (java.lang.Object)[5] AT LINE 78 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = this.<org.apache.cassandra.streaming.StreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 78 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = virtualinvoke $stack27.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 78 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26[0] = $stack31 AT LINE 78 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = this.<org.apache.cassandra.streaming.StreamWriter: org.apache.cassandra.io.sstable.format.SSTableReader sstable> AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = virtualinvoke $stack32.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26[1] = $stack34 AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = this.<org.apache.cassandra.streaming.StreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = $stack35.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26[2] = $stack36 AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = this.<org.apache.cassandra.streaming.StreamWriter: org.apache.cassandra.io.sstable.format.SSTableReader sstable> AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = virtualinvoke $stack37.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.metadata.StatsMetadata getSSTableMetadata()>() AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = $stack39.<org.apache.cassandra.io.sstable.metadata.StatsMetadata: long repairedAt> AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack40) AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26[3] = $stack41 AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalSize) AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26[4] = $stack43 AT LINE 79 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack28.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Start streaming file {} to {}, repairedAt = {}, totalSize = {}", $stack26) AT LINE 78 with ID [35cddc7c-42ee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60 = <org.apache.cassandra.streaming.StreamWriter: org.slf4j.Logger logger> AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58 = newarray (java.lang.Object)[5] AT LINE 118 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack59 = this.<org.apache.cassandra.streaming.StreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack63 = virtualinvoke $stack59.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[0] = $stack63 AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = this.<org.apache.cassandra.streaming.StreamWriter: org.apache.cassandra.io.sstable.format.SSTableReader sstable> AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = virtualinvoke $stack64.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[1] = $stack66 AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack67 = this.<org.apache.cassandra.streaming.StreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68 = $stack67.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[2] = $stack68 AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(progress) AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[3] = $stack70 AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(totalSize) AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[4] = $stack72 AT LINE 119 with ID [24b48571-105f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack60.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Finished streaming file {} to {}, bytesTransferred = {}, totalSize = {}", $stack58) AT LINE 118 with ID [24b48571-105f]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack30 < 0 goto $stack32 = <org.apache.cassandra.db.compaction.CompactionController: org.slf4j.Logger logger> at line 221 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack26 == 0 goto $stack27 = new java.util.HashSet at line 218 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack63 >= gcBefore goto (branch) at line 180 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack60 == 0 goto return fullyExpired at line 178 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack54 < gcBefore goto (branch) at line 197 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack47 >= gcBefore goto $stack48 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: long getMinTimestamp()>() at line 203 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 == 0 goto iterator = interfaceinvoke fullyExpired#3.<java.util.List: java.util.Iterator iterator()>() at line 209 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack19 == 0 goto $stack20 = virtualinvoke cfStore.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.lifecycle.Tracker getTracker()>() at line 201 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 == 0 goto iterator = interfaceinvoke compacting.<java.lang.Iterable: java.util.Iterator iterator()>() at line 193 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if ignoreOverlaps == 0 goto $stack15 = new java.util.ArrayList at line 175 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack76 != 0 goto (branch) at line 186 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if compacting != null goto $stack13 = virtualinvoke cfStore.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.compaction.CompactionStrategyManager getCompactionStrategyManager()>() at line 170 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionController: java.util.Set getFullyExpiredSSTables(org.apache.cassandra.db.ColumnFamilyStore,java.lang.Iterable,java.lang.Iterable,int,boolean)> has 22 units and 5 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.db.compaction.CompactionController: org.slf4j.Logger logger> AT LINE 167 with ID [ec7e6ebe-70df]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Checking droppable sstables in {}", cfStore) AT LINE 167 with ID [ec7e6ebe-70df]
2020-08-25 10:54:57 [INFO] - 	 -> $stack67 = <org.apache.cassandra.db.compaction.CompactionController: org.slf4j.Logger logger> AT LINE 184 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = newarray (java.lang.Object)[3] AT LINE 183 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66[0] = candidate AT LINE 183 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70 = virtualinvoke candidate.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.metadata.StatsMetadata getSSTableMetadata()>() AT LINE 184 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71 = $stack70.<org.apache.cassandra.io.sstable.metadata.StatsMetadata: int maxLocalDeletionTime> AT LINE 184 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack71) AT LINE 184 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66[1] = $stack72 AT LINE 184 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(gcBefore) AT LINE 184 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66[2] = $stack74 AT LINE 184 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack67.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Dropping overlap ignored expired SSTable {} (maxLocalDeletionTime={}, gcBefore={})", $stack66) AT LINE 183 with ID [508904a9-9732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.db.compaction.CompactionController: org.slf4j.Logger logger> AT LINE 228 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = newarray (java.lang.Object)[3] AT LINE 227 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[0] = sstable AT LINE 227 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.metadata.StatsMetadata getSSTableMetadata()>() AT LINE 228 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = $stack35.<org.apache.cassandra.io.sstable.metadata.StatsMetadata: int maxLocalDeletionTime> AT LINE 228 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack36) AT LINE 228 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[1] = $stack37 AT LINE 228 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(gcBefore) AT LINE 228 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[2] = $stack39 AT LINE 228 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Dropping expired SSTable {} (maxLocalDeletionTime={}, gcBefore={})", $stack31) AT LINE 227 with ID [9ab3da73-7aec]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.ConnectionHandler: void initiate()> has 8 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.streaming.ConnectionHandler: org.slf4j.Logger logger> AT LINE 85 with ID [72716fc8-4133]
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = this.<org.apache.cassandra.streaming.ConnectionHandler: org.apache.cassandra.streaming.StreamSession session> AT LINE 85 with ID [72716fc8-4133]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = virtualinvoke $stack3.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 85 with ID [72716fc8-4133]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("[Stream #{}] Sending stream init for incoming stream", $stack6) AT LINE 85 with ID [72716fc8-4133]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.streaming.ConnectionHandler: org.slf4j.Logger logger> AT LINE 89 with ID [a8f1b0fc-9c0e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = this.<org.apache.cassandra.streaming.ConnectionHandler: org.apache.cassandra.streaming.StreamSession session> AT LINE 89 with ID [a8f1b0fc-9c0e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = virtualinvoke $stack10.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 89 with ID [a8f1b0fc-9c0e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("[Stream #{}] Sending stream init for outgoing stream", $stack13) AT LINE 89 with ID [a8f1b0fc-9c0e]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.config.YamlConfigurationLoader: org.apache.cassandra.config.Config loadConfig(java.net.URL)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = <org.apache.cassandra.config.YamlConfigurationLoader: org.slf4j.Logger logger> AT LINE 108 with ID [2cc25c74-4073]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Loading settings from {}", url) AT LINE 108 with ID [2cc25c74-4073]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: boolean realAppend(org.apache.cassandra.db.rows.UnfilteredRowIterator)> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = <org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: org.slf4j.Logger logger> AT LINE 96 with ID [b2e866e9-e87b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = this.<org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: long currentBytesToWrite> AT LINE 96 with ID [b2e866e9-e87b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack26) AT LINE 96 with ID [b2e866e9-e87b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack27.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Switching writer, currentBytesToWrite = {}", $stack29) AT LINE 96 with ID [b2e866e9-e87b]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if keyIterator != null goto interfaceinvoke tokens.<java.util.List: boolean add(java.lang.Object)>(keyIterator) at line 131 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.index.sasi.TermIterator: void lambda$build$0(org.apache.cassandra.index.sasi.plan.Expression,org.apache.cassandra.index.sasi.SSTableIndex,java.util.Set,java.util.List,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.CountDownLatch)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 == 0 goto $stack25 = <org.apache.cassandra.auth.CassandraAuthorizer: org.slf4j.Logger logger> at line 423 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.auth.CassandraAuthorizer: void convertLegacyData()>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 != 0 goto tStart = staticinvoke <java.lang.System: long nanoTime()>() at line 288 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.cql3.functions.UDFunction: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.auth.jmx.AuthenticationProxy: javax.security.auth.Subject authenticate(java.lang.Object)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 != 0 goto $stack4 = <org.apache.cassandra.io.util.FileUtils: org.slf4j.Logger logger> at line 194 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.util.FileUtils: void renameWithConfirm(java.io.File,java.io.File)> has 7 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.io.util.FileUtils: org.slf4j.Logger logger> AT LINE 183 with ID [bff4d96d-7ef2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 183 with ID [bff4d96d-7ef2]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = virtualinvoke from.<java.io.File: java.nio.file.Path toPath()>() AT LINE 183 with ID [bff4d96d-7ef2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = <org.apache.cassandra.io.util.FileUtils: org.slf4j.Logger logger> AT LINE 184 with ID [bff4d96d-7ef2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = virtualinvoke from.<java.io.File: java.lang.String getPath()>() AT LINE 184 with ID [bff4d96d-7ef2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = virtualinvoke to.<java.io.File: java.lang.String getPath()>() AT LINE 184 with ID [bff4d96d-7ef2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Renaming {} to {}", $stack10, $stack11) AT LINE 184 with ID [bff4d96d-7ef2]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack33 == 0 goto l4 = interfaceinvoke gDigestList.<java.util.List: java.util.Iterator iterator()>() at line 1275 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void examineGossiper(java.util.List,java.util.List,java.util.Map)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1274 with ID [ad6a26df-c286]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void debug(java.lang.String)>("Shadow request received, adding all states") AT LINE 1274 with ID [ad6a26df-c286]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack29 == 0 goto $stack31 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> at line 909 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: void logFlush()> has 62 units and 21 lines
2020-08-25 10:54:57 [INFO] - 	 -> onHeapRatio = 0.0F AT LINE 901 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> offHeapRatio = 0.0F AT LINE 901 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> onHeapTotal = 0L AT LINE 902 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> offHeapTotal = 0L AT LINE 902 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = virtualinvoke this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.lifecycle.Tracker getTracker()>() AT LINE 903 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = virtualinvoke $stack11.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.lifecycle.View getView()>() AT LINE 903 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> memtable = virtualinvoke $stack12.<org.apache.cassandra.db.lifecycle.View: org.apache.cassandra.db.Memtable getCurrentMemtable()>() AT LINE 903 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = virtualinvoke memtable.<org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtableAllocator getAllocator()>() AT LINE 904 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = virtualinvoke $stack14.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator onHeap()>() AT LINE 904 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = virtualinvoke $stack15.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: float ownershipRatio()>() AT LINE 904 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> onHeapRatio = onHeapRatio + $stack16 AT LINE 904 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = virtualinvoke memtable.<org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtableAllocator getAllocator()>() AT LINE 905 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = virtualinvoke $stack17.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator offHeap()>() AT LINE 905 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = virtualinvoke $stack18.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: float ownershipRatio()>() AT LINE 905 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> offHeapRatio = offHeapRatio + $stack19 AT LINE 905 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = virtualinvoke memtable.<org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtableAllocator getAllocator()>() AT LINE 906 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = virtualinvoke $stack20.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator onHeap()>() AT LINE 906 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = virtualinvoke $stack21.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: long owns()>() AT LINE 906 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> onHeapTotal = onHeapTotal + $stack22 AT LINE 906 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = virtualinvoke memtable.<org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtableAllocator getAllocator()>() AT LINE 907 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = virtualinvoke $stack23.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator offHeap()>() AT LINE 907 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = virtualinvoke $stack24.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: long owns()>() AT LINE 907 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> offHeapTotal = offHeapTotal + $stack25 AT LINE 907 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.index.SecondaryIndexManager indexManager> AT LINE 909 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = virtualinvoke $stack26.<org.apache.cassandra.index.SecondaryIndexManager: java.util.Set getAllIndexColumnFamilyStores()>() AT LINE 909 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> l8 = interfaceinvoke $stack27.<java.util.Set: java.util.Iterator iterator()>() AT LINE 909 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>() AT LINE 909 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack29 == 0 goto $stack31 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 909 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>() AT LINE 925 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> indexCfs = (org.apache.cassandra.db.ColumnFamilyStore) $stack46 AT LINE 925 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = virtualinvoke indexCfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.lifecycle.Tracker getTracker()>() AT LINE 911 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = virtualinvoke $stack47.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.lifecycle.View getView()>() AT LINE 911 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = virtualinvoke $stack48.<org.apache.cassandra.db.lifecycle.View: org.apache.cassandra.db.Memtable getCurrentMemtable()>() AT LINE 911 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> allocator = virtualinvoke $stack49.<org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtableAllocator getAllocator()>() AT LINE 911 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51 = virtualinvoke allocator.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator onHeap()>() AT LINE 912 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = virtualinvoke $stack51.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: float ownershipRatio()>() AT LINE 912 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> onHeapRatio = onHeapRatio + $stack52 AT LINE 912 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = virtualinvoke allocator.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator offHeap()>() AT LINE 913 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54 = virtualinvoke $stack53.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: float ownershipRatio()>() AT LINE 913 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> offHeapRatio = offHeapRatio + $stack54 AT LINE 913 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = virtualinvoke allocator.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator onHeap()>() AT LINE 914 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack56 = virtualinvoke $stack55.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: long owns()>() AT LINE 914 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> onHeapTotal = onHeapTotal + $stack56 AT LINE 914 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack57 = virtualinvoke allocator.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator offHeap()>() AT LINE 915 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58 = virtualinvoke $stack57.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: long owns()>() AT LINE 915 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> offHeapTotal = offHeapTotal + $stack58 AT LINE 915 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack29 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>()] AT LINE 916 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 921 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = this.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 921 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = newarray (java.lang.Object)[4] AT LINE 918 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(onHeapTotal) AT LINE 921 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30[0] = $stack36 AT LINE 921 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = onHeapRatio * 100.0F AT LINE 922 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($stack37) AT LINE 922 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30[1] = $stack39 AT LINE 922 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(offHeapTotal) AT LINE 923 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30[2] = $stack41 AT LINE 923 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = offHeapRatio * 100.0F AT LINE 924 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($stack42) AT LINE 924 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30[3] = $stack44 AT LINE 924 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s (%.0f%%) on-heap, %s (%.0f%%) off-heap", $stack30) AT LINE 920 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack31.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Enqueuing flush of {}: {}", $stack33, $stack45) AT LINE 918 with ID [56d10794-65f0]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.EncryptedSegment: void <init>(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.commitlog.EncryptedSegment: org.slf4j.Logger logger> AT LINE 80 with ID [bc67916c-9c35]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = this.<org.apache.cassandra.db.commitlog.EncryptedSegment: java.io.File logFile> AT LINE 80 with ID [bc67916c-9c35]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("created a new encrypted commit log segment: {}", $stack8) AT LINE 80 with ID [bc67916c-9c35]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto $stack18 = this.<org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.PartitionPosition[] lastCompactedKeys> at line 220 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack13 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> at line 214 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = interfaceinvoke added.<java.util.Collection: boolean isEmpty()>() at line 207 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack37 == 0 goto specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: void logDistribution()>() at line 207 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledManifest: void replace(java.util.Collection,java.util.Collection)> has 12 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 200 with ID [1462dcf1-60b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 200 with ID [1462dcf1-60b0]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack9 == 0 goto minLevel = 2147483647 AT LINE 200 with ID [1462dcf1-60b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 201 with ID [1462dcf1-60b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.lang.String toString(java.util.Collection)>(removed) AT LINE 201 with ID [1462dcf1-60b0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Replacing [{}]", $stack34) AT LINE 201 with ID [1462dcf1-60b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 217 with ID [58cad3d6-c01c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = interfaceinvoke $stack13.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 217 with ID [58cad3d6-c01c]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack14 == 0 goto l4 = interfaceinvoke added.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 217 with ID [58cad3d6-c01c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 218 with ID [58cad3d6-c01c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.lang.String toString(java.util.Collection)>(added) AT LINE 218 with ID [58cad3d6-c01c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Adding [{}]", $stack26) AT LINE 218 with ID [58cad3d6-c01c]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.view.View: org.apache.cassandra.db.ReadQuery getReadQuery()> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.view.View: org.slf4j.Logger logger> AT LINE 199 with ID [025b3c7b-3b59]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = this.<org.apache.cassandra.db.view.View: org.apache.cassandra.cql3.statements.SelectStatement$RawStatement rawSelect> AT LINE 199 with ID [025b3c7b-3b59]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("View query: {}", $stack8) AT LINE 199 with ID [025b3c7b-3b59]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = this.<org.apache.cassandra.dht.RangeStreamer: org.apache.cassandra.streaming.StreamPlan streamPlan> at line 373 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.dht.RangeStreamer: org.apache.cassandra.streaming.StreamResultFuture fetchAsync()> has 11 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 387 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = interfaceinvoke $stack29.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 387 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack30 == 0 goto $stack31 = this.<org.apache.cassandra.dht.RangeStreamer: org.apache.cassandra.streaming.StreamPlan streamPlan> AT LINE 387 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 388 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = newarray (java.lang.Object)[3] AT LINE 388 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = this.<org.apache.cassandra.dht.RangeStreamer: java.lang.String description> AT LINE 388 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34[0] = $stack35 AT LINE 388 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34[1] = source AT LINE 388 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(ranges, ", ") AT LINE 388 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34[2] = $stack39 AT LINE 388 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack36.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{}ing from {} ranges {}", $stack34) AT LINE 388 with ID [691ef5f9-88fe]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 == 0 goto $stack15 = staticinvoke <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger access$100()>() at line 2749 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if hostId == null goto $stack32 = staticinvoke <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger access$100()>() at line 2752 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageProxy$11: void runMayThrow()> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = staticinvoke <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger access$100()>() AT LINE 2758 with ID [e8f2beb9-58f3]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Discarding hint for endpoint not part of ring: {}", target) AT LINE 2758 with ID [e8f2beb9-58f3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = staticinvoke <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger access$100()>() AT LINE 2760 with ID [a1d9ebca-62ab]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Adding hints for {}", validTargets) AT LINE 2760 with ID [a1d9ebca-62ab]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionStrategyManager: void reload(org.apache.cassandra.schema.CompactionParams)> has 23 units and 5 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.DiskBoundaries currentBoundaries> AT LINE 375 with ID [9acbd6e9-1e44, 286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack6 == null goto $stack7 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.DiskBoundaries currentBoundaries> AT LINE 375 with ID [9acbd6e9-1e44, 286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.schema.CompactionParams schemaCompactionParams> AT LINE 377 with ID [9acbd6e9-1e44, 286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = virtualinvoke newCompactionParams.<org.apache.cassandra.schema.CompactionParams: boolean equals(java.lang.Object)>($stack28) AT LINE 377 with ID [9acbd6e9-1e44, 286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack29 != 0 goto $stack30 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.DiskBoundaries currentBoundaries> AT LINE 377 with ID [9acbd6e9-1e44, 286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = <org.apache.cassandra.db.compaction.CompactionStrategyManager: org.slf4j.Logger logger> AT LINE 378 with ID [286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 378 with ID [286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = $stack40.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 378 with ID [286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = virtualinvoke $stack41.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 378 with ID [286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 378 with ID [286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = virtualinvoke $stack45.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getTableName()>() AT LINE 378 with ID [286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack42.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Recreating compaction strategy - compaction parameters changed for {}.{}", $stack44, $stack46) AT LINE 378 with ID [286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack7 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.DiskBoundaries currentBoundaries>] AT LINE 378 with ID [9acbd6e9-1e44, 286e0fbd-3471]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.DiskBoundaries currentBoundaries> AT LINE 379 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = virtualinvoke $stack30.<org.apache.cassandra.db.DiskBoundaries: boolean isOutOfDate()>() AT LINE 379 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack31 == 0 goto $stack7 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.DiskBoundaries currentBoundaries> AT LINE 379 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = <org.apache.cassandra.db.compaction.CompactionStrategyManager: org.slf4j.Logger logger> AT LINE 380 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 380 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = $stack33.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 380 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = virtualinvoke $stack34.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 380 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = this.<org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 380 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = virtualinvoke $stack38.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getTableName()>() AT LINE 380 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack35.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Recreating compaction strategy - disk boundaries are out of date for {}.{}.", $stack37, $stack39) AT LINE 380 with ID [9acbd6e9-1e44]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack79 == 0 goto (branch) at line 672 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack74 == 0 goto (branch) at line 669 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 != 0 goto (branch) at line 692 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack40 == 0 goto return at line 691 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if components#22 >= directory#21 goto $stack38 = virtualinvoke metadata.<org.apache.cassandra.config.CFMetaData: org.apache.cassandra.schema.Indexes getIndexes()>() at line 684 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack57 != 0 goto desc#20 = virtualinvoke sstableFiles#19.<java.io.File: java.io.File[] listFiles()>() at line 684 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 != 0 goto $stack19 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> at line 641 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: void scrubDataDirectories(org.apache.cassandra.config.CFMetaData)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 640 with ID [0075bd3f-77e6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = metadata.<org.apache.cassandra.config.CFMetaData: java.lang.String cfName> AT LINE 640 with ID [0075bd3f-77e6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Removing temporary or obsoleted files from unfinished operations for table {}", $stack15) AT LINE 640 with ID [0075bd3f-77e6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 648 with ID [63d76c1b-ac1b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = metadata.<org.apache.cassandra.config.CFMetaData: java.lang.String cfName> AT LINE 648 with ID [63d76c1b-ac1b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Further extra check for orphan sstable files for {}", $stack18) AT LINE 648 with ID [63d76c1b-ac1b]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack18 == null goto $stack10 = this.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier tidy> at line 1713 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack28 == 0 goto $stack9 = <org.apache.cassandra.io.sstable.format.SSTableReader: boolean $assertionsDisabled> at line 1712 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.SSTableReader: void markObsolete(java.lang.Runnable)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 1702 with ID [f28de54a-7a80]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1702 with ID [f28de54a-7a80]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier tidy> AT LINE 1702 with ID [f28de54a-7a80]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 1703 with ID [f28de54a-7a80]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = virtualinvoke this.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 1703 with ID [f28de54a-7a80]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Marking {} compacted", $stack32) AT LINE 1703 with ID [f28de54a-7a80]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 == 0 goto $stack18 = specialinvoke this.<org.apache.cassandra.gms.Gossiper: boolean isShutdown(java.net.InetAddress)>(ep) at line 1074 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 == 0 goto $stack13 = virtualinvoke this.<org.apache.cassandra.gms.Gossiper: boolean isDeadState(org.apache.cassandra.gms.EndpointState)>(epState) at line 1063 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void handleMajorStateChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> has 7 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1057 with ID [c753a8f1-91ba]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = interfaceinvoke $stack9.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1057 with ID [c753a8f1-91ba]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack10 == 0 goto $stack11 = this.<org.apache.cassandra.gms.Gossiper: java.util.concurrent.ConcurrentMap endpointStateMap> AT LINE 1057 with ID [c753a8f1-91ba]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1058 with ID [c753a8f1-91ba]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Adding endpoint state for {}", ep) AT LINE 1058 with ID [c753a8f1-91ba]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1071 with ID [f580f194-27d9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Not marking {} alive due to dead state", ep) AT LINE 1071 with ID [f580f194-27d9]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 != 0 goto return at line 198 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if task != null goto $stack9 = <org.apache.cassandra.repair.RepairSession: org.slf4j.Logger logger> at line 195 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.repair.RepairSession: void syncComplete(org.apache.cassandra.repair.RepairJobDesc,org.apache.cassandra.repair.NodePair,boolean)> has 11 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.repair.RepairSession: org.slf4j.Logger logger> AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = newarray (java.lang.Object)[4] AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = virtualinvoke this.<org.apache.cassandra.repair.RepairSession: java.util.UUID getId()>() AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[0] = $stack12 AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = nodes.<org.apache.cassandra.repair.NodePair: java.net.InetAddress endpoint1> AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[1] = $stack13 AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = nodes.<org.apache.cassandra.repair.NodePair: java.net.InetAddress endpoint2> AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[2] = $stack14 AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = desc.<org.apache.cassandra.repair.RepairJobDesc: java.lang.String columnFamily> AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[3] = $stack15 AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[repair #{}] Repair completed between {} and {} on {}", $stack8) AT LINE 201 with ID [725b4c4f-b00e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 != 0 goto $stack9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> at line 842 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void waitForSchema(int)> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 844 with ID [5770cd94-7311]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> AT LINE 844 with ID [5770cd94-7311]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = virtualinvoke $stack12.<org.apache.cassandra.config.Schema: java.util.UUID getVersion()>() AT LINE 844 with ID [5770cd94-7311]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("got schema: {}", $stack15) AT LINE 844 with ID [5770cd94-7311]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.net.OutboundTcpConnection: void lambda$handshakeVersion$1(java.util.concurrent.atomic.AtomicInteger,java.io.DataInputStream,java.util.concurrent.CountDownLatch)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 != 0 goto $stack8 = this.<org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries diskBoundaries> at line 45 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries getDiskBoundaries(org.apache.cassandra.db.ColumnFamilyStore)> has 17 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.db.DiskBoundaryManager: org.slf4j.Logger logger> AT LINE 53 with ID [9d16f63c-76d8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 53 with ID [9d16f63c-76d8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = virtualinvoke $stack11.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 53 with ID [9d16f63c-76d8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getTableName()>() AT LINE 53 with ID [9d16f63c-76d8]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Refreshing disk boundary cache for {}.{}", $stack14, $stack15) AT LINE 53 with ID [9d16f63c-76d8]
2020-08-25 10:54:57 [INFO] - 	 -> oldBoundaries = this.<org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries diskBoundaries> AT LINE 54 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.db.DiskBoundaryManager: org.slf4j.Logger logger> AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = newarray (java.lang.Object)[4] AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17[0] = oldBoundaries AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = this.<org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries diskBoundaries> AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17[1] = $stack18 AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = virtualinvoke $stack19.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17[2] = $stack23 AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getTableName()>() AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17[3] = $stack25 AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Updating boundaries from {} to {} for {}.{}", $stack17) AT LINE 56 with ID [edaca8c4-e32d]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.io.sstable.format.SSTableReader: void saveSummary(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.io.sstable.IndexSummary)>
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.commitlog.CommitLogPosition lambda$waitForFlushes$0(org.apache.cassandra.db.Memtable)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 973 with ID [10082a36-a2d2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = this.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 973 with ID [10082a36-a2d2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("forceFlush requested but everything is clean in {}", $stack2) AT LINE 973 with ID [10082a36-a2d2]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hints.HintVerbHandler: java.lang.Void lambda$doVerb$1(java.lang.Throwable)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack1 = <org.apache.cassandra.hints.HintVerbHandler: org.slf4j.Logger logger> AT LINE 95 with ID [bb393379-c8f4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack1.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>("Failed to apply hint", e) AT LINE 95 with ID [bb393379-c8f4]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack21 >= 0 goto $stack22 = <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.slf4j.Logger logger> at line 221 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if d#4 != null goto return d#4 at line 230 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if d#4 == null goto $stack12 = virtualinvoke this.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.apache.cassandra.db.Directories getDirectories()>() at line 218 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack35 != 0 goto (branch) at line 211 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.apache.cassandra.db.Directories$DataDirectory getWriteDirectory(java.lang.Iterable,long)> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.slf4j.Logger logger> AT LINE 213 with ID [cebf7019-39e1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack37.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("All sstables not from the same disk - putting results in {}", directory) AT LINE 213 with ID [cebf7019-39e1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.slf4j.Logger logger> AT LINE 226 with ID [029c43e8-0cf0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("putting compaction results in {}", directory) AT LINE 226 with ID [029c43e8-0cf0]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if prepared != null goto $stack17 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> at line 2401 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlResult execute_prepared_cql3_query(int,java.util.List,org.apache.cassandra.thrift.ConsistencyLevel)> has 8 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2393 with ID [04f456c4-4ab4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String)>("execute_prepared_cql3_query") AT LINE 2393 with ID [04f456c4-4ab4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2406 with ID [f3948c38-543a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(itemId) AT LINE 2406 with ID [f3948c38-543a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = prepared.<org.apache.cassandra.cql3.statements.ParsedStatement$Prepared: org.apache.cassandra.cql3.CQLStatement statement> AT LINE 2406 with ID [f3948c38-543a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = interfaceinvoke $stack20.<org.apache.cassandra.cql3.CQLStatement: int getBoundTerms()>() AT LINE 2406 with ID [f3948c38-543a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack21) AT LINE 2406 with ID [f3948c38-543a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Retrieved prepared statement #{} with {} bind markers", $stack19, $stack22) AT LINE 2406 with ID [f3948c38-543a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if ret == null goto $stack4 = <org.apache.cassandra.utils.memory.BufferPool: org.slf4j.Logger logger> at line 116 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer takeFromPool(int,boolean)> has 7 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.utils.memory.BufferPool: org.slf4j.Logger logger> AT LINE 119 with ID [678a4498-fa8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 119 with ID [678a4498-fa8a]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = <org.apache.cassandra.utils.memory.BufferPool: io.netty.util.concurrent.FastThreadLocal localPool> AT LINE 119 with ID [678a4498-fa8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.utils.memory.BufferPool: org.slf4j.Logger logger> AT LINE 120 with ID [678a4498-fa8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = (long) size AT LINE 120 with ID [678a4498-fa8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack10) AT LINE 120 with ID [678a4498-fa8a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Requested buffer size {} has been allocated directly due to lack of capacity", $stack13) AT LINE 120 with ID [678a4498-fa8a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack18 == 0 goto $stack11 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(newDatacenters) at line 62 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 == 0 goto $stack25 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>() at line 65 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.locator.NetworkTopologyStrategy: void <init>(java.lang.String,org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.IEndpointSnitch,java.util.Map)> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.locator.NetworkTopologyStrategy: org.slf4j.Logger logger> AT LINE 73 with ID [a4155baf-6b6c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = this.<org.apache.cassandra.locator.NetworkTopologyStrategy: java.util.Map datacenters> AT LINE 73 with ID [a4155baf-6b6c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String toString(java.util.Map)>($stack12) AT LINE 73 with ID [a4155baf-6b6c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Configured datacenter replicas are {}", $stack15) AT LINE 73 with ID [a4155baf-6b6c]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.net.IncomingStreamingConnection: void close()>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 == 0 goto $stack17 = <org.apache.cassandra.metrics.StorageMetrics: com.codahale.metrics.Counter load> at line 162 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack13 == 0 goto subtract#5 = 0L at line 148 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto add = 0L at line 144 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable updateSizeTracking(java.lang.Iterable,java.lang.Iterable,java.lang.Throwable)> has 30 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = <org.apache.cassandra.db.lifecycle.Tracker: org.slf4j.Logger logger> AT LINE 150 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = interfaceinvoke $stack44.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 150 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack45 == 0 goto $stack46 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: long bytesOnDisk()>() AT LINE 150 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = <org.apache.cassandra.db.lifecycle.Tracker: org.slf4j.Logger logger> AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = newarray (java.lang.Object)[3] AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.Descriptor descriptor> AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48[0] = $stack49 AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = this.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.ColumnFamilyStore cfstore> AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51 = $stack50.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = virtualinvoke $stack51.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48[1] = $stack55 AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack56 = this.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.ColumnFamilyStore cfstore> AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack57 = $stack56.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48[2] = $stack57 AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack52.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("adding {} to list of files tracked for {}.{}", $stack48) AT LINE 151 with ID [85d24ffd-0bd6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = <org.apache.cassandra.db.lifecycle.Tracker: org.slf4j.Logger logger> AT LINE 164 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = interfaceinvoke $stack26.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 164 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack27 == 0 goto $stack28 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: long bytesOnDisk()>() AT LINE 164 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = <org.apache.cassandra.db.lifecycle.Tracker: org.slf4j.Logger logger> AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = newarray (java.lang.Object)[3] AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.Descriptor descriptor> AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30[0] = $stack31 AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = this.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.ColumnFamilyStore cfstore> AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = $stack32.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = virtualinvoke $stack33.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30[1] = $stack37 AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = this.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.ColumnFamilyStore cfstore> AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = $stack38.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30[2] = $stack39 AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("removing {} from list of files tracked for {}.{}", $stack30) AT LINE 165 with ID [4bf02325-6041]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.locator.TokenMetadata: void calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,java.lang.String)> has 30 units and 11 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 814 with ID [0d09e851-9f2a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack65 = interfaceinvoke $stack64.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 814 with ID [0d09e851-9f2a]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack65 == 0 goto $stack67 = this.<org.apache.cassandra.locator.TokenMetadata: java.util.concurrent.ConcurrentMap pendingRanges> AT LINE 814 with ID [0d09e851-9f2a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 815 with ID [0d09e851-9f2a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack69.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("No bootstrapping, leaving or moving nodes -> empty pending ranges for {}", keyspaceName) AT LINE 815 with ID [0d09e851-9f2a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 821 with ID [34495a2a-7bf4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = interfaceinvoke $stack16.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 821 with ID [34495a2a-7bf4]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack17 == 0 goto startedAt = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 821 with ID [34495a2a-7bf4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 822 with ID [34495a2a-7bf4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack50.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Starting pending range calculation for {}", keyspaceName) AT LINE 822 with ID [34495a2a-7bf4]
2020-08-25 10:54:57 [INFO] - 	 -> startedAt = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 824 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 847 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> took#6 = $stack35 - startedAt AT LINE 847 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 849 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = interfaceinvoke $stack36.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 849 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack37 == 0 goto $stack38 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 849 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 850 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(took#6) AT LINE 850 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack47.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Pending range calculation for {} completed (took: {}ms)", keyspaceName, $stack49) AT LINE 850 with ID [e5591f26-5272]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 851 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = interfaceinvoke $stack38.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 851 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack39 == 0 goto exitmonitor l3 AT LINE 851 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 852 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = this.<org.apache.cassandra.locator.TokenMetadata: java.util.concurrent.ConcurrentMap pendingRanges> AT LINE 852 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = interfaceinvoke $stack41.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>() AT LINE 852 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack44 == 0 goto $stack45 = specialinvoke this.<org.apache.cassandra.locator.TokenMetadata: java.lang.String printPendingRanges()>() AT LINE 852 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = "<empty>" AT LINE 854 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= interfaceinvoke $stack42.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Calculated pending ranges for {}:\n{}", keyspaceName, $stack45)] AT LINE 854 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = specialinvoke this.<org.apache.cassandra.locator.TokenMetadata: java.lang.String printPendingRanges()>() AT LINE 852 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack42.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Calculated pending ranges for {}:\n{}", keyspaceName, $stack45) AT LINE 852 with ID [c74884c3-9a11]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack47 == 0 goto (branch) at line 99 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack41 == 0 goto $stack42 = <org.apache.cassandra.io.sstable.format.SSTableReader: java.util.Comparator sizeComparator> at line 102 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack40 == 0 goto $stack41 = interfaceinvoke sstablesWithTombstones.<java.util.List: boolean isEmpty()>() at line 97 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack37 != 0 goto $stack38 = new java.util.ArrayList at line 91 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: java.util.List getNextBackgroundSSTables(int)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: org.slf4j.Logger logger> AT LINE 87 with ID [73af462e-d4f0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Compaction buckets are {}", buckets) AT LINE 87 with ID [73af462e-d4f0]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 == 0 goto $stack8 = this.<org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 108 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getNextBackgroundSSTables(int)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.slf4j.Logger logger> AT LINE 126 with ID [65e8b49d-7aff]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack28.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Including expired sstables: {}", expired) AT LINE 126 with ID [65e8b49d-7aff]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.SchemaCheckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = this.<org.apache.cassandra.db.SchemaCheckVerbHandler: org.slf4j.Logger logger> AT LINE 38 with ID [6b0289e1-002f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String)>("Received schema check request.") AT LINE 38 with ID [6b0289e1-002f]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 == 0 goto $stack16 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> at line 3287 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l6 >= keyspace goto l4#10 = interfaceinvoke keyspaces.<java.util.Set: java.util.Iterator iterator()>() at line 3276 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l10 >= l9 goto l6 = l6 + 1 at line 3278 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void clearSnapshot(java.lang.String,java.lang.String[])> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3290 with ID [f9c27eb3-a8bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = interfaceinvoke $stack16.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 3290 with ID [f9c27eb3-a8bd]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack17 == 0 goto return AT LINE 3290 with ID [f9c27eb3-a8bd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3291 with ID [f9c27eb3-a8bd]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void debug(java.lang.String)>("Cleared out snapshot directories") AT LINE 3291 with ID [f9c27eb3-a8bd]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack18 == 0 goto return at line 185 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack28 == 0 goto $stack22 = this.<org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap toFetch> at line 189 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 == 0 goto $stack13 = this.<org.apache.cassandra.dht.RangeStreamer: java.util.Set sourceFilters> at line 181 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.dht.RangeStreamer: void addRanges(java.lang.String,java.util.Collection)> has 39 units and 8 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 179 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = interfaceinvoke $stack10.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 179 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack11 == 0 goto $stack13 = this.<org.apache.cassandra.dht.RangeStreamer: java.util.Set sourceFilters> AT LINE 179 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = interfaceinvoke rangesForKeyspace.<com.google.common.collect.Multimap: java.util.Collection entries()>() AT LINE 181 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> l4 = interfaceinvoke $stack40.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 181 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>() AT LINE 181 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack42 == 0 goto $stack13 = this.<org.apache.cassandra.dht.RangeStreamer: java.util.Set sourceFilters> AT LINE 181 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>() AT LINE 185 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> entry = (java.util.Map$Entry) $stack47 AT LINE 185 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = newarray (java.lang.Object)[3] AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = this.<org.apache.cassandra.dht.RangeStreamer: java.lang.String description> AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48[0] = $stack49 AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48[1] = $stack53 AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>() AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48[2] = $stack55 AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack50.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{}: range {} exists on {}", $stack48) AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack42 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()] AT LINE 182 with ID [7dd88a75-5107]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 187 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = interfaceinvoke $stack20.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 187 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack21 == 0 goto $stack22 = this.<org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap toFetch> AT LINE 187 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>() AT LINE 189 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = (java.util.Collection) $stack25 AT LINE 189 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> l6 = interfaceinvoke $stack26.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 189 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>() AT LINE 189 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack28 == 0 goto $stack22 = this.<org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap toFetch> AT LINE 189 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>() AT LINE 193 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> r = (org.apache.cassandra.dht.Range) $stack32 AT LINE 193 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = newarray (java.lang.Object)[4] AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = this.<org.apache.cassandra.dht.RangeStreamer: java.lang.String description> AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33[0] = $stack34 AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33[1] = r AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33[2] = $stack38 AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33[3] = keyspaceName AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack35.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{}: range {} from source {} for keyspace {}", $stack33) AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack28 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>()] AT LINE 190 with ID [01163cff-7530]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 == 0 goto $stack19 = virtualinvoke consistency_level.<org.apache.cassandra.thrift.ConsistencyLevel: java.lang.String name()>() at line 1334 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: void atomic_batch_mutate(java.util.Map,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1344 with ID [156268f9-5025]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String)>("atomic_batch_mutate") AT LINE 1344 with ID [156268f9-5025]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 != 0 goto (branch) at line 960 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto connection#6 = virtualinvoke this.<org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.OutboundTcpConnection getConnection(java.net.InetAddress,org.apache.cassandra.net.MessageOut)>(to, message) at line 959 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.MessagingService: void sendOneWay(org.apache.cassandra.net.MessageOut,int,java.net.InetAddress)> has 18 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = <org.apache.cassandra.net.MessagingService: org.slf4j.Logger logger> AT LINE 952 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = interfaceinvoke $stack6.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 952 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack7 == 0 goto $stack8 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 952 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.net.MessagingService: org.slf4j.Logger logger> AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = newarray (java.lang.Object)[4] AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19[0] = $stack23 AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = message.<org.apache.cassandra.net.MessageOut: org.apache.cassandra.net.MessagingService$Verb verb> AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19[1] = $stack24 AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id) AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19[2] = $stack26 AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19[3] = to AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{} sending {} to {}@{}", $stack19) AT LINE 953 with ID [3759213a-1566]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 955 with ID [b7a9d951-b1a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = virtualinvoke to.<java.net.InetAddress: boolean equals(java.lang.Object)>($stack8) AT LINE 955 with ID [b7a9d951-b1a1]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack9 == 0 goto $stack10 = this.<org.apache.cassandra.net.MessagingService: java.util.Set messageSinks> AT LINE 955 with ID [b7a9d951-b1a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.net.MessagingService: org.slf4j.Logger logger> AT LINE 956 with ID [b7a9d951-b1a1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Message-to-self {} going over MessagingService", message) AT LINE 956 with ID [b7a9d951-b1a1]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.index.internal.CassandraIndex: void doDelete(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.utils.concurrent.OpOrder$Group)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.index.internal.CassandraIndex: org.slf4j.Logger logger> AT LINE 578 with ID [16203a23-2cf4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Removed index entry for value {}", indexKey) AT LINE 578 with ID [16203a23-2cf4]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack87 == 0 goto (branch) at line 170 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack82 == 0 goto (branch) at line 159 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack79 == 0 goto lastToken = null at line 157 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack93 >= 0 goto (branch) at line 170 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack74 == 0 goto $stack61 = this.<org.apache.cassandra.db.view.ViewBuilder: boolean isStopped> at line 186 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack38 == 0 goto $stack42 = <org.apache.cassandra.service.StorageService: org.apache.cassandra.service.StorageService instance> at line 112 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.view.ViewBuilder: void run()> has 55 units and 9 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = <org.apache.cassandra.db.view.ViewBuilder: org.slf4j.Logger logger> AT LINE 107 with ID [e0737605-7bc4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 107 with ID [e0737605-7bc4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = $stack22.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 107 with ID [e0737605-7bc4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = $stack23.<org.apache.cassandra.config.CFMetaData: java.lang.String ksName> AT LINE 107 with ID [e0737605-7bc4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.view.View view> AT LINE 107 with ID [e0737605-7bc4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = $stack24.<org.apache.cassandra.db.view.View: java.lang.String name> AT LINE 107 with ID [e0737605-7bc4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack27.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Starting view builder for {}.{}", $stack26, $stack25) AT LINE 107 with ID [e0737605-7bc4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = <org.apache.cassandra.db.view.ViewBuilder: org.slf4j.Logger logger> AT LINE 108 with ID [1cb910a9-a8be]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 108 with ID [1cb910a9-a8be]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = $stack28.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 108 with ID [1cb910a9-a8be]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = $stack29.<org.apache.cassandra.config.CFMetaData: java.lang.String ksName> AT LINE 108 with ID [1cb910a9-a8be]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.view.View view> AT LINE 108 with ID [1cb910a9-a8be]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = $stack30.<org.apache.cassandra.db.view.View: java.lang.String name> AT LINE 108 with ID [1cb910a9-a8be]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack33.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Running view builder for {}.{}", $stack32, $stack31) AT LINE 108 with ID [1cb910a9-a8be]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119 = <org.apache.cassandra.db.view.ViewBuilder: org.slf4j.Logger logger> AT LINE 114 with ID [942764fa-69db]
2020-08-25 10:54:57 [INFO] - 	 -> $stack114 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 114 with ID [942764fa-69db]
2020-08-25 10:54:57 [INFO] - 	 -> $stack115 = $stack114.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 114 with ID [942764fa-69db]
2020-08-25 10:54:57 [INFO] - 	 -> $stack118 = $stack115.<org.apache.cassandra.config.CFMetaData: java.lang.String ksName> AT LINE 114 with ID [942764fa-69db]
2020-08-25 10:54:57 [INFO] - 	 -> $stack116 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.view.View view> AT LINE 114 with ID [942764fa-69db]
2020-08-25 10:54:57 [INFO] - 	 -> $stack117 = $stack116.<org.apache.cassandra.db.view.View: java.lang.String name> AT LINE 114 with ID [942764fa-69db]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack119.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("View already marked built for {}.{}", $stack118, $stack117) AT LINE 114 with ID [942764fa-69db]
2020-08-25 10:54:57 [INFO] - 	 -> $stack100 = <org.apache.cassandra.db.view.ViewBuilder: org.slf4j.Logger logger> AT LINE 127 with ID [1940d65e-b62a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack95 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 127 with ID [1940d65e-b62a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96 = $stack95.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 127 with ID [1940d65e-b62a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack99 = $stack96.<org.apache.cassandra.config.CFMetaData: java.lang.String ksName> AT LINE 127 with ID [1940d65e-b62a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack97 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 127 with ID [1940d65e-b62a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack98 = $stack97.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 127 with ID [1940d65e-b62a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack100.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Starting new view build. flushing base table {}.{}", $stack99, $stack98) AT LINE 127 with ID [1940d65e-b62a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = <org.apache.cassandra.db.view.ViewBuilder: org.slf4j.Logger logger> AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = newarray (java.lang.Object)[3] AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46[0] = lastToken AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = $stack47.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = $stack48.<org.apache.cassandra.config.CFMetaData: java.lang.String ksName> AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46[1] = $stack49 AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = this.<org.apache.cassandra.db.view.ViewBuilder: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51 = $stack50.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46[2] = $stack51 AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack52.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Resuming view build from token {}. flushing base table {}.{}", $stack46) AT LINE 139 with ID [e6dffb39-a19b]
2020-08-25 10:54:57 [INFO] - 	 -> keysBuilt = 0L AT LINE 146 with ID [ff5a5e79-6a4d, ba3dff1a-51b0]
2020-08-25 10:54:57 [INFO] - 	 -> keysBuilt = keysBuilt + 1L AT LINE 162 with ID [ff5a5e79-6a4d, ba3dff1a-51b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69 = <org.apache.cassandra.db.view.ViewBuilder: org.slf4j.Logger logger> AT LINE 178 with ID [ff5a5e79-6a4d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68 = newarray (java.lang.Object)[3] AT LINE 178 with ID [ff5a5e79-6a4d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68[0] = ksname AT LINE 178 with ID [ff5a5e79-6a4d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68[1] = viewName AT LINE 178 with ID [ff5a5e79-6a4d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(keysBuilt) AT LINE 178 with ID [ff5a5e79-6a4d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68[2] = $stack72 AT LINE 178 with ID [ff5a5e79-6a4d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack69.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Marking view({}.{}) as built covered {} keys ", $stack68) AT LINE 178 with ID [ff5a5e79-6a4d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack63 = <org.apache.cassandra.db.view.ViewBuilder: org.slf4j.Logger logger> AT LINE 184 with ID [ba3dff1a-51b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62 = newarray (java.lang.Object)[3] AT LINE 184 with ID [ba3dff1a-51b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62[0] = ksname AT LINE 184 with ID [ba3dff1a-51b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62[1] = viewName AT LINE 184 with ID [ba3dff1a-51b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(keysBuilt) AT LINE 184 with ID [ba3dff1a-51b0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62[2] = $stack66 AT LINE 184 with ID [ba3dff1a-51b0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack63.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Stopped build for view({}.{}) after covering {} keys", $stack62) AT LINE 184 with ID [ba3dff1a-51b0]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 != 0 goto return 0 at line 146 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.monitoring.MonitoringTask: boolean logFailedOperations(long)> has 17 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = this.<org.apache.cassandra.db.monitoring.MonitoringTask: long lastLogTime> AT LINE 148 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> elapsed = now - $stack9 AT LINE 148 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.db.monitoring.MonitoringTask: org.slf4j.Logger logger> AT LINE 151 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = interfaceinvoke $stack13.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 151 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack14 == 0 goto return 1 AT LINE 151 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.monitoring.MonitoringTask: org.slf4j.Logger logger> AT LINE 153 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = newarray (java.lang.Object)[4] AT LINE 152 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = virtualinvoke failedOperations.<org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: long num()>() AT LINE 153 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack19) AT LINE 153 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15[0] = $stack20 AT LINE 153 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(elapsed) AT LINE 154 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15[1] = $stack22 AT LINE 154 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = <org.apache.cassandra.db.monitoring.MonitoringTask: java.lang.String LINE_SEPARATOR> AT LINE 154 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15[2] = $stack23 AT LINE 154 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = virtualinvoke failedOperations.<org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: java.lang.String getLogMessage()>() AT LINE 156 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15[3] = $stack25 AT LINE 156 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("{} operations timed out in the last {} msecs:{}{}", $stack15) AT LINE 152 with ID [74864cc0-8221]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorizeMBeanServerMethod(org.apache.cassandra.auth.RoleResource,java.lang.String)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> AT LINE 249 with ID [92e1c4a6-35a7]
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.auth.Permission: org.apache.cassandra.auth.Permission DESCRIBE> AT LINE 249 with ID [92e1c4a6-35a7]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("JMX invocation of {} on MBeanServer requires permission {}", methodName, $stack3) AT LINE 249 with ID [92e1c4a6-35a7]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack69 <= 0 goto $stack71 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> at line 2366 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack67 == 0 goto $stack68 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> at line 2360 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if currentOwner != null goto $stack67 = virtualinvoke endpoint.<java.net.InetAddress: boolean equals(java.lang.Object)>(currentOwner) at line 2354 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack62 == 0 goto (branch) at line 2403 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack59 == 0 goto (branch) at line 2401 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack44 == 0 goto $stack45 = interfaceinvoke tokensToUpdateInSystemKeyspace.<java.util.Set: boolean isEmpty()>() at line 2398 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack37 == 0 goto $stack38 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> at line 2350 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack148 == 0 goto $stack149 = virtualinvoke replacingNode.<java.util.Optional: java.lang.Object get()>() at line 2301 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack158 == 0 goto $stack141 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> at line 2304 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void handleStateNormal(java.net.InetAddress,java.lang.String)> has 11 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2285 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = interfaceinvoke $stack19.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2285 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack20 == 0 goto $stack21 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2285 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> $stack178 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2286 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> $stack177 = newarray (java.lang.Object)[3] AT LINE 2286 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> $stack177[0] = endpoint AT LINE 2286 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> $stack177[1] = status AT LINE 2286 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> $stack177[2] = tokens AT LINE 2286 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack178.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Node {} state {}, token {}", $stack177) AT LINE 2286 with ID [979bd3c1-f640]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2356 with ID [0d71a149-b1a7]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack96.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("New node {} at token {}", endpoint, token) AT LINE 2356 with ID [0d71a149-b1a7]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack31 <= 0 goto return at line 75 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack9 != 0 goto $stack12 = this.<org.apache.cassandra.service.paxos.PrepareCallback: java.util.Map commitsByReplica> at line 72 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.paxos.PrepareCallback: void response(org.apache.cassandra.net.MessageIn)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.service.paxos.PrepareCallback: org.slf4j.Logger logger> AT LINE 64 with ID [7024ab54-85ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 64 with ID [7024ab54-85ac]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Prepare response {} from {}", response, $stack4) AT LINE 64 with ID [7024ab54-85ac]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void handleStateBootstrap(java.net.InetAddress)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2212 with ID [decc3cbf-2194]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2212 with ID [decc3cbf-2194]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2212 with ID [decc3cbf-2194]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2213 with ID [decc3cbf-2194]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack25.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} state bootstrapping, token {}", endpoint, tokens) AT LINE 2213 with ID [decc3cbf-2194]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = specialinvoke this.<org.apache.cassandra.thrift.CassandraServer: boolean startSessionIfRequested()>() at line 2098 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: void truncate(java.lang.String)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2107 with ID [7018d6fe-1c8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = virtualinvoke cState.<org.apache.cassandra.service.ClientState: java.lang.String getKeyspace()>() AT LINE 2107 with ID [7018d6fe-1c8a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("truncating {}.{}", $stack15, cfname) AT LINE 2107 with ID [7018d6fe-1c8a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if callbackInfo != null goto $stack15 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> at line 35 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.ResponseVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = <org.apache.cassandra.net.ResponseVerbHandler: org.slf4j.Logger logger> AT LINE 38 with ID [4b023b6b-1d74]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id) AT LINE 38 with ID [4b023b6b-1d74]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 38 with ID [4b023b6b-1d74]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack27.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(msg, $stack28, $stack29) AT LINE 38 with ID [4b023b6b-1d74]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if tooBig == 0 goto $stack19 = new org.apache.cassandra.io.FSWriteError at line 404 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 != 1 goto staticinvoke <org.apache.cassandra.db.Directories: void sortWriteableCandidates(java.util.List,long)>(candidates, totalAvailable) at line 410 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack13 == 0 goto $stack14 = interfaceinvoke candidates.<java.util.List: int size()>() at line 403 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l9 >= l8 goto $stack13 = interfaceinvoke candidates.<java.util.List: boolean isEmpty()>() at line 384 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.Directories: org.apache.cassandra.db.Directories$DataDirectory getWriteableLocation(long)> has 14 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = <org.apache.cassandra.db.Directories: org.slf4j.Logger logger> AT LINE 388 with ID [d4c8a769-d8e1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = dataDir.<org.apache.cassandra.db.Directories$DataDirectory: java.io.File location> AT LINE 388 with ID [d4c8a769-d8e1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack48.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("removing blacklisted candidate {}", $stack47) AT LINE 388 with ID [d4c8a769-d8e1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = <org.apache.cassandra.db.Directories: org.slf4j.Logger logger> AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = newarray (java.lang.Object)[3] AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = candidate.<org.apache.cassandra.db.Directories$DataDirectoryCandidate: org.apache.cassandra.db.Directories$DataDirectory dataDirectory> AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = $stack38.<org.apache.cassandra.db.Directories$DataDirectory: java.io.File location> AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37[0] = $stack39 AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = candidate.<org.apache.cassandra.db.Directories$DataDirectoryCandidate: long availableSpace> AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack40) AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37[1] = $stack44 AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(writeSize) AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37[2] = $stack46 AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack41.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("removing candidate {}, usable={}, requested={}", $stack37) AT LINE 395 with ID [7735342e-bdae]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack43 == 0 goto (branch) at line 574 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack44 > 0 goto state = pieces[0] at line 574 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 != 0 goto $stack17 = specialinvoke this.<org.apache.cassandra.service.StorageService: boolean shouldBootstrap()>() at line 556 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 == 0 goto $stack9 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> at line 540 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void checkForEndpointCollision(java.util.UUID,java.util.Set)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 546 with ID [827ec298-b836]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String)>("Starting shadow gossip round to check for endpoint collision") AT LINE 546 with ID [827ec298-b836]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if size >= 1 goto (branch) at line 656 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: boolean sendGossip(org.apache.cassandra.net.MessageOut,java.util.Set)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 661 with ID [8beaa0f3-7413]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 661 with ID [8beaa0f3-7413]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack13 == 0 goto $stack14 = this.<org.apache.cassandra.gms.Gossiper: long firstSynSendAt> AT LINE 661 with ID [8beaa0f3-7413]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 662 with ID [8beaa0f3-7413]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending a GossipDigestSyn to {} ...", to) AT LINE 662 with ID [8beaa0f3-7413]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack28 == 0 goto (branch) at line 2688 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack22 == 0 goto keyspaceName#17 = virtualinvoke stream#10.<org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamResultFuture execute()>() at line 2686 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack18 == 0 goto $stack19 = new org.apache.cassandra.streaming.StreamPlan at line 2669 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack56 == 0 goto (branch) at line 2679 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack51 == 0 goto sourceRanges#7 = specialinvoke this.<org.apache.cassandra.service.StorageService: com.google.common.collect.Multimap getNewSourceRanges(java.lang.String,java.util.Set)>(keyspaceName, myNewRanges) at line 2673 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack64 == 0 goto (branch) at line 2675 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void restoreReplicaCount(java.net.InetAddress,java.net.InetAddress)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2693 with ID [aec18224-0718]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = interfaceinvoke $stack34.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2693 with ID [aec18224-0718]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack35 == 0 goto virtualinvoke stream#10.<org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamPlan requestRanges(java.net.InetAddress,java.net.InetAddress,java.lang.String,java.util.Collection)>(entry#15, entry#16, changedRanges#12, ranges) AT LINE 2693 with ID [aec18224-0718]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2694 with ID [aec18224-0718]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(ranges, ", ") AT LINE 2694 with ID [aec18224-0718]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack38.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Requesting from {} ranges {}", entry#15, $stack40) AT LINE 2694 with ID [aec18224-0718]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack86 < 0 goto (branch) at line 213 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack30 == 0 goto $stack31 = interfaceinvoke states.<java.util.Set: boolean isEmpty()>() at line 137 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.RateBasedBackPressure: void apply(java.util.Set,long,java.util.concurrent.TimeUnit)> has 17 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack107 = <org.apache.cassandra.net.RateBasedBackPressure: org.slf4j.Logger logger> AT LINE 187 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack108 = interfaceinvoke $stack107.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 187 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack108 == 0 goto (branch) AT LINE 187 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack113 = <org.apache.cassandra.net.RateBasedBackPressure: org.slf4j.Logger logger> AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack112 = newarray (java.lang.Object)[5] AT LINE 189 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack116 = virtualinvoke backPressure.<org.apache.cassandra.net.RateBasedBackPressureState: java.net.InetAddress getHost()>() AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack112[0] = $stack116 AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack118 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(incomingRate) AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack112[1] = $stack118 AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack120 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(outgoingRate) AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack112[2] = $stack120 AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack122 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(actualRatio) AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack112[3] = $stack122 AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack124 = virtualinvoke limiter.<com.google.common.util.concurrent.RateLimiter: double getRate()>() AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack125 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack124) AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> $stack112[4] = $stack125 AT LINE 190 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack113.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Back-pressure state for {}: incoming rate {}, outgoing rate {}, ratio {}, rate limiting {}", $stack112) AT LINE 189 with ID [d47f652e-4444]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onUpdateColumnFamily(java.lang.String,java.lang.String,boolean)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = staticinvoke <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger access$500()>() AT LINE 731 with ID [f0fe752e-d40b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Column definitions for {}.{} changed, invalidating related prepared statements", ksName, cfName) AT LINE 731 with ID [f0fe752e-d40b]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack5 = this.<org.apache.cassandra.db.lifecycle.LogReplicaSet: java.util.Map replicasByFile> at line 68 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LogReplicaSet: void addReplica(java.io.File)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = <org.apache.cassandra.db.lifecycle.LogReplicaSet: org.slf4j.Logger logger> AT LINE 66 with ID [33f0cf3b-1a05]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 66 with ID [33f0cf3b-1a05]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack9 == 0 goto return AT LINE 66 with ID [33f0cf3b-1a05]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.db.lifecycle.LogReplicaSet: org.slf4j.Logger logger> AT LINE 67 with ID [33f0cf3b-1a05]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Added log file replica {} ", file) AT LINE 67 with ID [33f0cf3b-1a05]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.OutboundTcpConnection: void closeSocket(boolean)> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 205 with ID [60c7d522-e71c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = this.<org.apache.cassandra.net.OutboundTcpConnection: org.apache.cassandra.net.OutboundTcpConnectionPool poolReference> AT LINE 205 with ID [60c7d522-e71c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = virtualinvoke $stack2.<org.apache.cassandra.net.OutboundTcpConnectionPool: java.net.InetAddress endPoint()>() AT LINE 205 with ID [60c7d522-e71c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Enqueuing socket close for {}", $stack5) AT LINE 205 with ID [60c7d522-e71c]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack43 == 0 goto exitmonitor l4 at line 2285 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack37 != 0 goto (branch) at line 2265 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack29 == 0 goto exitmonitor l4 at line 2285 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 == 0 goto $stack26 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> at line 2263 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack21 == 0 goto $stack22 = <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.db.compaction.CompactionManager instance> at line 2254 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: java.lang.Object runWithCompactionsDisabled(java.util.concurrent.Callable,boolean,boolean)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 2248 with ID [c25e4b47-2e66]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 2248 with ID [c25e4b47-2e66]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = $stack16.<org.apache.cassandra.config.CFMetaData: java.lang.String cfName> AT LINE 2248 with ID [c25e4b47-2e66]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Cancelling in-progress compactions for {}", $stack17) AT LINE 2248 with ID [c25e4b47-2e66]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 2271 with ID [87ac077e-b7d3]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void trace(java.lang.String)>("Compactions successfully cancelled") AT LINE 2271 with ID [87ac077e-b7d3]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if transaction != null goto $stack9 = new org.apache.cassandra.db.compaction.CompactionTask at line 225 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack13 == 0 goto $stack5 = this.<org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 228 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: org.slf4j.Logger logger> AT LINE 227 with ID [9f079f32-3247]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Unable to mark {} for compaction; probably a background compaction got to it first.  You can disable background compactions temporarily if this is a problem", sstables) AT LINE 227 with ID [9f079f32-3247]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.MessagingService: void convict(java.net.InetAddress)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = <org.apache.cassandra.net.MessagingService: org.slf4j.Logger logger> AT LINE 669 with ID [b69b6cfd-cf2e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Resetting pool for {}", ep) AT LINE 669 with ID [b69b6cfd-cf2e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 == 0 goto toUpdate = specialinvoke this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set toUpdate()>() at line 304 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable checkpoint(java.lang.Throwable)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 301 with ID [9a969c60-9251]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 301 with ID [9a969c60-9251]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> AT LINE 301 with ID [9a969c60-9251]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 302 with ID [9a969c60-9251]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> AT LINE 302 with ID [9a969c60-9251]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Checkpointing staged {}", $stack39) AT LINE 302 with ID [9a969c60-9251]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if results != null goto $stack58 = virtualinvoke limits.<org.apache.cassandra.db.filter.DataLimits: int perPartitionCount()>() at line 1568 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.util.List get_range_slices(org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.KeyRange,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1515 with ID [0a921059-3030]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack28.<org.slf4j.Logger: void trace(java.lang.String)>("range_slice") AT LINE 1515 with ID [0a921059-3030]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack167 == 1 goto $stack153 = newarray (java.net.InetAddress)[1] at line 4191 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack139 == 0 goto (branch) at line 4168 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack126 != 0 goto (branch) at line 4215 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack123 == 0 goto (branch) at line 4212 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack119 <= 1 goto $stack120 = interfaceinvoke addressList#36.<java.util.Collection: java.util.Iterator iterator()>() at line 4208 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack118 == 0 goto (branch) at line 4206 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack105 == 0 goto (branch) at line 4225 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack34 == 0 goto return at line 4138 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack41 == 0 goto (branch) at line 4145 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack67 == 0 goto $stack68 = staticinvoke <org.apache.cassandra.service.StorageService: org.slf4j.Logger access$100()>() at line 4242 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack61 == 0 goto $stack62 = <org.apache.cassandra.gms.FailureDetector: org.apache.cassandra.gms.IFailureDetector instance> at line 4233 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack58 == 0 goto $stack59 = interfaceinvoke endpointRanges#38.<com.google.common.collect.Multimap: java.util.Set keySet()>() at line 4220 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService$RangeRelocator: void calculateToFromStreams(java.util.Collection,java.util.List)> has 26 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = staticinvoke <org.apache.cassandra.service.StorageService: org.slf4j.Logger access$100()>() AT LINE 4144 with ID [2d3ba6c8-7c5a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Calculating ranges to stream and request for keyspace {}", keyspace) AT LINE 4144 with ID [2d3ba6c8-7c5a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack101 = staticinvoke <org.apache.cassandra.service.StorageService: org.slf4j.Logger access$100()>() AT LINE 4224 with ID [6f6b6179-d7fa]
2020-08-25 10:54:57 [INFO] - 	 -> $stack102 = newarray (java.lang.Object)[3] AT LINE 4224 with ID [6f6b6179-d7fa]
2020-08-25 10:54:57 [INFO] - 	 -> $stack102[0] = addressList#40 AT LINE 4224 with ID [6f6b6179-d7fa]
2020-08-25 10:54:57 [INFO] - 	 -> $stack102[1] = range#41 AT LINE 4224 with ID [6f6b6179-d7fa]
2020-08-25 10:54:57 [INFO] - 	 -> $stack102[2] = endpoints#42 AT LINE 4224 with ID [6f6b6179-d7fa]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack101.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Range: {} Current endpoints: {} New endpoints: {}", $stack102) AT LINE 4224 with ID [6f6b6179-d7fa]
2020-08-25 10:54:57 [INFO] - 	 -> $stack108 = staticinvoke <org.apache.cassandra.service.StorageService: org.slf4j.Logger access$100()>() AT LINE 4227 with ID [474d0d10-c523]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack108.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Range {} has new owner {}", addressList#40, newEndpoints#44) AT LINE 4227 with ID [474d0d10-c523]
2020-08-25 10:54:57 [INFO] - 	 -> $stack82 = staticinvoke <org.apache.cassandra.service.StorageService: org.slf4j.Logger access$100()>() AT LINE 4235 with ID [447c4237-c907]
2020-08-25 10:54:57 [INFO] - 	 -> $stack83 = newarray (java.lang.Object)[3] AT LINE 4235 with ID [447c4237-c907]
2020-08-25 10:54:57 [INFO] - 	 -> $stack86 = interfaceinvoke endpointRanges#38.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(addressList#46) AT LINE 4235 with ID [447c4237-c907]
2020-08-25 10:54:57 [INFO] - 	 -> $stack83[0] = $stack86 AT LINE 4235 with ID [447c4237-c907]
2020-08-25 10:54:57 [INFO] - 	 -> $stack83[1] = keyspace AT LINE 4235 with ID [447c4237-c907]
2020-08-25 10:54:57 [INFO] - 	 -> $stack83[2] = addressList#46 AT LINE 4235 with ID [447c4237-c907]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack82.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Will stream range {} of keyspace {} to endpoint {}", $stack83) AT LINE 4235 with ID [447c4237-c907]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71 = staticinvoke <org.apache.cassandra.service.StorageService: org.slf4j.Logger access$100()>() AT LINE 4244 with ID [80a069af-e1de]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72 = newarray (java.lang.Object)[3] AT LINE 4244 with ID [80a069af-e1de]
2020-08-25 10:54:57 [INFO] - 	 -> $stack75 = interfaceinvoke toFetch#48.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(range#37) AT LINE 4244 with ID [80a069af-e1de]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72[0] = $stack75 AT LINE 4244 with ID [80a069af-e1de]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72[1] = keyspace AT LINE 4244 with ID [80a069af-e1de]
2020-08-25 10:54:57 [INFO] - 	 -> $stack72[2] = range#37 AT LINE 4244 with ID [80a069af-e1de]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack71.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Will request range {} of keyspace {} from endpoint {}", $stack72) AT LINE 4244 with ID [80a069af-e1de]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68 = staticinvoke <org.apache.cassandra.service.StorageService: org.slf4j.Logger access$100()>() AT LINE 4249 with ID [cc12c230-0fe8]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack68.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Keyspace {}: work map {}.", keyspace, toFetch#48) AT LINE 4249 with ID [cc12c230-0fe8]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack19 == 0 goto $stack20 = interfaceinvoke cfDefs#3.<java.util.Collection: int size()>() at line 1987 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack40 != 0 goto (branch) at line 1980 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack13 == 0 goto $stack14 = new java.util.ArrayList at line 1978 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_add_keyspace(org.apache.cassandra.thrift.KsDef)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1969 with ID [debaf757-ea4a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String)>("add_keyspace") AT LINE 1969 with ID [debaf757-ea4a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if modifier != null goto $stack9 = new org.apache.cassandra.db.compaction.CompactionTask at line 433 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack13 == 0 goto $stack5 = this.<org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 436 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.slf4j.Logger logger> AT LINE 435 with ID [479687cb-e1bf]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Unable to mark {} for compaction; probably a background compaction got to it first.  You can disable background compactions temporarily if this is a problem", sstables) AT LINE 435 with ID [479687cb-e1bf]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l6 == null goto interfaceinvoke iter.<org.apache.cassandra.db.rows.UnfilteredRowIterator: void close()>() at line 482 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if iter == null goto (branch) at line 480 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack53 != 0 goto (branch) at line 475 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.Memtable$FlushRunnable: void writeSortedContents()> has 40 units and 12 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = staticinvoke <org.apache.cassandra.db.Memtable: org.slf4j.Logger access$600()>() AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = newarray (java.lang.Object)[3] AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = this.<org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.db.Memtable this$0> AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = virtualinvoke $stack12.<org.apache.cassandra.db.Memtable: java.lang.String toString()>() AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11[0] = $stack15 AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = this.<org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.db.PartitionPosition 'from'> AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11[1] = $stack16 AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = this.<org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.db.PartitionPosition 'to'> AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11[2] = $stack17 AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Writing {}, flushed range = ({}, {}]", $stack11) AT LINE 456 with ID [d8c51df9-3658]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = staticinvoke <org.apache.cassandra.db.Memtable: org.slf4j.Logger access$600()>() AT LINE 458 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> trackContention = interfaceinvoke $stack18.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 458 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> heavilyContendedRowCount = 0 AT LINE 459 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> if trackContention == 0 goto $stack53 = virtualinvoke partition.<org.apache.cassandra.db.partitions.AtomicBTreePartition: boolean isEmpty()>() AT LINE 472 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58 = virtualinvoke partition.<org.apache.cassandra.db.partitions.AtomicBTreePartition: boolean usePessimisticLocking()>() AT LINE 482 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack58 == 0 goto $stack53 = virtualinvoke partition.<org.apache.cassandra.db.partitions.AtomicBTreePartition: boolean isEmpty()>() AT LINE 482 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> heavilyContendedRowCount = heavilyContendedRowCount + 1 AT LINE 473 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = staticinvoke <org.apache.cassandra.db.Memtable: org.slf4j.Logger access$600()>() AT LINE 485 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = newarray (java.lang.Object)[3] AT LINE 485 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = this.<org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.io.sstable.SSTableMultiWriter writer> AT LINE 486 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = interfaceinvoke $stack28.<org.apache.cassandra.io.sstable.SSTableMultiWriter: java.lang.String getFilename()>() AT LINE 486 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[0] = $stack31 AT LINE 486 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(bytesFlushed#19) AT LINE 487 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[1] = $stack33 AT LINE 487 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = this.<org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.db.Memtable this$0> AT LINE 488 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = staticinvoke <org.apache.cassandra.db.Memtable: java.util.concurrent.atomic.AtomicReference access$700(org.apache.cassandra.db.Memtable)>($stack34) AT LINE 488 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[2] = $stack36 AT LINE 488 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Completed flushing {} ({}) for commitlog position {}", $stack27) AT LINE 485 with ID [61b85ba7-b3a2]
2020-08-25 10:54:57 [INFO] - 	 -> if heavilyContendedRowCount <= 0 goto return AT LINE 492 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = staticinvoke <org.apache.cassandra.db.Memtable: org.slf4j.Logger access$600()>() AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = newarray (java.lang.Object)[3] AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(heavilyContendedRowCount) AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[0] = $stack45 AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = this.<org.apache.cassandra.db.Memtable$FlushRunnable: java.util.concurrent.ConcurrentNavigableMap toFlush> AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = interfaceinvoke $stack46.<java.util.concurrent.ConcurrentNavigableMap: int size()>() AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack48) AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[1] = $stack49 AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = this.<org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.db.Memtable this$0> AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[2] = $stack50 AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack41.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("High update contention in {}/{} partitions of {} ", $stack42) AT LINE 493 with ID [d6b8da20-5d8e]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamSession: void init(org.apache.cassandra.streaming.StreamResultFuture)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger logger> AT LINE 252 with ID [0f083e77-2f17]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = this.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 252 with ID [0f083e77-2f17]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Peer {} does not support keep-alive.", $stack4) AT LINE 252 with ID [0f083e77-2f17]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack86 != 0 goto tokenFactory#13 = staticinvoke <org.apache.cassandra.utils.FBUtilities: int nowInSeconds()>() at line 1663 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.util.List get_paged_slice(java.lang.String,org.apache.cassandra.thrift.KeyRange,java.nio.ByteBuffer,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1604 with ID [33988c57-695e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack28.<org.slf4j.Logger: void trace(java.lang.String)>("get_paged_slice") AT LINE 1604 with ID [33988c57-695e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack13 = virtualinvoke targetBean.<javax.management.ObjectName: boolean isPattern()>() at line 283 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if null != requiredPermission goto $stack10 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> at line 274 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorizeMBeanMethod(org.apache.cassandra.auth.RoleResource,java.lang.String,java.lang.Object[])> has 6 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> AT LINE 277 with ID [1dae5c8c-4b5e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = newarray (java.lang.Object)[3] AT LINE 277 with ID [1dae5c8c-4b5e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9[0] = methodName AT LINE 277 with ID [1dae5c8c-4b5e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9[1] = targetBean AT LINE 277 with ID [1dae5c8c-4b5e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9[2] = requiredPermission AT LINE 277 with ID [1dae5c8c-4b5e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("JMX invocation of {} on {} requires permission {}", $stack9) AT LINE 277 with ID [1dae5c8c-4b5e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack10 == 0 goto $stack11 = <org.apache.cassandra.service.StorageService$Mode: org.apache.cassandra.service.StorageService$Mode LEAVING> at line 3976 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void unbootstrap(java.lang.Runnable)> has 13 units and 5 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3980 with ID [f06f884e-2132]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = interfaceinvoke $stack26.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 3980 with ID [f06f884e-2132]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack27 == 0 goto interfaceinvoke rangesToStream.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(keyspaceName, rangesMM) AT LINE 3980 with ID [f06f884e-2132]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3981 with ID [f06f884e-2132]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = interfaceinvoke rangesMM.<com.google.common.collect.Multimap: java.util.Set keySet()>() AT LINE 3981 with ID [f06f884e-2132]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack32, ",") AT LINE 3981 with ID [f06f884e-2132]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Ranges needing transfer are [{}]", $stack33) AT LINE 3981 with ID [f06f884e-2132]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3993 with ID [b7708b4d-e389]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void debug(java.lang.String)>("waiting for batch log processing.") AT LINE 3993 with ID [b7708b4d-e389]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 4001 with ID [5d0f3428-fa5e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void debug(java.lang.String)>("waiting for stream acks.") AT LINE 4001 with ID [5d0f3428-fa5e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 4004 with ID [05f8c1f5-da89]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void debug(java.lang.String)>("stream acks all received.") AT LINE 4004 with ID [05f8c1f5-da89]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack60 <= 0 goto (branch) at line 4086 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 == 0 goto $stack19 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> at line 4084 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 <= 1 goto $stack13 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> at line 4074 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 == 0 goto localAddress = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() at line 4067 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if newToken != null goto $stack6 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> at line 4064 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void move(org.apache.cassandra.dht.Token)> has 8 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 4117 with ID [440b5835-69ef]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = interfaceinvoke $stack45.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 4117 with ID [440b5835-69ef]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack46 == 0 goto return AT LINE 4117 with ID [440b5835-69ef]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 4118 with ID [440b5835-69ef]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = virtualinvoke this.<org.apache.cassandra.service.StorageService: java.util.Collection getLocalTokens()>() AT LINE 4118 with ID [440b5835-69ef]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = interfaceinvoke $stack49.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 4118 with ID [440b5835-69ef]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51 = interfaceinvoke $stack50.<java.util.Iterator: java.lang.Object next()>() AT LINE 4118 with ID [440b5835-69ef]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack47.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Successfully moved to new token {}", $stack51) AT LINE 4118 with ID [440b5835-69ef]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void afterAppend(org.apache.cassandra.db.DecoratedKey,long,org.apache.cassandra.db.RowIndexEntry,java.nio.ByteBuffer)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.slf4j.Logger logger> AT LINE 138 with ID [db06456c-0ed9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = interfaceinvoke $stack11.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 138 with ID [db06456c-0ed9]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack12 == 0 goto $stack13 = this.<org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter iwriter> AT LINE 138 with ID [db06456c-0ed9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.slf4j.Logger logger> AT LINE 139 with ID [db06456c-0ed9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(dataEnd) AT LINE 139 with ID [db06456c-0ed9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("wrote {} at {}", decoratedKey, $stack16) AT LINE 139 with ID [db06456c-0ed9]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack19 == 0 goto (branch) at line 92 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack13 = staticinvoke <org.apache.cassandra.utils.ExpiringMap: org.slf4j.Logger access$200()>() at line 90 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 == null goto (branch) at line 97 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 == null goto (branch) at line 94 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.utils.ExpiringMap$1: void run()> has 5 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> n = 0 AT LINE 89 with ID [9660d5ff-8236]
2020-08-25 10:54:57 [INFO] - 	 -> n = n + 1 AT LINE 96 with ID [9660d5ff-8236]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = staticinvoke <org.apache.cassandra.utils.ExpiringMap: org.slf4j.Logger access$200()>() AT LINE 102 with ID [9660d5ff-8236]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(n) AT LINE 102 with ID [9660d5ff-8236]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Expired {} entries", $stack15) AT LINE 102 with ID [9660d5ff-8236]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.io.util.FileUtils: void renameWithOutConfirm(java.lang.String,java.lang.String)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l4 >= l3 goto $stack7 = <org.apache.cassandra.io.util.FileUtils: org.slf4j.Logger logger> at line 478 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.util.FileUtils: void deleteRecursiveOnExit(java.io.File)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.io.util.FileUtils: org.slf4j.Logger logger> AT LINE 482 with ID [110f5b98-e48d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Scheduling deferred deletion of file: {}", dir) AT LINE 482 with ID [110f5b98-e48d]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 == 0 goto $stack8 = <org.apache.cassandra.config.Schema: org.slf4j.Logger logger> at line 436 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.config.Schema: void load(org.apache.cassandra.config.CFMetaData)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = <org.apache.cassandra.config.Schema: org.slf4j.Logger logger> AT LINE 439 with ID [6afa3e67-bad5]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Adding {} to cfIdMap", cfm) AT LINE 439 with ID [6afa3e67-bad5]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if endpoint != null goto $stack4 = this.<org.apache.cassandra.locator.TokenMetadata: java.util.concurrent.locks.ReadWriteLock lock> at line 466 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.locator.TokenMetadata: void removeEndpoint(java.net.InetAddress)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = this.<org.apache.cassandra.locator.TokenMetadata: com.google.common.collect.BiMap replacementToOriginal> AT LINE 455 with ID [cdf433bf-df68]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = interfaceinvoke $stack13.<com.google.common.collect.BiMap: java.lang.Object remove(java.lang.Object)>(endpoint) AT LINE 455 with ID [cdf433bf-df68]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack14 == null goto $stack15 = this.<org.apache.cassandra.locator.TokenMetadata: com.google.common.collect.BiMap endpointToHostIdMap> AT LINE 455 with ID [cdf433bf-df68]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 457 with ID [cdf433bf-df68]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Node {} failed during replace.", endpoint) AT LINE 457 with ID [cdf433bf-df68]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_drop_keyspace(java.lang.String)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2009 with ID [903fd158-75fc]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void trace(java.lang.String)>("drop_keyspace") AT LINE 2009 with ID [903fd158-75fc]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack52 == 0 goto (branch) at line 1909 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack50 != 0 goto $stack51 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> at line 1907 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack21 == 0 goto (branch) at line 1894 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack13 = virtualinvoke this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Directories getDirectories()>() at line 1888 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.utils.concurrent.Refs getSnapshotSSTableReader(java.lang.String)> has 12 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1901 with ID [8c8143c6-febe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = interfaceinvoke $stack28.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1901 with ID [8c8143c6-febe]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack29 == 0 goto $stack30 = interfaceinvoke entries.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 1901 with ID [8c8143c6-febe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1902 with ID [8c8143c6-febe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = interfaceinvoke entries.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 1902 with ID [8c8143c6-febe]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("using snapshot sstable {}", $stack41) AT LINE 1902 with ID [8c8143c6-febe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1909 with ID [6a0ccb45-5cfd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = interfaceinvoke $stack51.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1909 with ID [6a0ccb45-5cfd]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack52 == 0 goto (branch) AT LINE 1909 with ID [6a0ccb45-5cfd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1911 with ID [6a0ccb45-5cfd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = interfaceinvoke entries.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 1911 with ID [6a0ccb45-5cfd]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack53.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("using active sstable {}", $stack55) AT LINE 1911 with ID [6a0ccb45-5cfd]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 == 0 goto (branch) at line 641 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.MigrationManager: void resetLocalSchema()> has 6 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 627 with ID [d87d4ed8-5bea]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String)>("Truncating schema tables...") AT LINE 627 with ID [d87d4ed8-5bea]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 631 with ID [8a4c84cd-fa1b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void debug(java.lang.String)>("Clearing local schema keyspace definitions...") AT LINE 631 with ID [8a4c84cd-fa1b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 643 with ID [c942c084-1582]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Requesting schema from {}", node) AT LINE 643 with ID [c942c084-1582]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.MessagingService: int setVersion(java.net.InetAddress,int)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.net.MessagingService: org.slf4j.Logger logger> AT LINE 1087 with ID [31348412-aede]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(version) AT LINE 1087 with ID [31348412-aede]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Setting version {} for {}", $stack6, endpoint) AT LINE 1087 with ID [31348412-aede]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void append(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,long,java.nio.ByteBuffer)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.slf4j.Logger access$1100()>() AT LINE 472 with ID [28fd88bd-b0d5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = interfaceinvoke $stack20.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 472 with ID [28fd88bd-b0d5]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack21 == 0 goto $stack22 = this.<org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: org.apache.cassandra.io.sstable.IndexSummaryBuilder summary> AT LINE 472 with ID [28fd88bd-b0d5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = staticinvoke <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.slf4j.Logger access$1100()>() AT LINE 473 with ID [28fd88bd-b0d5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(indexStart) AT LINE 473 with ID [28fd88bd-b0d5]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("wrote index entry: {} at {}", indexEntry, $stack26) AT LINE 473 with ID [28fd88bd-b0d5]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 == 0 goto return at line 1363 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.MessagingService$SocketThread: void close()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = staticinvoke <org.apache.cassandra.net.MessagingService: org.slf4j.Logger access$300()>() AT LINE 1351 with ID [9a350b54-7089]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void trace(java.lang.String)>("Closing accept() thread") AT LINE 1351 with ID [9a350b54-7089]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack6 >= 7 goto virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: void markDead()>() at line 982 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void markAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 991 with ID [95f7b18a-4265]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending a EchoMessage to {}", addr) AT LINE 991 with ID [95f7b18a-4265]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$1: void runMayThrow()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.slf4j.Logger logger> AT LINE 109 with ID [e6e804b7-81af]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String)>("No segments in reserve; creating a fresh one") AT LINE 109 with ID [e6e804b7-81af]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack28 < $stack30 goto $stack10 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> at line 194 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.db.compaction.CompactionManager: com.google.common.collect.Multiset compactingCF> at line 163 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager: java.util.List submitBackground(org.apache.cassandra.db.ColumnFamilyStore)> has 23 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 165 with ID [3c27ad4f-b482]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack52.<org.slf4j.Logger: void trace(java.lang.String)>("Autocompaction is disabled") AT LINE 165 with ID [3c27ad4f-b482]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 179 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = newarray (java.lang.Object)[3] AT LINE 178 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 179 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = virtualinvoke $stack43.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 179 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[0] = $stack47 AT LINE 179 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 179 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[1] = $stack48 AT LINE 179 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(count) AT LINE 179 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[2] = $stack50 AT LINE 179 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack44.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Background compaction is still running for {}.{} ({} remaining). Skipping", $stack42) AT LINE 178 with ID [8fd5667c-3576]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 184 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = newarray (java.lang.Object)[3] AT LINE 183 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 184 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = virtualinvoke $stack9.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 184 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[0] = $stack13 AT LINE 184 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 184 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[1] = $stack14 AT LINE 184 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.compaction.CompactionStrategyManager getCompactionStrategyManager()>() AT LINE 186 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = virtualinvoke $stack16.<org.apache.cassandra.db.compaction.CompactionStrategyManager: java.lang.String getName()>() AT LINE 186 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[2] = $stack17 AT LINE 186 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Scheduling a background task check for {}.{} with {}", $stack8) AT LINE 183 with ID [afaa797a-c3d3]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i < 0 goto $stack11 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> at line 797 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledManifest: int getEstimatedTasks()> has 12 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = newarray (java.lang.Object)[3] AT LINE 805 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>(estimated) AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10[0] = $stack14 AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = this.<org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = $stack15.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = virtualinvoke $stack16.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10[1] = $stack18 AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = this.<org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = $stack19.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10[2] = $stack20 AT LINE 806 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Estimating {} compactions to do for {}.{}", $stack10) AT LINE 805 with ID [82dcf9c6-849d]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void evictFromMembership(java.net.InetAddress)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 408 with ID [656292d9-ef9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = interfaceinvoke $stack9.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 408 with ID [656292d9-ef9a]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack10 == 0 goto return AT LINE 408 with ID [656292d9-ef9a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 409 with ID [656292d9-ef9a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("evicting {} from gossip", endpoint) AT LINE 409 with ID [656292d9-ef9a]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onAdd(com.datastax.driver.core.Host)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: org.slf4j.Logger logger> AT LINE 141 with ID [e1cecbfa-162f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Added a new host {}", host) AT LINE 141 with ID [e1cecbfa-162f]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack29 != 0 goto return null at line 170 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getCompactionCandidates(java.lang.Iterable,long,int)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.slf4j.Logger logger> AT LINE 161 with ID [82f0ce45-4f8a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Compaction buckets are {}", buckets) AT LINE 161 with ID [82f0ce45-4f8a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack5 != 0 goto $stack8 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> at line 2193 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: void tidy()> has 8 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2189 with ID [4f4bef59-3508]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = interfaceinvoke $stack3.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 2189 with ID [4f4bef59-3508]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack4 == 0 goto $stack5 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: boolean setup> AT LINE 2189 with ID [4f4bef59-3508]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2190 with ID [4f4bef59-3508]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor descriptor> AT LINE 2190 with ID [4f4bef59-3508]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: boolean setup> AT LINE 2190 with ID [4f4bef59-3508]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack17) AT LINE 2190 with ID [4f4bef59-3508]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Running instance tidier for {} with setup {}", $stack19, $stack20) AT LINE 2190 with ID [4f4bef59-3508]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack107 == 0 goto $stack108 = sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.config.CFMetaData metadata> at line 161 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack53 == 0 goto minIndexInterval#37 = sstable#43.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry: org.apache.cassandra.io.sstable.format.SSTableReader sstable> at line 257 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack51 == 0 goto return newSSTables at line 255 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack92 == 0 goto interfaceinvoke toDownsample.<java.util.List: boolean addAll(java.util.Collection)>(forceResample) at line 247 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack44 == 0 goto $stack45 = this.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution: long remainingSpace> at line 159 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: java.util.List adjustSamplingLevels(java.util.List,java.util.Map,double,long)> has 74 units and 14 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack271 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack270 = newarray (java.lang.Object)[5] AT LINE 182 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack274 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: int getMinIndexInterval()>() AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack275 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack274) AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack270[0] = $stack275 AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack277 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(minIndexInterval) AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack270[1] = $stack277 AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack270[2] = sstable AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack279 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(effectiveSamplingLevel) AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack270[3] = $stack279 AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack281 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(currentSamplingLevel) AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack270[4] = $stack281 AT LINE 183 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack271.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("min_index_interval changed from {} to {}, so the current sampling level for {} is effectively now {} (was {})", $stack270) AT LINE 182 with ID [fa1d68e5-3a72]
2020-08-25 10:54:57 [INFO] - 	 -> $stack136 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135 = newarray (java.lang.Object)[10] AT LINE 192 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack139 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[0] = $stack139 AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack141 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(readsPerSec) AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[1] = $stack141 AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack143 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(idealSpace) AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[2] = $stack143 AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack145 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(targetNumEntries) AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[3] = $stack145 AT LINE 195 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack147 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(currentSamplingLevel) AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[4] = $stack147 AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack149 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(currentNumEntries) AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[5] = $stack149 AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack150 = (double) currentNumEntries AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack151 = $stack150 * avgEntrySize AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack152 = (long) $stack151 AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack154 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack152) AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[6] = $stack154 AT LINE 196 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack156 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(effectiveSamplingLevel) AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[7] = $stack156 AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack158 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(numEntriesAtNewSamplingLevel) AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[8] = $stack158 AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack159 = (double) numEntriesAtNewSamplingLevel AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack160 = $stack159 * avgEntrySize AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack161 = (long) $stack160 AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack163 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack161) AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135[9] = $stack163 AT LINE 197 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack136.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{} has {} reads/sec; ideal space for index summary: {} ({} entries); considering moving from level {} ({} entries, {}) to level {} ({} entries, {})", $stack135) AT LINE 192 with ID [27e9ca64-d563]
2020-08-25 10:54:57 [INFO] - 	 -> $stack243 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 203 with ID [85c83a63-a701]
2020-08-25 10:54:57 [INFO] - 	 -> $stack242 = newarray (java.lang.Object)[3] AT LINE 202 with ID [85c83a63-a701]
2020-08-25 10:54:57 [INFO] - 	 -> $stack242[0] = sstable AT LINE 202 with ID [85c83a63-a701]
2020-08-25 10:54:57 [INFO] - 	 -> $stack246 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(effectiveIndexInterval) AT LINE 203 with ID [85c83a63-a701]
2020-08-25 10:54:57 [INFO] - 	 -> $stack242[1] = $stack246 AT LINE 203 with ID [85c83a63-a701]
2020-08-25 10:54:57 [INFO] - 	 -> $stack248 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(minIndexInterval) AT LINE 203 with ID [85c83a63-a701]
2020-08-25 10:54:57 [INFO] - 	 -> $stack242[2] = $stack248 AT LINE 203 with ID [85c83a63-a701]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack243.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Forcing resample of {} because the current index interval ({}) is below min_index_interval ({})", $stack242) AT LINE 202 with ID [85c83a63-a701]
2020-08-25 10:54:57 [INFO] - 	 -> $stack220 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 212 with ID [68863ab8-7b8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack219 = newarray (java.lang.Object)[3] AT LINE 211 with ID [68863ab8-7b8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack219[0] = sstable AT LINE 211 with ID [68863ab8-7b8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack223 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(effectiveIndexInterval) AT LINE 212 with ID [68863ab8-7b8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack219[1] = $stack223 AT LINE 212 with ID [68863ab8-7b8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack225 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(maxIndexInterval) AT LINE 212 with ID [68863ab8-7b8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack219[2] = $stack225 AT LINE 212 with ID [68863ab8-7b8a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack220.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Forcing upsample of {} because the current index interval ({}) is above max_index_interval ({})", $stack219) AT LINE 211 with ID [68863ab8-7b8a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack176 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 234 with ID [a3f3adde-7329]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack176.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("SSTable {} is within thresholds of ideal sampling", sstable) AT LINE 234 with ID [a3f3adde-7329]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 262 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54 = newarray (java.lang.Object)[5] AT LINE 261 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54[0] = minIndexInterval#37 AT LINE 261 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58 = virtualinvoke minIndexInterval#37.<org.apache.cassandra.io.sstable.format.SSTableReader: int getIndexSummarySamplingLevel()>() AT LINE 262 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack58) AT LINE 262 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54[1] = $stack59 AT LINE 262 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128) AT LINE 262 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54[2] = $stack61 AT LINE 262 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62 = sstable#43.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry: int newSamplingLevel> AT LINE 263 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack62) AT LINE 263 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54[3] = $stack64 AT LINE 263 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128) AT LINE 263 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54[4] = $stack66 AT LINE 263 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack55.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Re-sampling index summary for {} from {}/{} to {}/{} of the original number of entries", $stack54) AT LINE 261 with ID [2d883721-c0d9]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack37 == 0 goto dk#7 = virtualinvoke metadata.<org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.DecoratedKey decorateKey(java.nio.ByteBuffer)>(key) at line 966 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack32 == 0 goto $stack33 = staticinvoke <org.apache.cassandra.thrift.CassandraServer$lambda_cas_0__20: com.google.common.base.Function bootstrap$()>() at line 961 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack31 == 0 goto staticinvoke <org.apache.cassandra.thrift.ThriftValidation: void validateKey(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>(metadata, key) at line 957 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CASResult cas(java.nio.ByteBuffer,java.lang.String,java.util.List,java.util.List,org.apache.cassandra.thrift.ConsistencyLevel,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 945 with ID [c7cc96fd-39db]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack25.<org.slf4j.Logger: void trace(java.lang.String)>("cas") AT LINE 945 with ID [c7cc96fd-39db]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 != 0 goto $stack18 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> at line 366 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if oldNode != null goto $stack8 = this.<org.apache.cassandra.locator.TokenMetadata: java.util.concurrent.locks.ReadWriteLock lock> at line 366 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack40 == 0 goto $stack7 = <org.apache.cassandra.locator.TokenMetadata: boolean $assertionsDisabled> at line 364 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.locator.TokenMetadata: void addReplaceTokens(java.util.Collection,java.net.InetAddress,java.net.InetAddress)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 371 with ID [7a280b3a-78f2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Replacing {} with {}", newNode, oldNode) AT LINE 371 with ID [7a280b3a-78f2]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.service.DataResolver$RepairMergeListener: void close()>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack10 != 0 goto $stack11 = new java.util.ArrayList at line 236 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.utils.MerkleTree: java.util.List difference(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree)> has 6 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 252 with ID [64b239aa-6191]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Digest mismatch detected among leaf nodes {}, {}", lnode, rnode) AT LINE 252 with ID [64b239aa-6191]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 257 with ID [5c15fc2f-fa08]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack35.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Digest mismatch detected, traversing trees [{}, {}]", ltree, rtree) AT LINE 257 with ID [5c15fc2f-fa08]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 260 with ID [2ca9fd86-a07e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack38.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Range {} fully inconsistent", active) AT LINE 260 with ID [2ca9fd86-a07e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack54 == null goto (branch) at line 248 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if cfname#16 == null goto (branch) at line 251 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack51 == null goto staticinvoke <org.apache.cassandra.io.util.FileUtils: void closeQuietly(java.io.Closeable)>(in) at line 248 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack67 > 1000 goto $stack65 = virtualinvoke futures.<java.util.ArrayDeque: java.lang.Object peek()>() at line 244 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack47 != 0 goto $stack48 = new java.util.ArrayDeque at line 203 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.cache.AutoSavingCache: int loadSaved()> has 16 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> start = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 188 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.cache.AutoSavingCache: org.slf4j.Logger logger> AT LINE 270 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = interfaceinvoke $stack20.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 270 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack21 == 0 goto return count AT LINE 270 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = <org.apache.cassandra.cache.AutoSavingCache: org.slf4j.Logger logger> AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = newarray (java.lang.Object)[3] AT LINE 271 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = $stack27 - start AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = virtualinvoke $stack26.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack28) AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack29) AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[0] = $stack30 AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(count) AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[1] = $stack32 AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[2] = dataPath AT LINE 272 with ID [405f2289-4349]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack23.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("completed reading ({} ms; {} keys) saved cache {}", $stack22) AT LINE 271 with ID [405f2289-4349]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if restorePointInTime >= precision goto targetTime#20 = virtualinvoke commitlog_commands.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("restore_point_in_time") at line 103 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 != 0 goto restorePointInTime = restorePointInTime + 1 at line 108 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if stream != null goto virtualinvoke commitlog_commands.<java.util.Properties: void load(java.io.InputStream)>(stream) at line 90 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogArchiver: org.apache.cassandra.db.commitlog.CommitLogArchiver construct()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = <org.apache.cassandra.db.commitlog.CommitLogArchiver: org.slf4j.Logger logger> AT LINE 92 with ID [e035c7cd-915e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack48.<org.slf4j.Logger: void trace(java.lang.String)>("No commitlog_archiving properties found; archive + pitr will be disabled") AT LINE 92 with ID [e035c7cd-915e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = <org.apache.cassandra.service.DigestResolver: org.slf4j.Logger logger> at line 83 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 != 0 goto (branch) at line 90 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if digest != null goto $stack25 = virtualinvoke digest.<java.nio.ByteBuffer: boolean equals(java.lang.Object)>(newDigest) at line 88 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.DigestResolver: void compareResponses()> has 11 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> start = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 79 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.service.DigestResolver: org.slf4j.Logger logger> AT LINE 95 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 95 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack13 == 0 goto return AT LINE 95 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = <org.apache.cassandra.service.DigestResolver: org.slf4j.Logger logger> AT LINE 96 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 96 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 96 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack18 = $stack17 - start AT LINE 96 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = virtualinvoke $stack16.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack18) AT LINE 96 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack19) AT LINE 96 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("resolve: {} ms.", $stack20) AT LINE 96 with ID [be9b6076-b47b]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack80 == 1 goto $stack81 = <java.lang.Void: java.lang.Class TYPE> at line 337 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l26 >= ctor goto (branch) at line 328 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack141 == 0 goto (branch) at line 275 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack132 >= 0 goto $stack133 = virtualinvoke problems.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ") at line 273 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if fullSource == 0 goto $stack117 = new org.apache.cassandra.exceptions.InvalidRequestException at line 297 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack116 == 0 goto (branch) at line 270 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack103 == 0 goto (branch) at line 310 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack71 != 0 goto i#57 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() at line 313 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack70 == 0 goto $stack71 = interfaceinvoke fullSource#49.<java.util.Set: boolean isEmpty()>() at line 306 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack106 != 0 goto $stack61 = <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: org.apache.cassandra.cql3.functions.UDFByteCodeVerifier udfByteCodeVerifier> at line 312 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= $stack44 goto $stack45 = new java.lang.StringBuilder at line 209 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String)> has 6 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: org.slf4j.Logger logger> AT LINE 253 with ID [ec888ddb-07e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51 = newarray (java.lang.Object)[3] AT LINE 253 with ID [ec888ddb-07e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51[0] = name AT LINE 253 with ID [ec888ddb-07e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51[1] = i#40 AT LINE 253 with ID [ec888ddb-07e3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51[2] = s AT LINE 253 with ID [ec888ddb-07e3]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack52.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Compiling Java source UDF \'{}\' as class \'{}\' using source:\n{}", $stack51) AT LINE 253 with ID [ec888ddb-07e3]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack32 == null goto $stack33 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: int getMeanColumns()>() at line 708 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: int get_count(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 696 with ID [0aeb48dd-1696]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack23.<org.slf4j.Logger: void trace(java.lang.String)>("get_count") AT LINE 696 with ID [0aeb48dd-1696]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 718 with ID [1a26c540-4327]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(averageColumnSize) AT LINE 718 with ID [1a26c540-4327]
2020-08-25 10:54:57 [INFO] - 	 -> $stack97 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(pageSize) AT LINE 718 with ID [1a26c540-4327]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack94.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("average row column size is {}; using pageSize of {}", $stack96, $stack97) AT LINE 718 with ID [1a26c540-4327]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlPreparedResult prepare_cql3_query(java.nio.ByteBuffer,org.apache.cassandra.thrift.Compression)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2362 with ID [f0b79ec8-1264]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String)>("prepare_cql3_query") AT LINE 2362 with ID [f0b79ec8-1264]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l14 >= l13 goto (branch) at line 466 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack65 == 0 goto (branch) at line 450 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if metadata != null goto this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> = keyspace at line 420 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if directories != null goto $stack20 = <org.apache.cassandra.db.ColumnFamilyStore: boolean $assertionsDisabled> at line 415 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: void <init>(org.apache.cassandra.db.Keyspace,java.lang.String,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.Directories,boolean,boolean,boolean)> has 6 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack98 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 475 with ID [d8dae9d4-a2e9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack97 = this.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 475 with ID [d8dae9d4-a2e9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94 = this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 475 with ID [d8dae9d4-a2e9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack95 = $stack94.<org.apache.cassandra.config.CFMetaData: org.apache.cassandra.schema.TableParams params> AT LINE 475 with ID [d8dae9d4-a2e9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96 = $stack95.<org.apache.cassandra.schema.TableParams: org.apache.cassandra.schema.SpeculativeRetryParam speculativeRetry> AT LINE 475 with ID [d8dae9d4-a2e9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack98.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("retryPolicy for {} is {}", $stack97, $stack96) AT LINE 475 with ID [d8dae9d4-a2e9]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack31 != 0 goto (branch) at line 383 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if pair != null goto $stack31 = interfaceinvoke flushes.<java.util.Map: boolean containsKey(java.lang.Object)>(dirtyCFId) at line 376 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack26 == 0 goto (branch) at line 373 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 == 0 goto $stack21 = interfaceinvoke flushes.<java.util.Map: java.util.Collection values()>() at line 371 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack13 = interfaceinvoke segments.<java.util.List: int size()>() at line 364 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: java.util.concurrent.Future flushDataFrom(java.util.List,boolean)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.slf4j.Logger logger> AT LINE 380 with ID [18ffa154-5527]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack41.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Marking clean CF {} that doesn\'t exist anymore", dirtyCFId) AT LINE 380 with ID [18ffa154-5527]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 == 0 goto $stack4 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> at line 234 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void setTokens(java.util.Collection)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 227 with ID [3ac2cf27-f57f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 227 with ID [3ac2cf27-f57f]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto staticinvoke <org.apache.cassandra.db.SystemKeyspace: void updateTokens(java.util.Collection)>(tokens) AT LINE 227 with ID [3ac2cf27-f57f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 228 with ID [3ac2cf27-f57f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Setting tokens to {}", tokens) AT LINE 228 with ID [3ac2cf27-f57f]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if size <= 65536 goto $stack2 = <org.apache.cassandra.utils.memory.BufferPool: io.netty.util.concurrent.FastThreadLocal localPool> at line 133 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if size != 0 goto (branch) at line 130 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if size >= 0 goto (branch) at line 127 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer maybeTakeFromPool(int,boolean)> has 8 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = <org.apache.cassandra.utils.memory.BufferPool: org.slf4j.Logger logger> AT LINE 135 with ID [3943d22f-5e77]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = interfaceinvoke $stack6.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 135 with ID [3943d22f-5e77]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack7 == 0 goto $stack8 = <org.apache.cassandra.utils.memory.BufferPool: io.netty.util.concurrent.FastThreadLocal localPool> AT LINE 135 with ID [3943d22f-5e77]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.utils.memory.BufferPool: org.slf4j.Logger logger> AT LINE 137 with ID [3943d22f-5e77]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = (long) size AT LINE 137 with ID [3943d22f-5e77]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack12) AT LINE 137 with ID [3943d22f-5e77]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(65536L) AT LINE 138 with ID [3943d22f-5e77]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Requested buffer size {} is bigger than {}, allocating directly", $stack15, $stack16) AT LINE 136 with ID [3943d22f-5e77]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: void signalCloseDone()>
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.AbstractReadExecutor: void makeRequests(org.apache.cassandra.db.ReadCommand,java.lang.Iterable)> has 14 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = <org.apache.cassandra.service.AbstractReadExecutor: org.slf4j.Logger logger> AT LINE 108 with ID [74efdd5c-e7fc]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = virtualinvoke readCommand.<org.apache.cassandra.db.ReadCommand: boolean isDigestQuery()>() AT LINE 108 with ID [74efdd5c-e7fc]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack25 == 0 goto $stack33 = "data" AT LINE 108 with ID [74efdd5c-e7fc]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = "digest" AT LINE 111 with ID [74efdd5c-e7fc]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= interfaceinvoke $stack23.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("reading {} from {}", $stack33, endpoint)] AT LINE 111 with ID [74efdd5c-e7fc]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = "data" AT LINE 111 with ID [74efdd5c-e7fc]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack23.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("reading {} from {}", $stack33, endpoint) AT LINE 108 with ID [74efdd5c-e7fc]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.service.AbstractReadExecutor: org.slf4j.Logger logger> AT LINE 116 with ID [b23dc006-ee01]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = virtualinvoke readCommand.<org.apache.cassandra.db.ReadCommand: boolean isDigestQuery()>() AT LINE 116 with ID [b23dc006-ee01]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack11 == 0 goto $stack17 = "data" AT LINE 116 with ID [b23dc006-ee01]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = "digest" AT LINE 119 with ID [b23dc006-ee01]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("reading {} locally", $stack17)] AT LINE 119 with ID [b23dc006-ee01]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = "data" AT LINE 119 with ID [b23dc006-ee01]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("reading {} locally", $stack17) AT LINE 116 with ID [b23dc006-ee01]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack19 == 0 goto $stack20 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> at line 511 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 == 0 goto $stack15 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> at line 497 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void makeRandomGossipDigest(java.util.List)> has 11 units and 7 lines
2020-08-25 10:54:57 [INFO] - 	 -> sb#5 = $stack17 AT LINE 510 with ID [f03fcb85-ab44]
2020-08-25 10:54:57 [INFO] - 	 -> endpoint#6 = interfaceinvoke gDigests.<java.util.List: java.util.Iterator iterator()>() AT LINE 511 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = interfaceinvoke endpoint#6.<java.util.Iterator: boolean hasNext()>() AT LINE 511 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> if $stack19 == 0 goto $stack20 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 511 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = interfaceinvoke endpoint#6.<java.util.Iterator: java.lang.Object next()>() AT LINE 518 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> gDigest = (org.apache.cassandra.gms.GossipDigest) $stack21 AT LINE 518 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke sb#5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(gDigest) AT LINE 513 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke sb#5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") AT LINE 514 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack19 = interfaceinvoke endpoint#6.<java.util.Iterator: boolean hasNext()>()] AT LINE 515 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 516 with ID [f03fcb85-ab44]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Gossip Digests are : {}", sb#5) AT LINE 516 with ID [f03fcb85-ab44]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack47 != 0 goto (branch) at line 252 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 == 0 goto $stack26 = new org.apache.cassandra.db.commitlog.CommitLogSegmentReader at line 220 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack73 == 0 goto $stack25 = specialinvoke this.<org.apache.cassandra.db.commitlog.CommitLogReader: boolean shouldSkipSegmentId(java.io.File,org.apache.cassandra.db.commitlog.CommitLogDescriptor,org.apache.cassandra.db.commitlog.CommitLogPosition)>(file, desc, minPosition) at line 211 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if desc != null goto $stack23 = desc.<org.apache.cassandra.db.commitlog.CommitLogDescriptor: long id> at line 198 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 >= 4 goto statusTracker#7 = desc.<org.apache.cassandra.db.commitlog.CommitLogDescriptor: long id> at line 174 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogReader: void readCommitLogSegment(org.apache.cassandra.db.commitlog.CommitLogReadHandler,java.io.File,org.apache.cassandra.db.commitlog.CommitLogPosition,int,boolean)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 264 with ID [46adb587-9dbd]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Finished reading {}", file) AT LINE 264 with ID [46adb587-9dbd]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if columnsPerRow > 0 goto meanRowsPerPartition = meanCellsPerPartition / columnsPerRow at line 647 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if meanCellsPerPartition > 0 goto $stack17 = this.<org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.db.ColumnFamilyStore baseCfs> at line 643 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 > 0 goto $stack15 = this.<org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.db.ColumnFamilyStore baseCfs> at line 639 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto targetPageSizeInBytes = 3.3554432E7 at line 634 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.index.SecondaryIndexManager: int calculateIndexingPageSize()> has 21 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = <org.apache.cassandra.index.SecondaryIndexManager: org.slf4j.Logger logger> AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = newarray (java.lang.Object)[7] AT LINE 655 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(pageSize) AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[0] = $stack31 AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = this.<org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = $stack32.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = $stack33.<org.apache.cassandra.config.CFMetaData: java.lang.String ksName> AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[1] = $stack34 AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = this.<org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = $stack35.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = $stack36.<org.apache.cassandra.config.CFMetaData: java.lang.String cfName> AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[2] = $stack37 AT LINE 656 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(meanPartitionSize) AT LINE 659 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[3] = $stack39 AT LINE 659 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(meanCellsPerPartition) AT LINE 660 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[4] = $stack41 AT LINE 660 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(meanRowsPerPartition) AT LINE 661 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[5] = $stack43 AT LINE 661 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(meanRowSize) AT LINE 662 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27[6] = $stack45 AT LINE 662 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack28.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Calculated page size {} for indexing {}.{} ({}/{}/{}/{})", $stack27) AT LINE 655 with ID [fbd4b5d3-4b14]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack18 == 0 goto virtualinvoke responseHandler.<org.apache.cassandra.service.TruncateResponseHandler: void get()>() at line 2522 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack10 == 0 goto $stack11 = <org.apache.cassandra.service.StorageService: org.apache.cassandra.service.StorageService instance> at line 2503 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageProxy: void truncateBlocking(java.lang.String,java.lang.String)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 2502 with ID [fa4214f3-5be2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Starting a blocking truncate operation on keyspace {}, CF {}", keyspace, cfname) AT LINE 2502 with ID [fa4214f3-5be2]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 == 0 goto (branch) at line 1269 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack61 == 0 goto ratio#13 = staticinvoke <java.lang.Math: float max(float,float)>(onHeap, offHeap) at line 1282 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore$FlushLargestColumnFamily: void run()> has 35 units and 12 lines
2020-08-25 10:54:57 [INFO] - 	 -> liveOnHeap = 0.0F AT LINE 1268 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> liveOffHeap = 0.0F AT LINE 1268 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> liveOnHeap = liveOnHeap + onHeap AT LINE 1296 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> liveOffHeap = liveOffHeap + offHeap AT LINE 1297 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtablePool MEMORY_POOL> AT LINE 1302 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = $stack16.<org.apache.cassandra.utils.memory.MemtablePool: org.apache.cassandra.utils.memory.MemtablePool$SubPool onHeap> AT LINE 1302 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> usedOnHeap#14 = virtualinvoke $stack17.<org.apache.cassandra.utils.memory.MemtablePool$SubPool: float usedRatio()>() AT LINE 1302 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtablePool MEMORY_POOL> AT LINE 1303 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = $stack19.<org.apache.cassandra.utils.memory.MemtablePool: org.apache.cassandra.utils.memory.MemtablePool$SubPool offHeap> AT LINE 1303 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> cfs#15 = virtualinvoke $stack20.<org.apache.cassandra.utils.memory.MemtablePool$SubPool: float usedRatio()>() AT LINE 1303 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = <org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtablePool MEMORY_POOL> AT LINE 1304 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = $stack22.<org.apache.cassandra.utils.memory.MemtablePool: org.apache.cassandra.utils.memory.MemtablePool$SubPool onHeap> AT LINE 1304 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> current#16 = virtualinvoke $stack23.<org.apache.cassandra.utils.memory.MemtablePool$SubPool: float reclaimingRatio()>() AT LINE 1304 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = <org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtablePool MEMORY_POOL> AT LINE 1305 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = $stack25.<org.apache.cassandra.utils.memory.MemtablePool: org.apache.cassandra.utils.memory.MemtablePool$SubPool offHeap> AT LINE 1305 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> onHeap = virtualinvoke $stack26.<org.apache.cassandra.utils.memory.MemtablePool$SubPool: float reclaimingRatio()>() AT LINE 1305 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = virtualinvoke largest.<org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtableAllocator getAllocator()>() AT LINE 1306 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = virtualinvoke $stack28.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator onHeap()>() AT LINE 1306 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> offHeap = virtualinvoke $stack29.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: float ownershipRatio()>() AT LINE 1306 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = virtualinvoke largest.<org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtableAllocator getAllocator()>() AT LINE 1307 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = virtualinvoke $stack31.<org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator offHeap()>() AT LINE 1307 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> ratio#13 = virtualinvoke $stack32.<org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: float ownershipRatio()>() AT LINE 1307 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = staticinvoke <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger access$600()>() AT LINE 1308 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = newarray (java.lang.Object)[5] AT LINE 1308 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = largest.<org.apache.cassandra.db.Memtable: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 1308 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35[0] = $stack36 AT LINE 1308 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = staticinvoke <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String access$800(float,float)>(usedOnHeap#14, cfs#15) AT LINE 1309 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35[1] = $stack39 AT LINE 1309 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = staticinvoke <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String access$800(float,float)>(liveOnHeap, liveOffHeap) AT LINE 1309 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35[2] = $stack41 AT LINE 1309 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = staticinvoke <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String access$800(float,float)>(current#16, onHeap) AT LINE 1310 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35[3] = $stack43 AT LINE 1310 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = staticinvoke <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String access$800(float,float)>(offHeap, ratio#13) AT LINE 1310 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35[4] = $stack45 AT LINE 1310 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Flushing largest {} to free up room. Used total: {}, live: {}, flushing: {}, this: {}", $stack35) AT LINE 1308 with ID [e93a0a31-05dd]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 != 0 goto $stack12 = new org.apache.cassandra.cache.KeyCacheKey at line 1531 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.SSTableReader: void cacheKey(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 1534 with ID [8b66ecec-c5a7]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Adding cache entry for {} -> {}", cacheKey, info) AT LINE 1534 with ID [8b66ecec-c5a7]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack40 == 0 goto (branch) at line 492 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack34 == 0 goto return candidates at line 489 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 != 0 goto (branch) at line 498 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack51 <= 0 goto (branch) at line 484 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack27 == 0 goto $stack28 = this.<org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 486 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 == 0 goto (branch) at line 478 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 <= 0 goto i = i + -1 at line 468 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i <= 0 goto return candidates at line 466 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= $stack60 goto $stack18 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations> at line 462 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i <= 0 goto $stack15 = this.<org.apache.cassandra.db.compaction.LeveledManifest: int[] compactionCounter> at line 457 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getOverlappingStarvedSSTables(int,java.util.Collection)> has 15 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 460 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = interfaceinvoke $stack16.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 460 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack17 == 0 goto $stack18 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations> AT LINE 460 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> i = 0 AT LINE 462 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack59 = this.<org.apache.cassandra.db.compaction.LeveledManifest: int[] compactionCounter> AT LINE 462 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60 = lengthof $stack59 AT LINE 462 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> if i >= $stack60 goto $stack18 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations> AT LINE 462 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 463 with ID [34af0b4d-b697]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i) AT LINE 463 with ID [34af0b4d-b697]
2020-08-25 10:54:57 [INFO] - 	 -> $stack67 = this.<org.apache.cassandra.db.compaction.LeveledManifest: int[] compactionCounter> AT LINE 463 with ID [34af0b4d-b697]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68 = $stack67[i] AT LINE 463 with ID [34af0b4d-b697]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack68) AT LINE 463 with ID [34af0b4d-b697]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack64.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("CompactionCounter: {}: {}", $stack66, $stack69) AT LINE 463 with ID [34af0b4d-b697]
2020-08-25 10:54:57 [INFO] - 	 -> i = i + 1 AT LINE 462 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack59 = this.<org.apache.cassandra.db.compaction.LeveledManifest: int[] compactionCounter>] AT LINE 462 with ID [34af0b4d-b697, UNKNOWN_ID]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 == 0 goto return at line 152 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void asyncRemoveFromBatchlog(java.util.Collection,java.util.UUID,long)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: org.slf4j.Logger logger> AT LINE 154 with ID [bac74c6e-80ad]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Sending legacy batchlog remove request {} to {}", uuid, target) AT LINE 154 with ID [bac74c6e-80ad]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.OutboundTcpConnection: void disconnect()> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 411 with ID [b0f57ecc-a2d0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = this.<org.apache.cassandra.net.OutboundTcpConnection: org.apache.cassandra.net.OutboundTcpConnectionPool poolReference> AT LINE 411 with ID [b0f57ecc-a2d0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = virtualinvoke $stack4.<org.apache.cassandra.net.OutboundTcpConnectionPool: java.net.InetAddress endPoint()>() AT LINE 411 with ID [b0f57ecc-a2d0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Socket to {} closed", $stack7) AT LINE 411 with ID [b0f57ecc-a2d0]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.slf4j.Logger logger> AT LINE 89 with ID [e09136fb-6f82]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = this.<org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.compaction.LeveledManifest manifest> AT LINE 89 with ID [e09136fb-6f82]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Created {}", $stack10) AT LINE 89 with ID [e09136fb-6f82]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack47 == 0 goto (branch) at line 276 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l18 >= l17 goto $stack41 = this.<org.apache.cassandra.service.GCInspector: java.util.concurrent.atomic.AtomicReference state> at line 258 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.GCInspector: void handleNotification(javax.management.Notification,java.lang.Object)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack60 = <org.apache.cassandra.service.GCInspector: org.slf4j.Logger logger> AT LINE 285 with ID [0771fd54-1ed7]
2020-08-25 10:54:57 [INFO] - 	 -> $stack61 = interfaceinvoke $stack60.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 285 with ID [0771fd54-1ed7]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack61 == 0 goto $stack62 = <org.apache.cassandra.service.GCInspector: long STAT_THRESHOLD> AT LINE 285 with ID [0771fd54-1ed7]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = <org.apache.cassandra.service.GCInspector: org.slf4j.Logger logger> AT LINE 286 with ID [0771fd54-1ed7]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack66.<org.slf4j.Logger: void trace(java.lang.String)>(prev#12) AT LINE 286 with ID [0771fd54-1ed7]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack9 == 0 goto $stack10 = this.<org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 107 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: java.util.List getNextBackgroundSSTables(int)> has 6 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 117 with ID [69652125-6eac]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void debug(java.lang.String)>("TWCS expired check sufficiently far in the past, checking for fully expired SSTables") AT LINE 117 with ID [69652125-6eac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 124 with ID [dfe8c4ed-cd71]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void debug(java.lang.String)>("TWCS skipping check for fully expired SSTables") AT LINE 124 with ID [dfe8c4ed-cd71]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 132 with ID [f439d90a-0fb6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack31.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Including expired sstables: {}", expired) AT LINE 132 with ID [f439d90a-0fb6]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 == 0 goto (branch) at line 358 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack13 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> at line 352 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 == 0 goto $stack9 = this.<org.apache.cassandra.auth.jmx.AuthorizationProxy: java.util.function.Function queryNames> at line 340 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean checkPattern(javax.management.ObjectName,java.util.Set)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> AT LINE 367 with ID [76fca6e0-6e80]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Subject does not have sufficient permissions on all MBeans matching the target pattern {}", target) AT LINE 367 with ID [76fca6e0-6e80]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack18 <= 0 goto return 0 at line 279 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogReader: boolean shouldSkipSegmentId(java.io.File,org.apache.cassandra.db.commitlog.CommitLogDescriptor,org.apache.cassandra.db.commitlog.CommitLogPosition)> has 15 units and 5 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 274 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = newarray (java.lang.Object)[4] AT LINE 273 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = virtualinvoke file.<java.io.File: java.lang.String getPath()>() AT LINE 274 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4[0] = $stack8 AT LINE 274 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = desc.<org.apache.cassandra.db.commitlog.CommitLogDescriptor: int version> AT LINE 275 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack9) AT LINE 275 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4[1] = $stack11 AT LINE 275 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = virtualinvoke desc.<org.apache.cassandra.db.commitlog.CommitLogDescriptor: int getMessagingVersion()>() AT LINE 276 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13) AT LINE 276 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4[2] = $stack14 AT LINE 276 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = desc.<org.apache.cassandra.db.commitlog.CommitLogDescriptor: org.apache.cassandra.config.ParameterizedClass compression> AT LINE 276 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack4[3] = $stack15 AT LINE 276 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Reading {} (CL version {}, messaging version {}, compression {})", $stack4) AT LINE 273 with ID [b4a770b7-8038]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 281 with ID [cb017891-71da]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Skipping read of fully-flushed {}", file) AT LINE 281 with ID [cb017891-71da]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack75 >= 2 goto return candidates#8 at line 701 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack82 != 0 goto candidates#8 = staticinvoke <com.google.common.collect.Sets: com.google.common.collect.Sets$SetView union(java.util.Set,java.util.Set)>(candidates#8, l1overlapping#27) at line 697 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack80 <= 0 goto $stack81 = staticinvoke <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Set overlapping(java.util.Collection,java.lang.Iterable)>(candidates#8, compactingL0) at line 695 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack97 <= 32 goto (branch) at line 680 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack96 == 0 goto $stack97 = interfaceinvoke candidates#8.<java.util.Set: int size()>() at line 673 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack121 <= 0 goto (branch) at line 646 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack61 == 0 goto $stack62 = new java.util.HashSet at line 640 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack42 == 0 goto firstCompactingKey#32 = firstCompactingKey#32 + 1 at line 729 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if firstCompactingKey#32 >= $stack28 goto $stack29 = staticinvoke <java.util.Collections: java.util.List emptyList()>() at line 723 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack51 <= 0 goto lastCompactingKey#29 = lastCompactingKey#29 + 1 at line 713 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if level != 0 goto $stack20 = virtualinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List getLevel(int)>(level) at line 634 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack130 == 0 goto $stack14 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> at line 644 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getCandidatesFor(int)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 630 with ID [99431fe3-6ed2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(level) AT LINE 630 with ID [99431fe3-6ed2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Choosing candidates for L{}", $stack16) AT LINE 630 with ID [99431fe3-6ed2]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.index.internal.CassandraIndex: void insert(java.nio.ByteBuffer,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.utils.concurrent.OpOrder$Group)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.index.internal.CassandraIndex: org.slf4j.Logger logger> AT LINE 532 with ID [4cc79e39-3a02]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Inserted entry into index for value {}", valueKey) AT LINE 532 with ID [4cc79e39-3a02]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 == 0 goto l7 = l7 + 1 at line 169 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l7 >= l6 goto return 1 at line 168 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == 0 goto l3 = l3 + 1 at line 164 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l3 >= l2 goto $stack10 = <org.apache.cassandra.cql3.functions.UDFunction: org.slf4j.Logger logger> at line 163 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack9 == 0 goto l1 = <org.apache.cassandra.cql3.functions.UDFunction: java.lang.String[] whitelistedPatterns> at line 160 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.cql3.functions.UDFunction: boolean secureResource(java.lang.String)> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.cql3.functions.UDFunction: org.slf4j.Logger logger> AT LINE 171 with ID [445d7f41-5794]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("access denied: resource {}", resource) AT LINE 171 with ID [445d7f41-5794]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.cql3.functions.UDFunction: org.slf4j.Logger logger> AT LINE 178 with ID [30fd7110-ef18]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("access denied: resource {}", resource) AT LINE 178 with ID [30fd7110-ef18]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 >= 0 goto return 0 at line 429 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack54 <= maxTargetVersion goto $stack55 = this.<org.apache.cassandra.net.OutboundTcpConnection: int targetVersion> at line 480 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if maxTargetVersion != -2147483648 goto $stack50 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() at line 466 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.OutboundTcpConnection: boolean connect()> has 23 units and 7 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 425 with ID [3db0d327-4415]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = this.<org.apache.cassandra.net.OutboundTcpConnection: org.apache.cassandra.net.OutboundTcpConnectionPool poolReference> AT LINE 425 with ID [3db0d327-4415]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = virtualinvoke $stack10.<org.apache.cassandra.net.OutboundTcpConnectionPool: java.net.InetAddress endPoint()>() AT LINE 425 with ID [3db0d327-4415]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Attempting to connect to {}", $stack13) AT LINE 425 with ID [3db0d327-4415]
2020-08-25 10:54:57 [INFO] - 	 -> $stack108 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 471 with ID [a4d7d66f-7f6b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack110 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(maxTargetVersion) AT LINE 471 with ID [a4d7d66f-7f6b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack108.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Target max version is {}; no version information yet, will retry", $stack110) AT LINE 471 with ID [a4d7d66f-7f6b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 482 with ID [5e73ca1a-c82f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack98 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(maxTargetVersion) AT LINE 482 with ID [5e73ca1a-c82f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack96.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Target max version is {}; will reconnect with that version", $stack98) AT LINE 482 with ID [5e73ca1a-c82f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack91 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 506 with ID [bf99984a-f886]
2020-08-25 10:54:57 [INFO] - 	 -> $stack93 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(maxTargetVersion) AT LINE 506 with ID [bf99984a-f886]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94 = this.<org.apache.cassandra.net.OutboundTcpConnection: int targetVersion> AT LINE 506 with ID [bf99984a-f886]
2020-08-25 10:54:57 [INFO] - 	 -> $stack95 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack94) AT LINE 506 with ID [bf99984a-f886]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack91.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Detected higher max version {} (using {}); will reconnect when queued messages are done", $stack93, $stack95) AT LINE 505 with ID [bf99984a-f886]
2020-08-25 10:54:57 [INFO] - 	 -> $stack67 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 515 with ID [ba99fc10-f602]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = this.<org.apache.cassandra.net.OutboundTcpConnection: org.apache.cassandra.net.OutboundTcpConnectionPool poolReference> AT LINE 515 with ID [ba99fc10-f602]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69 = virtualinvoke $stack66.<org.apache.cassandra.net.OutboundTcpConnectionPool: java.net.InetAddress endPoint()>() AT LINE 515 with ID [ba99fc10-f602]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack67.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Upgrading OutputStream to {} to be compressed", $stack69) AT LINE 515 with ID [ba99fc10-f602]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 533 with ID [6c7983f3-269b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack61 = this.<org.apache.cassandra.net.OutboundTcpConnection: org.apache.cassandra.net.OutboundTcpConnectionPool poolReference> AT LINE 533 with ID [6c7983f3-269b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = virtualinvoke $stack61.<org.apache.cassandra.net.OutboundTcpConnectionPool: java.net.InetAddress endPoint()>() AT LINE 533 with ID [6c7983f3-269b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack62.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Done connecting to {}", $stack64) AT LINE 533 with ID [6c7983f3-269b]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.ConnectionHandler: com.google.common.util.concurrent.ListenableFuture close()> has 6 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.streaming.ConnectionHandler: org.slf4j.Logger logger> AT LINE 111 with ID [dce38fd3-f82d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = this.<org.apache.cassandra.streaming.ConnectionHandler: org.apache.cassandra.streaming.StreamSession session> AT LINE 111 with ID [dce38fd3-f82d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = virtualinvoke $stack3.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 111 with ID [dce38fd3-f82d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = this.<org.apache.cassandra.streaming.ConnectionHandler: org.apache.cassandra.streaming.StreamSession session> AT LINE 111 with ID [dce38fd3-f82d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = $stack7.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 111 with ID [dce38fd3-f82d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("[Stream #{}] Closing stream connection handler on {}", $stack6, $stack8) AT LINE 111 with ID [dce38fd3-f82d]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack21 != 0 goto cfm = staticinvoke <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.config.CFMetaData fromThriftForUpdate(org.apache.cassandra.thrift.CfDef,org.apache.cassandra.config.CFMetaData)>(cf_def, oldCfm) at line 2071 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 != 0 goto $stack21 = virtualinvoke oldCfm.<org.apache.cassandra.config.CFMetaData: boolean isThriftCompatible()>() at line 2068 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto $stack18 = cf_def.<org.apache.cassandra.thrift.CfDef: java.lang.String keyspace> at line 2066 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if oldCfm != null goto $stack16 = virtualinvoke oldCfm.<org.apache.cassandra.config.CFMetaData: boolean isView()>() at line 2063 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 != null goto $stack8 = virtualinvoke this.<org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.ThriftClientState state()>() at line 2058 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_update_column_family(org.apache.cassandra.thrift.CfDef)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2053 with ID [13c88b03-38d9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String)>("update_column_family") AT LINE 2053 with ID [13c88b03-38d9]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard: void handleReplayedSegment(java.io.File)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard: org.slf4j.Logger logger> AT LINE 72 with ID [1d234970-6138]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("(Unopened) segment {} is no longer needed and will be deleted now", file) AT LINE 72 with ID [1d234970-6138]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.SystemKeyspace: void lambda$null$4(java.io.File)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack1 = <org.apache.cassandra.db.SystemKeyspace: org.slf4j.Logger logger> AT LINE 1433 with ID [31c965cd-087f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Checking {} for legacy files", cfdir) AT LINE 1433 with ID [31c965cd-087f]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.ReadCallback: org.apache.cassandra.db.partitions.PartitionIterator get()> has 11 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 146 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = interfaceinvoke $stack5.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 146 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack6 == 0 goto return result AT LINE 146 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 147 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 147 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 147 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = this.<org.apache.cassandra.service.ReadCallback: long queryStartNanoTime> AT LINE 147 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = $stack10 - $stack11 AT LINE 147 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = virtualinvoke $stack9.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack12) AT LINE 147 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack13) AT LINE 147 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Read: {} ms.", $stack14) AT LINE 147 with ID [8d7d7d0c-d15e]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.index.internal.CassandraIndex: void deleteStaleEntry(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.utils.concurrent.OpOrder$Group)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.index.internal.CassandraIndex: org.slf4j.Logger logger> AT LINE 514 with ID [3b16d8a4-eed9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Removed index entry for stale value {}", indexKey) AT LINE 514 with ID [3b16d8a4-eed9]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 >= 2 goto tokens = specialinvoke this.<org.apache.cassandra.service.StorageService: java.util.Collection getTokensFor(java.net.InetAddress)>(endpoint) at line 2467 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void handleStateLeft(java.net.InetAddress,java.lang.String[])> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2463 with ID [d57f68c6-391e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = interfaceinvoke $stack6.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2463 with ID [d57f68c6-391e]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack7 == 0 goto $stack8 = virtualinvoke this.<org.apache.cassandra.service.StorageService: long extractExpireTime(java.lang.String[])>(pieces) AT LINE 2463 with ID [d57f68c6-391e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2464 with ID [d57f68c6-391e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} state left, tokens {}", endpoint, tokens) AT LINE 2464 with ID [d57f68c6-391e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if value != null goto return value at line 107 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.locator.PropertyFileSnitch: java.lang.String[] getRawEndpointInfo(java.net.InetAddress)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.locator.PropertyFileSnitch: org.slf4j.Logger logger> AT LINE 109 with ID [501b101c-2258]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Could not find end point information for {}, will use default", endpoint) AT LINE 109 with ID [501b101c-2258]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= numMutations goto $stack27 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> at line 113 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: boolean apply(org.apache.cassandra.cql3.UntypedResultSet$Row,long)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: org.slf4j.Logger logger> AT LINE 107 with ID [24f8558a-3422]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(timestamp) AT LINE 107 with ID [24f8558a-3422]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Converting mutation at {}", $stack22) AT LINE 107 with ID [24f8558a-3422]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 == 0 goto $stack19 = virtualinvoke consistency_level.<org.apache.cassandra.thrift.ConsistencyLevel: java.lang.String name()>() at line 1300 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: void batch_mutate(java.util.Map,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1310 with ID [c1b5d309-1cd1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String)>("batch_mutate") AT LINE 1310 with ID [c1b5d309-1cd1]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 == 0 goto return at line 114 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack9 == 0 goto (branch) at line 116 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack4 == 0 goto $stack5 = this.<org.apache.cassandra.db.compaction.CompactionController: org.apache.cassandra.utils.concurrent.Refs overlappingSSTables> at line 108 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack3 == 0 goto $stack4 = virtualinvoke this.<org.apache.cassandra.db.compaction.CompactionController: boolean ignoreOverlaps()>() at line 101 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionController: void maybeRefreshOverlaps()> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.db.compaction.CompactionController: org.slf4j.Logger logger> AT LINE 103 with ID [6a68ea55-7b51]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("not refreshing overlaps - running with -D{}=true", "cassandra.never_purge_tombstones") AT LINE 103 with ID [6a68ea55-7b51]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.compaction.CompactionController: org.slf4j.Logger logger> AT LINE 110 with ID [ad11acfa-57c9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void debug(java.lang.String)>("not refreshing overlaps - running with ignoreOverlaps activated") AT LINE 110 with ID [ad11acfa-57c9]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack137 != 0 goto $stack30 = <org.apache.cassandra.io.sstable.metadata.MetadataType: org.apache.cassandra.io.sstable.metadata.MetadataType VALIDATION> at line 438 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack155 != 0 goto $stack27 = <org.apache.cassandra.io.sstable.format.SSTableReader: boolean $assertionsDisabled> at line 426 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader openForBatch(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData)> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> fileLength = virtualinvoke $stack43.<java.io.File: long length()>() AT LINE 433 with ID [6d384cf1-3fd0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 434 with ID [6d384cf1-3fd0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(fileLength) AT LINE 434 with ID [6d384cf1-3fd0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack47.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Opening {} ({})", descriptor, $stack49) AT LINE 434 with ID [6d384cf1-3fd0]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 != 0 goto $stack8 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> at line 107 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack6 == 0 goto $stack7 = staticinvoke <org.apache.cassandra.service.MigrationManager: boolean shouldPullSchemaFrom(java.net.InetAddress)>(endpoint) at line 97 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack4 != null goto $stack5 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> at line 91 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.MigrationManager: void maybeScheduleSchemaPull(java.util.UUID,java.net.InetAddress)> has 32 units and 10 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 93 with ID [3504268c-3b64]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack50.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Not pulling schema from {}, because local schama version is not known yet", endpoint) AT LINE 93 with ID [3504268c-3b64]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 102 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = newarray (java.lang.Object)[4] AT LINE 99 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37[0] = endpoint AT LINE 99 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> AT LINE 102 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = virtualinvoke $stack38.<org.apache.cassandra.config.Schema: java.util.UUID getRealVersion()>() AT LINE 102 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>($stack42) AT LINE 102 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37[1] = $stack43 AT LINE 102 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> AT LINE 103 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack46 = virtualinvoke $stack44.<org.apache.cassandra.config.Schema: java.util.UUID getAltVersion()>() AT LINE 103 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>($stack46) AT LINE 103 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37[2] = $stack47 AT LINE 103 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>(theirVersion) AT LINE 104 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37[3] = $stack49 AT LINE 104 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Not pulling schema from {}, because schema versions match: local/real={}, local/compatible={}, remote={}", $stack37) AT LINE 99 with ID [b89343b3-39e2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 109 with ID [9b6304b7-aadf]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack36.<org.slf4j.Logger: void debug(java.lang.String)>("Not pulling schema because versions match or shouldPullSchemaFrom returned false") AT LINE 109 with ID [9b6304b7-aadf]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.service.MigrationManager: org.slf4j.Logger logger> AT LINE 119 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = newarray (java.lang.Object)[4] AT LINE 116 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10[0] = endpoint AT LINE 116 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> AT LINE 119 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = virtualinvoke $stack11.<org.apache.cassandra.config.Schema: java.util.UUID getRealVersion()>() AT LINE 119 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>($stack15) AT LINE 119 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10[1] = $stack16 AT LINE 119 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema instance> AT LINE 120 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = virtualinvoke $stack17.<org.apache.cassandra.config.Schema: java.util.UUID getAltVersion()>() AT LINE 120 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>($stack19) AT LINE 120 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10[2] = $stack20 AT LINE 120 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>(theirVersion) AT LINE 121 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10[3] = $stack22 AT LINE 121 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Immediately submitting migration task for {}, schema versions: local/real={}, local/compatible={}, remote={}", $stack10) AT LINE 116 with ID [4c5f6c80-2c3f]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack9 != 0 goto tStart = staticinvoke <java.lang.System: long nanoTime()>() at line 327 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.cql3.functions.UDFunction: java.lang.Object executeForAggregate(org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack3 != 0 goto $stack4 = this.<org.apache.cassandra.auth.CassandraRoleManager$4: org.apache.cassandra.auth.CassandraRoleManager this$0> at line 386 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.auth.CassandraRoleManager$4: void run()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = staticinvoke <org.apache.cassandra.auth.CassandraRoleManager: org.slf4j.Logger access$100()>() AT LINE 388 with ID [0007142a-fc0a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void trace(java.lang.String)>("Not all nodes are upgraded to a version that supports Roles yet, rescheduling setup task") AT LINE 388 with ID [0007142a-fc0a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack61 <= $stack60 goto $stack15 = staticinvoke <org.apache.cassandra.net.CompactEndpointSerializationHelper: java.net.InetAddress deserialize(java.io.DataInput)>(in) at line 180 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.IncomingTcpConnection: void receiveMessages()> has 14 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = <org.apache.cassandra.net.IncomingTcpConnection: org.slf4j.Logger logger> AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = newarray (java.lang.Object)[3] AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = this.<org.apache.cassandra.net.IncomingTcpConnection: java.net.InetAddress 'from'> AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19[0] = $stack20 AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(maxVersion) AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19[1] = $stack24 AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = this.<org.apache.cassandra.net.IncomingTcpConnection: java.net.InetAddress 'from'> AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = virtualinvoke $stack26.<org.apache.cassandra.net.MessagingService: int getVersion(java.net.InetAddress)>($stack27) AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28) AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19[2] = $stack29 AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Set version for {} to {} (will use {})", $stack19) AT LINE 153 with ID [99b8e53c-a16c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = <org.apache.cassandra.net.IncomingTcpConnection: org.slf4j.Logger logger> AT LINE 157 with ID [38a5c23b-7da8]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack45.<org.slf4j.Logger: void trace(java.lang.String)>("Upgrading incoming connection to be compressed") AT LINE 157 with ID [38a5c23b-7da8]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.config.CFMetaData: boolean apply(org.apache.cassandra.config.CFMetaData)> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = <org.apache.cassandra.config.CFMetaData: org.slf4j.Logger logger> AT LINE 893 with ID [90f102fc-987b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("applying {} to {}", cfm, this) AT LINE 893 with ID [90f102fc-987b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = <org.apache.cassandra.config.CFMetaData: org.slf4j.Logger logger> AT LINE 926 with ID [d9ff3f6c-acff]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("application result is {}", this) AT LINE 926 with ID [d9ff3f6c-acff]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack10 == 0 goto staticinvoke <org.apache.cassandra.service.MigrationManager: void announceColumnFamilyDrop(java.lang.String,java.lang.String)>(keyspace, column_family) at line 1954 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_drop_column_family(java.lang.String)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1944 with ID [abce50c2-2f93]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String)>("drop_column_family") AT LINE 1944 with ID [abce50c2-2f93]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.locator.AbstractReplicationStrategy: java.util.ArrayList getCachedEndpoints(org.apache.cassandra.dht.Token)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.locator.AbstractReplicationStrategy: org.slf4j.Logger logger> AT LINE 87 with ID [b1cc0c25-8c7d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String)>("clearing cached endpoints") AT LINE 87 with ID [b1cc0c25-8c7d]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if rdiff != 1 goto $stack65 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> at line 355 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if ldiff != 1 goto (branch) at line 349 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if rdiff != 1 goto (branch) at line 353 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack31 == 0 goto $stack32 = new org.apache.cassandra.utils.MerkleTree$TreeDifference at line 290 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack15 != 127 goto $stack16 = virtualinvoke ltree.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.IPartitioner partitioner()>() at line 280 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.utils.MerkleTree: int differenceHelper(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree,java.util.List,org.apache.cassandra.utils.MerkleTree$TreeRange)> has 64 units and 10 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 289 with ID [3547f107-0732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = newarray (java.lang.Object)[3] AT LINE 289 with ID [3547f107-0732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 289 with ID [3547f107-0732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack25) AT LINE 289 with ID [3547f107-0732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24[0] = $stack29 AT LINE 289 with ID [3547f107-0732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24[1] = midpoint AT LINE 289 with ID [3547f107-0732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24[2] = active AT LINE 289 with ID [3547f107-0732]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("({}) No sane midpoint ({}) for range {} , marking whole range as inconsistent", $stack24) AT LINE 289 with ID [3547f107-0732]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = newarray (java.lang.Object)[5] AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack43) AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[0] = $stack47 AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[1] = left AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[2] = right AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[3] = active AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42[4] = midpoint AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack44.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("({}) Hashing sub-ranges [{}, {}] for {} divided by midpoint {}", $stack42) AT LINE 295 with ID [b75cc0e9-e4a1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack126 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack124 = newarray (java.lang.Object)[4] AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack125 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack129 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack125) AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack124[0] = $stack129 AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack124[1] = left AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack124[2] = lnode AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack124[3] = rnode AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack126.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("({}) Inconsistent digest on left sub-range {}: [{}, {}]", $stack124) AT LINE 311 with ID [ffff809d-b57d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack105 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 317 with ID [da3e643e-f6f9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack104 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 317 with ID [da3e643e-f6f9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack107 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack104) AT LINE 317 with ID [da3e643e-f6f9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack105.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("({}) Left sub-range fully inconsistent {}", $stack107, right) AT LINE 317 with ID [da3e643e-f6f9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack96 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94 = newarray (java.lang.Object)[4] AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack95 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack99 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack95) AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94[0] = $stack99 AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94[1] = right AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94[2] = lnode AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94[3] = rnode AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack96.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("({}) Inconsistent digest on right sub-range {}: [{}, {}]", $stack94) AT LINE 333 with ID [72acd5a2-ff2e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack87 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 339 with ID [6fda94da-7570]
2020-08-25 10:54:57 [INFO] - 	 -> $stack86 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 339 with ID [6fda94da-7570]
2020-08-25 10:54:57 [INFO] - 	 -> $stack89 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack86) AT LINE 339 with ID [6fda94da-7570]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack87.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("({}) Right sub-range fully inconsistent {}", $stack89, right) AT LINE 339 with ID [6fda94da-7570]
2020-08-25 10:54:57 [INFO] - 	 -> $stack82 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 346 with ID [cf73b671-07c2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack80 = newarray (java.lang.Object)[3] AT LINE 346 with ID [cf73b671-07c2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack81 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 346 with ID [cf73b671-07c2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack85 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack81) AT LINE 346 with ID [cf73b671-07c2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack80[0] = $stack85 AT LINE 346 with ID [cf73b671-07c2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack80[1] = left AT LINE 346 with ID [cf73b671-07c2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack80[2] = right AT LINE 346 with ID [cf73b671-07c2]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack82.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("({}) Fully inconsistent range [{}, {}]", $stack80) AT LINE 346 with ID [cf73b671-07c2]
2020-08-25 10:54:57 [INFO] - 	 -> $stack74 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 351 with ID [d23d908a-95ca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack73 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 351 with ID [d23d908a-95ca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack76 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack73) AT LINE 351 with ID [d23d908a-95ca]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack74.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("({}) Adding left sub-range to diff as fully inconsistent {}", $stack76, left) AT LINE 351 with ID [d23d908a-95ca]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 357 with ID [414263f3-748f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 357 with ID [414263f3-748f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack68) AT LINE 357 with ID [414263f3-748f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack69.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("({}) Adding right sub-range to diff as fully inconsistent {}", $stack71, right) AT LINE 357 with ID [414263f3-748f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack65 = <org.apache.cassandra.utils.MerkleTree: org.slf4j.Logger logger> AT LINE 361 with ID [8e3de23d-d621]
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = active.<org.apache.cassandra.utils.MerkleTree$TreeRange: byte depth> AT LINE 361 with ID [8e3de23d-d621]
2020-08-25 10:54:57 [INFO] - 	 -> $stack67 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack64) AT LINE 361 with ID [8e3de23d-d621]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack65.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("({}) Range {} partially inconstent", $stack67, active) AT LINE 361 with ID [8e3de23d-d621]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.tracing.Tracing: void stopSession()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack6 = <org.apache.cassandra.tracing.Tracing: org.slf4j.Logger logger> AT LINE 188 with ID [e13ba245-494c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String)>("request complete") AT LINE 188 with ID [e13ba245-494c]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if localEpStatePtr == null goto (branch) at line 87 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack30 == 0 goto $stack31 = new org.apache.cassandra.net.MessageOut at line 83 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack58 != 0 goto $stack59 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> at line 73 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack26 == 0 goto $stack27 = interfaceinvoke epStateMap.<java.util.Map: int size()>() at line 54 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack73 != 0 goto $stack16 = message.<org.apache.cassandra.net.MessageIn: java.lang.Object payload> at line 60 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.GossipDigestAckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 31 units and 11 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 40 with ID [265152be-e3ad]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 40 with ID [265152be-e3ad]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack13 == 0 goto $stack14 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 40 with ID [265152be-e3ad]
2020-08-25 10:54:57 [INFO] - 	 -> $stack83 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 41 with ID [265152be-e3ad]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack83.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received a GossipDigestAckMessage from {}", from) AT LINE 41 with ID [265152be-e3ad]
2020-08-25 10:54:57 [INFO] - 	 -> $stack80 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 44 with ID [324d702c-f735]
2020-08-25 10:54:57 [INFO] - 	 -> $stack81 = interfaceinvoke $stack80.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 44 with ID [324d702c-f735]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack81 == 0 goto return AT LINE 44 with ID [324d702c-f735]
2020-08-25 10:54:57 [INFO] - 	 -> $stack82 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 45 with ID [324d702c-f735]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack82.<org.slf4j.Logger: void trace(java.lang.String)>("Ignoring GossipDigestAckMessage because gossip is disabled") AT LINE 45 with ID [324d702c-f735]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 52 with ID [f436c549-4626]
2020-08-25 10:54:57 [INFO] - 	 -> $stack21 = interfaceinvoke gDigestList.<java.util.List: int size()>() AT LINE 52 with ID [f436c549-4626]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack21) AT LINE 52 with ID [f436c549-4626]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = interfaceinvoke epStateMap.<java.util.Map: int size()>() AT LINE 52 with ID [f436c549-4626]
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack23) AT LINE 52 with ID [f436c549-4626]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Received ack with {} digests and {} states", $stack22, $stack24) AT LINE 52 with ID [f436c549-4626]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 56 with ID [10579964-52dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack63 = interfaceinvoke $stack62.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 56 with ID [10579964-52dd]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack63 == 0 goto $stack64 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 56 with ID [10579964-52dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 57 with ID [10579964-52dd]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack70.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Received an ack from {}, which may trigger exit from shadow round", from) AT LINE 57 with ID [10579964-52dd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 71 with ID [c7451974-fd15]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54 = interfaceinvoke $stack53.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 71 with ID [c7451974-fd15]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack54 == 0 goto return AT LINE 71 with ID [c7451974-fd15]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 72 with ID [c7451974-fd15]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack55.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Ignoring unrequested GossipDigestAck from {}", from) AT LINE 72 with ID [c7451974-fd15]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 94 with ID [5bc4aa4d-f074]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = interfaceinvoke $stack35.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 94 with ID [5bc4aa4d-f074]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack36 == 0 goto $stack37 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() AT LINE 94 with ID [5bc4aa4d-f074]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 95 with ID [5bc4aa4d-f074]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack38.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending a GossipDigestAck2Message to {}", from) AT LINE 95 with ID [5bc4aa4d-f074]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if localEpStatePtr == null goto $stack36 = <org.apache.cassandra.gms.FailureDetector: org.apache.cassandra.gms.IFailureDetector instance> at line 1139 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void applyStateLocally(java.util.Map)> has 46 units and 10 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack97 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1127 with ID [92e9f31e-00e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack98 = interfaceinvoke $stack97.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1127 with ID [92e9f31e-00e8]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack98 == 0 goto $stack15 = interfaceinvoke any30.<java.util.Iterator: boolean hasNext()>() AT LINE 1127 with ID [92e9f31e-00e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack99 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1128 with ID [92e9f31e-00e8]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack99.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Ignoring gossip for {} because it is quarantined", ep) AT LINE 1128 with ID [92e9f31e-00e8]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack15 = interfaceinvoke any30.<java.util.Iterator: boolean hasNext()>()] AT LINE 1128 with ID [92e9f31e-00e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1144 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = interfaceinvoke $stack43.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1144 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack44 == 0 goto $stack46 = (long) remoteGeneration AT LINE 1144 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack88 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1145 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack87 = newarray (java.lang.Object)[3] AT LINE 1145 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack87[0] = ep AT LINE 1145 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack91 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localGeneration) AT LINE 1145 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack87[1] = $stack91 AT LINE 1145 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack93 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remoteGeneration) AT LINE 1145 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack87[2] = $stack93 AT LINE 1145 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack88.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{} local generation {}, remote generation {}", $stack87) AT LINE 1145 with ID [cc0d6288-7129]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1155 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack69 = interfaceinvoke $stack68.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1155 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack69 == 0 goto specialinvoke this.<org.apache.cassandra.gms.Gossiper: void handleMajorStateChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>(ep, remoteState) AT LINE 1155 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1156 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70 = newarray (java.lang.Object)[3] AT LINE 1156 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remoteGeneration) AT LINE 1156 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70[0] = $stack74 AT LINE 1156 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localGeneration) AT LINE 1156 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70[1] = $stack76 AT LINE 1156 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70[2] = ep AT LINE 1156 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack71.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Updating heartbeat state generation to {} from {} for {}", $stack70) AT LINE 1156 with ID [d0d9661d-266d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack56 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1170 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack57 = interfaceinvoke $stack56.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1170 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack57 == 0 goto $stack58 = virtualinvoke localEpStatePtr.<org.apache.cassandra.gms.EndpointState: boolean isAlive()>() AT LINE 1170 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack61 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1171 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60 = newarray (java.lang.Object)[3] AT LINE 1171 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remoteMaxVersion) AT LINE 1171 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60[0] = $stack64 AT LINE 1171 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localMaxVersion) AT LINE 1171 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60[1] = $stack66 AT LINE 1171 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60[2] = ep AT LINE 1171 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack61.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Ignoring remote version {} <= {} for {}", $stack60) AT LINE 1171 with ID [7d9d4b37-28b4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1178 with ID [37b530c5-4e3a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = interfaceinvoke $stack48.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1178 with ID [37b530c5-4e3a]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack49 == 0 goto (branch) AT LINE 1178 with ID [37b530c5-4e3a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1179 with ID [37b530c5-4e3a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remoteGeneration) AT LINE 1179 with ID [37b530c5-4e3a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localGeneration) AT LINE 1179 with ID [37b530c5-4e3a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack50.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Ignoring remote generation {} < {}", $stack52, $stack53) AT LINE 1179 with ID [37b530c5-4e3a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto return at line 1224 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack24 == $stack26 goto virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: void addApplicationStates(java.util.Set)>(remoteStates) at line 1225 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void applyNewStates(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.EndpointState)> has 15 units and 3 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 1214 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> oldVersion = virtualinvoke $stack8.<org.apache.cassandra.gms.HeartBeatState: int getHeartBeatVersion()>() AT LINE 1214 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1217 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = interfaceinvoke $stack11.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1217 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack12 == 0 goto remoteStates = virtualinvoke remoteState.<org.apache.cassandra.gms.EndpointState: java.util.Set states()>() AT LINE 1217 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = newarray (java.lang.Object)[3] AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = virtualinvoke $stack35.<org.apache.cassandra.gms.HeartBeatState: int getHeartBeatVersion()>() AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack36) AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[0] = $stack37 AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(oldVersion) AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[1] = $stack39 AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31[2] = addr AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Updating heartbeat state version to {} from {} for {} ...", $stack31) AT LINE 1218 with ID [457d4028-944a]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack33 == 0 goto (branch) at line 1004 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack106 == 0 goto $stack107 = <org.apache.cassandra.service.StorageService$Mode: org.apache.cassandra.service.StorageService$Mode JOINING> at line 919 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack100 <= 0 goto interfaceinvoke current.<java.util.Set: boolean add(java.lang.Object)>(movingTokens#91) at line 949 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if movingTokens#91 == null goto $stack88 = new java.lang.UnsupportedOperationException at line 946 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack78 == 0 goto (branch) at line 943 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack154 <= 0 goto $stack62 = this.<org.apache.cassandra.service.StorageService: boolean replacing> at line 907 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack19 == $stack20 goto $stack22 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> at line 985 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void joinTokenRing(int)> has 22 units and 7 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 873 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = interfaceinvoke $stack11.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 873 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack12 == 0 goto $stack13 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: boolean isAutoBootstrap()>() AT LINE 873 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack180 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 876 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack179 = newarray (java.lang.Object)[4] AT LINE 875 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack183 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: boolean isAutoBootstrap()>() AT LINE 876 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack184 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack183) AT LINE 876 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack179[0] = $stack184 AT LINE 876 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack186 = staticinvoke <org.apache.cassandra.db.SystemKeyspace: boolean bootstrapInProgress()>() AT LINE 877 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack187 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack186) AT LINE 877 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack179[1] = $stack187 AT LINE 877 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack189 = staticinvoke <org.apache.cassandra.db.SystemKeyspace: boolean bootstrapComplete()>() AT LINE 878 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack190 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack189) AT LINE 878 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack179[2] = $stack190 AT LINE 878 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack192 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: java.util.Set getSeeds()>() AT LINE 879 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack193 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 879 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack194 = interfaceinvoke $stack192.<java.util.Set: boolean contains(java.lang.Object)>($stack193) AT LINE 879 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack195 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack194) AT LINE 879 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack179[3] = $stack195 AT LINE 879 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack180.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Bootstrap variables: {} {} {} {}", $stack179) AT LINE 875 with ID [28fbbf7f-39a3]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 901 with ID [58359ea0-0612]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack60.<org.slf4j.Logger: void debug(java.lang.String)>("... got ring + schema info") AT LINE 901 with ID [58359ea0-0612]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack56 != 0 goto $stack12 = virtualinvoke request.<org.apache.cassandra.transport.Message$Request: org.apache.cassandra.transport.Connection connection()>() at line 533 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.transport.Message$Dispatcher: void channelRead0(io.netty.channel.ChannelHandlerContext,org.apache.cassandra.transport.Message$Request)> has 6 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.transport.Message: org.slf4j.Logger logger> AT LINE 516 with ID [0e5f8818-840e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = virtualinvoke connection.<org.apache.cassandra.transport.ServerConnection: org.apache.cassandra.transport.ProtocolVersion getVersion()>() AT LINE 516 with ID [0e5f8818-840e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Received: {}, v={}", request, $stack22) AT LINE 516 with ID [0e5f8818-840e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = <org.apache.cassandra.transport.Message: org.slf4j.Logger logger> AT LINE 535 with ID [0d09cc8c-cfa6]
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = virtualinvoke connection.<org.apache.cassandra.transport.ServerConnection: org.apache.cassandra.transport.ProtocolVersion getVersion()>() AT LINE 535 with ID [0d09cc8c-cfa6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Responding: {}, v={}", response, $stack34) AT LINE 535 with ID [0d09cc8c-cfa6]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.io.util.FileUtils: void atomicMoveWithFallback(java.nio.file.Path,java.nio.file.Path)>
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void setMode(org.apache.cassandra.service.StorageService$Mode,java.lang.String,boolean)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 1448 with ID [25e89edf-122c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void debug(java.lang.String)>(logMsg) AT LINE 1448 with ID [25e89edf-122c]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 == 0 goto return at line 324 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack22 != 0 goto (branch) at line 340 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack31 != 0 goto $stack22 = staticinvoke <org.apache.cassandra.db.Directories: boolean verifyFullPermissions(java.io.File,java.lang.String)>(dir, dataDir) at line 334 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StartupChecks: void lambda$static$0()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.service.StartupChecks: org.slf4j.Logger logger> AT LINE 326 with ID [702c6875-5581]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Checking directory {}", dataDir) AT LINE 326 with ID [702c6875-5581]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack65 == 1 goto $stack62 = interfaceinvoke tcolumns.<java.util.List: java.lang.Object get(int)>(0) at line 665 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack60 == 0 goto $stack61 = <org.apache.cassandra.thrift.CassandraServer: boolean $assertionsDisabled> at line 662 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack55 != 0 goto $stack56 = virtualinvoke metadata.<org.apache.cassandra.config.CFMetaData: boolean isSuper()>() at line 658 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.ColumnOrSuperColumn get(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 591 with ID [89de732e-cb83]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String)>("get") AT LINE 591 with ID [89de732e-cb83]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 != 0 goto $stack8 = message.<org.apache.cassandra.net.MessageIn: java.lang.Object payload> at line 40 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 11 units and 5 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: org.slf4j.Logger logger> AT LINE 35 with ID [1029fafe-1a91]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 35 with ID [1029fafe-1a91]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 35 with ID [1029fafe-1a91]
2020-08-25 10:54:57 [INFO] - 	 -> from = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 37 with ID [1029fafe-1a91]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: org.slf4j.Logger logger> AT LINE 38 with ID [1029fafe-1a91]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received a GossipDigestAck2Message from {}", from) AT LINE 38 with ID [1029fafe-1a91]
2020-08-25 10:54:57 [INFO] - 	 -> $stack13 = <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: org.slf4j.Logger logger> AT LINE 42 with ID [48c303f1-94f7]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = interfaceinvoke $stack13.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 42 with ID [48c303f1-94f7]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack14 == 0 goto return AT LINE 42 with ID [48c303f1-94f7]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: org.slf4j.Logger logger> AT LINE 43 with ID [48c303f1-94f7]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void trace(java.lang.String)>("Ignoring GossipDigestAck2Message because gossip is disabled") AT LINE 43 with ID [48c303f1-94f7]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void handleStateLeaving(java.net.InetAddress)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2429 with ID [1fda4b38-98ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2429 with ID [1fda4b38-98ac]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2429 with ID [1fda4b38-98ac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2430 with ID [1fda4b38-98ac]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} state leaving, tokens {}", endpoint, tokens) AT LINE 2430 with ID [1fda4b38-98ac]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.SystemKeyspace: void lambda$migrateDataDirs$5(java.io.File)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack1 = <org.apache.cassandra.db.SystemKeyspace: org.slf4j.Logger logger> AT LINE 1428 with ID [854cde87-71ce]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack1.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Checking {} for legacy files", ksdir) AT LINE 1428 with ID [854cde87-71ce]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if future == null goto $stack135 = new org.apache.cassandra.exceptions.WriteTimeoutException at line 529 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if j >= i goto $stack126 = <org.apache.cassandra.db.Keyspace: org.slf4j.Logger logger> at line 524 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if j >= i goto j#17 = future at line 539 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if isDeferrable == 0 goto staticinvoke <java.lang.Thread: void sleep(long)>(10L) at line 537 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack124 <= 0 goto (branch) at line 539 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if lock != null goto locks[i] = lock at line 519 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if requiresViewUpdate == 0 goto (branch) at line 627 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if baseComplete#58 >= j goto return lockKey#51 at line 640 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack93 == 0 goto columnFamilyIds#24 = staticinvoke <org.apache.cassandra.utils.FBUtilities: int nowInSeconds()>() at line 581 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i >= $stack85 goto $stack86 = staticinvoke <java.lang.System: long currentTimeMillis()>() at line 506 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack155 == 0 goto locks = null at line 497 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.Keyspace: java.util.concurrent.CompletableFuture applyInternal(org.apache.cassandra.db.Mutation,boolean,boolean,boolean,boolean,java.util.concurrent.CompletableFuture)> has 9 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack126 = <org.apache.cassandra.db.Keyspace: org.slf4j.Logger logger> AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack128 = virtualinvoke mutation.<org.apache.cassandra.db.Mutation: org.apache.cassandra.db.DecoratedKey key()>() AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack129 = virtualinvoke $stack128.<org.apache.cassandra.db.DecoratedKey: java.nio.ByteBuffer getKey()>() AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack130 = staticinvoke <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>($stack129) AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack131 = this.<org.apache.cassandra.db.Keyspace: java.util.concurrent.ConcurrentMap columnFamilyStores> AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack132 = interfaceinvoke $stack131.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(cfid) AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack133 = (org.apache.cassandra.db.ColumnFamilyStore) $stack132 AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [INFO] - 	 -> $stack134 = $stack133.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack126.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Could not acquire lock for {} and table {}", $stack130, $stack134) AT LINE 527 with ID [98b48042-44e8]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if level < $stack24 goto specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: void logDistribution()>() at line 184 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledManifest: void add(org.apache.cassandra.io.sstable.format.SSTableReader)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 151 with ID [5cee03b2-9aeb]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(level) AT LINE 151 with ID [5cee03b2-9aeb]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Adding {} to L{}", reader, $stack19) AT LINE 151 with ID [5cee03b2-9aeb]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 != 0 goto return null at line 421 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate getSTCSInL0CompactionCandidate()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 423 with ID [3e47e10e-7d32]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String)>("L0 is too far behind, performing size-tiering there first") AT LINE 423 with ID [3e47e10e-7d32]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack35 >= 0 goto $stack26 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> at line 289 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack47 < 0 goto $stack24 = interfaceinvoke bucket.<java.util.Set: int size()>() at line 309 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 == 0 goto $stack17 = staticinvoke <java.util.Collections: java.util.List emptyList()>() at line 289 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack57 != 0 goto (branch) at line 303 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: java.util.List newestBucket(com.google.common.collect.HashMultimap,int,int,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions,long)> has 18 units and 4 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack20 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 293 with ID [8463446d-b2cb]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(now) AT LINE 293 with ID [8463446d-b2cb]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Key {}, now {}", key, $stack22) AT LINE 293 with ID [8463446d-b2cb]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 299 with ID [b30f8bf7-777d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack55.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Using STCS compaction for first window of bucket: data files {} , options {}", pairs, stcsOptions) AT LINE 299 with ID [b30f8bf7-777d]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 308 with ID [d424a28a-3b60]
2020-08-25 10:54:57 [INFO] - 	 -> $stack43 = interfaceinvoke bucket.<java.util.Set: int size()>() AT LINE 308 with ID [d424a28a-3b60]
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack43) AT LINE 308 with ID [d424a28a-3b60]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack41.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("bucket size {} >= 2 and not in current bucket, compacting what\'s here: {}", $stack44, bucket) AT LINE 308 with ID [d424a28a-3b60]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25 = newarray (java.lang.Object)[3] AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = interfaceinvoke bucket.<java.util.Set: int size()>() AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack29) AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25[0] = $stack30 AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25[1] = key AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(now) AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack25[2] = $stack32 AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("No compaction necessary for bucket size {} , key {}, now {}", $stack25) AT LINE 313 with ID [43b6fea3-f18e]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.cache.SerializingCache: java.lang.Object deserialize(org.apache.cassandra.cache.RefCountedMemory)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if i#84 >= $stack112 goto $stack113 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 251 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack111 == 0 goto totalSourceRows#83 = 0L at line 248 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack214 <= 0 goto (branch) at line 212 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack206 == 0 goto $stack207 = virtualinvoke ci.<org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>() at line 198 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack96 == 0 goto newSStables = virtualinvoke writer.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: java.util.Collection finish()>() at line 196 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack89 != 0 goto $stack90 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutorStatsCollector collector> at line 187 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack64 == 0 goto virtualinvoke ssTableLoggerMsg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") at line 149 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack253 == 0 goto $stack58 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.lifecycle.LifecycleTransaction transaction> at line 152 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack53 == 0 goto $stack54 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 118 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack268 != null goto $stack51 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.lifecycle.LifecycleTransaction transaction> at line 119 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionTask: void runMayThrow()> has 124 units and 40 lines
2020-08-25 10:54:57 [INFO] - 	 -> ssTableLoggerMsg = $stack60 AT LINE 148 with ID [d7ded0cf-f2d9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack61 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.lifecycle.LifecycleTransaction transaction> AT LINE 149 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack62 = virtualinvoke $stack61.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals()>() AT LINE 149 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> limiter = interfaceinvoke $stack62.<java.util.Set: java.util.Iterator iterator()>() AT LINE 149 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = interfaceinvoke limiter.<java.util.Iterator: boolean hasNext()>() AT LINE 149 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> if $stack64 == 0 goto virtualinvoke ssTableLoggerMsg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") AT LINE 149 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack239 = interfaceinvoke limiter.<java.util.Iterator: java.lang.Object next()>() AT LINE 187 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> sstr = (org.apache.cassandra.io.sstable.format.SSTableReader) $stack239 AT LINE 187 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack240 = newarray (java.lang.Object)[2] AT LINE 151 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack243 = virtualinvoke sstr.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 151 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack240[0] = $stack243 AT LINE 151 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack245 = virtualinvoke sstr.<org.apache.cassandra.io.sstable.format.SSTableReader: int getSSTableLevel()>() AT LINE 151 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack246 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack245) AT LINE 151 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack240[1] = $stack246 AT LINE 151 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack247 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:level=%d, ", $stack240) AT LINE 151 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke ssTableLoggerMsg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack247) AT LINE 151 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack64 = interfaceinvoke limiter.<java.util.Iterator: boolean hasNext()>()] AT LINE 152 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke ssTableLoggerMsg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") AT LINE 153 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = <org.apache.cassandra.db.compaction.CompactionTask: org.slf4j.Logger logger> AT LINE 155 with ID [d7ded0cf-f2d9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack66.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Compacting ({}) {}", taskId, ssTableLoggerMsg) AT LINE 155 with ID [d7ded0cf-f2d9]
2020-08-25 10:54:57 [INFO] - 	 -> totalKeysWritten = 0L AT LINE 160 with ID [28e9e3b1-d44e, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> inputSizeBytes = virtualinvoke scanners.<org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList: long getTotalCompressedSize()>() AT LINE 180 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> estimatedKeys = virtualinvoke writer.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: long estimatedKeys()>() AT LINE 195 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack207 = virtualinvoke ci.<org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>() AT LINE 201 with ID [28e9e3b1-d44e, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack208 = virtualinvoke writer.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: boolean append(org.apache.cassandra.db.rows.UnfilteredRowIterator)>($stack207) AT LINE 201 with ID [28e9e3b1-d44e, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack208 == 0 goto bytesScanned = virtualinvoke scanners.<org.apache.cassandra.db.compaction.AbstractCompactionStrategy$ScannerList: long getTotalBytesScanned()>() AT LINE 201 with ID [28e9e3b1-d44e, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> totalKeysWritten = totalKeysWritten + 1L AT LINE 202 with ID [28e9e3b1-d44e, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> mergedRowCounts = virtualinvoke ci.<org.apache.cassandra.db.compaction.CompactionIterator: long[] getMergedRowCounts()>() AT LINE 227 with ID [UNKNOWN_ID, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> totalSourceCQLRows = virtualinvoke ci.<org.apache.cassandra.db.compaction.CompactionIterator: long getTotalSourceCQLRows()>() AT LINE 229 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack103 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 241 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> refs#75 = $stack103 - sstr#8 AT LINE 241 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack104 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 242 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> scanners#76 = virtualinvoke $stack104.<java.util.concurrent.TimeUnit: long toMillis(long)>(refs#75) AT LINE 242 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> ci#77 = inputSizeBytes AT LINE 243 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack108 = (double) lastCheckObsoletion AT LINE 245 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack107 = (double) ci#77 AT LINE 245 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> compressionRatio = $stack108 / $stack107 AT LINE 245 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> lastBytesScanned#80 = $stack109 AT LINE 247 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> totalSourceRows = interfaceinvoke newSStables.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 248 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack111 = interfaceinvoke totalSourceRows.<java.util.Iterator: boolean hasNext()>() AT LINE 248 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> if $stack111 == 0 goto totalSourceRows#83 = 0L AT LINE 248 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack191 = interfaceinvoke totalSourceRows.<java.util.Iterator: java.lang.Object next()>() AT LINE 251 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> writer#82 = (org.apache.cassandra.io.sstable.format.SSTableReader) $stack191 AT LINE 251 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack192 = writer#82.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.Descriptor descriptor> AT LINE 249 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack193 = virtualinvoke $stack192.<org.apache.cassandra.io.sstable.Descriptor: java.lang.String baseFilename()>() AT LINE 249 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack194 = virtualinvoke lastBytesScanned#80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack193) AT LINE 249 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke $stack194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") AT LINE 249 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack111 = interfaceinvoke totalSourceRows.<java.util.Iterator: boolean hasNext()>()] AT LINE 249 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> totalSourceRows#83 = 0L AT LINE 250 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> i#84 = 0 AT LINE 251 with ID [UNKNOWN_ID, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack112 = lengthof mergedRowCounts AT LINE 251 with ID [UNKNOWN_ID, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> if i#84 >= $stack112 goto $stack113 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 251 with ID [UNKNOWN_ID, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack187 = mergedRowCounts[i#84] AT LINE 252 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack185 = i#84 + 1 AT LINE 252 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack186 = (long) $stack185 AT LINE 252 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack188 = $stack187 * $stack186 AT LINE 252 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> totalSourceRows#83 = totalSourceRows#83 + $stack188 AT LINE 252 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> i#84 = i#84 + 1 AT LINE 251 with ID [UNKNOWN_ID, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack112 = lengthof mergedRowCounts] AT LINE 251 with ID [UNKNOWN_ID, 497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack113 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 254 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack114 = $stack113.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 254 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack115 = virtualinvoke $stack114.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 254 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack116 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 254 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack117 = virtualinvoke $stack116.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getTableName()>() AT LINE 254 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> i#85 = staticinvoke <org.apache.cassandra.db.compaction.CompactionTask: java.lang.String updateCompactionHistory(java.lang.String,java.lang.String,long[],long,long)>($stack115, $stack117, mergedRowCounts, ci#77, lastCheckObsoletion) AT LINE 254 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack121 = <org.apache.cassandra.db.compaction.CompactionTask: org.slf4j.Logger logger> AT LINE 257 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119 = newarray (java.lang.Object)[14] AT LINE 255 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[0] = taskId AT LINE 255 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack120 = this.<org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.lifecycle.LifecycleTransaction transaction> AT LINE 257 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack124 = virtualinvoke $stack120.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals()>() AT LINE 257 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack125 = interfaceinvoke $stack124.<java.util.Set: int size()>() AT LINE 257 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack126 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack125) AT LINE 257 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[1] = $stack126 AT LINE 257 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack128 = virtualinvoke lastBytesScanned#80.<java.lang.StringBuilder: java.lang.String toString()>() AT LINE 258 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[2] = $stack128 AT LINE 258 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack130 = virtualinvoke this.<org.apache.cassandra.db.compaction.CompactionTask: int getLevel()>() AT LINE 259 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack131 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack130) AT LINE 259 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[3] = $stack131 AT LINE 259 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack133 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(ci#77) AT LINE 260 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[4] = $stack133 AT LINE 260 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack135 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(lastCheckObsoletion) AT LINE 261 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[5] = $stack135 AT LINE 261 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack136 = compressionRatio * 100.0 AT LINE 261 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack137 = (int) $stack136 AT LINE 262 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack139 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack137) AT LINE 262 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[6] = $stack139 AT LINE 262 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack141 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(scanners#76) AT LINE 263 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[7] = $stack141 AT LINE 263 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack143 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemoryPerSecond(long,long)>(ci#77, refs#75) AT LINE 264 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[8] = $stack143 AT LINE 264 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack145 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemoryPerSecond(long,long)>(lastCheckObsoletion, refs#75) AT LINE 265 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[9] = $stack145 AT LINE 265 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack146 = (int) totalSourceCQLRows AT LINE 265 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack149 = (long) $stack146 AT LINE 266 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack147 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 266 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack150 = virtualinvoke $stack147.<java.util.concurrent.TimeUnit: long toSeconds(long)>(refs#75) AT LINE 266 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack151 = $stack150 + 1L AT LINE 266 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack152 = $stack149 / $stack151 AT LINE 266 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack153 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack152) AT LINE 266 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[10] = $stack153 AT LINE 266 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack155 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalSourceRows#83) AT LINE 267 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[11] = $stack155 AT LINE 267 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack157 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalKeysWritten) AT LINE 268 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[12] = $stack157 AT LINE 268 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack119[13] = i#85 AT LINE 268 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack158 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Compacted (%s) %d sstables to [%s] to level=%d.  %s to %s (~%d%% of original) in %,dms.  Read Throughput = %s, Write Throughput = %s, Row Throughput = ~%,d/s.  %,d total partitions merged to %,d.  Partition merge counts were {%s}", $stack119) AT LINE 255 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack121.<org.slf4j.Logger: void debug(java.lang.String)>($stack158) AT LINE 255 with ID [497b0674-dac0]
2020-08-25 10:54:57 [INFO] - 	 -> $stack159 = <org.apache.cassandra.db.compaction.CompactionTask: org.slf4j.Logger logger> AT LINE 270 with ID [0cf66a63-5abf]
2020-08-25 10:54:57 [INFO] - 	 -> $stack161 = staticinvoke <org.apache.cassandra.db.compaction.CompactionTask: long addToTotalBytesCompacted(long)>(lastCheckObsoletion) AT LINE 270 with ID [0cf66a63-5abf]
2020-08-25 10:54:57 [INFO] - 	 -> $stack162 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack161) AT LINE 270 with ID [0cf66a63-5abf]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack159.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("CF Total Bytes Compacted: {}", $stack162) AT LINE 270 with ID [0cf66a63-5abf]
2020-08-25 10:54:57 [INFO] - 	 -> $stack164 = <org.apache.cassandra.db.compaction.CompactionTask: org.slf4j.Logger logger> AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack163 = newarray (java.lang.Object)[3] AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack167 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalKeysWritten) AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack163[0] = $stack167 AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack169 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(estimatedKeys) AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack163[1] = $stack169 AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack170 = totalKeysWritten - estimatedKeys AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack172 = (double) $stack170 AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack171 = (double) totalKeysWritten AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack173 = $stack172 / $stack171 AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack175 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack173) AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> $stack163[2] = $stack175 AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack164.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Actual #keys: {}, Estimated #keys:{}, Err%: {}", $stack163) AT LINE 271 with ID [28e9e3b1-d44e]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack57 >= 0 goto $stack60 = <org.apache.cassandra.streaming.StreamReader: org.slf4j.Logger logger> at line 117 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if cfs != null goto $stack24 = <org.apache.cassandra.streaming.StreamReader: org.slf4j.Logger logger> at line 103 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamReader: org.apache.cassandra.io.sstable.SSTableMultiWriter read(java.nio.channels.ReadableByteChannel)> has 39 units and 5 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack24 = <org.apache.cassandra.streaming.StreamReader: org.slf4j.Logger logger> AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = newarray (java.lang.Object)[7] AT LINE 106 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack23 = this.<org.apache.cassandra.streaming.StreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack27 = virtualinvoke $stack23.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[0] = $stack27 AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = this.<org.apache.cassandra.streaming.StreamReader: int fileSeqNum> AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28) AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[1] = $stack30 AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = this.<org.apache.cassandra.streaming.StreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack32 = $stack31.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[2] = $stack32 AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack33 = this.<org.apache.cassandra.streaming.StreamReader: long repairedAt> AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack33) AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[3] = $stack35 AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalSize) AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[4] = $stack37 AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack38 = cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack40 = virtualinvoke $stack38.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[5] = $stack40 AT LINE 107 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getColumnFamilyName()>() AT LINE 108 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack22[6] = $stack42 AT LINE 108 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Start receiving file #{} from {}, repairedAt = {}, size = {}, ks = \'{}\', table = \'{}\'.", $stack22) AT LINE 106 with ID [ac1467d5-6aac]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60 = <org.apache.cassandra.streaming.StreamReader: org.slf4j.Logger logger> AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58 = newarray (java.lang.Object)[5] AT LINE 123 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack59 = this.<org.apache.cassandra.streaming.StreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack63 = virtualinvoke $stack59.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[0] = $stack63 AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = this.<org.apache.cassandra.streaming.StreamReader: int fileSeqNum> AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack64) AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[1] = $stack66 AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack67 = this.<org.apache.cassandra.streaming.StreamReader: org.apache.cassandra.streaming.StreamSession session> AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack68 = $stack67.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[2] = $stack68 AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70 = virtualinvoke in.<org.apache.cassandra.io.util.TrackedInputStream: long getBytesRead()>() AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack71 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack70) AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[3] = $stack71 AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack73 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(totalSize) AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58[4] = $stack73 AT LINE 124 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack60.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Finished receiving file #{} from {} readBytes = {}, totalSize = {}", $stack58) AT LINE 123 with ID [f4d13f8c-fd03]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 != 0 goto $stack9 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> at line 350 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if epState != null goto $stack7 = virtualinvoke epState.<org.apache.cassandra.gms.EndpointState: boolean isAlive()>() at line 347 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void convict(java.net.InetAddress,double)> has 9 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = newarray (java.lang.Object)[3] AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[0] = endpoint AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = staticinvoke <org.apache.cassandra.gms.Gossiper: java.lang.String getGossipStatus(org.apache.cassandra.gms.EndpointState)>(epState) AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[1] = $stack12 AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [INFO] - 	 -> $stack14 = virtualinvoke epState.<org.apache.cassandra.gms.EndpointState: boolean isAlive()>() AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack14) AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [INFO] - 	 -> $stack8[2] = $stack15 AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Convicting {} with status {} - alive {}", $stack8) AT LINE 353 with ID [d58fda04-7d51]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack13 == 0 goto (branch) at line 891 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack8 == 0 goto return at line 888 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.Directories: void clearSnapshot(java.lang.String,java.util.List)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack15 = <org.apache.cassandra.db.Directories: org.slf4j.Logger logger> AT LINE 893 with ID [27381780-a6c0]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Removing snapshot directory {}", snapshotDir) AT LINE 893 with ID [27381780-a6c0]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if region == null goto $stack4 = <org.apache.cassandra.utils.memory.SlabAllocator: java.util.concurrent.ConcurrentLinkedQueue RACE_ALLOCATED> at line 132 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 == 0 goto $stack8 = <org.apache.cassandra.utils.memory.SlabAllocator: java.util.concurrent.ConcurrentLinkedQueue RACE_ALLOCATED> at line 140 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.utils.memory.SlabAllocator: org.apache.cassandra.utils.memory.SlabAllocator$Region getRegion()> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.utils.memory.SlabAllocator: org.slf4j.Logger logger> AT LINE 145 with ID [4f060f39-0db4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = this.<org.apache.cassandra.utils.memory.SlabAllocator: java.util.concurrent.atomic.AtomicInteger regionCount> AT LINE 145 with ID [4f060f39-0db4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("{} regions now allocated in {}", $stack16, this) AT LINE 145 with ID [4f060f39-0db4]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack14 == 0 goto $stack15 = interfaceinvoke cfPersisted.<java.util.Map: java.util.Collection values()>() at line 98 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogReplayer: org.apache.cassandra.db.commitlog.CommitLogReplayer construct(org.apache.cassandra.db.commitlog.CommitLog)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = <org.apache.cassandra.db.commitlog.CommitLogReplayer: org.slf4j.Logger logger> AT LINE 126 with ID [1a0dd8bf-63fe]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String toString(java.util.Map)>(cfPersisted) AT LINE 126 with ID [1a0dd8bf-63fe]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Global replay position is {} from columnfamilies {}", globalPosition#32, $stack19) AT LINE 126 with ID [1a0dd8bf-63fe]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack55 == 0 goto (branch) at line 2367 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack36 == 0 goto $stack37 = interfaceinvoke ex#4.<java.util.Map: java.lang.Object get(java.lang.Object)>("UNREACHABLE") at line 2346 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 == 0 goto $stack26 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: long getRpcTimeout()>() at line 2330 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageProxy: java.util.Map describeSchemaVersions()> has 22 units and 7 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = interfaceinvoke ex#4.<java.util.Map: java.lang.Object get(java.lang.Object)>("UNREACHABLE") AT LINE 2360 with ID [19446b46-188f]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack37 == null goto $stack38 = interfaceinvoke ex#4.<java.util.Map: java.util.Set entrySet()>() AT LINE 2360 with ID [19446b46-188f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack61 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 2361 with ID [19446b46-188f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack63 = interfaceinvoke ex#4.<java.util.Map: java.lang.Object get(java.lang.Object)>("UNREACHABLE") AT LINE 2361 with ID [19446b46-188f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack64 = (java.lang.Iterable) $stack63 AT LINE 2361 with ID [19446b46-188f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack65 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack64, ",") AT LINE 2361 with ID [19446b46-188f]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack61.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Hosts not in agreement. Didn\'t get a response from everybody: {}", $stack65) AT LINE 2361 with ID [19446b46-188f]
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = interfaceinvoke host#21.<java.util.Map$Entry: java.lang.Object getValue()>() AT LINE 2367 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = (java.util.List) $stack52 AT LINE 2367 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> version#22 = interfaceinvoke $stack53.<java.util.List: java.util.Iterator iterator()>() AT LINE 2367 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = interfaceinvoke version#22.<java.util.Iterator: boolean hasNext()>() AT LINE 2367 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack55 == 0 goto (branch) AT LINE 2367 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack56 = interfaceinvoke version#22.<java.util.Iterator: java.lang.Object next()>() AT LINE 2369 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> stringVersion = (java.lang.String) $stack56 AT LINE 2369 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack57 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 2368 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack59 = interfaceinvoke host#21.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 2368 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack57.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("{} disagrees ({})", stringVersion, $stack59) AT LINE 2368 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack55 = interfaceinvoke version#22.<java.util.Iterator: boolean hasNext()>()] AT LINE 2368 with ID [3ec74860-caa5]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = interfaceinvoke ex#4.<java.util.Map: int size()>() AT LINE 2370 with ID [fda0a97a-8bbd]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack41 != 1 goto return ex#4 AT LINE 2370 with ID [fda0a97a-8bbd]
2020-08-25 10:54:57 [INFO] - 	 -> $stack42 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 2371 with ID [fda0a97a-8bbd]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack42.<org.slf4j.Logger: void debug(java.lang.String)>("Schemas are in agreement.") AT LINE 2371 with ID [fda0a97a-8bbd]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l4 >= l3 goto $stack9 = <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: org.slf4j.Logger logger> at line 62 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void <init>(java.lang.String[])> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: org.slf4j.Logger logger> AT LINE 74 with ID [fbab00af-e879]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(replicas) AT LINE 74 with ID [fbab00af-e879]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Created instance with the following replicas: {}", $stack11) AT LINE 74 with ID [fbab00af-e879]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if remoteGeneration <= localGeneration goto (branch) at line 951 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void notifyFailureDetector(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 958 with ID [298c7c05-2ae6]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Clearing interval times for {} due to generation change", endpoint) AT LINE 958 with ID [298c7c05-2ae6]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack11 == reader goto $stack8 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> at line 372 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack21 == 0 goto $stack7 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: boolean $assertionsDisabled> at line 372 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack37 == 0 goto $stack6 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: boolean $assertionsDisabled> at line 370 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack41 != 0 goto $stack5 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: boolean $assertionsDisabled> at line 369 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack52 != 0 goto $stack4 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: boolean $assertionsDisabled> at line 368 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void obsolete(org.apache.cassandra.io.sstable.format.SSTableReader)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 363 with ID [60d4c4be-8265]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Staging for obsolescence {}", reader) AT LINE 363 with ID [60d4c4be-8265]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if files != null goto l6 = files at line 223 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l3 >= l2 goto return at line 220 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l8 >= l7 goto l3 = l3 + 1 at line 227 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack28 <= 6 goto $stack29 = descriptor.<org.apache.cassandra.db.commitlog.CommitLogDescriptor: org.apache.cassandra.config.ParameterizedClass compression> at line 242 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack64 < 4 goto (branch) at line 238 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack72 != 0 goto (branch) at line 236 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if fromName != null goto (branch) at line 235 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack17 == 0 goto $stack18 = this.<org.apache.cassandra.db.commitlog.CommitLogArchiver: java.lang.String restoreDirectories> at line 217 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogArchiver: void maybeRestoreArchive()> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack47 = <org.apache.cassandra.db.commitlog.CommitLogArchiver: org.slf4j.Logger logger> AT LINE 261 with ID [28aca01f-1bc4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack49 = virtualinvoke fromFile.<java.io.File: java.lang.String getPath()>() AT LINE 261 with ID [28aca01f-1bc4]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = virtualinvoke e#10.<java.io.File: java.lang.String getPath()>() AT LINE 261 with ID [28aca01f-1bc4]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack47.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Skipping restore of archive {} as the segment already exists in the restore location {}", $stack49, $stack50) AT LINE 260 with ID [28aca01f-1bc4]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack61 <= 0 goto $stack62 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> at line 73 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack44 == 0 goto $stack45 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> at line 92 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack60 == 0 goto $stack21 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> at line 96 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack73 != 0 goto gDigestList = virtualinvoke gDigestMessage.<org.apache.cassandra.gms.GossipDigestSyn: java.util.List getGossipDigests()>() at line 76 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 != 0 goto $stack17 = gDigestMessage.<org.apache.cassandra.gms.GossipDigestSyn: java.lang.String partioner> at line 50 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack88 != 0 goto $stack13 = message.<org.apache.cassandra.net.MessageIn: java.lang.Object payload> at line 53 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 36 units and 15 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 39 with ID [9eb5b0a9-8e9b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = interfaceinvoke $stack9.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 39 with ID [9eb5b0a9-8e9b]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack10 == 0 goto $stack11 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 39 with ID [9eb5b0a9-8e9b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack95 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 40 with ID [9eb5b0a9-8e9b]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack95.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received a GossipDigestSynMessage from {}", from) AT LINE 40 with ID [9eb5b0a9-8e9b]
2020-08-25 10:54:57 [INFO] - 	 -> $stack92 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 43 with ID [f059d3f5-3a5c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack93 = interfaceinvoke $stack92.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 43 with ID [f059d3f5-3a5c]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack93 == 0 goto return AT LINE 43 with ID [f059d3f5-3a5c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack94 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 44 with ID [f059d3f5-3a5c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack94.<org.slf4j.Logger: void trace(java.lang.String)>("Ignoring GossipDigestSynMessage because gossip is disabled") AT LINE 44 with ID [f059d3f5-3a5c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack70 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 75 with ID [97a93358-dd33]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack70.<org.slf4j.Logger: void debug(java.lang.String)>("Ignoring non-empty GossipDigestSynMessage because currently in gossip shadow round") AT LINE 75 with ID [97a93358-dd33]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 79 with ID [25a76f8f-7e57]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack62.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Received a shadow round syn from {}. Gossip is disabled but currently also in shadow round, responding with a minimal ack", from) AT LINE 79 with ID [25a76f8f-7e57]
2020-08-25 10:54:57 [INFO] - 	 -> sb = $stack42 AT LINE 91 with ID [04653426-a7de]
2020-08-25 10:54:57 [INFO] - 	 -> deltaEpStateMap = interfaceinvoke gDigestList.<java.util.List: java.util.Iterator iterator()>() AT LINE 92 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack44 = interfaceinvoke deltaEpStateMap.<java.util.Iterator: boolean hasNext()>() AT LINE 92 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> if $stack44 == 0 goto $stack45 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 92 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = interfaceinvoke deltaEpStateMap.<java.util.Iterator: java.lang.Object next()>() AT LINE 109 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> gDigest = (org.apache.cassandra.gms.GossipDigest) $stack55 AT LINE 109 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(gDigest) AT LINE 94 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") AT LINE 95 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> goto [?= $stack44 = interfaceinvoke deltaEpStateMap.<java.util.Iterator: boolean hasNext()>()] AT LINE 96 with ID []
2020-08-25 10:54:57 [INFO] - 	 -> $stack45 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 97 with ID [04653426-a7de]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack45.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Gossip syn digests are : {}", sb) AT LINE 97 with ID [04653426-a7de]
2020-08-25 10:54:57 [INFO] - 	 -> $stack26 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 105 with ID [1033af12-d5b1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack28 = interfaceinvoke sb#4.<java.util.List: int size()>() AT LINE 105 with ID [1033af12-d5b1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28) AT LINE 105 with ID [1033af12-d5b1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack30 = interfaceinvoke deltaEpStateMap#5.<java.util.Map: int size()>() AT LINE 105 with ID [1033af12-d5b1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack30) AT LINE 105 with ID [1033af12-d5b1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("sending {} digests and {} deltas", $stack29, $stack31) AT LINE 105 with ID [1033af12-d5b1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack36 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 109 with ID [308a2a95-b806]
2020-08-25 10:54:57 [INFO] - 	 -> $stack37 = interfaceinvoke $stack36.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 109 with ID [308a2a95-b806]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack37 == 0 goto $stack38 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() AT LINE 109 with ID [308a2a95-b806]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 110 with ID [308a2a95-b806]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending a GossipDigestAckMessage to {}", from) AT LINE 110 with ID [308a2a95-b806]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack7 == 0 goto $stack8 = this.<org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: java.util.concurrent.ConcurrentLinkedQueue activeSegments> at line 415 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void stopUnsafe(boolean)> has 4 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack4 = <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.slf4j.Logger logger> AT LINE 403 with ID [c5ee105a-3814]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String)>("CLSM closing and clearing existing commit log segments...") AT LINE 403 with ID [c5ee105a-3814]
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.slf4j.Logger logger> AT LINE 421 with ID [6710e738-1882]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String)>("CLSM done with closing and clearing existing commit log segments.") AT LINE 421 with ID [6710e738-1882]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack9 == null goto virtualinvoke this.<org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: void signalCloseDone()>() at line 387 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: void run()> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = staticinvoke <org.apache.cassandra.streaming.ConnectionHandler: org.slf4j.Logger access$000()>() AT LINE 379 with ID [a705bfff-b0f9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack17 = this.<org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: org.apache.cassandra.streaming.StreamSession session> AT LINE 379 with ID [a705bfff-b0f9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack19 = virtualinvoke $stack17.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 379 with ID [a705bfff-b0f9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("[Stream #{}] Sending {}", $stack19, next) AT LINE 379 with ID [a705bfff-b0f9]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if verbHandler != null goto $stack14 = this.<org.apache.cassandra.net.MessageDeliveryTask: org.apache.cassandra.net.MessageIn message> at line 58 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack25 <= 0 goto $stack11 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() at line 51 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.net.MessageDeliveryTask: void run()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack22 = <org.apache.cassandra.net.MessageDeliveryTask: org.slf4j.Logger logger> AT LINE 60 with ID [28769283-07a7]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Unknown verb {}", verb) AT LINE 60 with ID [28769283-07a7]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if address == null goto specialinvoke this.<org.apache.cassandra.hints.HintsDispatchExecutor$DispatchHintsTask: void convert(org.apache.cassandra.hints.HintsDescriptor)>(descriptor) at line 259 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.hints.HintsDispatchExecutor$DispatchHintsTask: boolean dispatch(org.apache.cassandra.hints.HintsDescriptor)> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack3 = staticinvoke <org.apache.cassandra.hints.HintsDispatchExecutor: org.slf4j.Logger access$100()>() AT LINE 256 with ID [bb025aec-12e1]
2020-08-25 10:54:57 [INFO] - 	 -> $stack5 = virtualinvoke descriptor.<org.apache.cassandra.hints.HintsDescriptor: java.lang.String fileName()>() AT LINE 256 with ID [bb025aec-12e1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Dispatching hints file {}", $stack5) AT LINE 256 with ID [bb025aec-12e1]
2020-08-25 10:54:57 [WARN] - No overhead is found at method <org.apache.cassandra.triggers.CustomClassLoader: java.lang.Class loadClassInternal(java.lang.String)>
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack20 == 0 goto bootstrapStreamResult#2 = virtualinvoke streamer.<org.apache.cassandra.dht.RangeStreamer: org.apache.cassandra.streaming.StreamResultFuture fetchAsync()>() at line 84 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.dht.BootStrapper: com.google.common.util.concurrent.ListenableFuture bootstrap(org.apache.cassandra.dht.StreamStateStore,boolean)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack7 = <org.apache.cassandra.dht.BootStrapper: org.slf4j.Logger logger> AT LINE 71 with ID [379ecb70-c5c1]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String)>("Beginning bootstrap process") AT LINE 71 with ID [379ecb70-c5c1]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if totalPolls <= forceAfter goto (branch) at line 1697 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if forceAfter <= 0 goto (branch) at line 1713 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if forceAfter != 0 goto GOSSIP_SETTLE_MIN_WAIT_MS = 5000 at line 1684 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void waitToSettle()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack34 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1704 with ID [d2854987-2e46]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void debug(java.lang.String)>("Gossip looks settled.") AT LINE 1704 with ID [d2854987-2e46]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack26 == 0 goto l11#13 = key#7 at line 816 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack38 == 0 goto $stack40 = virtualinvoke keysList.<java.lang.Object: java.lang.String toString()>() at line 785 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.util.Map multiget_count(java.util.List,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack16 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 797 with ID [95c2e7e6-2e2d]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String)>("multiget_count") AT LINE 797 with ID [95c2e7e6-2e2d]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if l3 >= l2 goto return at line 359 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.Directories: void removeTemporaryDirectories()> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack10 = <org.apache.cassandra.db.Directories: org.slf4j.Logger logger> AT LINE 364 with ID [03b55145-15d8]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Removing temporary directory {}", tmpDir) AT LINE 364 with ID [03b55145-15d8]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionStrategyManager: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.function.Supplier,boolean)> has 2 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = <org.apache.cassandra.db.compaction.CompactionStrategyManager: org.slf4j.Logger logger> AT LINE 121 with ID [8ff8232b-2989]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("{} subscribed to the data tracker.", this) AT LINE 121 with ID [8ff8232b-2989]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if header != null goto $stack32 = metadata.<org.apache.cassandra.config.CFMetaData: org.apache.cassandra.dht.IPartitioner partitioner> at line 507 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack99 != 0 goto $stack21 = <org.apache.cassandra.io.sstable.metadata.MetadataType: org.apache.cassandra.io.sstable.metadata.MetadataType VALIDATION> at line 497 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack106 != 0 goto $stack18 = <org.apache.cassandra.io.sstable.format.SSTableReader: boolean $assertionsDisabled> at line 485 don't merge! Need manual examination!
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack113 != 0 goto $stack17 = <org.apache.cassandra.io.sstable.format.SSTableReader: boolean $assertionsDisabled> at line 485 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader open(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,boolean,boolean)> has 22 units and 6 lines
2020-08-25 10:54:57 [INFO] - 	 -> fileLength = virtualinvoke $stack35.<java.io.File: long length()>() AT LINE 514 with ID [8fc09dcc-406c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack39 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 515 with ID [8fc09dcc-406c]
2020-08-25 10:54:57 [INFO] - 	 -> $stack41 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(fileLength) AT LINE 515 with ID [8fc09dcc-406c]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Opening {} ({})", descriptor, $stack41) AT LINE 515 with ID [8fc09dcc-406c]
2020-08-25 10:54:57 [INFO] - 	 -> start = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 527 with ID [9a6ac074-c997]
2020-08-25 10:54:57 [INFO] - 	 -> $stack48 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 529 with ID [9a6ac074-c997]
2020-08-25 10:54:57 [INFO] - 	 -> $stack50 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 529 with ID [9a6ac074-c997]
2020-08-25 10:54:57 [INFO] - 	 -> $stack51 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 529 with ID [9a6ac074-c997]
2020-08-25 10:54:57 [INFO] - 	 -> $stack52 = $stack51 - start AT LINE 529 with ID [9a6ac074-c997]
2020-08-25 10:54:57 [INFO] - 	 -> $stack53 = virtualinvoke $stack50.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack52) AT LINE 529 with ID [9a6ac074-c997]
2020-08-25 10:54:57 [INFO] - 	 -> $stack54 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack53) AT LINE 529 with ID [9a6ac074-c997]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack48.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("INDEX LOAD TIME for {}: {} ms.", descriptor, $stack54) AT LINE 529 with ID [9a6ac074-c997]
2020-08-25 10:54:57 [INFO] - 	 -> $stack55 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.cache.InstrumentingCache getKeyCache()>() AT LINE 535 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack55 == null goto return sstable AT LINE 535 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack56 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 536 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack58 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.cache.InstrumentingCache getKeyCache()>() AT LINE 536 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack59 = virtualinvoke $stack58.<org.apache.cassandra.cache.InstrumentingCache: int size()>() AT LINE 536 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack59) AT LINE 536 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack61 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.cache.InstrumentingCache getKeyCache()>() AT LINE 536 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack62 = virtualinvoke $stack61.<org.apache.cassandra.cache.InstrumentingCache: long getCapacity()>() AT LINE 536 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> $stack63 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack62) AT LINE 536 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack56.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("key cache contains {}/{} keys", $stack60, $stack63) AT LINE 536 with ID [ffbb8f41-d82a]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LogTransaction: void delete(java.io.File)> has 5 units and 2 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack8 = <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger logger> AT LINE 215 with ID [0b8d871c-1eee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 215 with ID [0b8d871c-1eee]
2020-08-25 10:54:57 [INFO] - 	 -> if $stack9 == 0 goto $stack10 = virtualinvoke file.<java.io.File: java.nio.file.Path toPath()>() AT LINE 215 with ID [0b8d871c-1eee]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger logger> AT LINE 216 with ID [0b8d871c-1eee]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Deleting {}", file) AT LINE 216 with ID [0b8d871c-1eee]
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: long unusedCapacity()> has 4 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.slf4j.Logger logger> AT LINE 353 with ID [66234870-1c41]
2020-08-25 10:54:57 [INFO] - 	 -> $stack11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(currentSize) AT LINE 353 with ID [66234870-1c41]
2020-08-25 10:54:57 [INFO] - 	 -> $stack12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(total) AT LINE 353 with ID [66234870-1c41]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Total active commitlog segment space used is {} out of {}", $stack11, $stack12) AT LINE 353 with ID [66234870-1c41]
2020-08-25 10:54:57 [WARN] - Both branch of IfStmt if $stack16 != 0 goto $stack4 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> at line 385 don't merge! Need manual examination!
2020-08-25 10:54:57 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void obsoleteOriginals()> has 3 units and 1 lines
2020-08-25 10:54:57 [INFO] - 	 -> $stack2 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 379 with ID [65c7ec22-a8b9]
2020-08-25 10:54:57 [INFO] - 	 -> $stack1 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals> AT LINE 379 with ID [65c7ec22-a8b9]
2020-08-25 10:54:57 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Staging for obsolescence {}", $stack1) AT LINE 379 with ID [65c7ec22-a8b9]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if sstable == null goto (branch) at line 1202 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack79 == 0 goto (branch) at line 1200 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack44 == 0 goto (branch) at line 1197 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack41 == 0 goto $stack42 = virtualinvoke txn.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable commit(java.lang.Throwable)>(i#9) at line 1192 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack92 <= 0 goto $stack93 = interfaceinvoke writer.<org.apache.cassandra.io.sstable.SSTableMultiWriter: java.lang.Throwable abort(java.lang.Throwable)>(null) at line 1170 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack39 == 0 goto (branch) at line 1166 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if i >= $stack35 goto (branch) at line 1142 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack29 == 0 goto $stack30 = new java.util.ArrayList at line 1124 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore$Flush: java.util.Collection flushMemtable(org.apache.cassandra.db.Memtable,boolean)> has 20 units and 12 lines
2020-08-25 10:54:58 [INFO] - 	 -> totalBytesOnDisk = 0L AT LINE 1128 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> maxBytesOnDisk = 0L AT LINE 1129 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> minBytesOnDisk = 9223372036854775807L AT LINE 1130 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> size = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: long bytesOnDisk()>() AT LINE 1205 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> totalBytesOnDisk = totalBytesOnDisk + size AT LINE 1206 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> maxBytesOnDisk = staticinvoke <java.lang.Math: long max(long,long)>(maxBytesOnDisk, size) AT LINE 1207 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> minBytesOnDisk = staticinvoke <java.lang.Math: long min(long,long)>(minBytesOnDisk, size) AT LINE 1208 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack49 = staticinvoke <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger access$600()>() AT LINE 1216 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50 = newarray (java.lang.Object)[5] AT LINE 1216 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[0] = sstables AT LINE 1216 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack53 = interfaceinvoke sstables.<java.util.List: int size()>() AT LINE 1218 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack53) AT LINE 1218 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[1] = $stack54 AT LINE 1218 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack56 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(totalBytesOnDisk) AT LINE 1219 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[2] = $stack56 AT LINE 1219 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(maxBytesOnDisk) AT LINE 1220 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[3] = $stack58 AT LINE 1220 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack60 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(minBytesOnDisk) AT LINE 1221 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[4] = $stack60 AT LINE 1221 with ID [b7468681-403a]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack49.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Flushed to {} ({} sstables, {}), biggest {}, smallest {}", $stack50) AT LINE 1216 with ID [b7468681-403a]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if l20 == null goto interfaceinvoke partition.<org.apache.cassandra.db.rows.UnfilteredRowIterator: void close()>() at line 1407 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if partition == null goto (branch) at line 1414 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack76 == 0 goto partition = virtualinvoke ci.<org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>() at line 1409 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack61 == 0 goto virtualinvoke validator.<org.apache.cassandra.repair.Validator: void complete()>() at line 1407 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if sstables != null goto $stack47 = validator.<org.apache.cassandra.repair.Validator: int gcBefore> at line 1389 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack32 != 0 goto sstables = null at line 1352 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager: void doValidationCompaction(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.repair.Validator)> has 12 units and 5 lines
2020-08-25 10:54:58 [INFO] - 	 -> start = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 1400 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> $stack62 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1428 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> $stack63 = interfaceinvoke $stack62.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 1428 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack63 == 0 goto (branch) AT LINE 1428 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> $stack64 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 1430 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> $stack65 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 1430 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> $stack66 = $stack65 - start AT LINE 1430 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> scanners#115 = virtualinvoke $stack64.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack66) AT LINE 1430 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> $stack68 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1432 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> $stack70 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(scanners#115) AT LINE 1432 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> $stack71 = validator.<org.apache.cassandra.repair.Validator: org.apache.cassandra.repair.RepairJobDesc desc> AT LINE 1431 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack68.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Validation finished in {} msec, for {}", $stack70, $stack71) AT LINE 1431 with ID [8fddfcb3-7130]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack32 != 0 goto tokens = specialinvoke this.<org.apache.cassandra.service.StorageService: java.util.Collection getTokensFor(java.net.InetAddress)>(newNode) at line 2270 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack9 == 0 goto $stack10 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> at line 2249 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void handleStateBootreplacing(java.net.InetAddress,java.lang.String[])> has 9 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2263 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = interfaceinvoke $stack14.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2263 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack15 == 0 goto $stack16 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2263 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2264 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = newarray (java.lang.Object)[3] AT LINE 2264 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21[0] = newNode AT LINE 2264 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21[1] = oldNode AT LINE 2264 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21[2] = tokens AT LINE 2264 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Node {} is replacing {}, tokens {}", $stack21) AT LINE 2264 with ID [70a51b37-7a07]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack7 == 0 goto return at line 3363 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void forceKeyspaceFlush(java.lang.String,java.lang.String[])> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3365 with ID [08ea3e72-f779]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = cfStore.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 3365 with ID [08ea3e72-f779]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Forcing flush on keyspace {}, CF {}", keyspaceName, $stack9) AT LINE 3365 with ID [08ea3e72-f779]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.CounterMutationVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.CounterMutationVerbHandler: org.slf4j.Logger logger> AT LINE 38 with ID [c9d382b4-6154]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Applying forwarded {}", cm) AT LINE 38 with ID [c9d382b4-6154]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack22 == 0 goto $stack16 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> at line 127 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.AbstractCommitLogService: void <init>(org.apache.cassandra.db.commitlog.CommitLog,java.lang.String,long,boolean)> has 4 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack31 = <org.apache.cassandra.db.commitlog.AbstractCommitLogService: org.slf4j.Logger logger> AT LINE 118 with ID [c26b89f7-cfcb]
2020-08-25 10:54:58 [INFO] - 	 -> $stack33 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(markerIntervalMillis) AT LINE 118 with ID [c26b89f7-cfcb]
2020-08-25 10:54:58 [INFO] - 	 -> $stack34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(syncIntervalMillis) AT LINE 118 with ID [c26b89f7-cfcb]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack31.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Will update the commitlog markers every {}ms and flush every {}ms", $stack33, $stack34) AT LINE 118 with ID [c26b89f7-cfcb]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack77 <= 0 goto interfaceinvoke l#6.<java.util.List: boolean add(java.lang.Object)>(candidate) at line 202 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack73 >= 0 goto $stack74 = candidate.<org.apache.cassandra.utils.Interval: java.lang.Object min> at line 200 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack44 == $stack45 goto return at line 219 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack30 == 0 goto $stack31 = staticinvoke <org.apache.cassandra.utils.Interval: org.apache.cassandra.utils.AsymmetricOrdering minOrdering()>() at line 198 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack16 == 0 goto staticinvoke <java.util.Collections: void sort(java.util.List)>(interval#3) at line 181 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack97 == 0 goto $stack10 = staticinvoke <org.apache.cassandra.utils.IntervalTree: org.slf4j.Logger access$100()>() at line 219 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.utils.IntervalTree$IntervalNode: void <init>(org.apache.cassandra.utils.IntervalTree,java.util.Collection)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = staticinvoke <org.apache.cassandra.utils.IntervalTree: org.slf4j.Logger access$100()>() AT LINE 161 with ID [2b2f99d8-72e9]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Creating IntervalNode from {}", toBisect) AT LINE 161 with ID [2b2f99d8-72e9]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.repair.Validator: void complete()> has 12 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = <org.apache.cassandra.repair.Validator: org.slf4j.Logger logger> AT LINE 240 with ID [156ab65b-3720]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = this.<org.apache.cassandra.repair.Validator: long validated> AT LINE 240 with ID [156ab65b-3720]
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack5) AT LINE 240 with ID [156ab65b-3720]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = this.<org.apache.cassandra.repair.Validator: org.apache.cassandra.repair.RepairJobDesc desc> AT LINE 240 with ID [156ab65b-3720]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = $stack9.<org.apache.cassandra.repair.RepairJobDesc: java.util.UUID sessionId> AT LINE 240 with ID [156ab65b-3720]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Validated {} partitions for {}.  Partitions per leaf are:", $stack8, $stack10) AT LINE 240 with ID [156ab65b-3720]
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.repair.Validator: org.slf4j.Logger logger> AT LINE 242 with ID [7225abb1-7a44]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = this.<org.apache.cassandra.repair.Validator: long validated> AT LINE 242 with ID [7225abb1-7a44]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack13) AT LINE 242 with ID [7225abb1-7a44]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = this.<org.apache.cassandra.repair.Validator: org.apache.cassandra.repair.RepairJobDesc desc> AT LINE 242 with ID [7225abb1-7a44]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = $stack17.<org.apache.cassandra.repair.RepairJobDesc: java.util.UUID sessionId> AT LINE 242 with ID [7225abb1-7a44]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Validated {} partitions for {}.  Partition sizes are:", $stack16, $stack18) AT LINE 242 with ID [7225abb1-7a44]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack23 == 0 goto $stack25 = virtualinvoke keysList.<java.lang.Object: java.lang.String toString()>() at line 334 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.util.Map multiget_slice(java.util.List,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 344 with ID [f57c91b4-c693]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String)>("multiget_slice") AT LINE 344 with ID [f57c91b4-c693]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void mutateRepairedAt(org.apache.cassandra.io.sstable.Descriptor,long)> has 5 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: org.slf4j.Logger logger> AT LINE 141 with ID [e2684fa3-ca3a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = <org.apache.cassandra.io.sstable.Component: org.apache.cassandra.io.sstable.Component STATS> AT LINE 141 with ID [e2684fa3-ca3a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = virtualinvoke descriptor.<org.apache.cassandra.io.sstable.Descriptor: java.lang.String filenameFor(org.apache.cassandra.io.sstable.Component)>($stack6) AT LINE 141 with ID [e2684fa3-ca3a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(newRepairedAt) AT LINE 141 with ID [e2684fa3-ca3a]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Mutating {} to repairedAt time {}", $stack9, $stack10) AT LINE 141 with ID [e2684fa3-ca3a]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack50 != 0 goto interfaceinvoke keys.<java.util.List: boolean add(java.lang.Object)>(sample) at line 109 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack32 == 0 goto numKeys#3 = interfaceinvoke keys.<java.util.List: int size()>() at line 111 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack31 == 0 goto $stack32 = interfaceinvoke keys.<java.util.List: boolean isEmpty()>() at line 105 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack23 == 0 goto $stack12 = <org.apache.cassandra.repair.Validator: org.slf4j.Logger logger> at line 103 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack37 != 0 goto (branch) at line 123 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.repair.Validator: void prepare(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.utils.MerkleTrees)> has 6 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = <org.apache.cassandra.repair.Validator: org.slf4j.Logger logger> AT LINE 130 with ID [c3b05b01-44a5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = this.<org.apache.cassandra.repair.Validator: org.apache.cassandra.utils.MerkleTrees trees> AT LINE 130 with ID [c3b05b01-44a5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = virtualinvoke $stack11.<org.apache.cassandra.utils.MerkleTrees: long size()>() AT LINE 130 with ID [c3b05b01-44a5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack14) AT LINE 130 with ID [c3b05b01-44a5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = this.<org.apache.cassandra.repair.Validator: org.apache.cassandra.repair.RepairJobDesc desc> AT LINE 130 with ID [c3b05b01-44a5]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Prepared AEService trees of size {} for {}", $stack15, $stack16) AT LINE 130 with ID [c3b05b01-44a5]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack53 < 0 goto (branch) at line 408 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogReader: void readSection(org.apache.cassandra.db.commitlog.CommitLogReadHandler,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.commitlog.CommitLogPosition,int,org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker,org.apache.cassandra.db.commitlog.CommitLogDescriptor)> has 9 units and 3 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack102 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 312 with ID [f9593a4a-cd0f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack104 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(mutationStart) AT LINE 312 with ID [f9593a4a-cd0f]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack102.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Reading mutation at {}", $stack104) AT LINE 312 with ID [f9593a4a-cd0f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack101 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 325 with ID [cb8d7181-acb0]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack101.<org.slf4j.Logger: void trace(java.lang.String)>("Not enough bytes left for another mutation in this CommitLog segment, continuing") AT LINE 325 with ID [cb8d7181-acb0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack97 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 334 with ID [ca55f26b-3f6f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack99 = interfaceinvoke reader.<org.apache.cassandra.io.util.FileDataInput: long getFilePointer()>() AT LINE 334 with ID [ca55f26b-3f6f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack100 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack99) AT LINE 334 with ID [ca55f26b-3f6f]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack97.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Encountered end of segment marker at {}", $stack100) AT LINE 334 with ID [ca55f26b-3f6f]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if v != null goto $stack5 = virtualinvoke v.<java.lang.Integer: int intValue()>() at line 1139 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.net.MessagingService: int getVersion(java.net.InetAddress)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = <org.apache.cassandra.net.MessagingService: org.slf4j.Logger logger> AT LINE 1142 with ID [be75373a-924d]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Assuming current protocol version for {}", endpoint) AT LINE 1142 with ID [be75373a-924d]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack67 == 0 goto $stack68 = new org.apache.cassandra.exceptions.InvalidRequestException at line 220 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack46 == 0 goto $stack47 = new org.apache.cassandra.exceptions.InvalidRequestException at line 245 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack35 == 0 goto $stack37 = <org.apache.cassandra.cql3.statements.CreateIndexStatement: org.slf4j.Logger logger> at line 243 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack26 == 0 goto $stack27 = this.<org.apache.cassandra.cql3.statements.CreateIndexStatement: org.apache.cassandra.cql3.statements.IndexPropDefs properties> at line 218 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack20 == 0 goto acceptedName#3 = this.<org.apache.cassandra.cql3.statements.CreateIndexStatement: java.lang.String indexName> at line 207 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.cql3.statements.CreateIndexStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack37 = <org.apache.cassandra.cql3.statements.CreateIndexStatement: org.slf4j.Logger logger> AT LINE 253 with ID [914de1bc-7e38]
2020-08-25 10:54:58 [INFO] - 	 -> $stack36 = this.<org.apache.cassandra.cql3.statements.CreateIndexStatement: java.lang.String indexName> AT LINE 253 with ID [914de1bc-7e38]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack37.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Updating index definition for {}", $stack36) AT LINE 253 with ID [914de1bc-7e38]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack40 <= 0 goto (branch) at line 3914 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack22 == 0 goto specialinvoke this.<org.apache.cassandra.service.StorageService: void startLeaving()>() at line 3912 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack15 == 0 goto $stack16 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> at line 3903 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack46 == $stack45 goto $stack14 = this.<org.apache.cassandra.service.StorageService: java.util.concurrent.atomic.AtomicBoolean isDecommissioning> at line 3904 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack11 >= 2 goto $stack13 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.service.StorageService$Mode operationMode> at line 3899 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack7 != 0 goto $stack8 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> at line 3897 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void decommission()> has 5 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3906 with ID [61e33d50-5671]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = interfaceinvoke $stack16.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 3906 with ID [61e33d50-5671]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack17 == 0 goto $stack18 = <org.apache.cassandra.service.PendingRangeCalculatorService: org.apache.cassandra.service.PendingRangeCalculatorService instance> AT LINE 3906 with ID [61e33d50-5671]
2020-08-25 10:54:58 [INFO] - 	 -> $stack43 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3907 with ID [61e33d50-5671]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack43.<org.slf4j.Logger: void debug(java.lang.String)>("DECOMMISSIONING") AT LINE 3907 with ID [61e33d50-5671]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.streaming.ReplicationFinishedVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 7 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = <org.apache.cassandra.streaming.ReplicationFinishedVerbHandler: org.slf4j.Logger logger> AT LINE 37 with ID [7c02f7f9-ff03]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 37 with ID [7c02f7f9-ff03]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack9 == 0 goto $stack10 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() AT LINE 37 with ID [7c02f7f9-ff03]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = <org.apache.cassandra.streaming.ReplicationFinishedVerbHandler: org.slf4j.Logger logger> AT LINE 38 with ID [7c02f7f9-ff03]
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id) AT LINE 38 with ID [7c02f7f9-ff03]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = msg.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 38 with ID [7c02f7f9-ff03]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Replying to {}@{}", $stack14, $stack15) AT LINE 38 with ID [7c02f7f9-ff03]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void start(int,java.util.Map)> has 8 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1355 with ID [dc80e54f-1843]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1355 with ID [dc80e54f-1843]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack9 == 0 goto $stack11 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor executor> AT LINE 1355 with ID [dc80e54f-1843]
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1356 with ID [dc80e54f-1843]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 1356 with ID [dc80e54f-1843]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = virtualinvoke $stack16.<org.apache.cassandra.gms.HeartBeatState: int getGeneration()>() AT LINE 1356 with ID [dc80e54f-1843]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17) AT LINE 1356 with ID [dc80e54f-1843]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("gossip started with generation {}", $stack18) AT LINE 1356 with ID [dc80e54f-1843]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if size >= 1 goto $stack8 = <org.apache.cassandra.gms.TokenSerializer: org.slf4j.Logger logger> at line 55 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.TokenSerializer: java.util.Collection deserialize(org.apache.cassandra.dht.IPartitioner,java.io.DataInput)> has 4 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = <org.apache.cassandra.gms.TokenSerializer: org.slf4j.Logger logger> AT LINE 57 with ID [b83c5b3d-2d40]
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = (long) size AT LINE 57 with ID [b83c5b3d-2d40]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack7) AT LINE 57 with ID [b83c5b3d-2d40]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Reading token of {}", $stack10) AT LINE 57 with ID [b83c5b3d-2d40]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack15 == 0 goto $stack16 = this.<org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.view.ViewManager viewManager> at line 321 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack23 != null goto $stack9 = this.<org.apache.cassandra.db.Keyspace: org.apache.cassandra.schema.KeyspaceMetadata metadata> at line 325 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.Keyspace: void <init>(java.lang.String,boolean)> has 4 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = <org.apache.cassandra.db.Keyspace: org.slf4j.Logger logger> AT LINE 323 with ID [ba9c0022-a696]
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = virtualinvoke this.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 323 with ID [ba9c0022-a696]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = cfm.<org.apache.cassandra.config.CFMetaData: java.lang.String cfName> AT LINE 323 with ID [ba9c0022-a696]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Initializing {}.{}", $stack20, $stack21) AT LINE 323 with ID [ba9c0022-a696]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.LoadBroadcaster$1: void run()> has 5 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack1 = staticinvoke <org.apache.cassandra.service.LoadBroadcaster: org.slf4j.Logger access$000()>() AT LINE 90 with ID [4da8a7cc-ddfb]
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = interfaceinvoke $stack1.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 90 with ID [4da8a7cc-ddfb]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack2 == 0 goto $stack5 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 90 with ID [4da8a7cc-ddfb]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = staticinvoke <org.apache.cassandra.service.LoadBroadcaster: org.slf4j.Logger access$000()>() AT LINE 91 with ID [4da8a7cc-ddfb]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String)>("Disseminating load info ...") AT LINE 91 with ID [4da8a7cc-ddfb]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)> has 4 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.slf4j.Logger logger> AT LINE 64 with ID [cc7842ab-83d8]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String)>("Disabling tombstone compactions for DTCS") AT LINE 64 with ID [cc7842ab-83d8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.slf4j.Logger logger> AT LINE 67 with ID [4e8777e2-b304]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String)>("Enabling tombstone compactions for DTCS") AT LINE 67 with ID [4e8777e2-b304]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack25 == 0 goto return range at line 2745 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack19 == 0 goto $stack20 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> at line 2728 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: com.google.common.collect.Multimap getChangedRangesForLeaving(java.lang.String,java.net.InetAddress)> has 17 units and 6 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2721 with ID [4bb5b28c-313b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2721 with ID [4bb5b28c-313b]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack13 == 0 goto $stack14 = new java.util.HashMap AT LINE 2721 with ID [4bb5b28c-313b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack56 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2722 with ID [4bb5b28c-313b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(ranges, ", ") AT LINE 2722 with ID [4bb5b28c-313b]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack56.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} ranges [{}]", endpoint, $stack58) AT LINE 2722 with ID [4bb5b28c-313b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack35 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2749 with ID [823a0e4b-eb72, b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack36 = interfaceinvoke $stack35.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2749 with ID [823a0e4b-eb72, b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack36 == 0 goto interfaceinvoke range.<com.google.common.collect.Multimap: boolean putAll(java.lang.Object,java.lang.Iterable)>(range, newReplicaEndpoints) AT LINE 2749 with ID [823a0e4b-eb72, b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack39 = interfaceinvoke newReplicaEndpoints.<java.util.Collection: boolean isEmpty()>() AT LINE 2750 with ID [823a0e4b-eb72, b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack39 == 0 goto $stack40 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2750 with ID [823a0e4b-eb72, b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack46 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2751 with ID [823a0e4b-eb72]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack46.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Range {} already in all replicas", range) AT LINE 2751 with ID [823a0e4b-eb72]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= interfaceinvoke range.<com.google.common.collect.Multimap: boolean putAll(java.lang.Object,java.lang.Iterable)>(range, newReplicaEndpoints)] AT LINE 2751 with ID [823a0e4b-eb72, b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2753 with ID [b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(newReplicaEndpoints, ", ") AT LINE 2753 with ID [b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Range {} will be responsibility of {}", range, $stack42) AT LINE 2753 with ID [b2ef8a94-dcc1]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: void handleReplayedSegment(java.io.File)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: org.slf4j.Logger logger> AT LINE 137 with ID [77db7ce1-8fe2]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Moving (Unopened) segment {} to cdc_raw directory after replay", file) AT LINE 137 with ID [77db7ce1-8fe2]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if message != null goto $stack12 = <org.apache.cassandra.net.MessagingService: int current_version> at line 193 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.net.IncomingTcpConnection: java.net.InetAddress receiveMessage(org.apache.cassandra.io.util.DataInputPlus,int)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = <org.apache.cassandra.net.IncomingTcpConnection: org.slf4j.Logger logger> AT LINE 204 with ID [d4448abf-2df5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(version) AT LINE 204 with ID [d4448abf-2df5]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received connection from newer protocol version {}. Ignoring message", $stack15) AT LINE 204 with ID [d4448abf-2df5]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack66 == 0 goto hostString = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>(key#14, 47) at line 161 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack36 == 0 goto $stack37 = <org.apache.cassandra.locator.PropertyFileSnitch: org.slf4j.Logger logger> at line 207 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack53 != 0 goto $stack24 = <org.apache.cassandra.locator.PropertyFileSnitch: org.slf4j.Logger logger> at line 208 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if entry#23 != null goto key#24 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getLocalAddress()>() at line 201 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack19 == 0 goto stream#22 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() at line 156 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.locator.PropertyFileSnitch: void reloadConfiguration(boolean)> has 20 units and 5 lines
2020-08-25 10:54:58 [INFO] - 	 -> value#27 = $stack33 AT LINE 206 with ID [6a1ebf87-5d6a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack34 = virtualinvoke reloadedMap.<java.util.HashMap: java.util.Set entrySet()>() AT LINE 207 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> newDefault#28 = interfaceinvoke $stack34.<java.util.Set: java.util.Iterator iterator()>() AT LINE 207 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack36 = interfaceinvoke newDefault#28.<java.util.Iterator: boolean hasNext()>() AT LINE 207 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> if $stack36 == 0 goto $stack37 = <org.apache.cassandra.locator.PropertyFileSnitch: org.slf4j.Logger logger> AT LINE 207 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack43 = interfaceinvoke newDefault#28.<java.util.Iterator: java.lang.Object next()>() AT LINE 215 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> hostString#29 = (java.util.Map$Entry) $stack43 AT LINE 215 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack44 = interfaceinvoke hostString#29.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack45 = virtualinvoke value#27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack44) AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack47 = interfaceinvoke hostString#29.<java.util.Map$Entry: java.lang.Object getValue()>() AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack48 = (java.lang.Object[]) $stack47 AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack49 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack48) AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack50 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack49) AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= $stack36 = interfaceinvoke newDefault#28.<java.util.Iterator: boolean hasNext()>()] AT LINE 208 with ID []
2020-08-25 10:54:58 [INFO] - 	 -> $stack37 = <org.apache.cassandra.locator.PropertyFileSnitch: org.slf4j.Logger logger> AT LINE 209 with ID [6a1ebf87-5d6a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack39 = virtualinvoke value#27.<java.lang.StringBuilder: java.lang.String toString()>() AT LINE 209 with ID [6a1ebf87-5d6a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack39, ", ") AT LINE 209 with ID [6a1ebf87-5d6a]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack37.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Loaded network topology from property file: {}", $stack40) AT LINE 209 with ID [6a1ebf87-5d6a]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack6 != 0 goto virtualinvoke this.<org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler: void signalCloseDone()>() at line 308 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if message == null goto (branch) at line 315 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler: void run()> has 4 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = staticinvoke <org.apache.cassandra.streaming.ConnectionHandler: org.slf4j.Logger access$000()>() AT LINE 312 with ID [01e0be6e-6d53]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = this.<org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler: org.apache.cassandra.streaming.StreamSession session> AT LINE 312 with ID [01e0be6e-6d53]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = virtualinvoke $stack11.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 312 with ID [01e0be6e-6d53]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("[Stream #{}] Received {}", $stack13, message) AT LINE 312 with ID [01e0be6e-6d53]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.DefinitionsUpdateVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.db.DefinitionsUpdateVerbHandler: org.slf4j.Logger logger> AT LINE 45 with ID [e92035d0-fa9c]
2020-08-25 10:54:58 [INFO] - 	 -> $stack3 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 45 with ID [e92035d0-fa9c]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received schema mutation push from {}", $stack3) AT LINE 45 with ID [e92035d0-fa9c]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack8 == 0 goto $stack9 = <org.apache.cassandra.config.Schema: org.slf4j.Logger logger> at line 454 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.config.Schema: void load(org.apache.cassandra.config.ViewDefinition)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.config.Schema: org.slf4j.Logger logger> AT LINE 457 with ID [894f39a7-cc84]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Adding {} to cfIdMap", cfm) AT LINE 457 with ID [894f39a7-cc84]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack21 == 0 goto (branch) at line 73 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack34 == 0 goto (branch) at line 78 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.client.RingCache: void refreshEndpointMap()>
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.Keyspace: void createReplicationStrategy(org.apache.cassandra.schema.KeyspaceMetadata)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = <org.apache.cassandra.db.Keyspace: org.slf4j.Logger logger> AT LINE 351 with ID [277eb9e6-ffd5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = ksm.<org.apache.cassandra.schema.KeyspaceMetadata: java.lang.String name> AT LINE 351 with ID [277eb9e6-ffd5]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("New replication settings for keyspace {} - invalidating disk boundary caches", $stack19) AT LINE 351 with ID [277eb9e6-ffd5]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if task != null goto $stack19 = this.<org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate: org.apache.cassandra.db.compaction.CompactionManager this$0> at line 269 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack12 != 0 goto $stack13 = this.<org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 261 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate: void run()> has 11 units and 3 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = staticinvoke <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger access$000()>() AT LINE 260 with ID [fc1c3866-973f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = this.<org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 260 with ID [fc1c3866-973f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = $stack5.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 260 with ID [fc1c3866-973f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = virtualinvoke $stack6.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 260 with ID [fc1c3866-973f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = this.<org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate: org.apache.cassandra.db.ColumnFamilyStore cfs> AT LINE 260 with ID [fc1c3866-973f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = $stack9.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 260 with ID [fc1c3866-973f]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Checking {}.{}", $stack8, $stack10) AT LINE 260 with ID [fc1c3866-973f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack34 = staticinvoke <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger access$000()>() AT LINE 263 with ID [89dc2f40-b0fc]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void trace(java.lang.String)>("Aborting compaction for dropped CF") AT LINE 263 with ID [89dc2f40-b0fc]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29 = staticinvoke <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger access$000()>() AT LINE 271 with ID [9d9838a0-8b55]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String)>("No tasks available") AT LINE 271 with ID [9d9838a0-8b55]
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.net.OutboundTcpConnection: void writeConnected(org.apache.cassandra.net.OutboundTcpConnection$QueuedMessage,boolean)>
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.EchoVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.service.EchoVerbHandler: org.slf4j.Logger logger> AT LINE 39 with ID [3aa2bf9b-338d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 39 with ID [3aa2bf9b-338d]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending a EchoMessage reply {}", $stack8) AT LINE 39 with ID [3aa2bf9b-338d]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack16 == 0 goto (branch) at line 158 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack8 == 0 goto $stack9 = this.<org.apache.cassandra.db.commitlog.CommitLogReplayer: java.util.Queue futures> at line 146 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogReplayer: int blockForWrites()> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.commitlog.CommitLogReplayer: org.slf4j.Logger logger> AT LINE 151 with ID [f9705258-8199]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String)>("Finished waiting on mutations from recovery") AT LINE 151 with ID [f9705258-8199]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack27 == 0 goto (branch) at line 76 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack19 == 0 goto return at line 72 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack15 != 0 goto $stack16 = <org.apache.cassandra.db.SizeEstimatesRecorder: org.slf4j.Logger logger> at line 64 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.SizeEstimatesRecorder: void run()> has 20 units and 6 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack44 = <org.apache.cassandra.db.SizeEstimatesRecorder: org.slf4j.Logger logger> AT LINE 66 with ID [0b0778e3-51e1]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack44.<org.slf4j.Logger: void debug(java.lang.String)>("Node is not part of the ring; not recording size estimates") AT LINE 66 with ID [0b0778e3-51e1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.SizeEstimatesRecorder: org.slf4j.Logger logger> AT LINE 70 with ID [29944fa0-8568]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String)>("Recording size estimates") AT LINE 70 with ID [29944fa0-8568]
2020-08-25 10:54:58 [INFO] - 	 -> start = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 78 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack31 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 80 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> passed = $stack31 - start AT LINE 80 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack34 = <org.apache.cassandra.db.SizeEstimatesRecorder: org.slf4j.Logger logger> AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack32 = newarray (java.lang.Object)[3] AT LINE 81 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack33 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack37 = virtualinvoke $stack33.<java.util.concurrent.TimeUnit: long toMillis(long)>(passed) AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack37) AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack32[0] = $stack38 AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack39 = table.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = $stack39.<org.apache.cassandra.config.CFMetaData: java.lang.String ksName> AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack32[1] = $stack40 AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack41 = table.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack42 = $stack41.<org.apache.cassandra.config.CFMetaData: java.lang.String cfName> AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack32[2] = $stack42 AT LINE 82 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Spent {} milliseconds on estimating {}.{} size", $stack32) AT LINE 81 with ID [ce948301-a2d5]
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: java.lang.Throwable extractThrowable(java.lang.Runnable)>
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack6 == 0 goto replica = staticinvoke <org.apache.cassandra.db.lifecycle.LogReplica: org.apache.cassandra.db.lifecycle.LogReplica create(java.io.File,java.lang.String)>(directory, fileName) at line 72 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LogReplicaSet: void maybeCreateReplica(java.io.File,java.lang.String,java.util.Set)> has 5 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = <org.apache.cassandra.db.lifecycle.LogReplicaSet: org.slf4j.Logger logger> AT LINE 81 with ID [1b749bc7-7b5d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 81 with ID [1b749bc7-7b5d]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack13 == 0 goto return AT LINE 81 with ID [1b749bc7-7b5d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.db.lifecycle.LogReplicaSet: org.slf4j.Logger logger> AT LINE 82 with ID [1b749bc7-7b5d]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Created new file replica {}", replica) AT LINE 82 with ID [1b749bc7-7b5d]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if clazz != null goto $stack8 = <org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory: com.google.common.cache.LoadingCache STEMMER_CONSTRUCTOR_CACHE> at line 90 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if locale != null goto $stack4 = virtualinvoke locale.<java.util.Locale: java.lang.String getLanguage()>() at line 83 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory: org.tartarus.snowball.SnowballStemmer getStemmer(java.util.Locale)>
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if i >= $stack5 goto return at line 526 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.LeveledManifest: void logDistribution()> has 26 units and 7 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 524 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [INFO] - 	 -> $stack3 = interfaceinvoke $stack2.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 524 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack3 == 0 goto return AT LINE 524 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [INFO] - 	 -> i = 0 AT LINE 526 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations> AT LINE 526 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = lengthof $stack4 AT LINE 526 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [INFO] - 	 -> if i >= $stack5 goto return AT LINE 526 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = virtualinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List getLevel(int)>(i) AT LINE 528 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = interfaceinvoke $stack6.<java.util.List: boolean isEmpty()>() AT LINE 528 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack7 != 0 goto i = i + 1 AT LINE 528 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 531 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = newarray (java.lang.Object)[4] AT LINE 530 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i) AT LINE 531 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10[0] = $stack14 AT LINE 531 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = virtualinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List getLevel(int)>(i) AT LINE 532 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = interfaceinvoke $stack16.<java.util.List: int size()>() AT LINE 532 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17) AT LINE 532 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10[1] = $stack18 AT LINE 532 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = virtualinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List getLevel(int)>(i) AT LINE 533 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: long getTotalBytes(java.lang.Iterable)>($stack20) AT LINE 533 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack21) AT LINE 533 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10[2] = $stack22 AT LINE 533 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10[3] = this AT LINE 533 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("L{} contains {} SSTables ({}) in {}", $stack10) AT LINE 530 with ID [8b8975eb-975f]
2020-08-25 10:54:58 [INFO] - 	 -> i = i + 1 AT LINE 526 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= $stack4 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations>] AT LINE 526 with ID [8b8975eb-975f, UNKNOWN_ID]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack51 != 0 goto $stack44 = interfaceinvoke sstables.<java.util.Set: boolean isEmpty()>() at line 736 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack39 == 0 goto $stack40 = virtualinvoke cfs.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.lifecycle.Tracker getTracker()>() at line 681 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if shouldAnticompact != 0 goto (branch) at line 717 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack80 != 0 goto (branch) at line 712 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack78 == 0 goto (branch) at line 707 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack84 == 0 goto $stack78 = virtualinvoke r.<org.apache.cassandra.dht.Range: boolean intersects(org.apache.cassandra.dht.Bounds)>(sstableBounds) at line 712 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager: void performAnticompaction(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,org.apache.cassandra.utils.concurrent.Refs,org.apache.cassandra.db.lifecycle.LifecycleTransaction,long,java.util.UUID)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack33 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 671 with ID [7c08f9cf-7e6c]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack33.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("[repair #{}] Starting anticompaction for ranges {}", parentRepairSession, ranges) AT LINE 671 with ID [7c08f9cf-7e6c]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack55 == 0 goto (branch) at line 305 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack23 >= 0 goto phi = virtualinvoke hbWnd.<org.apache.cassandra.gms.ArrivalWindow: double phi(long)>(now) at line 292 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack17 <= 0 goto $stack18 = <org.apache.cassandra.utils.Clock: org.apache.cassandra.utils.Clock instance> at line 286 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if hbWnd != null goto $stack13 = <org.apache.cassandra.utils.Clock: org.apache.cassandra.utils.Clock instance> at line 279 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.FailureDetector: void interpret(java.net.InetAddress)> has 47 units and 10 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack78 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 294 with ID [dd7c9c22-d134]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack78.<org.slf4j.Logger: void debug(java.lang.String)>("Still not marking nodes down due to local pause") AT LINE 294 with ID [dd7c9c22-d134]
2020-08-25 10:54:58 [INFO] - 	 -> $stack25 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 298 with ID [a8a07652-2a6d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack26 = interfaceinvoke $stack25.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 298 with ID [a8a07652-2a6d]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack26 == 0 goto $stack27 = this.<org.apache.cassandra.gms.FailureDetector: double PHI_FACTOR> AT LINE 298 with ID [a8a07652-2a6d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack72 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 299 with ID [a8a07652-2a6d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack74 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(phi) AT LINE 299 with ID [a8a07652-2a6d]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack72.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("PHI for {} : {}", ep, $stack74) AT LINE 299 with ID [a8a07652-2a6d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack51 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 303 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack52 = interfaceinvoke $stack51.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 303 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack52 == 0 goto $stack53 = this.<org.apache.cassandra.gms.FailureDetector: java.util.List fdEvntListeners> AT LINE 303 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack61 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58 = newarray (java.lang.Object)[5] AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58[0] = ep AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack59 = this.<org.apache.cassandra.gms.FailureDetector: double PHI_FACTOR> AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack60 = $stack59 * phi AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack64 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack60) AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58[1] = $stack64 AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack66 = virtualinvoke this.<org.apache.cassandra.gms.FailureDetector: double getPhiConvictThreshold()>() AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack67 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack66) AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58[2] = $stack67 AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58[3] = hbWnd AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack69 = virtualinvoke hbWnd.<org.apache.cassandra.gms.ArrivalWindow: double mean()>() AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack70 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack69) AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58[4] = $stack70 AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack61.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Node {} phi {} > {}; intervals: {} mean: {}", $stack58) AT LINE 304 with ID [e55b505b-38b8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack42 = this.<org.apache.cassandra.gms.FailureDetector: double PHI_FACTOR> AT LINE 319 with ID [ddf382d5-7165, bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack43 = $stack42 * phi AT LINE 319 with ID [ddf382d5-7165, bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack44 = $stack43 * 80.0 AT LINE 319 with ID [ddf382d5-7165, bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack45 = $stack44 / 100.0 AT LINE 319 with ID [ddf382d5-7165, bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack46 = virtualinvoke this.<org.apache.cassandra.gms.FailureDetector: double getPhiConvictThreshold()>() AT LINE 319 with ID [ddf382d5-7165, bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack47 = $stack45 cmpl $stack46 AT LINE 319 with ID [ddf382d5-7165, bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack47 <= 0 goto $stack33 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 319 with ID [ddf382d5-7165, bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack48 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 312 with ID [ddf382d5-7165]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(phi) AT LINE 312 with ID [ddf382d5-7165]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack48.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("PHI for {} : {}", ep, $stack50) AT LINE 312 with ID [ddf382d5-7165]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= return] AT LINE 312 with ID [ddf382d5-7165, bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack33 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 314 with ID [bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack34 = interfaceinvoke $stack33.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 314 with ID [bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack34 == 0 goto return AT LINE 314 with ID [bdcb9c85-f50d, f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack35 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 316 with ID [bdcb9c85-f50d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(phi) AT LINE 316 with ID [bdcb9c85-f50d]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack35.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("PHI for {} : {}", ep, $stack37) AT LINE 316 with ID [bdcb9c85-f50d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack38 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 317 with ID [f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = virtualinvoke hbWnd.<org.apache.cassandra.gms.ArrivalWindow: double mean()>() AT LINE 317 with ID [f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack41 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack40) AT LINE 317 with ID [f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack38.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("mean for {} : {}", ep, $stack41) AT LINE 317 with ID [f4679d4d-4a2b]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.utils.Mx4jTool: boolean maybeLoad()> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = <org.apache.cassandra.utils.Mx4jTool: org.slf4j.Logger logger> AT LINE 45 with ID [bd060119-9b04]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String)>("Will try to load mx4j now, if it\'s in the classpath") AT LINE 45 with ID [bd060119-9b04]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack13 == 0 goto $stack14 = virtualinvoke this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata getTokenMetadata()>() at line 1991 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack56 > 0 goto moveName = pieces[0] at line 1984 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void onChange(java.net.InetAddress,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 1990 with ID [53723eb8-1c02]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Ignoring state change for dead or unknown endpoint: {}", endpoint) AT LINE 1990 with ID [53723eb8-1c02]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack10 != 0 goto iStream = null at line 895 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.io.sstable.format.SSTableReader: boolean loadSummary()>
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack33 == 0 goto $stack31 = specialinvoke this.<org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorizeMBeanServerMethod(org.apache.cassandra.auth.RoleResource,java.lang.String)>(userResource, methodName) at line 231 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack30 == 0 goto (branch) at line 223 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack21 == 0 goto $stack22 = interfaceinvoke principals.<java.util.Set: java.util.Iterator iterator()>() at line 215 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack19 == 0 goto principals = virtualinvoke subject.<javax.security.auth.Subject: java.util.Set getPrincipals()>() at line 206 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if subject != null goto $stack18 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: java.util.Set METHOD_BLACKLIST> at line 202 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack17 != 0 goto (branch) at line 198 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack13 != 0 goto $stack14 = this.<org.apache.cassandra.auth.jmx.AuthorizationProxy: java.util.function.Supplier isAuthzRequired> at line 191 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorize(javax.security.auth.Subject,java.lang.String,java.lang.Object[])> has 11 units and 5 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> AT LINE 189 with ID [a91a6868-5692]
2020-08-25 10:54:58 [INFO] - 	 -> if subject != null goto $stack8 = virtualinvoke subject.<javax.security.auth.Subject: java.lang.String toString()>() AT LINE 187 with ID [a91a6868-5692]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = "" AT LINE 187 with ID [a91a6868-5692]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Authorizing JMX method invocation {} for {}", methodName, $stack9)] AT LINE 194 with ID [a91a6868-5692]
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = virtualinvoke subject.<javax.security.auth.Subject: java.lang.String toString()>() AT LINE 189 with ID [a91a6868-5692]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = virtualinvoke $stack8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\n", " ") AT LINE 189 with ID [a91a6868-5692]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Authorizing JMX method invocation {} for {}", methodName, $stack9) AT LINE 187 with ID [a91a6868-5692]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> AT LINE 193 with ID [ca3b146c-76f0]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void trace(java.lang.String)>("Auth setup is not complete, refusing access") AT LINE 193 with ID [ca3b146c-76f0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack39 = <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.slf4j.Logger logger> AT LINE 208 with ID [ce3b8776-2796]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Access denied to blacklisted method {}", methodName) AT LINE 208 with ID [ce3b8776-2796]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if i >= $stack6 goto return at line 330 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: void finish(java.util.Set)>
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: void remove(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,long,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1427 with ID [363f1917-0a7b]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String)>("remove") AT LINE 1427 with ID [363f1917-0a7b]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack58 == 0 goto $stack11 = newarray (java.util.Set)[2] at line 270 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doAbort(java.lang.Throwable)> has 14 units and 3 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 237 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = interfaceinvoke $stack5.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 237 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack6 == 0 goto $stack7 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.List obsoletions> AT LINE 237 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack103 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack99 = newarray (java.lang.Object)[3] AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack100 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals> AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack99[0] = $stack100 AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack101 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack99[1] = $stack101 AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack102 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State logged> AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack99[2] = $stack102 AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack103.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Aborting transaction over {} staged: {}, logged: {}", $stack99) AT LINE 238 with ID [762a2482-527e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 247 with ID [42c78bab-d7a7]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Obsoleting {}", obsolete) AT LINE 247 with ID [42c78bab-d7a7]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if i >= $stack38 goto i#8 = virtualinvoke builder.<org.apache.cassandra.db.Slices$Builder: org.apache.cassandra.db.Slices build()>() at line 2459 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if compare >= 0 goto $stack79 = request.<org.apache.cassandra.thrift.MultiSliceRequest: boolean reversed> at line 2459 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if compare <= 0 goto $stack78 = request.<org.apache.cassandra.thrift.MultiSliceRequest: boolean reversed> at line 2469 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack29 == 0 goto $stack30 = virtualinvoke request.<org.apache.cassandra.thrift.MultiSliceRequest: org.apache.cassandra.thrift.ColumnParent getColumn_parent()>() at line 2452 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.util.List get_multi_slice(org.apache.cassandra.thrift.MultiSliceRequest)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2444 with ID [208665df-ce0b]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String)>("get_multi_slice") AT LINE 2444 with ID [208665df-ce0b]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if modifier != null goto $stack9 = new org.apache.cassandra.db.compaction.TimeWindowCompactionTask at line 355 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack15 == 0 goto $stack5 = this.<org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.db.ColumnFamilyStore cfs> at line 358 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 357 with ID [aaebce9e-cec9]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Unable to mark {} for compaction; probably a background compaction got to it first.  You can disable background compactions temporarily if this is a problem", sstables) AT LINE 357 with ID [aaebce9e-cec9]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: void run()> has 12 units and 4 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = staticinvoke <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger access$000()>() AT LINE 267 with ID [523ce7b9-7be2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack3 = interfaceinvoke $stack2.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 267 with ID [523ce7b9-7be2]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack3 == 0 goto $stack4 = this.<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: org.apache.cassandra.db.lifecycle.LogFile data> AT LINE 267 with ID [523ce7b9-7be2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack32 = staticinvoke <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger access$000()>() AT LINE 268 with ID [523ce7b9-7be2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack33 = this.<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: org.apache.cassandra.db.lifecycle.LogFile data> AT LINE 268 with ID [523ce7b9-7be2]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Removing files for transaction log {}", $stack33) AT LINE 268 with ID [523ce7b9-7be2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = staticinvoke <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger access$000()>() AT LINE 289 with ID [a3436720-8474]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 289 with ID [a3436720-8474]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack9 == 0 goto $stack10 = this.<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: org.apache.cassandra.db.lifecycle.LogFile data> AT LINE 289 with ID [a3436720-8474]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = staticinvoke <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger access$000()>() AT LINE 290 with ID [a3436720-8474]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = this.<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: org.apache.cassandra.db.lifecycle.LogFile data> AT LINE 290 with ID [a3436720-8474]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Closing transaction log {}", $stack12) AT LINE 290 with ID [a3436720-8474]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void replacementQuarantine(java.net.InetAddress)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 465 with ID [99b4fcd3-4f67]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void debug(java.lang.String)>("") AT LINE 465 with ID [99b4fcd3-4f67]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onRemove(com.datastax.driver.core.Host)> has 5 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = this.<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: java.util.concurrent.CopyOnWriteArraySet liveReplicaHosts> AT LINE 168 with ID [1f6054ca-9708]
2020-08-25 10:54:58 [INFO] - 	 -> $stack3 = virtualinvoke $stack2.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>(host) AT LINE 168 with ID [1f6054ca-9708]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack3 == 0 goto return AT LINE 168 with ID [1f6054ca-9708]
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: org.slf4j.Logger logger> AT LINE 170 with ID [1f6054ca-9708]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Removed the host {}", host) AT LINE 170 with ID [1f6054ca-9708]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack14 == 0 goto $stack16 = <org.apache.cassandra.service.ResponseResolver: org.slf4j.Logger logger> at line 495 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void sendRepairMutation(org.apache.cassandra.db.partitions.PartitionUpdate,java.net.InetAddress)> has 29 units and 6 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack58 = <org.apache.cassandra.service.ResponseResolver: org.slf4j.Logger logger> AT LINE 498 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack57 = newarray (java.lang.Object)[6] AT LINE 497 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(mutationSize) AT LINE 498 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack57[0] = $stack61 AT LINE 498 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(maxMutationSize) AT LINE 499 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack57[1] = $stack63 AT LINE 499 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack64 = this.<org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.service.DataResolver$RepairMergeListener this$1> AT LINE 499 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack65 = $stack64.<org.apache.cassandra.service.DataResolver$RepairMergeListener: org.apache.cassandra.service.DataResolver this$0> AT LINE 499 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack66 = $stack65.<org.apache.cassandra.service.DataResolver: org.apache.cassandra.db.ReadCommand command> AT LINE 500 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack68 = virtualinvoke $stack66.<org.apache.cassandra.db.ReadCommand: org.apache.cassandra.config.CFMetaData metadata()>() AT LINE 500 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack69 = $stack68.<org.apache.cassandra.config.CFMetaData: java.lang.String ksName> AT LINE 500 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack57[2] = $stack69 AT LINE 500 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack70 = this.<org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.service.DataResolver$RepairMergeListener this$1> AT LINE 500 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack71 = $stack70.<org.apache.cassandra.service.DataResolver$RepairMergeListener: org.apache.cassandra.service.DataResolver this$0> AT LINE 500 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack72 = $stack71.<org.apache.cassandra.service.DataResolver: org.apache.cassandra.db.ReadCommand command> AT LINE 501 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack74 = virtualinvoke $stack72.<org.apache.cassandra.db.ReadCommand: org.apache.cassandra.config.CFMetaData metadata()>() AT LINE 501 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack75 = $stack74.<org.apache.cassandra.config.CFMetaData: java.lang.String cfName> AT LINE 501 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack57[3] = $stack75 AT LINE 501 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack76 = this.<org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.service.DataResolver$RepairMergeListener this$1> AT LINE 501 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack77 = $stack76.<org.apache.cassandra.service.DataResolver$RepairMergeListener: org.apache.cassandra.service.DataResolver this$0> AT LINE 501 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack78 = $stack77.<org.apache.cassandra.service.DataResolver: org.apache.cassandra.db.ReadCommand command> AT LINE 502 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack80 = virtualinvoke $stack78.<org.apache.cassandra.db.ReadCommand: org.apache.cassandra.config.CFMetaData metadata()>() AT LINE 502 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack81 = virtualinvoke $stack80.<org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.marshal.AbstractType getKeyValidator()>() AT LINE 502 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack82 = this.<org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.db.DecoratedKey partitionKey> AT LINE 502 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack83 = virtualinvoke $stack82.<org.apache.cassandra.db.DecoratedKey: java.nio.ByteBuffer getKey()>() AT LINE 502 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack84 = virtualinvoke $stack81.<org.apache.cassandra.db.marshal.AbstractType: java.lang.String getString(java.nio.ByteBuffer)>($stack83) AT LINE 502 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack57[4] = $stack84 AT LINE 502 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack57[5] = destination AT LINE 502 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack58.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Encountered an oversized ({}/{}) read repair mutation for table {}.{}, key {}, node {}", $stack57) AT LINE 497 with ID [18c4c530-d86e]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onDropKeyspace(java.lang.String)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = staticinvoke <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger access$500()>() AT LINE 756 with ID [ba89d996-b3a0]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Keyspace {} was dropped, invalidating related prepared statements", ksName) AT LINE 756 with ID [ba89d996-b3a0]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack13 == 0 goto $stack14 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() at line 1022 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack9 == 0 goto return at line 1017 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageProxy: void asyncRemoveFromBatchlog(java.util.Collection,java.util.UUID)> has 5 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 1019 with ID [1f48b493-86d7]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = interfaceinvoke $stack11.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1019 with ID [1f48b493-86d7]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack12 == 0 goto $stack13 = staticinvoke <org.apache.cassandra.service.StorageProxy: boolean canDoLocalRequest(java.net.InetAddress)>(target) AT LINE 1019 with ID [1f48b493-86d7]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 1020 with ID [1f48b493-86d7]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Sending batchlog remove request {} to {}", uuid, target) AT LINE 1020 with ID [1f48b493-86d7]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamReader$StreamDeserializer: void <init>(org.apache.cassandra.config.CFMetaData,java.io.InputStream,org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader,long,java.util.UUID)> has 14 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = staticinvoke <org.apache.cassandra.streaming.StreamReader: org.slf4j.Logger access$000()>() AT LINE 202 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = newarray (java.lang.Object)[4] AT LINE 202 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalSize) AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15[0] = $stack18 AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = <org.apache.cassandra.streaming.StreamReader$StreamDeserializer: int INITIAL_MEM_BUFFER_SIZE> AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack19) AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15[1] = $stack21 AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = <org.apache.cassandra.streaming.StreamReader$StreamDeserializer: int MAX_MEM_BUFFER_SIZE> AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack22) AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15[2] = $stack24 AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack25 = <org.apache.cassandra.streaming.StreamReader$StreamDeserializer: int MAX_SPILL_FILE_SIZE> AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack25) AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15[3] = $stack27 AT LINE 204 with ID [0580afc3-d293]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Initializing rewindable input stream for reading legacy sstable with {} bytes with following parameters: initial_mem_buffer_size={}, max_mem_buffer_size={}, max_spill_file_size={}.", $stack15) AT LINE 202 with ID [0580afc3-d293]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack7 == 0 goto return at line 324 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.FailureDetector: void forceConviction(java.net.InetAddress)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 323 with ID [7d4eb1f8-6ee2]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Forcing conviction of {}", ep) AT LINE 323 with ID [7d4eb1f8-6ee2]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: void switchCompactionLocation(org.apache.cassandra.db.Directories$DataDirectory)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack36 = <org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: org.slf4j.Logger logger> AT LINE 115 with ID [525d25c9-72e0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(currentPartitionsToWrite) AT LINE 115 with ID [525d25c9-72e0]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack36.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Switching writer, currentPartitionsToWrite = {}", $stack38) AT LINE 115 with ID [525d25c9-72e0]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack76 == 0 goto $stack77 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> at line 138 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack72 == 0 goto (branch) at line 134 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack57 == 0 goto $stack63 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> at line 124 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack119 != 0 goto (branch) at line 87 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack111 == 0 goto $stack112 = virtualinvoke txn.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals()>() at line 82 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack95 == null goto (branch) at line 110 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack94 == 0 goto $stack95 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.metrics.RestorableMeter getReadMeter()>() at line 107 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack48 == 0 goto $stack49 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> at line 105 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack28 == 0 goto $stack30 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> at line 97 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack24 == 0 goto total#4 = 0L at line 80 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: java.util.List redistributeSummaries()> has 54 units and 16 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack116 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 86 with ID [aa881c15-75f6]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack116.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("SSTable {} cannot be re-sampled due to old sstable format", sstable) AT LINE 86 with ID [aa881c15-75f6]
2020-08-25 10:54:58 [INFO] - 	 -> total#4 = 0L AT LINE 96 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack25 = this.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution: java.util.List compacting> AT LINE 97 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack26 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($stack25, redistribute) AT LINE 97 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> readRates#5 = interfaceinvoke $stack26.<java.lang.Iterable: java.util.Iterator iterator()>() AT LINE 97 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack28 = interfaceinvoke readRates#5.<java.util.Iterator: boolean hasNext()>() AT LINE 97 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack28 == 0 goto $stack30 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 97 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack104 = interfaceinvoke readRates#5.<java.util.Iterator: java.lang.Object next()>() AT LINE 108 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> sstable = (org.apache.cassandra.io.sstable.format.SSTableReader) $stack104 AT LINE 108 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack105 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: long getIndexSummaryOffHeapSize()>() AT LINE 98 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> total#4 = total#4 + $stack105 AT LINE 98 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= $stack28 = interfaceinvoke readRates#5.<java.util.Iterator: boolean hasNext()>()] AT LINE 98 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29 = newarray (java.lang.Object)[3] AT LINE 100 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack33 = interfaceinvoke redistribute.<java.util.List: int size()>() AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack33) AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29[0] = $stack34 AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack35 = this.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution: long memoryPoolBytes> AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack36 = $stack35 / 1024L AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack37 = $stack36 / 1024L AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack37) AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29[1] = $stack39 AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = (double) total#4 AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack41 = $stack40 / 1024.0 AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack42 = $stack41 / 1024.0 AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack44 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack42) AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29[2] = $stack44 AT LINE 101 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Beginning redistribution of index summaries for {} sstables with memory pool size {} MB; current spaced used is {} MB", $stack29) AT LINE 100 with ID [c436936a-2136]
2020-08-25 10:54:58 [INFO] - 	 -> $stack49 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 117 with ID [4b9b8745-4109]
2020-08-25 10:54:58 [INFO] - 	 -> $stack51 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(sstable#8) AT LINE 117 with ID [4b9b8745-4109]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack49.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Total reads/sec across all sstables in index summary resize process: {}", $stack51) AT LINE 117 with ID [4b9b8745-4109]
2020-08-25 10:54:58 [INFO] - 	 -> $stack63 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 128 with ID [d631f1bf-2c4e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58 = this.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution: long memoryPoolBytes> AT LINE 127 with ID [d631f1bf-2c4e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack59 = $stack58 - sstable#12 AT LINE 127 with ID [d631f1bf-2c4e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack60 = (double) $stack59 AT LINE 127 with ID [d631f1bf-2c4e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack61 = $stack60 / 1024.0 AT LINE 127 with ID [d631f1bf-2c4e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack62 = $stack61 / 1024.0 AT LINE 128 with ID [d631f1bf-2c4e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack65 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack62) AT LINE 128 with ID [d631f1bf-2c4e]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack63.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Index summaries for compacting SSTables are using {} MB of space", $stack65) AT LINE 127 with ID [d631f1bf-2c4e]
2020-08-25 10:54:58 [INFO] - 	 -> total#4 = 0L AT LINE 137 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack73 = this.<org.apache.cassandra.io.sstable.IndexSummaryRedistribution: java.util.List compacting> AT LINE 138 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack74 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)>($stack73, oldFormatSSTables, newSSTables#17) AT LINE 138 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> sstable#46 = interfaceinvoke $stack74.<java.lang.Iterable: java.util.Iterator iterator()>() AT LINE 138 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack76 = interfaceinvoke sstable#46.<java.util.Iterator: boolean hasNext()>() AT LINE 138 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack76 == 0 goto $stack77 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 138 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack80 = interfaceinvoke sstable#46.<java.util.Iterator: java.lang.Object next()>() AT LINE 143 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> sstable = (org.apache.cassandra.io.sstable.format.SSTableReader) $stack80 AT LINE 143 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack81 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: long getIndexSummaryOffHeapSize()>() AT LINE 139 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> total#4 = total#4 + $stack81 AT LINE 139 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= $stack76 = interfaceinvoke sstable#46.<java.util.Iterator: boolean hasNext()>()] AT LINE 139 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack77 = <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.slf4j.Logger logger> AT LINE 141 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack79 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(total#4) AT LINE 141 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack77.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Completed resizing of index summaries; current approximate memory used: {}", $stack79) AT LINE 140 with ID [da1061c2-09e5]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void mutateLevel(org.apache.cassandra.io.sstable.Descriptor,int)> has 5 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: org.slf4j.Logger logger> AT LINE 131 with ID [75d0a8b9-2885]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.io.sstable.Component: org.apache.cassandra.io.sstable.Component STATS> AT LINE 131 with ID [75d0a8b9-2885]
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = virtualinvoke descriptor.<org.apache.cassandra.io.sstable.Descriptor: java.lang.String filenameFor(org.apache.cassandra.io.sstable.Component)>($stack5) AT LINE 131 with ID [75d0a8b9-2885]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newLevel) AT LINE 131 with ID [75d0a8b9-2885]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Mutating {} to level {}", $stack8, $stack9) AT LINE 131 with ID [75d0a8b9-2885]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onUp(com.datastax.driver.core.Host)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: org.slf4j.Logger logger> AT LINE 151 with ID [2c50a03c-c760]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("The host {} is now up", host) AT LINE 151 with ID [2c50a03c-c760]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack18 != 0 goto nowInSec = staticinvoke <org.apache.cassandra.utils.FBUtilities: int nowInSeconds()>() at line 80 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.view.ViewBuilder: void buildKey(org.apache.cassandra.db.DecoratedKey)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack43 = <org.apache.cassandra.db.view.ViewBuilder: org.slf4j.Logger logger> AT LINE 82 with ID [c7f446c0-aece]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack43.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Skipping {}, view query filters", key) AT LINE 82 with ID [c7f446c0-aece]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack17 == 0 goto $stack18 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> at line 1020 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void realMarkAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> has 13 units and 5 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1011 with ID [97e023ce-a248]
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = interfaceinvoke $stack5.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1011 with ID [97e023ce-a248]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack6 == 0 goto virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: void markAlive()>() AT LINE 1011 with ID [97e023ce-a248]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1012 with ID [97e023ce-a248]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("marking as alive {}", addr) AT LINE 1012 with ID [97e023ce-a248]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1018 with ID [c38ccac1-5f2a]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("removing expire time for endpoint : {}", addr) AT LINE 1018 with ID [c38ccac1-5f2a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1022 with ID [56abfe78-6725]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = interfaceinvoke $stack18.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1022 with ID [56abfe78-6725]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack19 == 0 goto return AT LINE 1022 with ID [56abfe78-6725]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1023 with ID [56abfe78-6725]
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = this.<org.apache.cassandra.gms.Gossiper: java.util.List subscribers> AT LINE 1023 with ID [56abfe78-6725]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Notified {}", $stack20) AT LINE 1023 with ID [56abfe78-6725]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.locator.ReconnectableSnitchHelper: void reconnect(java.net.InetAddress,java.net.InetAddress)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = <org.apache.cassandra.locator.ReconnectableSnitchHelper: org.slf4j.Logger logger> AT LINE 66 with ID [79b60f0b-cfa9]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Initiated reconnect to an Internal IP {} for the {}", localAddress, publicAddress) AT LINE 66 with ID [79b60f0b-cfa9]
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.io.sstable.format.SSTableReader: void saveBloomFilter(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.utils.IFilter)>
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = staticinvoke <org.apache.cassandra.service.PendingRangeCalculatorService: org.slf4j.Logger access$100()>() at line 66 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.PendingRangeCalculatorService$PendingRangeTask: void run()> has 11 units and 3 lines
2020-08-25 10:54:58 [INFO] - 	 -> start = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 64 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = staticinvoke <org.apache.cassandra.service.PendingRangeCalculatorService: org.slf4j.Logger access$100()>() AT LINE 68 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 68 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack13 == 0 goto $stack14 = <org.apache.cassandra.service.PendingRangeCalculatorService: org.apache.cassandra.service.PendingRangeCalculatorService instance> AT LINE 68 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = staticinvoke <org.apache.cassandra.service.PendingRangeCalculatorService: org.slf4j.Logger access$100()>() AT LINE 69 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = interfaceinvoke keyspaces.<java.util.List: int size()>() AT LINE 69 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17) AT LINE 69 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 69 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = $stack19 - start AT LINE 69 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack20) AT LINE 69 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Finished PendingRangeTask for {} keyspaces in {}ms", $stack18, $stack21) AT LINE 69 with ID [3fb58b8d-1373]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack8 != 0 goto $stack9 = <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.slf4j.Logger logger> at line 325 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void archiveAndDiscard(org.apache.cassandra.db.commitlog.CommitLogSegment)> has 6 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.slf4j.Logger logger> AT LINE 328 with ID [655bf64d-978e]
2020-08-25 10:54:58 [INFO] - 	 -> if archiveSuccess == 0 goto $stack12 = "by the archive script" AT LINE 328 with ID [655bf64d-978e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = "now" AT LINE 330 with ID [655bf64d-978e]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Segment {} is no longer active and will be deleted {}", segment, $stack12)] AT LINE 330 with ID [655bf64d-978e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = "by the archive script" AT LINE 330 with ID [655bf64d-978e]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Segment {} is no longer active and will be deleted {}", segment, $stack12) AT LINE 328 with ID [655bf64d-978e]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.net.MessagingService: void resetVersion(java.net.InetAddress)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack3 = <org.apache.cassandra.net.MessagingService: org.slf4j.Logger logger> AT LINE 1105 with ID [afa096dc-293c]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Resetting version for {}", endpoint) AT LINE 1105 with ID [afa096dc-293c]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack2 != null goto $stack3 = this.<org.apache.cassandra.streaming.StreamCoordinator: java.util.Iterator sessionsToConnect> at line 136 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamCoordinator: void connectNext()> has 7 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = <org.apache.cassandra.streaming.StreamCoordinator: org.slf4j.Logger logger> AT LINE 142 with ID [17e3187e-75d3]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = virtualinvoke next.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 142 with ID [17e3187e-75d3]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = next.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 142 with ID [17e3187e-75d3]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = virtualinvoke $stack11.<java.net.InetAddress: java.lang.String getHostAddress()>() AT LINE 142 with ID [17e3187e-75d3]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Connecting next session {} with {}.", $stack10, $stack12) AT LINE 142 with ID [17e3187e-75d3]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.streaming.StreamCoordinator: org.slf4j.Logger logger> AT LINE 146 with ID [b63b2ade-3a4a]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void debug(java.lang.String)>("Finished connecting all sessions") AT LINE 146 with ID [b63b2ade-3a4a]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry: void registerUserExpressionClass(java.lang.Class,org.apache.cassandra.db.filter.RowFilter$UserExpression$Deserializer)> has 10 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = staticinvoke <org.apache.cassandra.db.filter.RowFilter: org.slf4j.Logger access$1000()>() AT LINE 1074 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = newarray (java.lang.Object)[3] AT LINE 1074 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = virtualinvoke expressionClass.<java.lang.Class: java.lang.String getName()>() AT LINE 1075 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13[0] = $stack16 AT LINE 1075 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = virtualinvoke deserializer.<java.lang.Object: java.lang.Class getClass()>() AT LINE 1075 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = virtualinvoke $stack18.<java.lang.Class: java.lang.String getName()>() AT LINE 1075 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13[1] = $stack19 AT LINE 1075 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id) AT LINE 1075 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13[2] = $stack21 AT LINE 1075 with ID [a20f098c-6422]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Registered user defined expression type {} and serializer {} with identifier {}", $stack13) AT LINE 1074 with ID [a20f098c-6422]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack68 == 0 goto (branch) at line 177 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if jobRange != null goto jobTokenRange = specialinvoke this.<org.apache.cassandra.hadoop.cql3.CqlInputFormat: com.datastax.driver.core.TokenRange rangeToTokenRange(com.datastax.driver.core.Metadata,org.apache.cassandra.dht.Range)>(metadata, jobRange) at line 169 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack55 > 0 goto $stack53 = new java.util.Random at line 208 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack50 == 0 goto (branch) at line 189 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack48 == 0 goto l14 = interfaceinvoke splitfutures.<java.util.List: java.util.Iterator iterator()>() at line 167 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack72 == 0 goto (branch) at line 179 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack105 == null goto $stack106 = new org.apache.cassandra.dht.Range at line 146 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack104 == null goto $stack105 = jobKeyRange.<org.apache.cassandra.thrift.KeyRange: java.lang.String end_token> at line 144 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack103 != 0 goto $stack104 = jobKeyRange.<org.apache.cassandra.thrift.KeyRange: java.lang.String start_token> at line 142 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.CqlInputFormat: java.util.List getSplits(org.apache.hadoop.mapreduce.JobContext)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack29 = <org.apache.cassandra.hadoop.cql3.CqlInputFormat: org.slf4j.Logger logger> AT LINE 126 with ID [f11d71cc-7ede]
2020-08-25 10:54:58 [INFO] - 	 -> $stack28 = this.<org.apache.cassandra.hadoop.cql3.CqlInputFormat: org.apache.cassandra.dht.IPartitioner partitioner> AT LINE 126 with ID [f11d71cc-7ede]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("partitioner is {}", $stack28) AT LINE 126 with ID [f11d71cc-7ede]
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.utils.TopKSampler$1: void run()>
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if endpointsCount > 0 goto $stack14 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: int getBatchlogReplayThrottleInKB()>() at line 192 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.batchlog.BatchlogManager: void replayFailedBatches()> has 6 units and 3 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.batchlog.BatchlogManager: org.slf4j.Logger logger> AT LINE 187 with ID [d4786868-539c]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String)>("Started replayFailedBatches") AT LINE 187 with ID [d4786868-539c]
2020-08-25 10:54:58 [INFO] - 	 -> $stack54 = <org.apache.cassandra.batchlog.BatchlogManager: org.slf4j.Logger logger> AT LINE 194 with ID [1dceaec3-2b02]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack54.<org.slf4j.Logger: void trace(java.lang.String)>("Replay cancelled as there are no peers in the ring.") AT LINE 194 with ID [1dceaec3-2b02]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30 = <org.apache.cassandra.batchlog.BatchlogManager: org.slf4j.Logger logger> AT LINE 212 with ID [77f371ae-bbb4]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void trace(java.lang.String)>("Finished replayFailedBatches") AT LINE 212 with ID [77f371ae-bbb4]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: void createEphemeralSnapshotMarkerFile(java.lang.String)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1865 with ID [779fbd31-2fc9]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = virtualinvoke ephemeralSnapshotMarker.<java.io.File: java.lang.String getAbsolutePath()>() AT LINE 1865 with ID [779fbd31-2fc9]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Created ephemeral snapshot marker file on {}.", $stack13) AT LINE 1865 with ID [779fbd31-2fc9]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager$8: void execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack3 = staticinvoke <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger access$000()>() AT LINE 580 with ID [362bc9ca-ded6]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = virtualinvoke txn.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals()>() AT LINE 580 with ID [362bc9ca-ded6]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Relocating {}", $stack5) AT LINE 580 with ID [362bc9ca-ded6]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.net.IncomingTcpConnection: void close()> has 9 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack3 = <org.apache.cassandra.net.IncomingTcpConnection: org.slf4j.Logger logger> AT LINE 120 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = interfaceinvoke $stack3.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 120 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack4 == 0 goto $stack5 = this.<org.apache.cassandra.net.IncomingTcpConnection: java.net.Socket socket> AT LINE 120 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = <org.apache.cassandra.net.IncomingTcpConnection: org.slf4j.Logger logger> AT LINE 121 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = this.<org.apache.cassandra.net.IncomingTcpConnection: java.net.Socket socket> AT LINE 121 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = this.<org.apache.cassandra.net.IncomingTcpConnection: java.net.Socket socket> AT LINE 121 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = virtualinvoke $stack12.<java.net.Socket: boolean isClosed()>() AT LINE 121 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack16) AT LINE 121 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Closing socket {} - isclosed: {}", $stack15, $stack17) AT LINE 121 with ID [8dcd2b49-1ed1]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.index.SecondaryIndexManager: void registerIndex(org.apache.cassandra.index.Index)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = <org.apache.cassandra.index.SecondaryIndexManager: org.slf4j.Logger logger> AT LINE 802 with ID [4ad92926-6c80]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Registered index {}", name) AT LINE 802 with ID [4ad92926-6c80]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack9 == 0 goto $stack10 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> at line 2498 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack49 > 0 goto $stack8 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() at line 2509 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void handleStateRemoving(java.net.InetAddress,java.lang.String[])> has 5 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack24 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2522 with ID [9d80bd59-2795]
2020-08-25 10:54:58 [INFO] - 	 -> $stack25 = interfaceinvoke $stack24.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2522 with ID [9d80bd59-2795]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack25 == 0 goto $stack26 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2522 with ID [9d80bd59-2795]
2020-08-25 10:54:58 [INFO] - 	 -> $stack37 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2523 with ID [9d80bd59-2795]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack37.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Tokens {} removed manually (endpoint was {})", removeTokens, endpoint) AT LINE 2523 with ID [9d80bd59-2795]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack12 <= 0 goto return at line 71 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.paxos.ProposeCallback: void response(org.apache.cassandra.net.MessageIn)> has 4 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.service.paxos.ProposeCallback: org.slf4j.Logger logger> AT LINE 62 with ID [7f73e7b6-f1f6]
2020-08-25 10:54:58 [INFO] - 	 -> $stack3 = msg.<org.apache.cassandra.net.MessageIn: java.lang.Object payload> AT LINE 62 with ID [7f73e7b6-f1f6]
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = msg.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 62 with ID [7f73e7b6-f1f6]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Propose response {} from {}", $stack3, $stack2) AT LINE 62 with ID [7f73e7b6-f1f6]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack21 == 0 goto return at line 782 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack29 == 0 goto (branch) at line 773 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack17 == 0 goto $stack18 = interfaceinvoke toRemove.<java.util.Set: boolean isEmpty()>() at line 771 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack12 == 0 goto $stack13 = new java.util.HashSet at line 767 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.ActiveRepairService: void convict(java.net.InetAddress,double)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = <org.apache.cassandra.service.ActiveRepairService: org.slf4j.Logger logger> AT LINE 781 with ID [ff988b3b-0cc4]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Removing {} in parent repair sessions", toRemove) AT LINE 781 with ID [ff988b3b-0cc4]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LogTransaction: void <init>(org.apache.cassandra.db.compaction.OperationType,org.apache.cassandra.db.lifecycle.Tracker)> has 7 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger logger> AT LINE 127 with ID [960e7f42-6f96]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 127 with ID [960e7f42-6f96]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack9 == 0 goto return AT LINE 127 with ID [960e7f42-6f96]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger logger> AT LINE 128 with ID [960e7f42-6f96]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = this.<org.apache.cassandra.db.lifecycle.LogTransaction: org.apache.cassandra.db.lifecycle.LogFile txnFile> AT LINE 128 with ID [960e7f42-6f96]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = virtualinvoke $stack10.<org.apache.cassandra.db.lifecycle.LogFile: java.util.UUID id()>() AT LINE 128 with ID [960e7f42-6f96]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Created transaction logs with id {}", $stack13) AT LINE 128 with ID [960e7f42-6f96]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void maybeFinishShadowRound(java.net.InetAddress,boolean,java.util.Map)> has 6 units and 3 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1591 with ID [067d4e11-65ab]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Received a regular ack from {}, can now exit shadow round", respondent) AT LINE 1591 with ID [067d4e11-65ab]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1603 with ID [d260d69a-3b19]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Received an ack from {} indicating it is also in shadow round", respondent) AT LINE 1603 with ID [d260d69a-3b19]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1607 with ID [07c6b9cf-01be]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void debug(java.lang.String)>("All seeds are in a shadow round, clearing this node to exit its own") AT LINE 1607 with ID [07c6b9cf-01be]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack98 == 0 goto $stack54 = staticinvoke <org.apache.cassandra.index.SecondaryIndexManager$begin__39: java.util.function.Consumer bootstrap$()>() at line 587 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if l9 == null goto virtualinvoke controller.<org.apache.cassandra.db.ReadExecutionController: void close()>() at line 562 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if controller == null goto (branch) at line 624 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack68 == 0 goto $stack62 = staticinvoke <org.apache.cassandra.index.SecondaryIndexManager$finish__40: java.util.function.Consumer bootstrap$()>() at line 618 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack59 == 0 goto unfilteredRow#62 = virtualinvoke deletionBuilder#52.<org.apache.cassandra.db.MutableDeletionInfo$Builder: org.apache.cassandra.db.MutableDeletionInfo build()>() at line 597 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack77 != 0 goto row#61 = (org.apache.cassandra.db.rows.RangeTombstoneMarker) unfilteredRow at line 597 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack74 == 0 goto $stack75 = <org.apache.cassandra.index.SecondaryIndexManager: boolean $assertionsDisabled> at line 601 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.index.SecondaryIndexManager: void indexPartition(org.apache.cassandra.db.DecoratedKey,java.util.Set,int)> has 10 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack28 = <org.apache.cassandra.index.SecondaryIndexManager: org.slf4j.Logger logger> AT LINE 550 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29 = interfaceinvoke $stack28.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 550 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack29 == 0 goto $stack30 = interfaceinvoke indexes.<java.util.Set: boolean isEmpty()>() AT LINE 550 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> $stack106 = <org.apache.cassandra.index.SecondaryIndexManager: org.slf4j.Logger logger> AT LINE 551 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> $stack104 = this.<org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 551 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> $stack105 = $stack104.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 551 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> $stack108 = virtualinvoke $stack105.<org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.marshal.AbstractType getKeyValidator()>() AT LINE 551 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> $stack109 = virtualinvoke key.<org.apache.cassandra.db.DecoratedKey: java.nio.ByteBuffer getKey()>() AT LINE 551 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> $stack110 = virtualinvoke $stack108.<org.apache.cassandra.db.marshal.AbstractType: java.lang.String getString(java.nio.ByteBuffer)>($stack109) AT LINE 551 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack106.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Indexing partition {}", $stack110) AT LINE 551 with ID [9a2d7937-9899]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if blockfor >= $stack20 goto $stack12 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> at line 100 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.ReadCallback: void <init>(org.apache.cassandra.service.ResponseResolver,org.apache.cassandra.db.ConsistencyLevel,int,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.Keyspace,java.util.List,long)> has 8 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 100 with ID [073aa94d-b538]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = interfaceinvoke $stack12.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 100 with ID [073aa94d-b538]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack13 == 0 goto return AT LINE 100 with ID [073aa94d-b538]
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 101 with ID [073aa94d-b538]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(blockfor) AT LINE 101 with ID [073aa94d-b538]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = this.<org.apache.cassandra.service.ReadCallback: java.util.List endpoints> AT LINE 101 with ID [073aa94d-b538]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack17, ",") AT LINE 101 with ID [073aa94d-b538]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Blockfor is {}; setting up requests to {}", $stack16, $stack18) AT LINE 101 with ID [073aa94d-b538]
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.net.MessagingService: void waitUntilListening()>
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: java.util.List get_indexed_slices(org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.IndexClause,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack27 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 1720 with ID [ac06d33d-c52b]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack27.<org.slf4j.Logger: void trace(java.lang.String)>("scan") AT LINE 1720 with ID [ac06d33d-c52b]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: void scheduleFlush()> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 295 with ID [4d428f55-f8bb]
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(period) AT LINE 295 with ID [4d428f55-f8bb]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("scheduling flush in {} ms", $stack7) AT LINE 295 with ID [4d428f55-f8bb]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.tracing.TraceStateImpl: void traceImpl(java.lang.String)> has 5 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = <org.apache.cassandra.tracing.TraceStateImpl: org.slf4j.Logger logger> AT LINE 68 with ID [9665e70b-0f7c]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = interfaceinvoke $stack10.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 68 with ID [9665e70b-0f7c]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack11 == 0 goto return AT LINE 68 with ID [9665e70b-0f7c]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = <org.apache.cassandra.tracing.TraceStateImpl: org.slf4j.Logger logger> AT LINE 69 with ID [9665e70b-0f7c]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Adding <{}> to trace events", message) AT LINE 69 with ID [9665e70b-0f7c]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack10 == 0 goto return at line 994 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack19 == 0 goto $stack20 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() at line 998 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageProxy: void syncWriteToBatchlog(org.apache.cassandra.service.WriteResponseHandler,org.apache.cassandra.batchlog.Batch,java.util.Collection)> has 9 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12 = newarray (java.lang.Object)[3] AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = batch.<org.apache.cassandra.batchlog.Batch: java.util.UUID id> AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12[0] = $stack13 AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12[1] = target AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = virtualinvoke batch.<org.apache.cassandra.batchlog.Batch: int size()>() AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17) AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack12[2] = $stack18 AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Sending batchlog store request {} to {} for {} mutations", $stack12) AT LINE 996 with ID [ced1ac55-a59e]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack37 != 0 goto $stack22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> at line 250 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack14 == 0 goto $stack15 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> at line 242 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack31 <= 0 goto (branch) at line 248 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.utils.Pair getBuckets(java.lang.Iterable,java.util.concurrent.TimeUnit,int,java.util.concurrent.TimeUnit)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.slf4j.Logger logger> AT LINE 252 with ID [37027a43-e776]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(maxTimestamp) AT LINE 252 with ID [37027a43-e776]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("buckets {}, max timestamp {}", buckets, $stack17) AT LINE 252 with ID [37027a43-e776]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack96 == 0 goto $stack98 = (double) endsize#94 at line 1182 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if l32 == null goto interfaceinvoke partition.<org.apache.cassandra.db.rows.UnfilteredRowIterator: void close()>() at line 1148 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if partition == null goto (branch) at line 1167 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack53 != 0 goto start = staticinvoke <java.lang.System: long nanoTime()>() at line 1112 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack189 != 0 goto $stack53 = staticinvoke <org.apache.cassandra.db.compaction.CompactionManager: boolean needsCleanup(org.apache.cassandra.io.sstable.format.SSTableReader,java.util.Collection)>(sstable, ranges) at line 1115 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack193 == 0 goto sstable = virtualinvoke txn.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.io.sstable.format.SSTableReader onlyOne()>() at line 1110 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager: void doCleanupOne(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy,java.util.Collection,boolean)> has 8 units and 3 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack183 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1114 with ID [70cbc47f-f359]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack183.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Skipping {} for cleanup; all rows should be kept", sstable) AT LINE 1114 with ID [70cbc47f-f359]
2020-08-25 10:54:58 [INFO] - 	 -> $stack62 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1124 with ID [b5a3eafb-f05d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack63 = interfaceinvoke $stack62.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1124 with ID [b5a3eafb-f05d]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack63 == 0 goto $stack64 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1124 with ID [b5a3eafb-f05d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack172 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1125 with ID [b5a3eafb-f05d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack174 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(expectedBloomFilterSize) AT LINE 1125 with ID [b5a3eafb-f05d]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack172.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Expected bloom filter size : {}", $stack174) AT LINE 1125 with ID [b5a3eafb-f05d]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void addExpireTimeForEndpoint(java.net.InetAddress,long)> has 6 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1655 with ID [f5a8b058-76f2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = interfaceinvoke $stack4.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 1655 with ID [f5a8b058-76f2]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.gms.Gossiper: java.util.Map expireTimeEndpointMap> AT LINE 1655 with ID [f5a8b058-76f2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1657 with ID [f5a8b058-76f2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(expireTime) AT LINE 1657 with ID [f5a8b058-76f2]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("adding expire time for endpoint : {} ({})", endpoint, $stack11) AT LINE 1657 with ID [f5a8b058-76f2]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack38 != 0 goto (branch) at line 383 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack33 == 0 goto (branch) at line 379 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack14 == 0 goto $stack15 = <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger logger> at line 371 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamSession: java.lang.Iterable lambda$getSSTableSectionsForRanges$0(java.util.List,boolean,org.apache.cassandra.db.lifecycle.View)> has 11 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger logger> AT LINE 386 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = interfaceinvoke $stack15.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 386 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack16 == 0 goto return sstables AT LINE 386 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack17 = <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger logger> AT LINE 387 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = interfaceinvoke sstables.<java.util.Set: int size()>() AT LINE 387 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack19) AT LINE 387 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = <org.apache.cassandra.db.lifecycle.SSTableSet: org.apache.cassandra.db.lifecycle.SSTableSet CANONICAL> AT LINE 387 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = virtualinvoke view.<org.apache.cassandra.db.lifecycle.View: java.lang.Iterable select(org.apache.cassandra.db.lifecycle.SSTableSet)>($stack21) AT LINE 387 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack23 = staticinvoke <com.google.common.collect.Iterables: int size(java.lang.Iterable)>($stack22) AT LINE 387 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack23) AT LINE 387 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("ViewFilter for {}/{} sstables", $stack20, $stack24) AT LINE 387 with ID [917c3f91-19a2]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack3 != null goto $stack4 = this.<org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: org.apache.cassandra.service.ReadCallback repairHandler> at line 1834 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: void maybeAwaitFullDataRead()>
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack3 != 0 goto $stack4 = this.<org.apache.cassandra.service.StorageProxy$RangeCommandIterator: org.apache.cassandra.db.PartitionRangeReadCommand command> at line 2182 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageProxy$RangeCommandIterator: void updateConcurrencyFactor()> has 10 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = staticinvoke <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger access$100()>() AT LINE 2194 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = newarray (java.lang.Object)[3] AT LINE 2194 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack25 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(rowsPerRange) AT LINE 2195 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22[0] = $stack25 AT LINE 2195 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remainingRows) AT LINE 2195 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22[1] = $stack27 AT LINE 2195 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack28 = this.<org.apache.cassandra.service.StorageProxy$RangeCommandIterator: int concurrencyFactor> AT LINE 2195 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28) AT LINE 2195 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22[2] = $stack30 AT LINE 2195 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Didn\'t get enough response rows; actual rows per range: {}; remaining rows: {}, new concurrent requests: {}", $stack22) AT LINE 2194 with ID [705db999-e10a]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore$5: void run()> has 4 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack1 = staticinvoke <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger access$600()>() AT LINE 2207 with ID [e2829a80-4ff5]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack1.<org.slf4j.Logger: void debug(java.lang.String)>("Discarding sstable data for truncated CF + indexes") AT LINE 2207 with ID [e2829a80-4ff5]
2020-08-25 10:54:58 [INFO] - 	 -> $stack18 = staticinvoke <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger access$600()>() AT LINE 2219 with ID [b753fadd-71ae]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void trace(java.lang.String)>("cleaning out row cache") AT LINE 2219 with ID [b753fadd-71ae]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack19 == 0 goto interfaceinvoke remote.<java.util.List: boolean add(java.lang.Object)>(liveReplicaHost) at line 118 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack13 == 0 goto staticinvoke <java.util.Collections: void shuffle(java.util.List)>(remote) at line 116 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: java.util.Iterator newQueryPlan(java.lang.String,com.datastax.driver.core.Statement)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: org.slf4j.Logger logger> AT LINE 130 with ID [15a63e1e-1be7]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Using the following hosts order for the new query plan: {} | {}", local, remote) AT LINE 130 with ID [15a63e1e-1be7]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.MigrationRequestVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.db.MigrationRequestVerbHandler: org.slf4j.Logger logger> AT LINE 42 with ID [d8da6838-8469]
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 42 with ID [d8da6838-8469]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received migration request from {}.", $stack4) AT LINE 42 with ID [d8da6838-8469]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if i >= size goto $stack12 = new org.apache.cassandra.dht.Range at line 3716 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack8 == 0 goto size = interfaceinvoke sortedTokens.<java.util.List: int size()>() at line 3712 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: java.util.List getAllRanges(java.util.List)> has 6 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3709 with ID [1d630b1a-7f5f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = interfaceinvoke $stack6.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 3709 with ID [1d630b1a-7f5f]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack7 == 0 goto $stack8 = interfaceinvoke sortedTokens.<java.util.List: boolean isEmpty()>() AT LINE 3709 with ID [1d630b1a-7f5f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3710 with ID [1d630b1a-7f5f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(sortedTokens, ", ") AT LINE 3710 with ID [1d630b1a-7f5f]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("computing ranges for {}", $stack31) AT LINE 3710 with ID [1d630b1a-7f5f]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void handleLegacyMutation(org.apache.cassandra.db.Mutation)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: org.slf4j.Logger logger> AT LINE 94 with ID [46a5b450-fe05]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Applying legacy batchlog mutation {}", update) AT LINE 94 with ID [46a5b450-fe05]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if columnFamilyStore != null goto interfaceinvoke columnFamilyStores.<java.util.List: boolean add(java.lang.Object)>(columnFamilyStore) at line 63 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack114 == 0 goto $stack121 = <org.apache.cassandra.service.ActiveRepairService: org.apache.cassandra.service.ActiveRepairService instance> at line 60 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if cfs#5 != null goto $stack80 = <org.apache.cassandra.service.ActiveRepairService: org.apache.cassandra.service.ActiveRepairService instance> at line 84 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if store != null goto $stack63 = new org.apache.cassandra.repair.Validator at line 117 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.repair.RepairMessageVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> has 16 units and 7 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack108 = <org.apache.cassandra.repair.RepairMessageVerbHandler: org.slf4j.Logger logger> AT LINE 58 with ID [96bd9805-20a7]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack108.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Preparing, {}", prepareMessage) AT LINE 58 with ID [96bd9805-20a7]
2020-08-25 10:54:58 [INFO] - 	 -> $stack75 = <org.apache.cassandra.repair.RepairMessageVerbHandler: org.slf4j.Logger logger> AT LINE 82 with ID [21755e5c-9fef]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack75.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Snapshotting {}", desc) AT LINE 82 with ID [21755e5c-9fef]
2020-08-25 10:54:58 [INFO] - 	 -> $stack89 = <org.apache.cassandra.repair.RepairMessageVerbHandler: org.slf4j.Logger logger> AT LINE 108 with ID [c5e3f338-a2fb]
2020-08-25 10:54:58 [INFO] - 	 -> $stack88 = desc.<org.apache.cassandra.repair.RepairJobDesc: java.util.UUID sessionId> AT LINE 108 with ID [c5e3f338-a2fb]
2020-08-25 10:54:58 [INFO] - 	 -> $stack87 = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 108 with ID [c5e3f338-a2fb]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack89.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Enqueuing response to snapshot request {} to {}", $stack88, $stack87) AT LINE 108 with ID [c5e3f338-a2fb]
2020-08-25 10:54:58 [INFO] - 	 -> $stack59 = <org.apache.cassandra.repair.RepairMessageVerbHandler: org.slf4j.Logger logger> AT LINE 114 with ID [aa239f79-44c3]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack59.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Validating {}", columnFamilyStore#7) AT LINE 114 with ID [aa239f79-44c3]
2020-08-25 10:54:58 [INFO] - 	 -> $stack44 = <org.apache.cassandra.repair.RepairMessageVerbHandler: org.slf4j.Logger logger> AT LINE 131 with ID [7aad497b-20fe]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack44.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Syncing {}", request) AT LINE 131 with ID [7aad497b-20fe]
2020-08-25 10:54:58 [INFO] - 	 -> $stack36 = <org.apache.cassandra.repair.RepairMessageVerbHandler: org.slf4j.Logger logger> AT LINE 142 with ID [7c4d79a1-b61a]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack36.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Got anticompaction request {}", anticompactionRequest) AT LINE 142 with ID [7c4d79a1-b61a]
2020-08-25 10:54:58 [INFO] - 	 -> $stack26 = <org.apache.cassandra.repair.RepairMessageVerbHandler: org.slf4j.Logger logger> AT LINE 155 with ID [22678aa5-c3ae]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void debug(java.lang.String)>("cleaning up repair") AT LINE 155 with ID [22678aa5-c3ae]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if user != null goto $stack8 = new java.lang.String at line 289 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if pass != null goto (branch) at line 287 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if i < 0 goto (branch) at line 275 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator: void decodeCredentials(byte[])> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = staticinvoke <org.apache.cassandra.auth.PasswordAuthenticator: org.slf4j.Logger access$400()>() AT LINE 271 with ID [d1328adb-4a16]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void trace(java.lang.String)>("Decoding credentials from client token") AT LINE 271 with ID [d1328adb-4a16]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack27 != 0 goto (branch) at line 488 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack23 != 0 goto (branch) at line 488 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack8 == 0 goto $stack9 = new org.apache.cassandra.db.lifecycle.LifecycleTransaction at line 490 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack6 == 0 goto l2 = interfaceinvoke readers.<java.util.Collection: java.util.Iterator iterator()>() at line 487 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction split(java.util.Collection)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 485 with ID [5ce58501-a07a]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Splitting {} into new transaction", readers) AT LINE 485 with ID [5ce58501-a07a]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack10 == 0 goto return at line 2638 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: void sendReplicationNotification(java.net.InetAddress)> has 5 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2636 with ID [2173630a-1313]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = interfaceinvoke $stack8.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 2636 with ID [2173630a-1313]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack9 == 0 goto $stack10 = interfaceinvoke failureDetector.<org.apache.cassandra.gms.IFailureDetector: boolean isAlive(java.net.InetAddress)>(remote) AT LINE 2636 with ID [2173630a-1313]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2637 with ID [2173630a-1313]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Notifying {} of replication completion\n", remote) AT LINE 2637 with ID [2173630a-1313]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack12 != 0 goto $stack13 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: com.clearspring.analytics.stream.cardinality.ICardinality mergeCardinalities(java.util.Collection)>(cardinalities) at line 334 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack11 == 0 goto $stack12 = totalKeyCountBefore#4 cmp 0L at line 330 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack9 == 0 goto totalKeyCountBefore#4 = 0L at line 314 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.SSTableReader: double estimateCompactionGain(java.util.Set)> has 15 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 322 with ID [73981349-8c20]
2020-08-25 10:54:58 [INFO] - 	 -> $stack42 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 322 with ID [73981349-8c20]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Got a null cardinality estimator in: {}", $stack42) AT LINE 322 with ID [73981349-8c20]
2020-08-25 10:54:58 [INFO] - 	 -> $stack16 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = newarray (java.lang.Object)[3] AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(cardinality#6) AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15[0] = $stack19 AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalKeyCountBefore#4) AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15[1] = $stack21 AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack23 = (double) cardinality#6 AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = (double) totalKeyCountBefore#4 AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24 = $stack23 / $stack22 AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack24) AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15[2] = $stack26 AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Estimated compaction gain: {}/{}={}", $stack15) AT LINE 338 with ID [be16a863-c60d]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack18 == 0 goto (branch) at line 1786 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if l9 == null goto virtualinvoke currentView.<org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment: void close()>() at line 1806 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if currentView == null goto (branch) at line 1805 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack28 == 0 goto specialinvoke this.<org.apache.cassandra.db.ColumnFamilyStore: void writeSnapshotManifest(org.json.simple.JSONArray,java.lang.String)>(filesJSONArr, snapshotName) at line 1791 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.ColumnFamilyStore: java.util.Set snapshotWithoutFlush(java.lang.String,com.google.common.base.Predicate,boolean)> has 11 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack45 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1797 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> $stack46 = interfaceinvoke $stack45.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1797 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack46 == 0 goto interfaceinvoke snapshottedSSTables.<java.util.Set: boolean add(java.lang.Object)>(ssTable) AT LINE 1797 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> $stack51 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1798 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> $stack49 = newarray (java.lang.Object)[3] AT LINE 1798 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50 = this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 1798 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> $stack49[0] = $stack50 AT LINE 1798 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> $stack54 = virtualinvoke ssTable.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 1798 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> $stack49[1] = $stack54 AT LINE 1798 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> $stack49[2] = snapshotDirectory AT LINE 1798 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack51.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Snapshot for {} keyspace data file {} created in {}", $stack49) AT LINE 1798 with ID [12c5bd62-f514]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack32 == 0 goto (branch) at line 4948 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack25 == 0 goto $stack26 = virtualinvoke streamPlan#20.<org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamResultFuture execute()>() at line 4943 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.StorageService: java.util.concurrent.Future streamRanges(java.util.Map)> has 6 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack72 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 4922 with ID [2e4ec12e-a80f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack71 = newarray (java.lang.Object)[3] AT LINE 4922 with ID [2e4ec12e-a80f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack71[0] = range AT LINE 4922 with ID [2e4ec12e-a80f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack71[1] = keyspace AT LINE 4922 with ID [2e4ec12e-a80f]
2020-08-25 10:54:58 [INFO] - 	 -> $stack71[2] = endpoint AT LINE 4922 with ID [2e4ec12e-a80f]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack72.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Skipping transferred range {} of keyspace {}, endpoint {}", $stack71) AT LINE 4922 with ID [2e4ec12e-a80f]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack14 <= 0 goto (branch) at line 175 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack35 >= 0 goto defaultLocation#2 = this.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: int locationIndex> at line 176 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack3 != null goto $stack4 = this.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: int locationIndex> at line 160 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: void maybeSwitchWriter(org.apache.cassandra.db.DecoratedKey)> has 9 units and 3 lines
2020-08-25 10:54:58 [INFO] - 	 -> defaultLocation#2 = this.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: int locationIndex> AT LINE 174 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [INFO] - 	 -> if defaultLocation#2 < 0 goto $stack16 = this.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: java.util.List locations> AT LINE 177 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.slf4j.Logger logger> AT LINE 178 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = this.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: java.util.List locations> AT LINE 178 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = interfaceinvoke $stack19.<java.util.List: java.lang.Object get(int)>(defaultLocation#2) AT LINE 178 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24 = this.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: java.util.List locations> AT LINE 178 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [INFO] - 	 -> $stack23 = this.<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: int locationIndex> AT LINE 178 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [INFO] - 	 -> $stack25 = interfaceinvoke $stack24.<java.util.List: java.lang.Object get(int)>($stack23) AT LINE 178 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Switching write location from {} to {}", $stack22, $stack25) AT LINE 178 with ID [c57d0e7b-3689]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack6 != 0 goto $stack7 = task instanceof java.util.concurrent.Future at line 50 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack3 == 0 goto $stack4 = new java.lang.AssertionError at line 48 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$1: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = staticinvoke <org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor: org.slf4j.Logger access$000()>() AT LINE 57 with ID [db93285f-4105]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void debug(java.lang.String)>("ScheduledThreadPoolExecutor has shut down as part of C* shutdown") AT LINE 57 with ID [db93285f-4105]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack3 >= 7 goto specialinvoke this.<org.apache.cassandra.net.IncomingTcpConnection: void receiveMessages()>() at line 89 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.net.IncomingTcpConnection: void run()>
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.transport.Server$EventNotifier: void onStatusChange(java.net.InetAddress,org.apache.cassandra.transport.Event$StatusChange)> has 6 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 579 with ID [075403d5-4c5c]
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = interfaceinvoke $stack5.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 579 with ID [075403d5-4c5c]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack6 == 0 goto $stack7 = this.<org.apache.cassandra.transport.Server$EventNotifier: java.util.Map latestEvents> AT LINE 579 with ID [075403d5-4c5c]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 580 with ID [075403d5-4c5c]
2020-08-25 10:54:58 [INFO] - 	 -> $stack23 = event.<org.apache.cassandra.transport.Event$StatusChange: org.apache.cassandra.transport.Event$StatusChange$Status status> AT LINE 580 with ID [075403d5-4c5c]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Status changed event : {}, {}", endpoint, $stack23) AT LINE 580 with ID [075403d5-4c5c]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.transport.Message$UnexpectedChannelExceptionHandler: boolean apply(java.lang.Throwable)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = <org.apache.cassandra.transport.Message: org.slf4j.Logger logger> AT LINE 618 with ID [1802a2f2-bb5e]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>(message, exception) AT LINE 618 with ID [1802a2f2-bb5e]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.utils.Clock: void <clinit>()> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.utils.Clock: org.slf4j.Logger logger> AT LINE 54 with ID [ba6aaaa1-9ec4]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Using custom clock implementation: {}", sclock) AT LINE 54 with ID [ba6aaaa1-9ec4]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack16 != 0 goto $stack12 = virtualinvoke dir.<java.io.File: java.nio.file.Path toPath()>() at line 1447 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack7 == 0 goto return at line 1418 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.SystemKeyspace: void migrateDataDirs()> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.SystemKeyspace: org.slf4j.Logger logger> AT LINE 1420 with ID [ca6220ff-df61]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Checking {} for legacy files", dataDir) AT LINE 1420 with ID [ca6220ff-df61]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack17 > 0 goto $stack19 = this.<org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: java.util.List mutations> at line 318 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack7 == 0 goto $stack8 = this.<org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: java.util.List mutations> at line 314 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: int replay(com.google.common.util.concurrent.RateLimiter,java.util.Set)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = staticinvoke <org.apache.cassandra.batchlog.BatchlogManager: org.slf4j.Logger access$100()>() AT LINE 312 with ID [1fa3f575-4343]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = this.<org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: java.util.UUID id> AT LINE 312 with ID [1fa3f575-4343]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Replaying batch {}", $stack5) AT LINE 312 with ID [1fa3f575-4343]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.utils.OutputHandler$LogOutput: void debug(java.lang.String)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = <org.apache.cassandra.utils.OutputHandler$LogOutput: org.slf4j.Logger logger> AT LINE 47 with ID [1c001bce-de35]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack2.<org.slf4j.Logger: void trace(java.lang.String)>(msg) AT LINE 47 with ID [1c001bce-de35]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack10 <= 0 goto $stack14 = this.<org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor: org.apache.cassandra.service.ReadCallback handler> at line 280 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor: void maybeTryAdditionalReplicas()> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = staticinvoke <org.apache.cassandra.service.AbstractReadExecutor: org.slf4j.Logger access$000()>() AT LINE 293 with ID [c33f8951-2bfd]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("speculating read retry on {}", extraReplica) AT LINE 293 with ID [c33f8951-2bfd]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: void insert(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.Column,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 904 with ID [78e2c90e-b650]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String)>("insert") AT LINE 904 with ID [78e2c90e-b650]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.net.MessagingService$SocketThread: void run()> has 6 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack48 = staticinvoke <org.apache.cassandra.net.MessagingService: org.slf4j.Logger access$300()>() AT LINE 1302 with ID [138b5cf3-aa4b]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack48.<org.slf4j.Logger: void trace(java.lang.String)>("remote failed to authenticate") AT LINE 1302 with ID [138b5cf3-aa4b]
2020-08-25 10:54:58 [INFO] - 	 -> $stack19 = staticinvoke <org.apache.cassandra.net.MessagingService: org.slf4j.Logger access$300()>() AT LINE 1315 with ID [0334ea0a-06e0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(version) AT LINE 1315 with ID [0334ea0a-06e0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = virtualinvoke socket.<java.net.Socket: java.net.InetAddress getInetAddress()>() AT LINE 1315 with ID [0334ea0a-06e0]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Connection version {} from {}", $stack21, $stack22) AT LINE 1315 with ID [0334ea0a-06e0]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack49 == 0 goto $stack52 = <org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.slf4j.Logger logger> at line 71 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack83 >= 0 goto (branch) at line 80 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.streaming.compress.CompressedStreamWriter: void write(org.apache.cassandra.io.util.DataOutputStreamPlus)> has 48 units and 6 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack26 = <org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.slf4j.Logger logger> AT LINE 60 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24 = newarray (java.lang.Object)[5] AT LINE 60 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack25 = this.<org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 60 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29 = virtualinvoke $stack25.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 60 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24[0] = $stack29 AT LINE 60 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30 = this.<org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.apache.cassandra.io.sstable.format.SSTableReader sstable> AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack32 = virtualinvoke $stack30.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24[1] = $stack32 AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack33 = this.<org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack34 = $stack33.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24[2] = $stack34 AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack35 = this.<org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.apache.cassandra.io.sstable.format.SSTableReader sstable> AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack37 = virtualinvoke $stack35.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.metadata.StatsMetadata getSSTableMetadata()>() AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack38 = $stack37.<org.apache.cassandra.io.sstable.metadata.StatsMetadata: long repairedAt> AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack38) AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24[3] = $stack39 AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(totalSize) AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> $stack24[4] = $stack41 AT LINE 61 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Start streaming file {} to {}, repairedAt = {}, totalSize = {}", $stack24) AT LINE 60 with ID [417422c7-b292]
2020-08-25 10:54:58 [INFO] - 	 -> sectionIdx = 0 AT LINE 68 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack74 = <org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.slf4j.Logger logger> AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack72 = newarray (java.lang.Object)[3] AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack73 = this.<org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack77 = virtualinvoke $stack73.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack72[0] = $stack77 AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack78 = sectionIdx AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> sectionIdx = sectionIdx + 1 AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack80 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack78) AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack72[1] = $stack80 AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack82 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(length) AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack72[2] = $stack82 AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack74.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("[Stream #{}] Writing section {} with length {} to stream.", $stack72) AT LINE 76 with ID [6d427f93-5ea0]
2020-08-25 10:54:58 [INFO] - 	 -> $stack52 = <org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.slf4j.Logger logger> AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50 = newarray (java.lang.Object)[5] AT LINE 91 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack51 = this.<org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack55 = virtualinvoke $stack51.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[0] = $stack55 AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack56 = this.<org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.apache.cassandra.io.sstable.format.SSTableReader sstable> AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack58 = virtualinvoke $stack56.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[1] = $stack58 AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack59 = this.<org.apache.cassandra.streaming.compress.CompressedStreamWriter: org.apache.cassandra.streaming.StreamSession session> AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack60 = $stack59.<org.apache.cassandra.streaming.StreamSession: java.net.InetAddress peer> AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[2] = $stack60 AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack62 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(progress) AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[3] = $stack62 AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack64 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(totalSize) AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> $stack50[4] = $stack64 AT LINE 92 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack52.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("[Stream #{}] Finished streaming file {} to {}, bytesTransferred = {}, totalSize = {}", $stack50) AT LINE 91 with ID [92539a8b-9ea8]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack47 == 0 goto (branch) at line 229 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess: void run()>
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = <org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor: org.slf4j.Logger logger> AT LINE 1813 with ID [0168ec72-7b69]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>("Full interruption stack trace:", t) AT LINE 1813 with ID [0168ec72-7b69]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack7 == 0 goto return at line 129 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void syncWriteToBatchlog(org.apache.cassandra.service.WriteResponseHandler,org.apache.cassandra.batchlog.Batch,java.util.Collection)> has 9 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: org.slf4j.Logger logger> AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = newarray (java.lang.Object)[3] AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = batch.<org.apache.cassandra.batchlog.Batch: java.util.UUID id> AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9[0] = $stack10 AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9[1] = target AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = virtualinvoke batch.<org.apache.cassandra.batchlog.Batch: int size()>() AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack14) AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9[2] = $stack15 AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Sending legacy batchlog store request {} to {} for {} mutations", $stack9) AT LINE 131 with ID [d69e1612-bb39]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if failed != 0 goto $stack13 = staticinvoke <org.apache.cassandra.tracing.Tracing: boolean isTracing()>() at line 127 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.service.ReadCallback: void awaitResults()> has 29 units and 4 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack14 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 129 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack15 = interfaceinvoke $stack14.<org.slf4j.Logger: boolean isDebugEnabled()>() AT LINE 129 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack15 == 0 goto (branch) AT LINE 129 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack29 = this.<org.apache.cassandra.service.ReadCallback: int received> AT LINE 131 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack29 <= 0 goto $stack48 = "" AT LINE 131 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack46 = this.<org.apache.cassandra.service.ReadCallback: org.apache.cassandra.service.ResponseResolver resolver> AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack47 = virtualinvoke $stack46.<org.apache.cassandra.service.ResponseResolver: boolean isDataPresent()>() AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack47 == 0 goto $stack48 = " (only digests)" AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack48 = " (including data)" AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= gotData = $stack48] AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack48 = " (only digests)" AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= gotData = $stack48] AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack48 = "" AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> gotData = $stack48 AT LINE 131 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack32 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30 = newarray (java.lang.Object)[4] AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> if failed == 0 goto $stack40 = "Timed out" AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = "Failed" AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> goto [?= $stack30[0] = $stack40] AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = "Timed out" AT LINE 136 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30[0] = $stack40 AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack31 = this.<org.apache.cassandra.service.ReadCallback: int received> AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack31) AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30[1] = $stack35 AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack36 = this.<org.apache.cassandra.service.ReadCallback: int blockfor> AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack36) AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30[2] = $stack38 AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> $stack30[3] = gotData AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("{}; received {} of {} responses{}", $stack30) AT LINE 132 with ID [c032c4b9-09da]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.gms.Gossiper: void requestAll(org.apache.cassandra.gms.GossipDigest,java.util.List,int)> has 6 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1251 with ID [794279af-dd5e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = interfaceinvoke $stack7.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1251 with ID [794279af-dd5e]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack8 == 0 goto return AT LINE 1251 with ID [794279af-dd5e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1252 with ID [794279af-dd5e]
2020-08-25 10:54:58 [INFO] - 	 -> $stack11 = virtualinvoke gDigest.<org.apache.cassandra.gms.GossipDigest: java.net.InetAddress getEndpoint()>() AT LINE 1252 with ID [794279af-dd5e]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("requestAll for {}", $stack11) AT LINE 1252 with ID [794279af-dd5e]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack5 == 0 goto $stack6 = virtualinvoke cfStore.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.compaction.CompactionStrategyManager getCompactionStrategyManager()>() at line 791 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.compaction.CompactionManager: java.util.List lambda$forceCompactionForTokenRange$0(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 790 with ID [fc1a8f26-a2aa]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String)>("No sstables found for the provided token range") AT LINE 790 with ID [fc1a8f26-a2aa]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.SystemKeyspace: void writePreparedStatement(java.lang.String,org.apache.cassandra.utils.MD5Digest,java.lang.String)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack9 = <org.apache.cassandra.db.SystemKeyspace: org.slf4j.Logger logger> AT LINE 1484 with ID [d29fb580-c9ea]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("stored prepared statement for logged keyspace \'{}\': \'{}\'", loggedKeyspace, cql) AT LINE 1484 with ID [d29fb580-c9ea]
2020-08-25 10:54:58 [WARN] - No overhead is found at method <org.apache.cassandra.service.StorageService: void maybeAddKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack25 == 0 goto (branch) at line 442 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.commitlog.CommitLogReader: void readMutation(org.apache.cassandra.db.commitlog.CommitLogReadHandler,byte[],int,org.apache.cassandra.db.commitlog.CommitLogPosition,int,org.apache.cassandra.db.commitlog.CommitLogDescriptor)> has 15 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack29 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 481 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack28 = newarray (java.lang.Object)[3] AT LINE 481 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack32 = virtualinvoke mutation.<org.apache.cassandra.db.Mutation: java.lang.String getKeyspaceName()>() AT LINE 481 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack28[0] = $stack32 AT LINE 481 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack34 = virtualinvoke mutation.<org.apache.cassandra.db.Mutation: org.apache.cassandra.db.DecoratedKey key()>() AT LINE 481 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack28[1] = $stack34 AT LINE 481 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack37 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{") AT LINE 481 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack38 = virtualinvoke mutation.<org.apache.cassandra.db.Mutation: java.util.Collection getPartitionUpdates()>() AT LINE 482 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack39 = interfaceinvoke $stack38.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 482 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack39, ", ") AT LINE 482 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack41 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack40) AT LINE 482 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}") AT LINE 482 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.String toString()>() AT LINE 482 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> $stack28[2] = $stack43 AT LINE 482 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Read mutation for {}.{}: {}", $stack28) AT LINE 481 with ID [52a8eaaa-b5fa]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlResult execute_cql3_query(java.nio.ByteBuffer,org.apache.cassandra.thrift.Compression,org.apache.cassandra.thrift.ConsistencyLevel)> has 2 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack13 = <org.apache.cassandra.thrift.CassandraServer: org.slf4j.Logger logger> AT LINE 2330 with ID [562ea064-8006]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String)>("execute_cql3_query") AT LINE 2330 with ID [562ea064-8006]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage processStatement(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack8 = <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger logger> AT LINE 219 with ID [afcb8bdf-c650]
2020-08-25 10:54:58 [INFO] - 	 -> $stack10 = virtualinvoke options.<org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.db.ConsistencyLevel getConsistency()>() AT LINE 219 with ID [afcb8bdf-c650]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Process {} @CL.{}", statement, $stack10) AT LINE 219 with ID [afcb8bdf-c650]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.streaming.StreamSession: void scheduleKeepAliveTask()> has 4 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack4 = <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger logger> AT LINE 696 with ID [870584a1-e7bf]
2020-08-25 10:54:58 [INFO] - 	 -> $stack6 = virtualinvoke this.<org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>() AT LINE 696 with ID [870584a1-e7bf]
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(keepAlivePeriod) AT LINE 696 with ID [870584a1-e7bf]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("[Stream #{}] Scheduling keep-alive task with {}s period.", $stack6, $stack7) AT LINE 696 with ID [870584a1-e7bf]
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.io.sstable.format.SSTableReader: void markSuspect()> has 6 units and 2 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack1 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 1722 with ID [ab1704dc-2409]
2020-08-25 10:54:58 [INFO] - 	 -> $stack2 = interfaceinvoke $stack1.<org.slf4j.Logger: boolean isTraceEnabled()>() AT LINE 1722 with ID [ab1704dc-2409]
2020-08-25 10:54:58 [INFO] - 	 -> if $stack2 == 0 goto $stack3 = this.<org.apache.cassandra.io.sstable.format.SSTableReader: java.util.concurrent.atomic.AtomicBoolean isSuspect> AT LINE 1722 with ID [ab1704dc-2409]
2020-08-25 10:54:58 [INFO] - 	 -> $stack5 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 1723 with ID [ab1704dc-2409]
2020-08-25 10:54:58 [INFO] - 	 -> $stack7 = virtualinvoke this.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 1723 with ID [ab1704dc-2409]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Marking {} as a suspect for blacklisting.", $stack7) AT LINE 1723 with ID [ab1704dc-2409]
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack33 == 0 goto sortedLocalRanges = staticinvoke <org.apache.cassandra.dht.Range: java.util.List sort(java.util.Collection)>(localRanges) at line 107 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if directoriesVersion != $stack29 goto directoriesVersion = staticinvoke <org.apache.cassandra.db.BlacklistedDirectories: int getDirectoriesVersion()>() at line 104 don't merge! Need manual examination!
2020-08-25 10:54:58 [WARN] - Both branch of IfStmt if $stack24 != 0 goto $stack9 = <org.apache.cassandra.service.StorageService: org.apache.cassandra.service.StorageService instance> at line 94 don't merge! Need manual examination!
2020-08-25 10:54:58 [INFO] - Find overhead at method <org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries getDiskBoundaryValue(org.apache.cassandra.db.ColumnFamilyStore)> has 3 units and 1 lines
2020-08-25 10:54:58 [INFO] - 	 -> $stack20 = <org.apache.cassandra.db.DiskBoundaryManager: org.slf4j.Logger logger> AT LINE 92 with ID [6d1af390-b93c]
2020-08-25 10:54:58 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(ringVersion) AT LINE 92 with ID [6d1af390-b93c]
2020-08-25 10:54:58 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Got local ranges {} (ringVersion = {})", localRanges, $stack22) AT LINE 92 with ID [6d1af390-b93c]