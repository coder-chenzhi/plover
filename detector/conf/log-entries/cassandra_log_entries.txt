<org.apache.cassandra.service.SnapshotVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.service.StorageService: void handleStateMoving(java.net.InetAddress,java.lang.String[])>
<org.apache.cassandra.streaming.StreamSession$KeepAliveTask: void run()>
<org.apache.cassandra.service.GCInspector: long getAllocatedDirectMemory()>
<org.apache.cassandra.thrift.CassandraServer: java.util.List get_slice(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.partitions.PartitionIterator getRangeSlice(org.apache.cassandra.db.PartitionRangeReadCommand,org.apache.cassandra.db.ConsistencyLevel,long)>
<org.apache.cassandra.service.MigrationManager: void lambda$maybeScheduleSchemaPull$0(java.net.InetAddress)>
<org.apache.cassandra.db.compaction.CompactionManager: int antiCompactGroup(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction,long)>
<org.apache.cassandra.config.DatabaseDescriptor: void applySimpleConfig()>
<org.apache.cassandra.thrift.CassandraServer: void remove_counter(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.db.commitlog.CommitLog: void discardCompletedSegments(java.util.UUID,org.apache.cassandra.db.commitlog.CommitLogPosition,org.apache.cassandra.db.commitlog.CommitLogPosition)>
<org.apache.cassandra.gms.Gossiper$GossipTask: void run()>
<org.apache.cassandra.service.DigestResolver: org.apache.cassandra.db.partitions.PartitionIterator resolve()>
<org.apache.cassandra.gms.GossipShutdownVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.utils.JMXServerUtils: void logJmxSslConfig(javax.rmi.ssl.SslRMIServerSocketFactory)>
<org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getSSTablesForSTCS(java.util.Collection,int,int,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions)>
<org.apache.cassandra.service.CacheService: void saveCaches()>
<org.apache.cassandra.auth.AuthCache$1: java.lang.Object lambda$reload$0(java.lang.Object)>
<org.apache.cassandra.service.StorageProxy: void sendMessagesToNonlocalDC(org.apache.cassandra.net.MessageOut,java.util.Collection,org.apache.cassandra.service.AbstractWriteResponseHandler)>
<org.apache.cassandra.service.GCInspector: void <clinit>()>
<org.apache.cassandra.cache.AutoSavingCache$Writer: void saveCache()>
<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: void run()>
<org.apache.cassandra.thrift.CassandraServer: void add(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.CounterColumn,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.thrift.ThriftSessionManager: void connectionComplete(java.net.SocketAddress)>
<org.apache.cassandra.streaming.compress.CompressedStreamReader: org.apache.cassandra.io.sstable.SSTableMultiWriter read(java.nio.channels.ReadableByteChannel)>
<org.apache.cassandra.gms.Gossiper: java.util.Map doShadowRound(java.util.Set)>
<org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage processPrepared(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
<org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable: java.util.List call()>
<org.apache.cassandra.db.TruncateVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doCommit(java.lang.Throwable)>
<org.apache.cassandra.thrift.CassandraServer: java.lang.String system_update_keyspace(org.apache.cassandra.thrift.KsDef)>
<org.apache.cassandra.streaming.StreamSession: void closeSession(org.apache.cassandra.streaming.StreamSession$State)>
<org.apache.cassandra.gms.Gossiper: void addSavedEndpoint(java.net.InetAddress)>
<org.apache.cassandra.hadoop.cql3.CqlRecordReader: boolean nextKeyValue()>
<org.apache.cassandra.db.ColumnFamilyStore: java.util.Collection getOverlappingLiveSSTables(java.lang.Iterable)>
<org.apache.cassandra.hints.HintVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.EndpointState getStateForVersionBiggerThan(java.net.InetAddress,int)>
<org.apache.cassandra.service.ReadCallback$AsyncRepairRunner: void run()>
<org.apache.cassandra.auth.PasswordAuthenticator: org.apache.cassandra.auth.AuthenticatedUser authenticate(java.lang.String,java.lang.String)>
<org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate getCompactionCandidates()>
<org.apache.cassandra.db.view.View: void build()>
<org.apache.cassandra.utils.EstimatedHistogram: void log(org.slf4j.Logger)>
<org.apache.cassandra.service.AbstractWriteResponseHandler: void onFailure(java.net.InetAddress,org.apache.cassandra.exceptions.RequestFailureReason)>
<org.apache.cassandra.io.sstable.SSTable: boolean delete(org.apache.cassandra.io.sstable.Descriptor,java.util.Set)>
<org.apache.cassandra.db.ConsistencyLevel: void assureSufficientLiveNodes(org.apache.cassandra.db.Keyspace,java.lang.Iterable)>
<org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.cql3.functions.UDFunction createUDFFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row,org.apache.cassandra.schema.Types)>
<org.apache.cassandra.service.CassandraDaemon: void lambda$setup$0()>
<org.apache.cassandra.gms.ArrivalWindow: void add(long,java.net.InetAddress)>
<org.apache.cassandra.auth.CassandraRoleManager: void convertLegacyData()>
<org.apache.cassandra.transport.Server$EventNotifier: void send(java.net.InetAddress,org.apache.cassandra.transport.Event$NodeEvent)>
<org.apache.cassandra.thrift.CassandraServer: java.lang.String system_add_column_family(org.apache.cassandra.thrift.CfDef)>
<org.apache.cassandra.db.lifecycle.LifecycleTransaction: void cancel(org.apache.cassandra.io.sstable.format.SSTableReader)>
<org.apache.cassandra.thrift.CassandraServer: java.util.Map describe_schema_versions()>
<org.apache.cassandra.db.ColumnFamilyStore: void clearEphemeralSnapshots(org.apache.cassandra.db.Directories)>
<org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)>
<org.apache.cassandra.gms.Gossiper: void markDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
<org.apache.cassandra.auth.jmx.AuthorizationProxy: org.apache.cassandra.auth.Permission getRequiredPermission(java.lang.String)>
<org.apache.cassandra.thrift.ThriftValidation: void validateColumnData(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.thrift.Column)>
<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onDown(com.datastax.driver.core.Host)>
<org.apache.cassandra.db.monitoring.MonitoringTask: boolean logSlowOperations(long)>
<org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.index.Index getBestIndexFor(org.apache.cassandra.db.filter.RowFilter)>
<org.apache.cassandra.io.util.FileUtils: void delete(java.io.File[])>
<org.apache.cassandra.db.compaction.CompactionManager$7: void execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
<org.apache.cassandra.thrift.CustomTThreadPoolServer: void serve()>
<org.apache.cassandra.gms.FailureDetector: void report(java.net.InetAddress)>
<org.apache.cassandra.auth.PasswordAuthenticator: java.lang.String queryHashedPassword(java.lang.String)>
<org.apache.cassandra.transport.Server$EventNotifier: void onTopologyChange(java.net.InetAddress,org.apache.cassandra.transport.Event$TopologyChange)>
<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void init(com.datastax.driver.core.Cluster,java.util.Collection)>
<org.apache.cassandra.gms.Gossiper: void doStatusCheck()>
<org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable: void run()>
<org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.apache.cassandra.utils.Pair distributeRemainingSpace(java.util.List,long)>
<org.apache.cassandra.db.compaction.CompactionManager$15: void run()>
<org.apache.cassandra.db.SystemKeyspace: java.lang.String getPreviousVersionString()>
<org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.utils.MerkleTrees createMerkleTrees(java.lang.Iterable,java.util.Collection,org.apache.cassandra.db.ColumnFamilyStore)>
<org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getNextBackgroundTask(int)>
<org.apache.cassandra.service.MigrationManager: void passiveAnnounce(java.util.UUID,boolean)>
<org.apache.cassandra.gms.Gossiper: void removeEndpoint(java.net.InetAddress)>
<org.apache.cassandra.db.Directories: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.Directories$DataDirectory[])>
<org.apache.cassandra.tracing.TraceStateImpl: void waitForPendingEvents()>
<org.apache.cassandra.hadoop.cql3.CqlRecordReader: void initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)>
<org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)>
<org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.index.Index unregisterIndex(java.lang.String)>
<org.apache.cassandra.net.OutboundTcpConnection: void expireMessages(long)>
<org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean checkExact(javax.management.ObjectName,java.util.Set)>
<org.apache.cassandra.io.sstable.metadata.MetadataSerializer: java.util.Map deserialize(org.apache.cassandra.io.sstable.Descriptor,java.util.EnumSet)>
<org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onDropColumnFamily(java.lang.String,java.lang.String)>
<org.apache.cassandra.service.CassandraDaemon: void setup()>
<org.apache.cassandra.streaming.StreamWriter: void write(org.apache.cassandra.io.util.DataOutputStreamPlus)>
<org.apache.cassandra.db.compaction.CompactionController: java.util.Set getFullyExpiredSSTables(org.apache.cassandra.db.ColumnFamilyStore,java.lang.Iterable,java.lang.Iterable,int,boolean)>
<org.apache.cassandra.streaming.ConnectionHandler: void initiate()>
<org.apache.cassandra.config.YamlConfigurationLoader: org.apache.cassandra.config.Config loadConfig(java.net.URL)>
<org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: boolean realAppend(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
<org.apache.cassandra.index.sasi.TermIterator: void lambda$build$0(org.apache.cassandra.index.sasi.plan.Expression,org.apache.cassandra.index.sasi.SSTableIndex,java.util.Set,java.util.List,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.CountDownLatch)>
<org.apache.cassandra.auth.CassandraAuthorizer: void convertLegacyData()>
<org.apache.cassandra.cql3.functions.UDFunction: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
<org.apache.cassandra.auth.jmx.AuthenticationProxy: javax.security.auth.Subject authenticate(java.lang.Object)>
<org.apache.cassandra.io.util.FileUtils: void renameWithConfirm(java.io.File,java.io.File)>
<org.apache.cassandra.gms.Gossiper: void examineGossiper(java.util.List,java.util.List,java.util.Map)>
<org.apache.cassandra.db.ColumnFamilyStore: void logFlush()>
<org.apache.cassandra.db.commitlog.EncryptedSegment: void <init>(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
<org.apache.cassandra.db.compaction.LeveledManifest: void replace(java.util.Collection,java.util.Collection)>
<org.apache.cassandra.db.view.View: org.apache.cassandra.db.ReadQuery getReadQuery()>
<org.apache.cassandra.dht.RangeStreamer: org.apache.cassandra.streaming.StreamResultFuture fetchAsync()>
<org.apache.cassandra.service.StorageProxy$11: void runMayThrow()>
<org.apache.cassandra.db.compaction.CompactionStrategyManager: void reload(org.apache.cassandra.schema.CompactionParams)>
<org.apache.cassandra.db.ColumnFamilyStore: void scrubDataDirectories(org.apache.cassandra.config.CFMetaData)>
<org.apache.cassandra.io.sstable.format.SSTableReader: void markObsolete(java.lang.Runnable)>
<org.apache.cassandra.gms.Gossiper: void handleMajorStateChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
<org.apache.cassandra.repair.RepairSession: void syncComplete(org.apache.cassandra.repair.RepairJobDesc,org.apache.cassandra.repair.NodePair,boolean)>
<org.apache.cassandra.service.StorageService: void waitForSchema(int)>
<org.apache.cassandra.net.OutboundTcpConnection: void lambda$handshakeVersion$1(java.util.concurrent.atomic.AtomicInteger,java.io.DataInputStream,java.util.concurrent.CountDownLatch)>
<org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries getDiskBoundaries(org.apache.cassandra.db.ColumnFamilyStore)>
<org.apache.cassandra.io.sstable.format.SSTableReader: void saveSummary(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.io.sstable.IndexSummary)>
<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.commitlog.CommitLogPosition lambda$waitForFlushes$0(org.apache.cassandra.db.Memtable)>
<org.apache.cassandra.hints.HintVerbHandler: java.lang.Void lambda$doVerb$1(java.lang.Throwable)>
<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.apache.cassandra.db.Directories$DataDirectory getWriteDirectory(java.lang.Iterable,long)>
<org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlResult execute_prepared_cql3_query(int,java.util.List,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer takeFromPool(int,boolean)>
<org.apache.cassandra.locator.NetworkTopologyStrategy: void <init>(java.lang.String,org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.IEndpointSnitch,java.util.Map)>
<org.apache.cassandra.net.IncomingStreamingConnection: void close()>
<org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable updateSizeTracking(java.lang.Iterable,java.lang.Iterable,java.lang.Throwable)>
<org.apache.cassandra.locator.TokenMetadata: void calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,java.lang.String)>
<org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: java.util.List getNextBackgroundSSTables(int)>
<org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getNextBackgroundSSTables(int)>
<org.apache.cassandra.db.SchemaCheckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.service.StorageService: void clearSnapshot(java.lang.String,java.lang.String[])>
<org.apache.cassandra.dht.RangeStreamer: void addRanges(java.lang.String,java.util.Collection)>
<org.apache.cassandra.thrift.CassandraServer: void atomic_batch_mutate(java.util.Map,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.net.MessagingService: void sendOneWay(org.apache.cassandra.net.MessageOut,int,java.net.InetAddress)>
<org.apache.cassandra.index.internal.CassandraIndex: void doDelete(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
<org.apache.cassandra.db.view.ViewBuilder: void run()>
<org.apache.cassandra.db.monitoring.MonitoringTask: boolean logFailedOperations(long)>
<org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorizeMBeanServerMethod(org.apache.cassandra.auth.RoleResource,java.lang.String)>
<org.apache.cassandra.service.StorageService: void handleStateNormal(java.net.InetAddress,java.lang.String)>
<org.apache.cassandra.service.paxos.PrepareCallback: void response(org.apache.cassandra.net.MessageIn)>
<org.apache.cassandra.service.StorageService: void handleStateBootstrap(java.net.InetAddress)>
<org.apache.cassandra.thrift.CassandraServer: void truncate(java.lang.String)>
<org.apache.cassandra.net.ResponseVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.db.Directories: org.apache.cassandra.db.Directories$DataDirectory getWriteableLocation(long)>
<org.apache.cassandra.service.StorageService: void checkForEndpointCollision(java.util.UUID,java.util.Set)>
<org.apache.cassandra.gms.Gossiper: boolean sendGossip(org.apache.cassandra.net.MessageOut,java.util.Set)>
<org.apache.cassandra.service.StorageService: void restoreReplicaCount(java.net.InetAddress,java.net.InetAddress)>
<org.apache.cassandra.net.RateBasedBackPressure: void apply(java.util.Set,long,java.util.concurrent.TimeUnit)>
<org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onUpdateColumnFamily(java.lang.String,java.lang.String,boolean)>
<org.apache.cassandra.db.lifecycle.LogReplicaSet: void addReplica(java.io.File)>
<org.apache.cassandra.net.OutboundTcpConnection: void closeSocket(boolean)>
<org.apache.cassandra.db.ColumnFamilyStore: java.lang.Object runWithCompactionsDisabled(java.util.concurrent.Callable,boolean,boolean)>
<org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)>
<org.apache.cassandra.net.MessagingService: void convict(java.net.InetAddress)>
<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable checkpoint(java.lang.Throwable)>
<org.apache.cassandra.thrift.CassandraServer: java.util.List get_range_slices(org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.KeyRange,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.service.StorageService$RangeRelocator: void calculateToFromStreams(java.util.Collection,java.util.List)>
<org.apache.cassandra.thrift.CassandraServer: java.lang.String system_add_keyspace(org.apache.cassandra.thrift.KsDef)>
<org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)>
<org.apache.cassandra.db.Memtable$FlushRunnable: void writeSortedContents()>
<org.apache.cassandra.streaming.StreamSession: void init(org.apache.cassandra.streaming.StreamResultFuture)>
<org.apache.cassandra.thrift.CassandraServer: java.util.List get_paged_slice(java.lang.String,org.apache.cassandra.thrift.KeyRange,java.nio.ByteBuffer,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorizeMBeanMethod(org.apache.cassandra.auth.RoleResource,java.lang.String,java.lang.Object[])>
<org.apache.cassandra.service.StorageService: void unbootstrap(java.lang.Runnable)>
<org.apache.cassandra.service.StorageService: void move(org.apache.cassandra.dht.Token)>
<org.apache.cassandra.io.sstable.format.big.BigTableWriter: void afterAppend(org.apache.cassandra.db.DecoratedKey,long,org.apache.cassandra.db.RowIndexEntry,java.nio.ByteBuffer)>
<org.apache.cassandra.utils.ExpiringMap$1: void run()>
<org.apache.cassandra.io.util.FileUtils: void renameWithOutConfirm(java.lang.String,java.lang.String)>
<org.apache.cassandra.io.util.FileUtils: void deleteRecursiveOnExit(java.io.File)>
<org.apache.cassandra.config.Schema: void load(org.apache.cassandra.config.CFMetaData)>
<org.apache.cassandra.locator.TokenMetadata: void removeEndpoint(java.net.InetAddress)>
<org.apache.cassandra.thrift.CassandraServer: java.lang.String system_drop_keyspace(java.lang.String)>
<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.utils.concurrent.Refs getSnapshotSSTableReader(java.lang.String)>
<org.apache.cassandra.service.MigrationManager: void resetLocalSchema()>
<org.apache.cassandra.net.MessagingService: int setVersion(java.net.InetAddress,int)>
<org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void append(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,long,java.nio.ByteBuffer)>
<org.apache.cassandra.net.MessagingService$SocketThread: void close()>
<org.apache.cassandra.gms.Gossiper: void markAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
<org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$1: void runMayThrow()>
<org.apache.cassandra.db.compaction.CompactionManager: java.util.List submitBackground(org.apache.cassandra.db.ColumnFamilyStore)>
<org.apache.cassandra.db.compaction.LeveledManifest: int getEstimatedTasks()>
<org.apache.cassandra.gms.Gossiper: void evictFromMembership(java.net.InetAddress)>
<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onAdd(com.datastax.driver.core.Host)>
<org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getCompactionCandidates(java.lang.Iterable,long,int)>
<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: void tidy()>
<org.apache.cassandra.io.sstable.IndexSummaryRedistribution: java.util.List adjustSamplingLevels(java.util.List,java.util.Map,double,long)>
<org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CASResult cas(java.nio.ByteBuffer,java.lang.String,java.util.List,java.util.List,org.apache.cassandra.thrift.ConsistencyLevel,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.locator.TokenMetadata: void addReplaceTokens(java.util.Collection,java.net.InetAddress,java.net.InetAddress)>
<org.apache.cassandra.service.DataResolver$RepairMergeListener: void close()>
<org.apache.cassandra.utils.MerkleTree: java.util.List difference(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree)>
<org.apache.cassandra.cache.AutoSavingCache: int loadSaved()>
<org.apache.cassandra.db.commitlog.CommitLogArchiver: org.apache.cassandra.db.commitlog.CommitLogArchiver construct()>
<org.apache.cassandra.service.DigestResolver: void compareResponses()>
<org.apache.cassandra.cql3.functions.JavaBasedUDFunction: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String)>
<org.apache.cassandra.thrift.CassandraServer: int get_count(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlPreparedResult prepare_cql3_query(java.nio.ByteBuffer,org.apache.cassandra.thrift.Compression)>
<org.apache.cassandra.db.ColumnFamilyStore: void <init>(org.apache.cassandra.db.Keyspace,java.lang.String,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.Directories,boolean,boolean,boolean)>
<org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: java.util.concurrent.Future flushDataFrom(java.util.List,boolean)>
<org.apache.cassandra.service.StorageService: void setTokens(java.util.Collection)>
<org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer maybeTakeFromPool(int,boolean)>
<org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: void signalCloseDone()>
<org.apache.cassandra.service.AbstractReadExecutor: void makeRequests(org.apache.cassandra.db.ReadCommand,java.lang.Iterable)>
<org.apache.cassandra.gms.Gossiper: void makeRandomGossipDigest(java.util.List)>
<org.apache.cassandra.db.commitlog.CommitLogReader: void readCommitLogSegment(org.apache.cassandra.db.commitlog.CommitLogReadHandler,java.io.File,org.apache.cassandra.db.commitlog.CommitLogPosition,int,boolean)>
<org.apache.cassandra.index.SecondaryIndexManager: int calculateIndexingPageSize()>
<org.apache.cassandra.service.StorageProxy: void truncateBlocking(java.lang.String,java.lang.String)>
<org.apache.cassandra.db.ColumnFamilyStore$FlushLargestColumnFamily: void run()>
<org.apache.cassandra.io.sstable.format.SSTableReader: void cacheKey(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry)>
<org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getOverlappingStarvedSSTables(int,java.util.Collection)>
<org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void asyncRemoveFromBatchlog(java.util.Collection,java.util.UUID,long)>
<org.apache.cassandra.net.OutboundTcpConnection: void disconnect()>
<org.apache.cassandra.db.compaction.LeveledCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)>
<org.apache.cassandra.service.GCInspector: void handleNotification(javax.management.Notification,java.lang.Object)>
<org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: java.util.List getNextBackgroundSSTables(int)>
<org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean checkPattern(javax.management.ObjectName,java.util.Set)>
<org.apache.cassandra.db.commitlog.CommitLogReader: boolean shouldSkipSegmentId(java.io.File,org.apache.cassandra.db.commitlog.CommitLogDescriptor,org.apache.cassandra.db.commitlog.CommitLogPosition)>
<org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getCandidatesFor(int)>
<org.apache.cassandra.index.internal.CassandraIndex: void insert(java.nio.ByteBuffer,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
<org.apache.cassandra.cql3.functions.UDFunction: boolean secureResource(java.lang.String)>
<org.apache.cassandra.net.OutboundTcpConnection: boolean connect()>
<org.apache.cassandra.streaming.ConnectionHandler: com.google.common.util.concurrent.ListenableFuture close()>
<org.apache.cassandra.thrift.CassandraServer: java.lang.String system_update_column_family(org.apache.cassandra.thrift.CfDef)>
<org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard: void handleReplayedSegment(java.io.File)>
<org.apache.cassandra.db.SystemKeyspace: void lambda$null$4(java.io.File)>
<org.apache.cassandra.service.ReadCallback: org.apache.cassandra.db.partitions.PartitionIterator get()>
<org.apache.cassandra.index.internal.CassandraIndex: void deleteStaleEntry(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
<org.apache.cassandra.service.StorageService: void handleStateLeft(java.net.InetAddress,java.lang.String[])>
<org.apache.cassandra.locator.PropertyFileSnitch: java.lang.String[] getRawEndpointInfo(java.net.InetAddress)>
<org.apache.cassandra.batchlog.LegacyBatchlogMigrator: boolean apply(org.apache.cassandra.cql3.UntypedResultSet$Row,long)>
<org.apache.cassandra.thrift.CassandraServer: void batch_mutate(java.util.Map,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.db.compaction.CompactionController: void maybeRefreshOverlaps()>
<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader openForBatch(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData)>
<org.apache.cassandra.service.MigrationManager: void maybeScheduleSchemaPull(java.util.UUID,java.net.InetAddress)>
<org.apache.cassandra.cql3.functions.UDFunction: java.lang.Object executeForAggregate(org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
<org.apache.cassandra.auth.CassandraRoleManager$4: void run()>
<org.apache.cassandra.net.IncomingTcpConnection: void receiveMessages()>
<org.apache.cassandra.config.CFMetaData: boolean apply(org.apache.cassandra.config.CFMetaData)>
<org.apache.cassandra.thrift.CassandraServer: java.lang.String system_drop_column_family(java.lang.String)>
<org.apache.cassandra.locator.AbstractReplicationStrategy: java.util.ArrayList getCachedEndpoints(org.apache.cassandra.dht.Token)>
<org.apache.cassandra.utils.MerkleTree: int differenceHelper(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree,java.util.List,org.apache.cassandra.utils.MerkleTree$TreeRange)>
<org.apache.cassandra.tracing.Tracing: void stopSession()>
<org.apache.cassandra.gms.GossipDigestAckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.gms.Gossiper: void applyStateLocally(java.util.Map)>
<org.apache.cassandra.gms.Gossiper: void applyNewStates(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.EndpointState)>
<org.apache.cassandra.service.StorageService: void joinTokenRing(int)>
<org.apache.cassandra.transport.Message$Dispatcher: void channelRead0(io.netty.channel.ChannelHandlerContext,org.apache.cassandra.transport.Message$Request)>
<org.apache.cassandra.io.util.FileUtils: void atomicMoveWithFallback(java.nio.file.Path,java.nio.file.Path)>
<org.apache.cassandra.service.StorageService: void setMode(org.apache.cassandra.service.StorageService$Mode,java.lang.String,boolean)>
<org.apache.cassandra.service.StartupChecks: void lambda$static$0()>
<org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.ColumnOrSuperColumn get(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.gms.GossipDigestAck2VerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.service.StorageService: void handleStateLeaving(java.net.InetAddress)>
<org.apache.cassandra.db.SystemKeyspace: void lambda$migrateDataDirs$5(java.io.File)>
<org.apache.cassandra.db.Keyspace: java.util.concurrent.CompletableFuture applyInternal(org.apache.cassandra.db.Mutation,boolean,boolean,boolean,boolean,java.util.concurrent.CompletableFuture)>
<org.apache.cassandra.db.compaction.LeveledManifest: void add(org.apache.cassandra.io.sstable.format.SSTableReader)>
<org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate getSTCSInL0CompactionCandidate()>
<org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: java.util.List newestBucket(com.google.common.collect.HashMultimap,int,int,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions,long)>
<org.apache.cassandra.cache.SerializingCache: java.lang.Object deserialize(org.apache.cassandra.cache.RefCountedMemory)>
<org.apache.cassandra.db.compaction.CompactionTask: void runMayThrow()>
<org.apache.cassandra.streaming.StreamReader: org.apache.cassandra.io.sstable.SSTableMultiWriter read(java.nio.channels.ReadableByteChannel)>
<org.apache.cassandra.gms.Gossiper: void convict(java.net.InetAddress,double)>
<org.apache.cassandra.db.Directories: void clearSnapshot(java.lang.String,java.util.List)>
<org.apache.cassandra.utils.memory.SlabAllocator: org.apache.cassandra.utils.memory.SlabAllocator$Region getRegion()>
<org.apache.cassandra.db.commitlog.CommitLogReplayer: org.apache.cassandra.db.commitlog.CommitLogReplayer construct(org.apache.cassandra.db.commitlog.CommitLog)>
<org.apache.cassandra.service.StorageProxy: java.util.Map describeSchemaVersions()>
<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void <init>(java.lang.String[])>
<org.apache.cassandra.gms.Gossiper: void notifyFailureDetector(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
<org.apache.cassandra.db.lifecycle.LifecycleTransaction: void obsolete(org.apache.cassandra.io.sstable.format.SSTableReader)>
<org.apache.cassandra.db.commitlog.CommitLogArchiver: void maybeRestoreArchive()>
<org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void stopUnsafe(boolean)>
<org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: void run()>
<org.apache.cassandra.net.MessageDeliveryTask: void run()>
<org.apache.cassandra.hints.HintsDispatchExecutor$DispatchHintsTask: boolean dispatch(org.apache.cassandra.hints.HintsDescriptor)>
<org.apache.cassandra.triggers.CustomClassLoader: java.lang.Class loadClassInternal(java.lang.String)>
<org.apache.cassandra.dht.BootStrapper: com.google.common.util.concurrent.ListenableFuture bootstrap(org.apache.cassandra.dht.StreamStateStore,boolean)>
<org.apache.cassandra.gms.Gossiper: void waitToSettle()>
<org.apache.cassandra.thrift.CassandraServer: java.util.Map multiget_count(java.util.List,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.db.Directories: void removeTemporaryDirectories()>
<org.apache.cassandra.db.compaction.CompactionStrategyManager: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.function.Supplier,boolean)>
<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader open(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,boolean,boolean)>
<org.apache.cassandra.db.lifecycle.LogTransaction: void delete(java.io.File)>
<org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: long unusedCapacity()>
<org.apache.cassandra.db.lifecycle.LifecycleTransaction: void obsoleteOriginals()>
<org.apache.cassandra.db.ColumnFamilyStore$Flush: java.util.Collection flushMemtable(org.apache.cassandra.db.Memtable,boolean)>
<org.apache.cassandra.db.compaction.CompactionManager: void doValidationCompaction(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.repair.Validator)>
<org.apache.cassandra.service.StorageService: void handleStateBootreplacing(java.net.InetAddress,java.lang.String[])>
<org.apache.cassandra.service.StorageService: void forceKeyspaceFlush(java.lang.String,java.lang.String[])>
<org.apache.cassandra.db.CounterMutationVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.db.commitlog.AbstractCommitLogService: void <init>(org.apache.cassandra.db.commitlog.CommitLog,java.lang.String,long,boolean)>
<org.apache.cassandra.utils.IntervalTree$IntervalNode: void <init>(org.apache.cassandra.utils.IntervalTree,java.util.Collection)>
<org.apache.cassandra.repair.Validator: void complete()>
<org.apache.cassandra.thrift.CassandraServer: java.util.Map multiget_slice(java.util.List,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void mutateRepairedAt(org.apache.cassandra.io.sstable.Descriptor,long)>
<org.apache.cassandra.repair.Validator: void prepare(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.utils.MerkleTrees)>
<org.apache.cassandra.db.commitlog.CommitLogReader: void readSection(org.apache.cassandra.db.commitlog.CommitLogReadHandler,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.commitlog.CommitLogPosition,int,org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker,org.apache.cassandra.db.commitlog.CommitLogDescriptor)>
<org.apache.cassandra.net.MessagingService: int getVersion(java.net.InetAddress)>
<org.apache.cassandra.cql3.statements.CreateIndexStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
<org.apache.cassandra.service.StorageService: void decommission()>
<org.apache.cassandra.streaming.ReplicationFinishedVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.gms.Gossiper: void start(int,java.util.Map)>
<org.apache.cassandra.gms.TokenSerializer: java.util.Collection deserialize(org.apache.cassandra.dht.IPartitioner,java.io.DataInput)>
<org.apache.cassandra.db.Keyspace: void <init>(java.lang.String,boolean)>
<org.apache.cassandra.service.LoadBroadcaster$1: void run()>
<org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)>
<org.apache.cassandra.service.StorageService: com.google.common.collect.Multimap getChangedRangesForLeaving(java.lang.String,java.net.InetAddress)>
<org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: void handleReplayedSegment(java.io.File)>
<org.apache.cassandra.net.IncomingTcpConnection: java.net.InetAddress receiveMessage(org.apache.cassandra.io.util.DataInputPlus,int)>
<org.apache.cassandra.locator.PropertyFileSnitch: void reloadConfiguration(boolean)>
<org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler: void run()>
<org.apache.cassandra.db.DefinitionsUpdateVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.config.Schema: void load(org.apache.cassandra.config.ViewDefinition)>
<org.apache.cassandra.client.RingCache: void refreshEndpointMap()>
<org.apache.cassandra.db.Keyspace: void createReplicationStrategy(org.apache.cassandra.schema.KeyspaceMetadata)>
<org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate: void run()>
<org.apache.cassandra.net.OutboundTcpConnection: void writeConnected(org.apache.cassandra.net.OutboundTcpConnection$QueuedMessage,boolean)>
<org.apache.cassandra.service.EchoVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.db.commitlog.CommitLogReplayer: int blockForWrites()>
<org.apache.cassandra.db.SizeEstimatesRecorder: void run()>
<org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: java.lang.Throwable extractThrowable(java.lang.Runnable)>
<org.apache.cassandra.db.lifecycle.LogReplicaSet: void maybeCreateReplica(java.io.File,java.lang.String,java.util.Set)>
<org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory: org.tartarus.snowball.SnowballStemmer getStemmer(java.util.Locale)>
<org.apache.cassandra.db.compaction.LeveledManifest: void logDistribution()>
<org.apache.cassandra.db.compaction.CompactionManager: void performAnticompaction(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,org.apache.cassandra.utils.concurrent.Refs,org.apache.cassandra.db.lifecycle.LifecycleTransaction,long,java.util.UUID)>
<org.apache.cassandra.gms.FailureDetector: void interpret(java.net.InetAddress)>
<org.apache.cassandra.utils.Mx4jTool: boolean maybeLoad()>
<org.apache.cassandra.service.StorageService: void onChange(java.net.InetAddress,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
<org.apache.cassandra.io.sstable.format.SSTableReader: boolean loadSummary()>
<org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorize(javax.security.auth.Subject,java.lang.String,java.lang.Object[])>
<org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: void finish(java.util.Set)>
<org.apache.cassandra.thrift.CassandraServer: void remove(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,long,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doAbort(java.lang.Throwable)>
<org.apache.cassandra.thrift.CassandraServer: java.util.List get_multi_slice(org.apache.cassandra.thrift.MultiSliceRequest)>
<org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)>
<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: void run()>
<org.apache.cassandra.gms.Gossiper: void replacementQuarantine(java.net.InetAddress)>
<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onRemove(com.datastax.driver.core.Host)>
<org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void sendRepairMutation(org.apache.cassandra.db.partitions.PartitionUpdate,java.net.InetAddress)>
<org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onDropKeyspace(java.lang.String)>
<org.apache.cassandra.service.StorageProxy: void asyncRemoveFromBatchlog(java.util.Collection,java.util.UUID)>
<org.apache.cassandra.streaming.StreamReader$StreamDeserializer: void <init>(org.apache.cassandra.config.CFMetaData,java.io.InputStream,org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader,long,java.util.UUID)>
<org.apache.cassandra.gms.FailureDetector: void forceConviction(java.net.InetAddress)>
<org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: void switchCompactionLocation(org.apache.cassandra.db.Directories$DataDirectory)>
<org.apache.cassandra.io.sstable.IndexSummaryRedistribution: java.util.List redistributeSummaries()>
<org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void mutateLevel(org.apache.cassandra.io.sstable.Descriptor,int)>
<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onUp(com.datastax.driver.core.Host)>
<org.apache.cassandra.db.view.ViewBuilder: void buildKey(org.apache.cassandra.db.DecoratedKey)>
<org.apache.cassandra.gms.Gossiper: void realMarkAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
<org.apache.cassandra.locator.ReconnectableSnitchHelper: void reconnect(java.net.InetAddress,java.net.InetAddress)>
<org.apache.cassandra.io.sstable.format.SSTableReader: void saveBloomFilter(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.utils.IFilter)>
<org.apache.cassandra.service.PendingRangeCalculatorService$PendingRangeTask: void run()>
<org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void archiveAndDiscard(org.apache.cassandra.db.commitlog.CommitLogSegment)>
<org.apache.cassandra.net.MessagingService: void resetVersion(java.net.InetAddress)>
<org.apache.cassandra.streaming.StreamCoordinator: void connectNext()>
<org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry: void registerUserExpressionClass(java.lang.Class,org.apache.cassandra.db.filter.RowFilter$UserExpression$Deserializer)>
<org.apache.cassandra.hadoop.cql3.CqlInputFormat: java.util.List getSplits(org.apache.hadoop.mapreduce.JobContext)>
<org.apache.cassandra.utils.TopKSampler$1: void run()>
<org.apache.cassandra.batchlog.BatchlogManager: void replayFailedBatches()>
<org.apache.cassandra.db.ColumnFamilyStore: void createEphemeralSnapshotMarkerFile(java.lang.String)>
<org.apache.cassandra.db.compaction.CompactionManager$8: void execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
<org.apache.cassandra.net.IncomingTcpConnection: void close()>
<org.apache.cassandra.index.SecondaryIndexManager: void registerIndex(org.apache.cassandra.index.Index)>
<org.apache.cassandra.service.StorageService: void handleStateRemoving(java.net.InetAddress,java.lang.String[])>
<org.apache.cassandra.service.paxos.ProposeCallback: void response(org.apache.cassandra.net.MessageIn)>
<org.apache.cassandra.service.ActiveRepairService: void convict(java.net.InetAddress,double)>
<org.apache.cassandra.db.lifecycle.LogTransaction: void <init>(org.apache.cassandra.db.compaction.OperationType,org.apache.cassandra.db.lifecycle.Tracker)>
<org.apache.cassandra.gms.Gossiper: void maybeFinishShadowRound(java.net.InetAddress,boolean,java.util.Map)>
<org.apache.cassandra.index.SecondaryIndexManager: void indexPartition(org.apache.cassandra.db.DecoratedKey,java.util.Set,int)>
<org.apache.cassandra.service.ReadCallback: void <init>(org.apache.cassandra.service.ResponseResolver,org.apache.cassandra.db.ConsistencyLevel,int,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.Keyspace,java.util.List,long)>
<org.apache.cassandra.net.MessagingService: void waitUntilListening()>
<org.apache.cassandra.thrift.CassandraServer: java.util.List get_indexed_slices(org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.IndexClause,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.db.ColumnFamilyStore: void scheduleFlush()>
<org.apache.cassandra.tracing.TraceStateImpl: void traceImpl(java.lang.String)>
<org.apache.cassandra.service.StorageProxy: void syncWriteToBatchlog(org.apache.cassandra.service.WriteResponseHandler,org.apache.cassandra.batchlog.Batch,java.util.Collection)>
<org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.utils.Pair getBuckets(java.lang.Iterable,java.util.concurrent.TimeUnit,int,java.util.concurrent.TimeUnit)>
<org.apache.cassandra.db.compaction.CompactionManager: void doCleanupOne(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy,java.util.Collection,boolean)>
<org.apache.cassandra.gms.Gossiper: void addExpireTimeForEndpoint(java.net.InetAddress,long)>
<org.apache.cassandra.streaming.StreamSession: java.lang.Iterable lambda$getSSTableSectionsForRanges$0(java.util.List,boolean,org.apache.cassandra.db.lifecycle.View)>
<org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: void maybeAwaitFullDataRead()>
<org.apache.cassandra.service.StorageProxy$RangeCommandIterator: void updateConcurrencyFactor()>
<org.apache.cassandra.db.ColumnFamilyStore$5: void run()>
<org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: java.util.Iterator newQueryPlan(java.lang.String,com.datastax.driver.core.Statement)>
<org.apache.cassandra.db.MigrationRequestVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.service.StorageService: java.util.List getAllRanges(java.util.List)>
<org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void handleLegacyMutation(org.apache.cassandra.db.Mutation)>
<org.apache.cassandra.repair.RepairMessageVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
<org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator: void decodeCredentials(byte[])>
<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction split(java.util.Collection)>
<org.apache.cassandra.service.StorageService: void sendReplicationNotification(java.net.InetAddress)>
<org.apache.cassandra.io.sstable.format.SSTableReader: double estimateCompactionGain(java.util.Set)>
<org.apache.cassandra.db.ColumnFamilyStore: java.util.Set snapshotWithoutFlush(java.lang.String,com.google.common.base.Predicate,boolean)>
<org.apache.cassandra.service.StorageService: java.util.concurrent.Future streamRanges(java.util.Map)>
<org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: void maybeSwitchWriter(org.apache.cassandra.db.DecoratedKey)>
<org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$1: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
<org.apache.cassandra.net.IncomingTcpConnection: void run()>
<org.apache.cassandra.transport.Server$EventNotifier: void onStatusChange(java.net.InetAddress,org.apache.cassandra.transport.Event$StatusChange)>
<org.apache.cassandra.transport.Message$UnexpectedChannelExceptionHandler: boolean apply(java.lang.Throwable)>
<org.apache.cassandra.utils.Clock: void <clinit>()>
<org.apache.cassandra.db.SystemKeyspace: void migrateDataDirs()>
<org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: int replay(com.google.common.util.concurrent.RateLimiter,java.util.Set)>
<org.apache.cassandra.utils.OutputHandler$LogOutput: void debug(java.lang.String)>
<org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor: void maybeTryAdditionalReplicas()>
<org.apache.cassandra.thrift.CassandraServer: void insert(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.Column,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.net.MessagingService$SocketThread: void run()>
<org.apache.cassandra.streaming.compress.CompressedStreamWriter: void write(org.apache.cassandra.io.util.DataOutputStreamPlus)>
<org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess: void run()>
<org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>
<org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void syncWriteToBatchlog(org.apache.cassandra.service.WriteResponseHandler,org.apache.cassandra.batchlog.Batch,java.util.Collection)>
<org.apache.cassandra.service.ReadCallback: void awaitResults()>
<org.apache.cassandra.gms.Gossiper: void requestAll(org.apache.cassandra.gms.GossipDigest,java.util.List,int)>
<org.apache.cassandra.db.compaction.CompactionManager: java.util.List lambda$forceCompactionForTokenRange$0(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection)>
<org.apache.cassandra.db.SystemKeyspace: void writePreparedStatement(java.lang.String,org.apache.cassandra.utils.MD5Digest,java.lang.String)>
<org.apache.cassandra.service.StorageService: void maybeAddKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
<org.apache.cassandra.db.commitlog.CommitLogReader: void readMutation(org.apache.cassandra.db.commitlog.CommitLogReadHandler,byte[],int,org.apache.cassandra.db.commitlog.CommitLogPosition,int,org.apache.cassandra.db.commitlog.CommitLogDescriptor)>
<org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlResult execute_cql3_query(java.nio.ByteBuffer,org.apache.cassandra.thrift.Compression,org.apache.cassandra.thrift.ConsistencyLevel)>
<org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage processStatement(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
<org.apache.cassandra.streaming.StreamSession: void scheduleKeepAliveTask()>
<org.apache.cassandra.io.sstable.format.SSTableReader: void markSuspect()>
<org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries getDiskBoundaryValue(org.apache.cassandra.db.ColumnFamilyStore)>
