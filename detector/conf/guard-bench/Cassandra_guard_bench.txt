2020-05-18 22:34:43 [INFO] - [Spark] Starting analysis ...
2020-05-18 22:39:05 [INFO] - [Spark] Done!
2020-05-18 22:39:05 [INFO] - [Call Graph] Refine call graph in 0.2s , new call graph has 227809  edges (original : 610294)
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.SnapshotVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void handleStateMoving(java.net.InetAddress,java.lang.String[])>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void handleStateMoving(java.net.InetAddress,java.lang.String[])> line 2480 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack9 == 0 goto $stack10 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2480
2020-05-18 22:39:05 [INFO] - 	 -> $stack12 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2481
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} state moving, new token {}", endpoint, token) AT LINE 2481
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession$KeepAliveTask: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector: long getAllocatedDirectMemory()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.util.List get_slice(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.partitions.PartitionIterator getRangeSlice(org.apache.cassandra.db.PartitionRangeReadCommand,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void lambda$maybeScheduleSchemaPull$0(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: int antiCompactGroup(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: void applySimpleConfig()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: void remove_counter(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: void discardCompletedSegments(java.util.UUID,org.apache.cassandra.db.commitlog.CommitLogPosition,org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.commitlog.CommitLog: void discardCompletedSegments(java.util.UUID,org.apache.cassandra.db.commitlog.CommitLogPosition,org.apache.cassandra.db.commitlog.CommitLogPosition)> line 322 has 12 units and 3 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack15 == 0 goto $stack16 = virtualinvoke segment.<org.apache.cassandra.db.commitlog.CommitLogSegment: boolean contains(org.apache.cassandra.db.commitlog.CommitLogPosition)>(upperBound) AT LINE 322
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = <org.apache.cassandra.db.commitlog.CommitLog: org.slf4j.Logger logger> AT LINE 324
2020-05-18 22:39:05 [INFO] - 	 -> $stack18 = newarray (java.lang.Object)[3] AT LINE 323
2020-05-18 22:39:05 [INFO] - 	 -> $stack22 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>() AT LINE 324
2020-05-18 22:39:05 [INFO] - 	 -> if $stack22 == 0 goto $stack27 = " active" AT LINE 324
2020-05-18 22:39:05 [INFO] - 	 -> $stack27 = "" AT LINE 329
2020-05-18 22:39:05 [INFO] - 	 -> goto [?= $stack18[0] = $stack27] AT LINE 329
2020-05-18 22:39:05 [INFO] - 	 -> $stack27 = " active" AT LINE 329
2020-05-18 22:39:05 [INFO] - 	 -> $stack18[0] = $stack27 AT LINE 324
2020-05-18 22:39:05 [INFO] - 	 -> $stack18[1] = segment AT LINE 324
2020-05-18 22:39:05 [INFO] - 	 -> $stack24 = virtualinvoke segment.<org.apache.cassandra.db.commitlog.CommitLogSegment: java.lang.String dirtyString()>() AT LINE 324
2020-05-18 22:39:05 [INFO] - 	 -> $stack18[2] = $stack24 AT LINE 324
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Not safe to delete{} commit log segment {}; dirty is {}", $stack18) AT LINE 323
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$GossipTask: void run()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper$GossipTask: void run()> line 156 has 10 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack15 == 0 goto $stack16 = new java.util.ArrayList AT LINE 156
2020-05-18 22:39:05 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger access$100()>() AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> $stack41 = this.<org.apache.cassandra.gms.Gossiper$GossipTask: org.apache.cassandra.gms.Gossiper this$0> AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> $stack43 = $stack41.<org.apache.cassandra.gms.Gossiper: java.util.concurrent.ConcurrentMap endpointStateMap> AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> $stack44 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> $stack45 = interfaceinvoke $stack43.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($stack44) AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> $stack46 = (org.apache.cassandra.gms.EndpointState) $stack45 AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> $stack47 = virtualinvoke $stack46.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> $stack48 = virtualinvoke $stack47.<org.apache.cassandra.gms.HeartBeatState: int getHeartBeatVersion()>() AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> $stack49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack48) AT LINE 157
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("My heartbeat is now {}", $stack49) AT LINE 157
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.DigestResolver: org.apache.cassandra.db.partitions.PartitionIterator resolve()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.DigestResolver: org.apache.cassandra.db.partitions.PartitionIterator resolve()> line 69 has 5 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack4 == 0 goto virtualinvoke this.<org.apache.cassandra.service.DigestResolver: void compareResponses()>() AT LINE 69
2020-05-18 22:39:05 [INFO] - 	 -> $stack12 = <org.apache.cassandra.service.DigestResolver: org.slf4j.Logger logger> AT LINE 70
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = this.<org.apache.cassandra.service.DigestResolver: org.apache.cassandra.utils.concurrent.Accumulator responses> AT LINE 70
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = virtualinvoke $stack11.<org.apache.cassandra.utils.concurrent.Accumulator: int size()>() AT LINE 70
2020-05-18 22:39:05 [INFO] - 	 -> $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack14) AT LINE 70
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("resolving {} responses", $stack15) AT LINE 70
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipShutdownVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.JMXServerUtils: void logJmxSslConfig(javax.rmi.ssl.SslRMIServerSocketFactory)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getSSTablesForSTCS(java.util.Collection,int,int,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService: void saveCaches()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache$1: java.lang.Object lambda$reload$0(java.lang.Object)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void sendMessagesToNonlocalDC(org.apache.cassandra.net.MessageOut,java.util.Collection,org.apache.cassandra.service.AbstractWriteResponseHandler)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector: void <clinit>()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$Writer: void saveCache()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: void run()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: void run()> line 2216 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier this$0> AT LINE 2216
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2217
2020-05-18 22:39:05 [INFO] - 	 -> $stack40 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier this$0> AT LINE 2217
2020-05-18 22:39:05 [INFO] - 	 -> $stack42 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor access$900(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>($stack40) AT LINE 2217
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Async instance tidier for {}, after barrier", $stack42) AT LINE 2217
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: void run()> line 2231 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack19 == 0 goto return AT LINE 2231
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2232
2020-05-18 22:39:05 [INFO] - 	 -> $stack21 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier this$0> AT LINE 2232
2020-05-18 22:39:05 [INFO] - 	 -> $stack23 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor access$900(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>($stack21) AT LINE 2232
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Async instance tidier for {}, completed", $stack23) AT LINE 2232
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: void run()> line 2210 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack2 == 0 goto $stack3 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.utils.concurrent.OpOrder$Barrier val$barrier> AT LINE 2210
2020-05-18 22:39:05 [INFO] - 	 -> $stack45 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2211
2020-05-18 22:39:05 [INFO] - 	 -> $stack46 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier this$0> AT LINE 2211
2020-05-18 22:39:05 [INFO] - 	 -> $stack48 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor access$900(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>($stack46) AT LINE 2211
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack45.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Async instance tidier for {}, before barrier", $stack48) AT LINE 2211
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: void add(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.CounterColumn,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftSessionManager: void connectionComplete(java.net.SocketAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.thrift.ThriftSessionManager: void connectionComplete(java.net.SocketAddress)> line 78 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack6 == 0 goto return AT LINE 78
2020-05-18 22:39:05 [INFO] - 	 -> $stack7 = <org.apache.cassandra.thrift.ThriftSessionManager: org.slf4j.Logger logger> AT LINE 79
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("ClientState removed for socket addr {}", socket) AT LINE 79
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedStreamReader: org.apache.cassandra.io.sstable.SSTableMultiWriter read(java.nio.channels.ReadableByteChannel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.Map doShadowRound(java.util.Set)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage processPrepared(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage processPrepared(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)> line 524 has 9 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack13 == 0 goto $stack14 = <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.metrics.CQLMetrics metrics> AT LINE 524
2020-05-18 22:39:05 [INFO] - 	 -> i = 0 AT LINE 525
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = interfaceinvoke variables.<java.util.List: int size()>() AT LINE 525
2020-05-18 22:39:05 [INFO] - 	 -> if i >= $stack17 goto $stack14 = <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.metrics.CQLMetrics metrics> AT LINE 525
2020-05-18 22:39:05 [INFO] - 	 -> $stack24 = <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger logger> AT LINE 526
2020-05-18 22:39:05 [INFO] - 	 -> $stack23 = i + 1 AT LINE 526
2020-05-18 22:39:05 [INFO] - 	 -> $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack23) AT LINE 526
2020-05-18 22:39:05 [INFO] - 	 -> $stack27 = interfaceinvoke variables.<java.util.List: java.lang.Object get(int)>(i) AT LINE 526
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("[{}] \'{}\'", $stack26, $stack27) AT LINE 526
2020-05-18 22:39:05 [INFO] - 	 -> i = i + 1 AT LINE 525
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable: java.util.List call()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doCommit(java.lang.Throwable)> line 211 has 9 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack4 == 0 goto staticinvoke <org.apache.cassandra.utils.Throwables: void maybeFail(java.lang.Throwable)>(accumulate) AT LINE 211
2020-05-18 22:39:05 [INFO] - 	 -> $stack30 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 212
2020-05-18 22:39:05 [INFO] - 	 -> $stack26 = newarray (java.lang.Object)[3] AT LINE 212
2020-05-18 22:39:05 [INFO] - 	 -> $stack27 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals> AT LINE 212
2020-05-18 22:39:05 [INFO] - 	 -> $stack26[0] = $stack27 AT LINE 212
2020-05-18 22:39:05 [INFO] - 	 -> $stack28 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> AT LINE 212
2020-05-18 22:39:05 [INFO] - 	 -> $stack26[1] = $stack28 AT LINE 212
2020-05-18 22:39:05 [INFO] - 	 -> $stack29 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State logged> AT LINE 212
2020-05-18 22:39:05 [INFO] - 	 -> $stack26[2] = $stack29 AT LINE 212
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Committing transaction over {} staged: {}, logged: {}", $stack26) AT LINE 212
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_update_keyspace(org.apache.cassandra.thrift.KsDef)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void closeSession(org.apache.cassandra.streaming.StreamSession$State)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void addSavedEndpoint(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void addSavedEndpoint(java.net.InetAddress)> line 1511 has 5 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack16 == 0 goto return AT LINE 1511
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1512
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = virtualinvoke epState.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 1512
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = virtualinvoke $stack19.<org.apache.cassandra.gms.HeartBeatState: int getGeneration()>() AT LINE 1512
2020-05-18 22:39:05 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack20) AT LINE 1512
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Adding saved endpoint {} {}", ep, $stack21) AT LINE 1512
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: boolean nextKeyValue()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.util.Collection getOverlappingLiveSSTables(java.lang.Iterable)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.EndpointState getStateForVersionBiggerThan(java.net.InetAddress,int)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.EndpointState getStateForVersionBiggerThan(java.net.InetAddress,int)> line 893 has 8 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack43 == 0 goto $stack18 = new java.util.EnumMap AT LINE 893
2020-05-18 22:39:05 [INFO] - 	 -> $stack47 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 894
2020-05-18 22:39:05 [INFO] - 	 -> $stack46 = newarray (java.lang.Object)[3] AT LINE 894
2020-05-18 22:39:05 [INFO] - 	 -> $stack50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localHbVersion) AT LINE 894
2020-05-18 22:39:05 [INFO] - 	 -> $stack46[0] = $stack50 AT LINE 894
2020-05-18 22:39:05 [INFO] - 	 -> $stack52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(version) AT LINE 894
2020-05-18 22:39:05 [INFO] - 	 -> $stack46[1] = $stack52 AT LINE 894
2020-05-18 22:39:05 [INFO] - 	 -> $stack46[2] = forEndpoint AT LINE 894
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack47.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("local heartbeat version {} greater than {} for {}", $stack46) AT LINE 894
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.EndpointState getStateForVersionBiggerThan(java.net.InetAddress,int)> line 908 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack29 == 0 goto interfaceinvoke states.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value) AT LINE 908
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 909
2020-05-18 22:39:05 [INFO] - 	 -> $stack31 = value.<org.apache.cassandra.gms.VersionedValue: java.lang.String value> AT LINE 909
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Adding state {}: {}", key, $stack31) AT LINE 909
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback$AsyncRepairRunner: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.PasswordAuthenticator: org.apache.cassandra.auth.AuthenticatedUser authenticate(java.lang.String,java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate getCompactionCandidates()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate getCompactionCandidates()> line 391 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack49 == 0 goto $stack50 = new org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate AT LINE 391
2020-05-18 22:39:05 [INFO] - 	 -> $stack54 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 392
2020-05-18 22:39:05 [INFO] - 	 -> $stack56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(mostInteresting#2) AT LINE 392
2020-05-18 22:39:05 [INFO] - 	 -> $stack57 = specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.lang.String toString(java.util.Collection)>(candidates) AT LINE 392
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack54.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Compaction candidates for L{} are {}", $stack56, $stack57) AT LINE 392
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: void build()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: void log(org.slf4j.Logger)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: void onFailure(java.net.InetAddress,org.apache.cassandra.exceptions.RequestFailureReason)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: boolean delete(org.apache.cassandra.io.sstable.Descriptor,java.util.Set)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: void assureSufficientLiveNodes(org.apache.cassandra.db.Keyspace,java.lang.Iterable)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.ConsistencyLevel: void assureSufficientLiveNodes(org.apache.cassandra.db.Keyspace,java.lang.Iterable)> line 302 has 21 units and 7 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack38 == 0 goto $stack39 = new org.apache.cassandra.exceptions.UnavailableException AT LINE 302
2020-05-18 22:39:05 [INFO] - 	 -> $stack40 = new java.lang.StringBuilder AT LINE 304
2020-05-18 22:39:05 [INFO] - 	 -> specialinvoke $stack40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Local replicas [") AT LINE 304
2020-05-18 22:39:05 [INFO] - 	 -> builder = $stack40 AT LINE 304
2020-05-18 22:39:05 [INFO] - 	 -> entry = interfaceinvoke liveEndpoints.<java.lang.Iterable: java.util.Iterator iterator()>() AT LINE 305
2020-05-18 22:39:05 [INFO] - 	 -> $stack42 = interfaceinvoke entry.<java.util.Iterator: boolean hasNext()>() AT LINE 305
2020-05-18 22:39:05 [INFO] - 	 -> if $stack42 == 0 goto $stack43 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] are insufficient to satisfy LOCAL_QUORUM requirement of ") AT LINE 305
2020-05-18 22:39:05 [INFO] - 	 -> $stack54 = interfaceinvoke entry.<java.util.Iterator: java.lang.Object next()>() AT LINE 313
2020-05-18 22:39:05 [INFO] - 	 -> endpoint = (java.net.InetAddress) $stack54 AT LINE 313
2020-05-18 22:39:05 [INFO] - 	 -> $stack55 = virtualinvoke this.<org.apache.cassandra.db.ConsistencyLevel: boolean isLocal(java.net.InetAddress)>(endpoint) AT LINE 307
2020-05-18 22:39:05 [INFO] - 	 -> if $stack55 == 0 goto (branch) AT LINE 307
2020-05-18 22:39:05 [INFO] - 	 -> $stack57 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(endpoint) AT LINE 308
2020-05-18 22:39:05 [INFO] - 	 -> virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") AT LINE 308
2020-05-18 22:39:05 [INFO] - 	 -> $stack43 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] are insufficient to satisfy LOCAL_QUORUM requirement of ") AT LINE 310
2020-05-18 22:39:05 [INFO] - 	 -> $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(blockFor) AT LINE 310
2020-05-18 22:39:05 [INFO] - 	 -> $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" live nodes in \'") AT LINE 310
2020-05-18 22:39:05 [INFO] - 	 -> $stack46 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getLocalDataCenter()>() AT LINE 310
2020-05-18 22:39:05 [INFO] - 	 -> $stack47 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack46) AT LINE 310
2020-05-18 22:39:05 [INFO] - 	 -> virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") AT LINE 310
2020-05-18 22:39:05 [INFO] - 	 -> $stack49 = <org.apache.cassandra.db.ConsistencyLevel: org.slf4j.Logger logger> AT LINE 311
2020-05-18 22:39:05 [INFO] - 	 -> $stack50 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.String toString()>() AT LINE 311
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack49.<org.slf4j.Logger: void trace(java.lang.String)>($stack50) AT LINE 311
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.cql3.functions.UDFunction createUDFFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon: void lambda$setup$0()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.ArrivalWindow: void add(long,java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraRoleManager: void convertLegacyData()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.transport.Server$EventNotifier: void send(java.net.InetAddress,org.apache.cassandra.transport.Event$NodeEvent)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.transport.Server$EventNotifier: void send(java.net.InetAddress,org.apache.cassandra.transport.Event$NodeEvent)> line 512 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack4 == 0 goto $stack5 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 512
2020-05-18 22:39:05 [INFO] - 	 -> $stack12 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 513
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = virtualinvoke event.<org.apache.cassandra.transport.Event$NodeEvent: java.net.InetAddress nodeAddress()>() AT LINE 513
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Sending event for endpoint {}, rpc address {}", endpoint, $stack14) AT LINE 513
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_add_column_family(org.apache.cassandra.thrift.CfDef)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void cancel(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.util.Map describe_schema_versions()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void clearEphemeralSnapshots(org.apache.cassandra.db.Directories)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void markDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void markDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> line 1029 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack6 == 0 goto virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: void markDead()>() AT LINE 1029
2020-05-18 22:39:05 [INFO] - 	 -> $stack23 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1030
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack23.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("marking as down {}", addr) AT LINE 1030
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void markDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> line 1037 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack18 == 0 goto return AT LINE 1037
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1038
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = this.<org.apache.cassandra.gms.Gossiper: java.util.List subscribers> AT LINE 1038
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Notified {}", $stack19) AT LINE 1038
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy: org.apache.cassandra.auth.Permission getRequiredPermission(java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateColumnData(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.thrift.Column)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onDown(com.datastax.driver.core.Host)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask: boolean logSlowOperations(long)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.monitoring.MonitoringTask: boolean logSlowOperations(long)> line 172 has 12 units and 4 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack14 == 0 goto return 1 AT LINE 172
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.monitoring.MonitoringTask: org.slf4j.Logger logger> AT LINE 174
2020-05-18 22:39:05 [INFO] - 	 -> $stack15 = newarray (java.lang.Object)[4] AT LINE 173
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = virtualinvoke slowOperations.<org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: long num()>() AT LINE 174
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack19) AT LINE 174
2020-05-18 22:39:05 [INFO] - 	 -> $stack15[0] = $stack20 AT LINE 174
2020-05-18 22:39:05 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(elapsed) AT LINE 175
2020-05-18 22:39:05 [INFO] - 	 -> $stack15[1] = $stack22 AT LINE 175
2020-05-18 22:39:05 [INFO] - 	 -> $stack23 = <org.apache.cassandra.db.monitoring.MonitoringTask: java.lang.String LINE_SEPARATOR> AT LINE 175
2020-05-18 22:39:05 [INFO] - 	 -> $stack15[2] = $stack23 AT LINE 175
2020-05-18 22:39:05 [INFO] - 	 -> $stack25 = virtualinvoke slowOperations.<org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: java.lang.String getLogMessage()>() AT LINE 177
2020-05-18 22:39:05 [INFO] - 	 -> $stack15[3] = $stack25 AT LINE 177
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("{} operations were slow in the last {} msecs:{}{}", $stack15) AT LINE 173
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.index.Index getBestIndexFor(org.apache.cassandra.db.filter.RowFilter)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void delete(java.io.File[])>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$7: void execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: void serve()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.FailureDetector: void report(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.FailureDetector: void report(java.net.InetAddress)> line 272 has 5 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack10 == 0 goto return AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> if heartbeatWindow == null goto return AT LINE 274
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 273
2020-05-18 22:39:05 [INFO] - 	 -> $stack13 = virtualinvoke heartbeatWindow.<org.apache.cassandra.gms.ArrivalWindow: double mean()>() AT LINE 273
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack13) AT LINE 273
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Average for {} is {}", ep, $stack14) AT LINE 273
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.PasswordAuthenticator: java.lang.String queryHashedPassword(java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.transport.Server$EventNotifier: void onTopologyChange(java.net.InetAddress,org.apache.cassandra.transport.Event$TopologyChange)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.transport.Server$EventNotifier: void onTopologyChange(java.net.InetAddress,org.apache.cassandra.transport.Event$TopologyChange)> line 565 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack6 == 0 goto $stack7 = this.<org.apache.cassandra.transport.Server$EventNotifier: java.util.Map latestEvents> AT LINE 565
2020-05-18 22:39:05 [INFO] - 	 -> $stack22 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 566
2020-05-18 22:39:05 [INFO] - 	 -> $stack23 = event.<org.apache.cassandra.transport.Event$TopologyChange: org.apache.cassandra.transport.Event$TopologyChange$Change change> AT LINE 566
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Topology changed event : {}, {}", endpoint, $stack23) AT LINE 566
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void init(com.datastax.driver.core.Cluster,java.util.Collection)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void doStatusCheck()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void doStatusCheck()> line 776 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack14 == 0 goto now = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 776
2020-05-18 22:39:05 [INFO] - 	 -> $stack105 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 777
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack105.<org.slf4j.Logger: void trace(java.lang.String)>("Performing status check ...") AT LINE 777
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void doStatusCheck()> line 837 has 5 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack46 == 0 goto $stack47 = this.<org.apache.cassandra.gms.Gossiper: java.util.Map justRemovedEndpoints> AT LINE 837
2020-05-18 22:39:05 [INFO] - 	 -> $stack51 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 838
2020-05-18 22:39:05 [INFO] - 	 -> $stack50 = <org.apache.cassandra.gms.Gossiper: int QUARANTINE_DELAY> AT LINE 838
2020-05-18 22:39:05 [INFO] - 	 -> $stack53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack50) AT LINE 838
2020-05-18 22:39:05 [INFO] - 	 -> $stack54 = interfaceinvoke endpoint#37.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 838
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack51.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("{} elapsed, {} gossip quarantine over", $stack53, $stack54) AT LINE 838
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void doStatusCheck()> line 822 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack72 == 0 goto specialinvoke this.<org.apache.cassandra.gms.Gossiper: void evictFromMembership(java.net.InetAddress)>(endpoint) AT LINE 822
2020-05-18 22:39:05 [INFO] - 	 -> $stack73 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 824
2020-05-18 22:39:05 [INFO] - 	 -> $stack75 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(expireTime) AT LINE 824
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack73.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("time is expiring for endpoint : {} ({})", endpoint, $stack75) AT LINE 824
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: org.apache.cassandra.utils.Pair distributeRemainingSpace(java.util.List,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$15: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.lang.String getPreviousVersionString()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.utils.MerkleTrees createMerkleTrees(java.lang.Iterable,java.util.Collection,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.utils.MerkleTrees createMerkleTrees(java.lang.Iterable,java.util.Collection,org.apache.cassandra.db.ColumnFamilyStore)> line 1468 has 16 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack24 == 0 goto return tree AT LINE 1468
2020-05-18 22:39:05 [INFO] - 	 -> $stack26 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack25 = newarray (java.lang.Object)[4] AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack29 = virtualinvoke tree.<org.apache.cassandra.utils.MerkleTrees: java.util.Collection ranges()>() AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack30 = interfaceinvoke $stack29.<java.util.Collection: int size()>() AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack30) AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack25[0] = $stack31 AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack33 = virtualinvoke tree.<org.apache.cassandra.utils.MerkleTrees: long size()>() AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack33) AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack25[1] = $stack34 AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack36 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(allPartitions) AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack25[2] = $stack36 AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack37 = <org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer serializer> AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = virtualinvoke $stack37.<org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer: long serializedSize(org.apache.cassandra.utils.MerkleTrees,int)>(tree, 0) AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack39) AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> $stack25[3] = $stack40 AT LINE 1471
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Created {} merkle trees with merkle trees size {}, {} partitions, {} bytes", $stack25) AT LINE 1471
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getNextBackgroundTask(int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void passiveAnnounce(java.util.UUID,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void removeEndpoint(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void removeEndpoint(java.net.InetAddress)> line 433 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack16 == 0 goto return AT LINE 433
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 434
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("removing endpoint {}", endpoint) AT LINE 434
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.Directories$DataDirectory[])>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceStateImpl: void waitForPendingEvents()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.tracing.TraceStateImpl: void waitForPendingEvents()> line 82 has 7 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack4 == 0 goto $stack6 = this.<org.apache.cassandra.tracing.TraceStateImpl: java.util.Set pendingFutures> AT LINE 82
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = <org.apache.cassandra.tracing.TraceStateImpl: org.slf4j.Logger logger> AT LINE 84
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = <org.apache.cassandra.tracing.TraceStateImpl: int WAIT_FOR_PENDING_EVENTS_TIMEOUT_SECS> AT LINE 84
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack16) AT LINE 84
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = this.<org.apache.cassandra.tracing.TraceStateImpl: java.util.Set pendingFutures> AT LINE 84
2020-05-18 22:39:05 [INFO] - 	 -> $stack21 = interfaceinvoke $stack20.<java.util.Set: int size()>() AT LINE 84
2020-05-18 22:39:05 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack21) AT LINE 84
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Waiting for up to {} seconds for {} trace events to complete", $stack19, $stack22) AT LINE 83
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: void initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.index.Index unregisterIndex(java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void expireMessages(long)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.net.OutboundTcpConnection: void expireMessages(long)> line 625 has 8 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack21 == 0 goto $stack22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> AT LINE 625
2020-05-18 22:39:05 [INFO] - 	 -> $stack28 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 627
2020-05-18 22:39:05 [INFO] - 	 -> $stack29 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 627
2020-05-18 22:39:05 [INFO] - 	 -> $stack30 = $stack29 - timestampNanos AT LINE 627
2020-05-18 22:39:05 [INFO] - 	 -> qm#9 = virtualinvoke $stack28.<java.util.concurrent.TimeUnit: long toMicros(long)>($stack30) AT LINE 627
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = <org.apache.cassandra.net.OutboundTcpConnection: org.slf4j.Logger logger> AT LINE 628
2020-05-18 22:39:05 [INFO] - 	 -> $stack34 = virtualinvoke this.<org.apache.cassandra.net.OutboundTcpConnection: java.lang.String getName()>() AT LINE 628
2020-05-18 22:39:05 [INFO] - 	 -> $stack35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(qm#9) AT LINE 628
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Expiration of {} took {}\u03bcs", $stack34, $stack35) AT LINE 628
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean checkExact(javax.management.ObjectName,java.util.Set)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: java.util.Map deserialize(org.apache.cassandra.io.sstable.Descriptor,java.util.EnumSet)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onDropColumnFamily(java.lang.String,java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon: void setup()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.CassandraDaemon: void setup()> line 289 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack114 == 0 goto $stack115 = staticinvoke <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>(keyspaceName) AT LINE 289
2020-05-18 22:39:05 [INFO] - 	 -> $stack127 = <org.apache.cassandra.service.CassandraDaemon: org.slf4j.Logger logger> AT LINE 290
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack127.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("opening keyspace {}", keyspaceName) AT LINE 290
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamWriter: void write(org.apache.cassandra.io.util.DataOutputStreamPlus)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: java.util.Set getFullyExpiredSSTables(org.apache.cassandra.db.ColumnFamilyStore,java.lang.Iterable,java.lang.Iterable,int,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: void initiate()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader: org.apache.cassandra.config.Config loadConfig(java.net.URL)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: boolean realAppend(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.index.sasi.TermIterator: void lambda$build$0(org.apache.cassandra.index.sasi.plan.Expression,org.apache.cassandra.index.sasi.SSTableIndex,java.util.Set,java.util.List,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.CountDownLatch)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraAuthorizer: void convertLegacyData()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthenticationProxy: javax.security.auth.Subject authenticate(java.lang.Object)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void renameWithConfirm(java.io.File,java.io.File)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.io.util.FileUtils: void renameWithConfirm(java.io.File,java.io.File)> line 183 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = virtualinvoke from.<java.io.File: java.nio.file.Path toPath()>() AT LINE 183
2020-05-18 22:39:05 [INFO] - 	 -> $stack8 = <org.apache.cassandra.io.util.FileUtils: org.slf4j.Logger logger> AT LINE 184
2020-05-18 22:39:05 [INFO] - 	 -> $stack10 = virtualinvoke from.<java.io.File: java.lang.String getPath()>() AT LINE 184
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = virtualinvoke to.<java.io.File: java.lang.String getPath()>() AT LINE 184
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack8.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Renaming {} to {}", $stack10, $stack11) AT LINE 184
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void examineGossiper(java.util.List,java.util.List,java.util.Map)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void logFlush()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedSegment: void <init>(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: void replace(java.util.Collection,java.util.Collection)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.compaction.LeveledManifest: void replace(java.util.Collection,java.util.Collection)> line 200 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack9 == 0 goto minLevel = 2147483647 AT LINE 200
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 201
2020-05-18 22:39:05 [INFO] - 	 -> $stack34 = specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.lang.String toString(java.util.Collection)>(removed) AT LINE 201
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Replacing [{}]", $stack34) AT LINE 201
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.compaction.LeveledManifest: void replace(java.util.Collection,java.util.Collection)> line 217 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack14 == 0 goto l4 = interfaceinvoke added.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 217
2020-05-18 22:39:05 [INFO] - 	 -> $stack24 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 218
2020-05-18 22:39:05 [INFO] - 	 -> $stack26 = specialinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.lang.String toString(java.util.Collection)>(added) AT LINE 218
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Adding [{}]", $stack26) AT LINE 218
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: org.apache.cassandra.db.ReadQuery getReadQuery()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: org.apache.cassandra.streaming.StreamResultFuture fetchAsync()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.dht.RangeStreamer: org.apache.cassandra.streaming.StreamResultFuture fetchAsync()> line 387 has 8 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack30 == 0 goto $stack31 = this.<org.apache.cassandra.dht.RangeStreamer: org.apache.cassandra.streaming.StreamPlan streamPlan> AT LINE 387
2020-05-18 22:39:05 [INFO] - 	 -> $stack36 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 388
2020-05-18 22:39:05 [INFO] - 	 -> $stack34 = newarray (java.lang.Object)[3] AT LINE 388
2020-05-18 22:39:05 [INFO] - 	 -> $stack35 = this.<org.apache.cassandra.dht.RangeStreamer: java.lang.String description> AT LINE 388
2020-05-18 22:39:05 [INFO] - 	 -> $stack34[0] = $stack35 AT LINE 388
2020-05-18 22:39:05 [INFO] - 	 -> $stack34[1] = source AT LINE 388
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(ranges, ", ") AT LINE 388
2020-05-18 22:39:05 [INFO] - 	 -> $stack34[2] = $stack39 AT LINE 388
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack36.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{}ing from {} ranges {}", $stack34) AT LINE 388
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$11: void runMayThrow()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void reload(org.apache.cassandra.schema.CompactionParams)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void scrubDataDirectories(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void markObsolete(java.lang.Runnable)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.SSTableReader: void markObsolete(java.lang.Runnable)> line 1702 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier tidy> AT LINE 1702
2020-05-18 22:39:05 [INFO] - 	 -> $stack30 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 1703
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = virtualinvoke this.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 1703
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Marking {} compacted", $stack32) AT LINE 1703
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void handleMajorStateChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void handleMajorStateChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> line 1057 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack10 == 0 goto $stack11 = this.<org.apache.cassandra.gms.Gossiper: java.util.concurrent.ConcurrentMap endpointStateMap> AT LINE 1057
2020-05-18 22:39:05 [INFO] - 	 -> $stack29 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1058
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Adding endpoint state for {}", ep) AT LINE 1058
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairSession: void syncComplete(org.apache.cassandra.repair.RepairJobDesc,org.apache.cassandra.repair.NodePair,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void waitForSchema(int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void lambda$handshakeVersion$1(java.util.concurrent.atomic.AtomicInteger,java.io.DataInputStream,java.util.concurrent.CountDownLatch)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries getDiskBoundaries(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void saveSummary(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.commitlog.CommitLogPosition lambda$waitForFlushes$0(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler: java.lang.Void lambda$doVerb$1(java.lang.Throwable)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.apache.cassandra.db.Directories$DataDirectory getWriteDirectory(java.lang.Iterable,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlResult execute_prepared_cql3_query(int,java.util.List,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer takeFromPool(int,boolean)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer takeFromPool(int,boolean)> line 119 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = <org.apache.cassandra.utils.memory.BufferPool: io.netty.util.concurrent.FastThreadLocal localPool> AT LINE 119
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = <org.apache.cassandra.utils.memory.BufferPool: org.slf4j.Logger logger> AT LINE 120
2020-05-18 22:39:05 [INFO] - 	 -> $stack10 = (long) size AT LINE 120
2020-05-18 22:39:05 [INFO] - 	 -> $stack13 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack10) AT LINE 120
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Requested buffer size {} has been allocated directly due to lack of capacity", $stack13) AT LINE 120
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.locator.NetworkTopologyStrategy: void <init>(java.lang.String,org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.IEndpointSnitch,java.util.Map)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.IncomingStreamingConnection: void close()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable updateSizeTracking(java.lang.Iterable,java.lang.Iterable,java.lang.Throwable)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable updateSizeTracking(java.lang.Iterable,java.lang.Iterable,java.lang.Throwable)> line 164 has 12 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack27 == 0 goto $stack28 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: long bytesOnDisk()>() AT LINE 164
2020-05-18 22:39:05 [INFO] - 	 -> $stack34 = <org.apache.cassandra.db.lifecycle.Tracker: org.slf4j.Logger logger> AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack30 = newarray (java.lang.Object)[3] AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack31 = sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.Descriptor descriptor> AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack30[0] = $stack31 AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = this.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.ColumnFamilyStore cfstore> AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack33 = $stack32.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack37 = virtualinvoke $stack33.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack30[1] = $stack37 AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack38 = this.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.ColumnFamilyStore cfstore> AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = $stack38.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> $stack30[2] = $stack39 AT LINE 165
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack34.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("removing {} from list of files tracked for {}.{}", $stack30) AT LINE 165
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable updateSizeTracking(java.lang.Iterable,java.lang.Iterable,java.lang.Throwable)> line 150 has 12 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack45 == 0 goto $stack46 = virtualinvoke sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: long bytesOnDisk()>() AT LINE 150
2020-05-18 22:39:05 [INFO] - 	 -> $stack52 = <org.apache.cassandra.db.lifecycle.Tracker: org.slf4j.Logger logger> AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack48 = newarray (java.lang.Object)[3] AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack49 = sstable.<org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.Descriptor descriptor> AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack48[0] = $stack49 AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack50 = this.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.ColumnFamilyStore cfstore> AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack51 = $stack50.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack55 = virtualinvoke $stack51.<org.apache.cassandra.db.Keyspace: java.lang.String getName()>() AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack48[1] = $stack55 AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack56 = this.<org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.ColumnFamilyStore cfstore> AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack57 = $stack56.<org.apache.cassandra.db.ColumnFamilyStore: java.lang.String name> AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack48[2] = $stack57 AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack52.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("adding {} to list of files tracked for {}.{}", $stack48) AT LINE 151
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,java.lang.String)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.locator.TokenMetadata: void calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,java.lang.String)> line 821 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack17 == 0 goto startedAt = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 821
2020-05-18 22:39:05 [INFO] - 	 -> $stack50 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 822
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack50.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Starting pending range calculation for {}", keyspaceName) AT LINE 822
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.locator.TokenMetadata: void calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,java.lang.String)> line 849 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack37 == 0 goto $stack38 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 849
2020-05-18 22:39:05 [INFO] - 	 -> $stack47 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 850
2020-05-18 22:39:05 [INFO] - 	 -> $stack49 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(took#6) AT LINE 850
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack47.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Pending range calculation for {} completed (took: {}ms)", keyspaceName, $stack49) AT LINE 850
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.locator.TokenMetadata: void calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,java.lang.String)> line 851 has 8 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack39 == 0 goto exitmonitor l3 AT LINE 851
2020-05-18 22:39:05 [INFO] - 	 -> $stack42 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 852
2020-05-18 22:39:05 [INFO] - 	 -> $stack41 = this.<org.apache.cassandra.locator.TokenMetadata: java.util.concurrent.ConcurrentMap pendingRanges> AT LINE 852
2020-05-18 22:39:05 [INFO] - 	 -> $stack44 = interfaceinvoke $stack41.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>() AT LINE 852
2020-05-18 22:39:05 [INFO] - 	 -> if $stack44 == 0 goto $stack45 = specialinvoke this.<org.apache.cassandra.locator.TokenMetadata: java.lang.String printPendingRanges()>() AT LINE 852
2020-05-18 22:39:05 [INFO] - 	 -> $stack45 = "<empty>" AT LINE 854
2020-05-18 22:39:05 [INFO] - 	 -> goto [?= interfaceinvoke $stack42.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Calculated pending ranges for {}:\n{}", keyspaceName, $stack45)] AT LINE 854
2020-05-18 22:39:05 [INFO] - 	 -> $stack45 = specialinvoke this.<org.apache.cassandra.locator.TokenMetadata: java.lang.String printPendingRanges()>() AT LINE 852
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack42.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Calculated pending ranges for {}:\n{}", keyspaceName, $stack45) AT LINE 852
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.locator.TokenMetadata: void calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,java.lang.String)> line 814 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack65 == 0 goto $stack67 = this.<org.apache.cassandra.locator.TokenMetadata: java.util.concurrent.ConcurrentMap pendingRanges> AT LINE 814
2020-05-18 22:39:05 [INFO] - 	 -> $stack69 = <org.apache.cassandra.locator.TokenMetadata: org.slf4j.Logger logger> AT LINE 815
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack69.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("No bootstrapping, leaving or moving nodes -> empty pending ranges for {}", keyspaceName) AT LINE 815
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: java.util.List getNextBackgroundSSTables(int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getNextBackgroundSSTables(int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.SchemaCheckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void clearSnapshot(java.lang.String,java.lang.String[])>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void clearSnapshot(java.lang.String,java.lang.String[])> line 3290 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack17 == 0 goto return AT LINE 3290
2020-05-18 22:39:05 [INFO] - 	 -> $stack18 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3291
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void debug(java.lang.String)>("Cleared out snapshot directories") AT LINE 3291
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: void addRanges(java.lang.String,java.util.Collection)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.dht.RangeStreamer: void addRanges(java.lang.String,java.util.Collection)> line 187 has 16 units and 3 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack21 == 0 goto $stack22 = this.<org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap toFetch> AT LINE 187
2020-05-18 22:39:05 [INFO] - 	 -> $stack25 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>() AT LINE 189
2020-05-18 22:39:05 [INFO] - 	 -> $stack26 = (java.util.Collection) $stack25 AT LINE 189
2020-05-18 22:39:05 [INFO] - 	 -> l6 = interfaceinvoke $stack26.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 189
2020-05-18 22:39:05 [INFO] - 	 -> $stack28 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>() AT LINE 189
2020-05-18 22:39:05 [INFO] - 	 -> if $stack28 == 0 goto $stack22 = this.<org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap toFetch> AT LINE 189
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>() AT LINE 193
2020-05-18 22:39:05 [INFO] - 	 -> r = (org.apache.cassandra.dht.Range) $stack32 AT LINE 193
2020-05-18 22:39:05 [INFO] - 	 -> $stack35 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack33 = newarray (java.lang.Object)[4] AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack34 = this.<org.apache.cassandra.dht.RangeStreamer: java.lang.String description> AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack33[0] = $stack34 AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack33[1] = r AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack38 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack33[2] = $stack38 AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack33[3] = keyspaceName AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack35.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{}: range {} from source {} for keyspace {}", $stack33) AT LINE 190
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.dht.RangeStreamer: void addRanges(java.lang.String,java.util.Collection)> line 179 has 15 units and 3 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack11 == 0 goto $stack13 = this.<org.apache.cassandra.dht.RangeStreamer: java.util.Set sourceFilters> AT LINE 179
2020-05-18 22:39:05 [INFO] - 	 -> $stack40 = interfaceinvoke rangesForKeyspace.<com.google.common.collect.Multimap: java.util.Collection entries()>() AT LINE 181
2020-05-18 22:39:05 [INFO] - 	 -> l4 = interfaceinvoke $stack40.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 181
2020-05-18 22:39:05 [INFO] - 	 -> $stack42 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>() AT LINE 181
2020-05-18 22:39:05 [INFO] - 	 -> if $stack42 == 0 goto $stack13 = this.<org.apache.cassandra.dht.RangeStreamer: java.util.Set sourceFilters> AT LINE 181
2020-05-18 22:39:05 [INFO] - 	 -> $stack47 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>() AT LINE 185
2020-05-18 22:39:05 [INFO] - 	 -> entry = (java.util.Map$Entry) $stack47 AT LINE 185
2020-05-18 22:39:05 [INFO] - 	 -> $stack50 = <org.apache.cassandra.dht.RangeStreamer: org.slf4j.Logger logger> AT LINE 182
2020-05-18 22:39:05 [INFO] - 	 -> $stack48 = newarray (java.lang.Object)[3] AT LINE 182
2020-05-18 22:39:05 [INFO] - 	 -> $stack49 = this.<org.apache.cassandra.dht.RangeStreamer: java.lang.String description> AT LINE 182
2020-05-18 22:39:05 [INFO] - 	 -> $stack48[0] = $stack49 AT LINE 182
2020-05-18 22:39:05 [INFO] - 	 -> $stack53 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 182
2020-05-18 22:39:05 [INFO] - 	 -> $stack48[1] = $stack53 AT LINE 182
2020-05-18 22:39:05 [INFO] - 	 -> $stack55 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>() AT LINE 182
2020-05-18 22:39:05 [INFO] - 	 -> $stack48[2] = $stack55 AT LINE 182
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack50.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{}: range {} exists on {}", $stack48) AT LINE 182
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: void atomic_batch_mutate(java.util.Map,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void sendOneWay(org.apache.cassandra.net.MessageOut,int,java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.net.MessagingService: void sendOneWay(org.apache.cassandra.net.MessageOut,int,java.net.InetAddress)> line 952 has 10 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack7 == 0 goto $stack8 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 952
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = <org.apache.cassandra.net.MessagingService: org.slf4j.Logger logger> AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = newarray (java.lang.Object)[4] AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> $stack23 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> $stack19[0] = $stack23 AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> $stack24 = message.<org.apache.cassandra.net.MessageOut: org.apache.cassandra.net.MessagingService$Verb verb> AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> $stack19[1] = $stack24 AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id) AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> $stack19[2] = $stack26 AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> $stack19[3] = to AT LINE 953
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{} sending {} to {}@{}", $stack19) AT LINE 953
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: void doDelete(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewBuilder: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask: boolean logFailedOperations(long)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.monitoring.MonitoringTask: boolean logFailedOperations(long)> line 151 has 12 units and 4 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack14 == 0 goto return 1 AT LINE 151
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = <org.apache.cassandra.db.monitoring.MonitoringTask: org.slf4j.Logger logger> AT LINE 153
2020-05-18 22:39:05 [INFO] - 	 -> $stack15 = newarray (java.lang.Object)[4] AT LINE 152
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = virtualinvoke failedOperations.<org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: long num()>() AT LINE 153
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack19) AT LINE 153
2020-05-18 22:39:05 [INFO] - 	 -> $stack15[0] = $stack20 AT LINE 153
2020-05-18 22:39:05 [INFO] - 	 -> $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(elapsed) AT LINE 154
2020-05-18 22:39:05 [INFO] - 	 -> $stack15[1] = $stack22 AT LINE 154
2020-05-18 22:39:05 [INFO] - 	 -> $stack23 = <org.apache.cassandra.db.monitoring.MonitoringTask: java.lang.String LINE_SEPARATOR> AT LINE 154
2020-05-18 22:39:05 [INFO] - 	 -> $stack15[2] = $stack23 AT LINE 154
2020-05-18 22:39:05 [INFO] - 	 -> $stack25 = virtualinvoke failedOperations.<org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: java.lang.String getLogMessage()>() AT LINE 156
2020-05-18 22:39:05 [INFO] - 	 -> $stack15[3] = $stack25 AT LINE 156
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("{} operations timed out in the last {} msecs:{}{}", $stack15) AT LINE 152
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorizeMBeanServerMethod(org.apache.cassandra.auth.RoleResource,java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void handleStateNormal(java.net.InetAddress,java.lang.String)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void handleStateNormal(java.net.InetAddress,java.lang.String)> line 2285 has 6 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack20 == 0 goto $stack21 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2285
2020-05-18 22:39:05 [INFO] - 	 -> $stack178 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2286
2020-05-18 22:39:05 [INFO] - 	 -> $stack177 = newarray (java.lang.Object)[3] AT LINE 2286
2020-05-18 22:39:05 [INFO] - 	 -> $stack177[0] = endpoint AT LINE 2286
2020-05-18 22:39:05 [INFO] - 	 -> $stack177[1] = status AT LINE 2286
2020-05-18 22:39:05 [INFO] - 	 -> $stack177[2] = tokens AT LINE 2286
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack178.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Node {} state {}, token {}", $stack177) AT LINE 2286
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareCallback: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void handleStateBootstrap(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void handleStateBootstrap(java.net.InetAddress)> line 2212 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2212
2020-05-18 22:39:05 [INFO] - 	 -> $stack25 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2213
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack25.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} state bootstrapping, token {}", endpoint, tokens) AT LINE 2213
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: void truncate(java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.ResponseVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: org.apache.cassandra.db.Directories$DataDirectory getWriteableLocation(long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void checkForEndpointCollision(java.util.UUID,java.util.Set)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean sendGossip(org.apache.cassandra.net.MessageOut,java.util.Set)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: boolean sendGossip(org.apache.cassandra.net.MessageOut,java.util.Set)> line 661 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack13 == 0 goto $stack14 = this.<org.apache.cassandra.gms.Gossiper: long firstSynSendAt> AT LINE 661
2020-05-18 22:39:05 [INFO] - 	 -> $stack24 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 662
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending a GossipDigestSyn to {} ...", to) AT LINE 662
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void restoreReplicaCount(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void restoreReplicaCount(java.net.InetAddress,java.net.InetAddress)> line 2693 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack35 == 0 goto virtualinvoke stream#10.<org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamPlan requestRanges(java.net.InetAddress,java.net.InetAddress,java.lang.String,java.util.Collection)>(entry#15, entry#16, changedRanges#12, ranges) AT LINE 2693
2020-05-18 22:39:05 [INFO] - 	 -> $stack38 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2694
2020-05-18 22:39:05 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(ranges, ", ") AT LINE 2694
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack38.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Requesting from {} ranges {}", entry#15, $stack40) AT LINE 2694
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.RateBasedBackPressure: void apply(java.util.Set,long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.net.RateBasedBackPressure: void apply(java.util.Set,long,java.util.concurrent.TimeUnit)> line 187 has 14 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack108 == 0 goto (branch) AT LINE 187
2020-05-18 22:39:05 [INFO] - 	 -> $stack113 = <org.apache.cassandra.net.RateBasedBackPressure: org.slf4j.Logger logger> AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack112 = newarray (java.lang.Object)[5] AT LINE 189
2020-05-18 22:39:05 [INFO] - 	 -> $stack116 = virtualinvoke backPressure.<org.apache.cassandra.net.RateBasedBackPressureState: java.net.InetAddress getHost()>() AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack112[0] = $stack116 AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack118 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(incomingRate) AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack112[1] = $stack118 AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack120 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(outgoingRate) AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack112[2] = $stack120 AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack122 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(actualRatio) AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack112[3] = $stack122 AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack124 = virtualinvoke limiter.<com.google.common.util.concurrent.RateLimiter: double getRate()>() AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack125 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack124) AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> $stack112[4] = $stack125 AT LINE 190
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack113.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Back-pressure state for {}: incoming rate {}, outgoing rate {}, ratio {}, rate limiting {}", $stack112) AT LINE 189
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onUpdateColumnFamily(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void addReplica(java.io.File)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LogReplicaSet: void addReplica(java.io.File)> line 66 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack9 == 0 goto return AT LINE 66
2020-05-18 22:39:05 [INFO] - 	 -> $stack10 = <org.apache.cassandra.db.lifecycle.LogReplicaSet: org.slf4j.Logger logger> AT LINE 67
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Added log file replica {} ", file) AT LINE 67
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void closeSocket(boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.Object runWithCompactionsDisabled(java.util.concurrent.Callable,boolean,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void convict(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable checkpoint(java.lang.Throwable)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable checkpoint(java.lang.Throwable)> line 301 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> AT LINE 301
2020-05-18 22:39:05 [INFO] - 	 -> $stack40 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 302
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> AT LINE 302
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Checkpointing staged {}", $stack39) AT LINE 302
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.util.List get_range_slices(org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.KeyRange,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$RangeRelocator: void calculateToFromStreams(java.util.Collection,java.util.List)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_add_keyspace(org.apache.cassandra.thrift.KsDef)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: void writeSortedContents()>
2020-05-18 22:39:05 [WARN] - Both branch of logging guard if trackContention == 0 goto $stack53 = virtualinvoke partition.<org.apache.cassandra.db.partitions.AtomicBTreePartition: boolean isEmpty()>() at line 472 don't have logging calls! Need manual examination!
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.Memtable$FlushRunnable: void writeSortedContents()> line 472 has 3 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if trackContention == 0 goto $stack53 = virtualinvoke partition.<org.apache.cassandra.db.partitions.AtomicBTreePartition: boolean isEmpty()>() AT LINE 472
2020-05-18 22:39:05 [INFO] - 	 -> $stack58 = virtualinvoke partition.<org.apache.cassandra.db.partitions.AtomicBTreePartition: boolean usePessimisticLocking()>() AT LINE 482
2020-05-18 22:39:05 [INFO] - 	 -> if $stack58 == 0 goto $stack53 = virtualinvoke partition.<org.apache.cassandra.db.partitions.AtomicBTreePartition: boolean isEmpty()>() AT LINE 482
2020-05-18 22:39:05 [INFO] - 	 -> heavilyContendedRowCount = heavilyContendedRowCount + 1 AT LINE 473
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void init(org.apache.cassandra.streaming.StreamResultFuture)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.util.List get_paged_slice(java.lang.String,org.apache.cassandra.thrift.KeyRange,java.nio.ByteBuffer,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorizeMBeanMethod(org.apache.cassandra.auth.RoleResource,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void unbootstrap(java.lang.Runnable)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void unbootstrap(java.lang.Runnable)> line 3980 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack27 == 0 goto interfaceinvoke rangesToStream.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(keyspaceName, rangesMM) AT LINE 3980
2020-05-18 22:39:05 [INFO] - 	 -> $stack30 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3981
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = interfaceinvoke rangesMM.<com.google.common.collect.Multimap: java.util.Set keySet()>() AT LINE 3981
2020-05-18 22:39:05 [INFO] - 	 -> $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack32, ",") AT LINE 3981
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Ranges needing transfer are [{}]", $stack33) AT LINE 3981
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void move(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void move(org.apache.cassandra.dht.Token)> line 4117 has 5 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack46 == 0 goto return AT LINE 4117
2020-05-18 22:39:05 [INFO] - 	 -> $stack47 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 4118
2020-05-18 22:39:05 [INFO] - 	 -> $stack49 = virtualinvoke this.<org.apache.cassandra.service.StorageService: java.util.Collection getLocalTokens()>() AT LINE 4118
2020-05-18 22:39:05 [INFO] - 	 -> $stack50 = interfaceinvoke $stack49.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 4118
2020-05-18 22:39:05 [INFO] - 	 -> $stack51 = interfaceinvoke $stack50.<java.util.Iterator: java.lang.Object next()>() AT LINE 4118
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack47.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Successfully moved to new token {}", $stack51) AT LINE 4118
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void afterAppend(org.apache.cassandra.db.DecoratedKey,long,org.apache.cassandra.db.RowIndexEntry,java.nio.ByteBuffer)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void afterAppend(org.apache.cassandra.db.DecoratedKey,long,org.apache.cassandra.db.RowIndexEntry,java.nio.ByteBuffer)> line 138 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack12 == 0 goto $stack13 = this.<org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter iwriter> AT LINE 138
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.slf4j.Logger logger> AT LINE 139
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(dataEnd) AT LINE 139
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("wrote {} at {}", decoratedKey, $stack16) AT LINE 139
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap$1: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void renameWithOutConfirm(java.lang.String,java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void deleteRecursiveOnExit(java.io.File)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void load(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void removeEndpoint(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_drop_keyspace(java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.utils.concurrent.Refs getSnapshotSSTableReader(java.lang.String)>
2020-05-18 22:39:05 [WARN] - Both branch of logging guard if $stack52 == 0 goto (branch) at line 1909 don't merge! Need manual examination!
2020-05-18 22:39:05 [WARN] - Both branch of logging guard if $stack52 == 0 goto (branch) at line 1909 don't merge! Need manual examination!
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.utils.concurrent.Refs getSnapshotSSTableReader(java.lang.String)> line 1909 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack52 == 0 goto (branch) AT LINE 1909
2020-05-18 22:39:05 [INFO] - 	 -> $stack53 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1911
2020-05-18 22:39:05 [INFO] - 	 -> $stack55 = interfaceinvoke entries.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 1911
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack53.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("using active sstable {}", $stack55) AT LINE 1911
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.utils.concurrent.Refs getSnapshotSSTableReader(java.lang.String)> line 1901 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack29 == 0 goto $stack30 = interfaceinvoke entries.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 1901
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1902
2020-05-18 22:39:05 [INFO] - 	 -> $stack41 = interfaceinvoke entries.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 1902
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("using snapshot sstable {}", $stack41) AT LINE 1902
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void resetLocalSchema()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int setVersion(java.net.InetAddress,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void append(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,long,java.nio.ByteBuffer)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void append(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,long,java.nio.ByteBuffer)> line 472 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack21 == 0 goto $stack22 = this.<org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: org.apache.cassandra.io.sstable.IndexSummaryBuilder summary> AT LINE 472
2020-05-18 22:39:05 [INFO] - 	 -> $stack24 = staticinvoke <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.slf4j.Logger access$1100()>() AT LINE 473
2020-05-18 22:39:05 [INFO] - 	 -> $stack26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(indexStart) AT LINE 473
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("wrote index entry: {} at {}", indexEntry, $stack26) AT LINE 473
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$SocketThread: void close()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void markAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$1: void runMayThrow()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: java.util.List submitBackground(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: int getEstimatedTasks()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void evictFromMembership(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void evictFromMembership(java.net.InetAddress)> line 408 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack10 == 0 goto return AT LINE 408
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 409
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("evicting {} from gossip", endpoint) AT LINE 409
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onAdd(com.datastax.driver.core.Host)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getCompactionCandidates(java.lang.Iterable,long,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: void tidy()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: void tidy()> line 2189 has 5 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack4 == 0 goto $stack5 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: boolean setup> AT LINE 2189
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>() AT LINE 2190
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor descriptor> AT LINE 2190
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = this.<org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: boolean setup> AT LINE 2190
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack17) AT LINE 2190
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Running instance tidier for {} with setup {}", $stack19, $stack20) AT LINE 2190
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: java.util.List adjustSamplingLevels(java.util.List,java.util.Map,double,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CASResult cas(java.nio.ByteBuffer,java.lang.String,java.util.List,java.util.List,org.apache.cassandra.thrift.ConsistencyLevel,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void addReplaceTokens(java.util.Collection,java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener: void close()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: java.util.List difference(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: int loadSaved()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.cache.AutoSavingCache: int loadSaved()> line 270 has 12 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack21 == 0 goto return count AT LINE 270
2020-05-18 22:39:05 [INFO] - 	 -> $stack23 = <org.apache.cassandra.cache.AutoSavingCache: org.slf4j.Logger logger> AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack22 = newarray (java.lang.Object)[3] AT LINE 271
2020-05-18 22:39:05 [INFO] - 	 -> $stack26 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack27 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack28 = $stack27 - start AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack29 = virtualinvoke $stack26.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack28) AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack29) AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack22[0] = $stack30 AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(count) AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack22[1] = $stack32 AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> $stack22[2] = dataPath AT LINE 272
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack23.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("completed reading ({} ms; {} keys) saved cache {}", $stack22) AT LINE 271
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: org.apache.cassandra.db.commitlog.CommitLogArchiver construct()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.DigestResolver: void compareResponses()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.DigestResolver: void compareResponses()> line 95 has 7 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack13 == 0 goto return AT LINE 95
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = <org.apache.cassandra.service.DigestResolver: org.slf4j.Logger logger> AT LINE 96
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 96
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 96
2020-05-18 22:39:05 [INFO] - 	 -> $stack18 = $stack17 - start AT LINE 96
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = virtualinvoke $stack16.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack18) AT LINE 96
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack19) AT LINE 96
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("resolve: {} ms.", $stack20) AT LINE 96
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: int get_count(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlPreparedResult prepare_cql3_query(java.nio.ByteBuffer,org.apache.cassandra.thrift.Compression)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void <init>(org.apache.cassandra.db.Keyspace,java.lang.String,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.Directories,boolean,boolean,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: java.util.concurrent.Future flushDataFrom(java.util.List,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void setTokens(java.util.Collection)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void setTokens(java.util.Collection)> line 227 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto staticinvoke <org.apache.cassandra.db.SystemKeyspace: void updateTokens(java.util.Collection)>(tokens) AT LINE 227
2020-05-18 22:39:05 [INFO] - 	 -> $stack10 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 228
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Setting tokens to {}", tokens) AT LINE 228
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer maybeTakeFromPool(int,boolean)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer maybeTakeFromPool(int,boolean)> line 135 has 5 units and 3 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack7 == 0 goto $stack8 = <org.apache.cassandra.utils.memory.BufferPool: io.netty.util.concurrent.FastThreadLocal localPool> AT LINE 135
2020-05-18 22:39:05 [INFO] - 	 -> $stack13 = <org.apache.cassandra.utils.memory.BufferPool: org.slf4j.Logger logger> AT LINE 137
2020-05-18 22:39:05 [INFO] - 	 -> $stack12 = (long) size AT LINE 137
2020-05-18 22:39:05 [INFO] - 	 -> $stack15 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack12) AT LINE 137
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>(65536L) AT LINE 138
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Requested buffer size {} is bigger than {}, allocating directly", $stack15, $stack16) AT LINE 136
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: void signalCloseDone()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor: void makeRequests(org.apache.cassandra.db.ReadCommand,java.lang.Iterable)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void makeRandomGossipDigest(java.util.List)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void makeRandomGossipDigest(java.util.List)> line 508 has 12 units and 6 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack16 == 0 goto return AT LINE 508
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = new java.lang.StringBuilder AT LINE 510
2020-05-18 22:39:05 [INFO] - 	 -> specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>() AT LINE 510
2020-05-18 22:39:05 [INFO] - 	 -> sb#5 = $stack17 AT LINE 510
2020-05-18 22:39:05 [INFO] - 	 -> endpoint#6 = interfaceinvoke gDigests.<java.util.List: java.util.Iterator iterator()>() AT LINE 511
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = interfaceinvoke endpoint#6.<java.util.Iterator: boolean hasNext()>() AT LINE 511
2020-05-18 22:39:05 [INFO] - 	 -> if $stack19 == 0 goto $stack20 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 511
2020-05-18 22:39:05 [INFO] - 	 -> $stack21 = interfaceinvoke endpoint#6.<java.util.Iterator: java.lang.Object next()>() AT LINE 518
2020-05-18 22:39:05 [INFO] - 	 -> gDigest = (org.apache.cassandra.gms.GossipDigest) $stack21 AT LINE 518
2020-05-18 22:39:05 [INFO] - 	 -> virtualinvoke sb#5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(gDigest) AT LINE 513
2020-05-18 22:39:05 [INFO] - 	 -> virtualinvoke sb#5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") AT LINE 514
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 516
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Gossip Digests are : {}", sb#5) AT LINE 516
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: void readCommitLogSegment(org.apache.cassandra.db.commitlog.CommitLogReadHandler,java.io.File,org.apache.cassandra.db.commitlog.CommitLogPosition,int,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: int calculateIndexingPageSize()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void truncateBlocking(java.lang.String,java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$FlushLargestColumnFamily: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void cacheKey(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getOverlappingStarvedSSTables(int,java.util.Collection)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getOverlappingStarvedSSTables(int,java.util.Collection)> line 460 has 11 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack17 == 0 goto $stack18 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations> AT LINE 460
2020-05-18 22:39:05 [INFO] - 	 -> i = 0 AT LINE 462
2020-05-18 22:39:05 [INFO] - 	 -> $stack59 = this.<org.apache.cassandra.db.compaction.LeveledManifest: int[] compactionCounter> AT LINE 462
2020-05-18 22:39:05 [INFO] - 	 -> $stack60 = lengthof $stack59 AT LINE 462
2020-05-18 22:39:05 [INFO] - 	 -> if i >= $stack60 goto $stack18 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations> AT LINE 462
2020-05-18 22:39:05 [INFO] - 	 -> $stack64 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 463
2020-05-18 22:39:05 [INFO] - 	 -> $stack66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i) AT LINE 463
2020-05-18 22:39:05 [INFO] - 	 -> $stack67 = this.<org.apache.cassandra.db.compaction.LeveledManifest: int[] compactionCounter> AT LINE 463
2020-05-18 22:39:05 [INFO] - 	 -> $stack68 = $stack67[i] AT LINE 463
2020-05-18 22:39:05 [INFO] - 	 -> $stack69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack68) AT LINE 463
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack64.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("CompactionCounter: {}: {}", $stack66, $stack69) AT LINE 463
2020-05-18 22:39:05 [INFO] - 	 -> i = i + 1 AT LINE 462
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void asyncRemoveFromBatchlog(java.util.Collection,java.util.UUID,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void disconnect()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector: void handleNotification(javax.management.Notification,java.lang.Object)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.GCInspector: void handleNotification(javax.management.Notification,java.lang.Object)> line 285 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack61 == 0 goto $stack62 = <org.apache.cassandra.service.GCInspector: long STAT_THRESHOLD> AT LINE 285
2020-05-18 22:39:05 [INFO] - 	 -> $stack66 = <org.apache.cassandra.service.GCInspector: org.slf4j.Logger logger> AT LINE 286
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack66.<org.slf4j.Logger: void trace(java.lang.String)>(prev#12) AT LINE 286
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: java.util.List getNextBackgroundSSTables(int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean checkPattern(javax.management.ObjectName,java.util.Set)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: boolean shouldSkipSegmentId(java.io.File,org.apache.cassandra.db.commitlog.CommitLogDescriptor,org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Collection getCandidatesFor(int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: void insert(java.nio.ByteBuffer,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: boolean secureResource(java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: boolean connect()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: com.google.common.util.concurrent.ListenableFuture close()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_update_column_family(org.apache.cassandra.thrift.CfDef)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard: void handleReplayedSegment(java.io.File)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void lambda$null$4(java.io.File)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: org.apache.cassandra.db.partitions.PartitionIterator get()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.ReadCallback: org.apache.cassandra.db.partitions.PartitionIterator get()> line 146 has 8 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack6 == 0 goto return result AT LINE 146
2020-05-18 22:39:05 [INFO] - 	 -> $stack7 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 147
2020-05-18 22:39:05 [INFO] - 	 -> $stack9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 147
2020-05-18 22:39:05 [INFO] - 	 -> $stack10 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 147
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = this.<org.apache.cassandra.service.ReadCallback: long queryStartNanoTime> AT LINE 147
2020-05-18 22:39:05 [INFO] - 	 -> $stack12 = $stack10 - $stack11 AT LINE 147
2020-05-18 22:39:05 [INFO] - 	 -> $stack13 = virtualinvoke $stack9.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack12) AT LINE 147
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack13) AT LINE 147
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Read: {} ms.", $stack14) AT LINE 147
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: void deleteStaleEntry(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void handleStateLeft(java.net.InetAddress,java.lang.String[])>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void handleStateLeft(java.net.InetAddress,java.lang.String[])> line 2463 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack7 == 0 goto $stack8 = virtualinvoke this.<org.apache.cassandra.service.StorageService: long extractExpireTime(java.lang.String[])>(pieces) AT LINE 2463
2020-05-18 22:39:05 [INFO] - 	 -> $stack9 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2464
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} state left, tokens {}", endpoint, tokens) AT LINE 2464
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.locator.PropertyFileSnitch: java.lang.String[] getRawEndpointInfo(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: boolean apply(org.apache.cassandra.cql3.UntypedResultSet$Row,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: void batch_mutate(java.util.Map,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: void maybeRefreshOverlaps()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader openForBatch(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void maybeScheduleSchemaPull(java.util.UUID,java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.lang.Object executeForAggregate(org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraRoleManager$4: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.IncomingTcpConnection: void receiveMessages()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean apply(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.lang.String system_drop_column_family(java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.locator.AbstractReplicationStrategy: java.util.ArrayList getCachedEndpoints(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: int differenceHelper(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree,java.util.List,org.apache.cassandra.utils.MerkleTree$TreeRange)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void stopSession()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestAckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 44 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack81 == 0 goto return AT LINE 44
2020-05-18 22:39:05 [INFO] - 	 -> $stack82 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 45
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack82.<org.slf4j.Logger: void trace(java.lang.String)>("Ignoring GossipDigestAckMessage because gossip is disabled") AT LINE 45
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestAckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 56 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack63 == 0 goto $stack64 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 56
2020-05-18 22:39:05 [INFO] - 	 -> $stack70 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 57
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack70.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Received an ack from {}, which may trigger exit from shadow round", from) AT LINE 57
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestAckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 71 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack54 == 0 goto return AT LINE 71
2020-05-18 22:39:05 [INFO] - 	 -> $stack55 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 72
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack55.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Ignoring unrequested GossipDigestAck from {}", from) AT LINE 72
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestAckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 94 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack36 == 0 goto $stack37 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() AT LINE 94
2020-05-18 22:39:05 [INFO] - 	 -> $stack38 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 95
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack38.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending a GossipDigestAck2Message to {}", from) AT LINE 95
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestAckVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 40 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack13 == 0 goto $stack14 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 40
2020-05-18 22:39:05 [INFO] - 	 -> $stack83 = <org.apache.cassandra.gms.GossipDigestAckVerbHandler: org.slf4j.Logger logger> AT LINE 41
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack83.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received a GossipDigestAckMessage from {}", from) AT LINE 41
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void applyStateLocally(java.util.Map)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void applyStateLocally(java.util.Map)> line 1144 has 8 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack44 == 0 goto $stack46 = (long) remoteGeneration AT LINE 1144
2020-05-18 22:39:05 [INFO] - 	 -> $stack88 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1145
2020-05-18 22:39:05 [INFO] - 	 -> $stack87 = newarray (java.lang.Object)[3] AT LINE 1145
2020-05-18 22:39:05 [INFO] - 	 -> $stack87[0] = ep AT LINE 1145
2020-05-18 22:39:05 [INFO] - 	 -> $stack91 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localGeneration) AT LINE 1145
2020-05-18 22:39:05 [INFO] - 	 -> $stack87[1] = $stack91 AT LINE 1145
2020-05-18 22:39:05 [INFO] - 	 -> $stack93 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remoteGeneration) AT LINE 1145
2020-05-18 22:39:05 [INFO] - 	 -> $stack87[2] = $stack93 AT LINE 1145
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack88.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("{} local generation {}, remote generation {}", $stack87) AT LINE 1145
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void applyStateLocally(java.util.Map)> line 1178 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack49 == 0 goto (branch) AT LINE 1178
2020-05-18 22:39:05 [INFO] - 	 -> $stack50 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1179
2020-05-18 22:39:05 [INFO] - 	 -> $stack52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remoteGeneration) AT LINE 1179
2020-05-18 22:39:05 [INFO] - 	 -> $stack53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localGeneration) AT LINE 1179
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack50.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Ignoring remote generation {} < {}", $stack52, $stack53) AT LINE 1179
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void applyStateLocally(java.util.Map)> line 1127 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack98 == 0 goto $stack15 = interfaceinvoke any30.<java.util.Iterator: boolean hasNext()>() AT LINE 1127
2020-05-18 22:39:05 [INFO] - 	 -> $stack99 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1128
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack99.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Ignoring gossip for {} because it is quarantined", ep) AT LINE 1128
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void applyStateLocally(java.util.Map)> line 1155 has 8 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack69 == 0 goto specialinvoke this.<org.apache.cassandra.gms.Gossiper: void handleMajorStateChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>(ep, remoteState) AT LINE 1155
2020-05-18 22:39:05 [INFO] - 	 -> $stack71 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1156
2020-05-18 22:39:05 [INFO] - 	 -> $stack70 = newarray (java.lang.Object)[3] AT LINE 1156
2020-05-18 22:39:05 [INFO] - 	 -> $stack74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remoteGeneration) AT LINE 1156
2020-05-18 22:39:05 [INFO] - 	 -> $stack70[0] = $stack74 AT LINE 1156
2020-05-18 22:39:05 [INFO] - 	 -> $stack76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localGeneration) AT LINE 1156
2020-05-18 22:39:05 [INFO] - 	 -> $stack70[1] = $stack76 AT LINE 1156
2020-05-18 22:39:05 [INFO] - 	 -> $stack70[2] = ep AT LINE 1156
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack71.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Updating heartbeat state generation to {} from {} for {}", $stack70) AT LINE 1156
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void applyStateLocally(java.util.Map)> line 1170 has 8 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack57 == 0 goto $stack58 = virtualinvoke localEpStatePtr.<org.apache.cassandra.gms.EndpointState: boolean isAlive()>() AT LINE 1170
2020-05-18 22:39:05 [INFO] - 	 -> $stack61 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1171
2020-05-18 22:39:05 [INFO] - 	 -> $stack60 = newarray (java.lang.Object)[3] AT LINE 1171
2020-05-18 22:39:05 [INFO] - 	 -> $stack64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(remoteMaxVersion) AT LINE 1171
2020-05-18 22:39:05 [INFO] - 	 -> $stack60[0] = $stack64 AT LINE 1171
2020-05-18 22:39:05 [INFO] - 	 -> $stack66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(localMaxVersion) AT LINE 1171
2020-05-18 22:39:05 [INFO] - 	 -> $stack60[1] = $stack66 AT LINE 1171
2020-05-18 22:39:05 [INFO] - 	 -> $stack60[2] = ep AT LINE 1171
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack61.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Ignoring remote version {} <= {} for {}", $stack60) AT LINE 1171
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void applyNewStates(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void applyNewStates(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.EndpointState)> line 1217 has 10 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack12 == 0 goto remoteStates = virtualinvoke remoteState.<org.apache.cassandra.gms.EndpointState: java.util.Set states()>() AT LINE 1217
2020-05-18 22:39:05 [INFO] - 	 -> $stack32 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> $stack31 = newarray (java.lang.Object)[3] AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> $stack35 = virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> $stack36 = virtualinvoke $stack35.<org.apache.cassandra.gms.HeartBeatState: int getHeartBeatVersion()>() AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> $stack37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack36) AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> $stack31[0] = $stack37 AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(oldVersion) AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> $stack31[1] = $stack39 AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> $stack31[2] = addr AT LINE 1218
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Updating heartbeat state version to {} from {} for {} ...", $stack31) AT LINE 1218
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void joinTokenRing(int)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void joinTokenRing(int)> line 873 has 17 units and 5 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack12 == 0 goto $stack13 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: boolean isAutoBootstrap()>() AT LINE 873
2020-05-18 22:39:05 [INFO] - 	 -> $stack180 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 876
2020-05-18 22:39:05 [INFO] - 	 -> $stack179 = newarray (java.lang.Object)[4] AT LINE 875
2020-05-18 22:39:05 [INFO] - 	 -> $stack183 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: boolean isAutoBootstrap()>() AT LINE 876
2020-05-18 22:39:05 [INFO] - 	 -> $stack184 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack183) AT LINE 876
2020-05-18 22:39:05 [INFO] - 	 -> $stack179[0] = $stack184 AT LINE 876
2020-05-18 22:39:05 [INFO] - 	 -> $stack186 = staticinvoke <org.apache.cassandra.db.SystemKeyspace: boolean bootstrapInProgress()>() AT LINE 877
2020-05-18 22:39:05 [INFO] - 	 -> $stack187 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack186) AT LINE 877
2020-05-18 22:39:05 [INFO] - 	 -> $stack179[1] = $stack187 AT LINE 877
2020-05-18 22:39:05 [INFO] - 	 -> $stack189 = staticinvoke <org.apache.cassandra.db.SystemKeyspace: boolean bootstrapComplete()>() AT LINE 878
2020-05-18 22:39:05 [INFO] - 	 -> $stack190 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack189) AT LINE 878
2020-05-18 22:39:05 [INFO] - 	 -> $stack179[2] = $stack190 AT LINE 878
2020-05-18 22:39:05 [INFO] - 	 -> $stack192 = staticinvoke <org.apache.cassandra.config.DatabaseDescriptor: java.util.Set getSeeds()>() AT LINE 879
2020-05-18 22:39:05 [INFO] - 	 -> $stack193 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>() AT LINE 879
2020-05-18 22:39:05 [INFO] - 	 -> $stack194 = interfaceinvoke $stack192.<java.util.Set: boolean contains(java.lang.Object)>($stack193) AT LINE 879
2020-05-18 22:39:05 [INFO] - 	 -> $stack195 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack194) AT LINE 879
2020-05-18 22:39:05 [INFO] - 	 -> $stack179[3] = $stack195 AT LINE 879
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack180.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Bootstrap variables: {} {} {} {}", $stack179) AT LINE 875
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.transport.Message$Dispatcher: void channelRead0(io.netty.channel.ChannelHandlerContext,org.apache.cassandra.transport.Message$Request)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void atomicMoveWithFallback(java.nio.file.Path,java.nio.file.Path)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void setMode(org.apache.cassandra.service.StorageService$Mode,java.lang.String,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StartupChecks: void lambda$static$0()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.ColumnOrSuperColumn get(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 42 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack14 == 0 goto return AT LINE 42
2020-05-18 22:39:05 [INFO] - 	 -> $stack15 = <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: org.slf4j.Logger logger> AT LINE 43
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void trace(java.lang.String)>("Ignoring GossipDigestAck2Message because gossip is disabled") AT LINE 43
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 35 has 3 units and 2 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 35
2020-05-18 22:39:05 [INFO] - 	 -> from = message.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 37
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = <org.apache.cassandra.gms.GossipDigestAck2VerbHandler: org.slf4j.Logger logger> AT LINE 38
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received a GossipDigestAck2Message from {}", from) AT LINE 38
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void handleStateLeaving(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void handleStateLeaving(java.net.InetAddress)> line 2429 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2429
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2430
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} state leaving, tokens {}", endpoint, tokens) AT LINE 2430
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void lambda$migrateDataDirs$5(java.io.File)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.util.concurrent.CompletableFuture applyInternal(org.apache.cassandra.db.Mutation,boolean,boolean,boolean,boolean,java.util.concurrent.CompletableFuture)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: void add(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate getSTCSInL0CompactionCandidate()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: java.util.List newestBucket(com.google.common.collect.HashMultimap,int,int,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cache.SerializingCache: java.lang.Object deserialize(org.apache.cassandra.cache.RefCountedMemory)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: void runMayThrow()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReader: org.apache.cassandra.io.sstable.SSTableMultiWriter read(java.nio.channels.ReadableByteChannel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void convict(java.net.InetAddress,double)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: void clearSnapshot(java.lang.String,java.util.List)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.SlabAllocator: org.apache.cassandra.utils.memory.SlabAllocator$Region getRegion()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: org.apache.cassandra.db.commitlog.CommitLogReplayer construct(org.apache.cassandra.db.commitlog.CommitLog)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.Map describeSchemaVersions()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void <init>(java.lang.String[])>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void notifyFailureDetector(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void obsolete(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: void maybeRestoreArchive()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 43 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack93 == 0 goto return AT LINE 43
2020-05-18 22:39:05 [INFO] - 	 -> $stack94 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 44
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack94.<org.slf4j.Logger: void trace(java.lang.String)>("Ignoring GossipDigestSynMessage because gossip is disabled") AT LINE 44
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 89 has 12 units and 6 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack22 == 0 goto specialinvoke this.<org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doSort(java.util.List)>(gDigestList) AT LINE 89
2020-05-18 22:39:05 [INFO] - 	 -> $stack42 = new java.lang.StringBuilder AT LINE 91
2020-05-18 22:39:05 [INFO] - 	 -> specialinvoke $stack42.<java.lang.StringBuilder: void <init>()>() AT LINE 91
2020-05-18 22:39:05 [INFO] - 	 -> sb = $stack42 AT LINE 91
2020-05-18 22:39:05 [INFO] - 	 -> deltaEpStateMap = interfaceinvoke gDigestList.<java.util.List: java.util.Iterator iterator()>() AT LINE 92
2020-05-18 22:39:05 [INFO] - 	 -> $stack44 = interfaceinvoke deltaEpStateMap.<java.util.Iterator: boolean hasNext()>() AT LINE 92
2020-05-18 22:39:05 [INFO] - 	 -> if $stack44 == 0 goto $stack45 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 92
2020-05-18 22:39:05 [INFO] - 	 -> $stack55 = interfaceinvoke deltaEpStateMap.<java.util.Iterator: java.lang.Object next()>() AT LINE 109
2020-05-18 22:39:05 [INFO] - 	 -> gDigest = (org.apache.cassandra.gms.GossipDigest) $stack55 AT LINE 109
2020-05-18 22:39:05 [INFO] - 	 -> virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(gDigest) AT LINE 94
2020-05-18 22:39:05 [INFO] - 	 -> virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") AT LINE 95
2020-05-18 22:39:05 [INFO] - 	 -> $stack45 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 97
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack45.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Gossip syn digests are : {}", sb) AT LINE 97
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 39 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack10 == 0 goto $stack11 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 39
2020-05-18 22:39:05 [INFO] - 	 -> $stack95 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 40
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack95.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Received a GossipDigestSynMessage from {}", from) AT LINE 40
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 109 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack37 == 0 goto $stack38 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() AT LINE 109
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = <org.apache.cassandra.gms.GossipDigestSynVerbHandler: org.slf4j.Logger logger> AT LINE 110
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack39.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Sending a GossipDigestAckMessage to {}", from) AT LINE 110
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void stopUnsafe(boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.MessageDeliveryTask: void run()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchExecutor$DispatchHintsTask: boolean dispatch(org.apache.cassandra.hints.HintsDescriptor)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.triggers.CustomClassLoader: java.lang.Class loadClassInternal(java.lang.String)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper: com.google.common.util.concurrent.ListenableFuture bootstrap(org.apache.cassandra.dht.StreamStateStore,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void waitToSettle()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.util.Map multiget_count(java.util.List,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: void removeTemporaryDirectories()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.function.Supplier,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader open(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,boolean,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: void delete(java.io.File)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LogTransaction: void delete(java.io.File)> line 215 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack9 == 0 goto $stack10 = virtualinvoke file.<java.io.File: java.nio.file.Path toPath()>() AT LINE 215
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger logger> AT LINE 216
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Deleting {}", file) AT LINE 216
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: long unusedCapacity()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void obsoleteOriginals()>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$Flush: java.util.Collection flushMemtable(org.apache.cassandra.db.Memtable,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void doValidationCompaction(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.repair.Validator)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.compaction.CompactionManager: void doValidationCompaction(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.repair.Validator)> line 1428 has 8 units and 3 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack63 == 0 goto (branch) AT LINE 1428
2020-05-18 22:39:05 [INFO] - 	 -> $stack64 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> AT LINE 1430
2020-05-18 22:39:05 [INFO] - 	 -> $stack65 = staticinvoke <java.lang.System: long nanoTime()>() AT LINE 1430
2020-05-18 22:39:05 [INFO] - 	 -> $stack66 = $stack65 - start AT LINE 1430
2020-05-18 22:39:05 [INFO] - 	 -> scanners#115 = virtualinvoke $stack64.<java.util.concurrent.TimeUnit: long toMillis(long)>($stack66) AT LINE 1430
2020-05-18 22:39:05 [INFO] - 	 -> $stack68 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1432
2020-05-18 22:39:05 [INFO] - 	 -> $stack70 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(scanners#115) AT LINE 1432
2020-05-18 22:39:05 [INFO] - 	 -> $stack71 = validator.<org.apache.cassandra.repair.Validator: org.apache.cassandra.repair.RepairJobDesc desc> AT LINE 1431
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack68.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Validation finished in {} msec, for {}", $stack70, $stack71) AT LINE 1431
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void handleStateBootreplacing(java.net.InetAddress,java.lang.String[])>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void handleStateBootreplacing(java.net.InetAddress,java.lang.String[])> line 2263 has 6 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack15 == 0 goto $stack16 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2263
2020-05-18 22:39:05 [INFO] - 	 -> $stack22 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2264
2020-05-18 22:39:05 [INFO] - 	 -> $stack21 = newarray (java.lang.Object)[3] AT LINE 2264
2020-05-18 22:39:05 [INFO] - 	 -> $stack21[0] = newNode AT LINE 2264
2020-05-18 22:39:05 [INFO] - 	 -> $stack21[1] = oldNode AT LINE 2264
2020-05-18 22:39:05 [INFO] - 	 -> $stack21[2] = tokens AT LINE 2264
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Node {} is replacing {}, tokens {}", $stack21) AT LINE 2264
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void forceKeyspaceFlush(java.lang.String,java.lang.String[])>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutationVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogService: void <init>(org.apache.cassandra.db.commitlog.CommitLog,java.lang.String,long,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.utils.IntervalTree$IntervalNode: void <init>(org.apache.cassandra.utils.IntervalTree,java.util.Collection)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: void complete()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.repair.Validator: void complete()> line 237 has 18 units and 4 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack4 == 0 goto return AT LINE 237
2020-05-18 22:39:05 [INFO] - 	 -> $stack6 = <org.apache.cassandra.repair.Validator: org.slf4j.Logger logger> AT LINE 240
2020-05-18 22:39:05 [INFO] - 	 -> $stack5 = this.<org.apache.cassandra.repair.Validator: long validated> AT LINE 240
2020-05-18 22:39:05 [INFO] - 	 -> $stack8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack5) AT LINE 240
2020-05-18 22:39:05 [INFO] - 	 -> $stack9 = this.<org.apache.cassandra.repair.Validator: org.apache.cassandra.repair.RepairJobDesc desc> AT LINE 240
2020-05-18 22:39:05 [INFO] - 	 -> $stack10 = $stack9.<org.apache.cassandra.repair.RepairJobDesc: java.util.UUID sessionId> AT LINE 240
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Validated {} partitions for {}.  Partitions per leaf are:", $stack8, $stack10) AT LINE 240
2020-05-18 22:39:05 [INFO] - 	 -> $stack12 = this.<org.apache.cassandra.repair.Validator: org.apache.cassandra.utils.MerkleTrees trees> AT LINE 241
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = <org.apache.cassandra.repair.Validator: org.slf4j.Logger logger> AT LINE 241
2020-05-18 22:39:05 [INFO] - 	 -> virtualinvoke $stack12.<org.apache.cassandra.utils.MerkleTrees: void logRowCountPerLeaf(org.slf4j.Logger)>($stack11) AT LINE 241
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = <org.apache.cassandra.repair.Validator: org.slf4j.Logger logger> AT LINE 242
2020-05-18 22:39:05 [INFO] - 	 -> $stack13 = this.<org.apache.cassandra.repair.Validator: long validated> AT LINE 242
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack13) AT LINE 242
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = this.<org.apache.cassandra.repair.Validator: org.apache.cassandra.repair.RepairJobDesc desc> AT LINE 242
2020-05-18 22:39:05 [INFO] - 	 -> $stack18 = $stack17.<org.apache.cassandra.repair.RepairJobDesc: java.util.UUID sessionId> AT LINE 242
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Validated {} partitions for {}.  Partition sizes are:", $stack16, $stack18) AT LINE 242
2020-05-18 22:39:05 [INFO] - 	 -> $stack20 = this.<org.apache.cassandra.repair.Validator: org.apache.cassandra.utils.MerkleTrees trees> AT LINE 243
2020-05-18 22:39:05 [INFO] - 	 -> $stack19 = <org.apache.cassandra.repair.Validator: org.slf4j.Logger logger> AT LINE 243
2020-05-18 22:39:05 [INFO] - 	 -> virtualinvoke $stack20.<org.apache.cassandra.utils.MerkleTrees: void logRowSizePerLeaf(org.slf4j.Logger)>($stack19) AT LINE 243
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.util.Map multiget_slice(java.util.List,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void mutateRepairedAt(org.apache.cassandra.io.sstable.Descriptor,long)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: void prepare(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.utils.MerkleTrees)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: void readSection(org.apache.cassandra.db.commitlog.CommitLogReadHandler,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.commitlog.CommitLogPosition,int,org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker,org.apache.cassandra.db.commitlog.CommitLogDescriptor)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.db.commitlog.CommitLogReader: void readSection(org.apache.cassandra.db.commitlog.CommitLogReadHandler,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.commitlog.CommitLogPosition,int,org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker,org.apache.cassandra.db.commitlog.CommitLogDescriptor)> line 311 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack24 == 0 goto $stack25 = (long) end AT LINE 311
2020-05-18 22:39:05 [INFO] - 	 -> $stack102 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 312
2020-05-18 22:39:05 [INFO] - 	 -> $stack104 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(mutationStart) AT LINE 312
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack102.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Reading mutation at {}", $stack104) AT LINE 312
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int getVersion(java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void decommission()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void decommission()> line 3906 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack17 == 0 goto $stack18 = <org.apache.cassandra.service.PendingRangeCalculatorService: org.apache.cassandra.service.PendingRangeCalculatorService instance> AT LINE 3906
2020-05-18 22:39:05 [INFO] - 	 -> $stack43 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3907
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack43.<org.slf4j.Logger: void debug(java.lang.String)>("DECOMMISSIONING") AT LINE 3907
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.streaming.ReplicationFinishedVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.streaming.ReplicationFinishedVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)> line 37 has 4 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack9 == 0 goto $stack10 = staticinvoke <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>() AT LINE 37
2020-05-18 22:39:05 [INFO] - 	 -> $stack12 = <org.apache.cassandra.streaming.ReplicationFinishedVerbHandler: org.slf4j.Logger logger> AT LINE 38
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id) AT LINE 38
2020-05-18 22:39:05 [INFO] - 	 -> $stack15 = msg.<org.apache.cassandra.net.MessageIn: java.net.InetAddress 'from'> AT LINE 38
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Replying to {}@{}", $stack14, $stack15) AT LINE 38
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void start(int,java.util.Map)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void start(int,java.util.Map)> line 1355 has 5 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack9 == 0 goto $stack11 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor executor> AT LINE 1355
2020-05-18 22:39:05 [INFO] - 	 -> $stack14 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1356
2020-05-18 22:39:05 [INFO] - 	 -> $stack16 = virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>() AT LINE 1356
2020-05-18 22:39:05 [INFO] - 	 -> $stack17 = virtualinvoke $stack16.<org.apache.cassandra.gms.HeartBeatState: int getGeneration()>() AT LINE 1356
2020-05-18 22:39:05 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17) AT LINE 1356
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("gossip started with generation {}", $stack18) AT LINE 1356
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.gms.TokenSerializer: java.util.Collection deserialize(org.apache.cassandra.dht.IPartitioner,java.io.DataInput)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void <init>(java.lang.String,boolean)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster$1: void run()>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.LoadBroadcaster$1: void run()> line 90 has 2 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack2 == 0 goto $stack5 = <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.Gossiper instance> AT LINE 90
2020-05-18 22:39:05 [INFO] - 	 -> $stack11 = staticinvoke <org.apache.cassandra.service.LoadBroadcaster: org.slf4j.Logger access$000()>() AT LINE 91
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String)>("Disseminating load info ...") AT LINE 91
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Map)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: com.google.common.collect.Multimap getChangedRangesForLeaving(java.lang.String,java.net.InetAddress)>
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: com.google.common.collect.Multimap getChangedRangesForLeaving(java.lang.String,java.net.InetAddress)> line 2721 has 3 units and 1 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack13 == 0 goto $stack14 = new java.util.HashMap AT LINE 2721
2020-05-18 22:39:05 [INFO] - 	 -> $stack56 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2722
2020-05-18 22:39:05 [INFO] - 	 -> $stack58 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(ranges, ", ") AT LINE 2722
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack56.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Node {} ranges [{}]", endpoint, $stack58) AT LINE 2722
2020-05-18 22:39:05 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: com.google.common.collect.Multimap getChangedRangesForLeaving(java.lang.String,java.net.InetAddress)> line 2749 has 8 units and 3 lines
2020-05-18 22:39:05 [INFO] - GUARD: if $stack36 == 0 goto interfaceinvoke range.<com.google.common.collect.Multimap: boolean putAll(java.lang.Object,java.lang.Iterable)>(range, newReplicaEndpoints) AT LINE 2749
2020-05-18 22:39:05 [INFO] - 	 -> $stack39 = interfaceinvoke newReplicaEndpoints.<java.util.Collection: boolean isEmpty()>() AT LINE 2750
2020-05-18 22:39:05 [INFO] - 	 -> if $stack39 == 0 goto $stack40 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2750
2020-05-18 22:39:05 [INFO] - 	 -> $stack46 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2751
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack46.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Range {} already in all replicas", range) AT LINE 2751
2020-05-18 22:39:05 [INFO] - 	 -> goto [?= interfaceinvoke range.<com.google.common.collect.Multimap: boolean putAll(java.lang.Object,java.lang.Iterable)>(range, newReplicaEndpoints)] AT LINE 2751
2020-05-18 22:39:05 [INFO] - 	 -> $stack40 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2753
2020-05-18 22:39:05 [INFO] - 	 -> $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(newReplicaEndpoints, ", ") AT LINE 2753
2020-05-18 22:39:05 [INFO] - 	 -> interfaceinvoke $stack40.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Range {} will be responsibility of {}", range, $stack42) AT LINE 2753
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: void handleReplayedSegment(java.io.File)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.net.IncomingTcpConnection: java.net.InetAddress receiveMessage(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:05 [INFO] - Start to analyze <org.apache.cassandra.locator.PropertyFileSnitch: void reloadConfiguration(boolean)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.locator.PropertyFileSnitch: void reloadConfiguration(boolean)> line 204 has 21 units and 5 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack25 == 0 goto <org.apache.cassandra.locator.PropertyFileSnitch: java.lang.String[] defaultDCRack> = reloadedDefaultDCRack AT LINE 204
2020-05-18 22:39:06 [INFO] - 	 -> $stack33 = new java.lang.StringBuilder AT LINE 206
2020-05-18 22:39:06 [INFO] - 	 -> specialinvoke $stack33.<java.lang.StringBuilder: void <init>()>() AT LINE 206
2020-05-18 22:39:06 [INFO] - 	 -> value#27 = $stack33 AT LINE 206
2020-05-18 22:39:06 [INFO] - 	 -> $stack34 = virtualinvoke reloadedMap.<java.util.HashMap: java.util.Set entrySet()>() AT LINE 207
2020-05-18 22:39:06 [INFO] - 	 -> newDefault#28 = interfaceinvoke $stack34.<java.util.Set: java.util.Iterator iterator()>() AT LINE 207
2020-05-18 22:39:06 [INFO] - 	 -> $stack36 = interfaceinvoke newDefault#28.<java.util.Iterator: boolean hasNext()>() AT LINE 207
2020-05-18 22:39:06 [INFO] - 	 -> if $stack36 == 0 goto $stack37 = <org.apache.cassandra.locator.PropertyFileSnitch: org.slf4j.Logger logger> AT LINE 207
2020-05-18 22:39:06 [INFO] - 	 -> $stack43 = interfaceinvoke newDefault#28.<java.util.Iterator: java.lang.Object next()>() AT LINE 215
2020-05-18 22:39:06 [INFO] - 	 -> hostString#29 = (java.util.Map$Entry) $stack43 AT LINE 215
2020-05-18 22:39:06 [INFO] - 	 -> $stack44 = interfaceinvoke hostString#29.<java.util.Map$Entry: java.lang.Object getKey()>() AT LINE 208
2020-05-18 22:39:06 [INFO] - 	 -> $stack45 = virtualinvoke value#27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack44) AT LINE 208
2020-05-18 22:39:06 [INFO] - 	 -> $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) AT LINE 208
2020-05-18 22:39:06 [INFO] - 	 -> $stack47 = interfaceinvoke hostString#29.<java.util.Map$Entry: java.lang.Object getValue()>() AT LINE 208
2020-05-18 22:39:06 [INFO] - 	 -> $stack48 = (java.lang.Object[]) $stack47 AT LINE 208
2020-05-18 22:39:06 [INFO] - 	 -> $stack49 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack48) AT LINE 208
2020-05-18 22:39:06 [INFO] - 	 -> $stack50 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack49) AT LINE 208
2020-05-18 22:39:06 [INFO] - 	 -> virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") AT LINE 208
2020-05-18 22:39:06 [INFO] - 	 -> $stack37 = <org.apache.cassandra.locator.PropertyFileSnitch: org.slf4j.Logger logger> AT LINE 209
2020-05-18 22:39:06 [INFO] - 	 -> $stack39 = virtualinvoke value#27.<java.lang.StringBuilder: java.lang.String toString()>() AT LINE 209
2020-05-18 22:39:06 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>($stack39, ", ") AT LINE 209
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack37.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Loaded network topology from property file: {}", $stack40) AT LINE 209
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DefinitionsUpdateVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void load(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.client.RingCache: void refreshEndpointMap()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void createReplicationStrategy(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void writeConnected(org.apache.cassandra.net.OutboundTcpConnection$QueuedMessage,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.EchoVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: int blockForWrites()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SizeEstimatesRecorder: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: java.lang.Throwable extractThrowable(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void maybeCreateReplica(java.io.File,java.lang.String,java.util.Set)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LogReplicaSet: void maybeCreateReplica(java.io.File,java.lang.String,java.util.Set)> line 81 has 2 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack13 == 0 goto return AT LINE 81
2020-05-18 22:39:06 [INFO] - 	 -> $stack14 = <org.apache.cassandra.db.lifecycle.LogReplicaSet: org.slf4j.Logger logger> AT LINE 82
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Created new file replica {}", replica) AT LINE 82
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory: org.tartarus.snowball.SnowballStemmer getStemmer(java.util.Locale)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: void logDistribution()>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.compaction.LeveledManifest: void logDistribution()> line 524 has 22 units and 6 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack3 == 0 goto return AT LINE 524
2020-05-18 22:39:06 [INFO] - 	 -> i = 0 AT LINE 526
2020-05-18 22:39:06 [INFO] - 	 -> $stack4 = this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List[] generations> AT LINE 526
2020-05-18 22:39:06 [INFO] - 	 -> $stack5 = lengthof $stack4 AT LINE 526
2020-05-18 22:39:06 [INFO] - 	 -> if i >= $stack5 goto return AT LINE 526
2020-05-18 22:39:06 [INFO] - 	 -> $stack6 = virtualinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List getLevel(int)>(i) AT LINE 528
2020-05-18 22:39:06 [INFO] - 	 -> $stack7 = interfaceinvoke $stack6.<java.util.List: boolean isEmpty()>() AT LINE 528
2020-05-18 22:39:06 [INFO] - 	 -> if $stack7 != 0 goto i = i + 1 AT LINE 528
2020-05-18 22:39:06 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.compaction.LeveledManifest: org.slf4j.Logger logger> AT LINE 531
2020-05-18 22:39:06 [INFO] - 	 -> $stack10 = newarray (java.lang.Object)[4] AT LINE 530
2020-05-18 22:39:06 [INFO] - 	 -> $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i) AT LINE 531
2020-05-18 22:39:06 [INFO] - 	 -> $stack10[0] = $stack14 AT LINE 531
2020-05-18 22:39:06 [INFO] - 	 -> $stack16 = virtualinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List getLevel(int)>(i) AT LINE 532
2020-05-18 22:39:06 [INFO] - 	 -> $stack17 = interfaceinvoke $stack16.<java.util.List: int size()>() AT LINE 532
2020-05-18 22:39:06 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17) AT LINE 532
2020-05-18 22:39:06 [INFO] - 	 -> $stack10[1] = $stack18 AT LINE 532
2020-05-18 22:39:06 [INFO] - 	 -> $stack20 = virtualinvoke this.<org.apache.cassandra.db.compaction.LeveledManifest: java.util.List getLevel(int)>(i) AT LINE 533
2020-05-18 22:39:06 [INFO] - 	 -> $stack21 = staticinvoke <org.apache.cassandra.io.sstable.format.SSTableReader: long getTotalBytes(java.lang.Iterable)>($stack20) AT LINE 533
2020-05-18 22:39:06 [INFO] - 	 -> $stack22 = staticinvoke <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>($stack21) AT LINE 533
2020-05-18 22:39:06 [INFO] - 	 -> $stack10[2] = $stack22 AT LINE 533
2020-05-18 22:39:06 [INFO] - 	 -> $stack10[3] = this AT LINE 533
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("L{} contains {} SSTables ({}) in {}", $stack10) AT LINE 530
2020-05-18 22:39:06 [INFO] - 	 -> i = i + 1 AT LINE 526
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void performAnticompaction(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,org.apache.cassandra.utils.concurrent.Refs,org.apache.cassandra.db.lifecycle.LifecycleTransaction,long,java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.FailureDetector: void interpret(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.gms.FailureDetector: void interpret(java.net.InetAddress)> line 298 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack26 == 0 goto $stack27 = this.<org.apache.cassandra.gms.FailureDetector: double PHI_FACTOR> AT LINE 298
2020-05-18 22:39:06 [INFO] - 	 -> $stack72 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 299
2020-05-18 22:39:06 [INFO] - 	 -> $stack74 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(phi) AT LINE 299
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack72.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("PHI for {} : {}", ep, $stack74) AT LINE 299
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.gms.FailureDetector: void interpret(java.net.InetAddress)> line 303 has 15 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack52 == 0 goto $stack53 = this.<org.apache.cassandra.gms.FailureDetector: java.util.List fdEvntListeners> AT LINE 303
2020-05-18 22:39:06 [INFO] - 	 -> $stack61 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack58 = newarray (java.lang.Object)[5] AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack58[0] = ep AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack59 = this.<org.apache.cassandra.gms.FailureDetector: double PHI_FACTOR> AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack60 = $stack59 * phi AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack64 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack60) AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack58[1] = $stack64 AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack66 = virtualinvoke this.<org.apache.cassandra.gms.FailureDetector: double getPhiConvictThreshold()>() AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack67 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack66) AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack58[2] = $stack67 AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack58[3] = hbWnd AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack69 = virtualinvoke hbWnd.<org.apache.cassandra.gms.ArrivalWindow: double mean()>() AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack70 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack69) AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> $stack58[4] = $stack70 AT LINE 304
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack61.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Node {} phi {} > {}; intervals: {} mean: {}", $stack58) AT LINE 304
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.gms.FailureDetector: void interpret(java.net.InetAddress)> line 310 has 12 units and 2 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack32 == 0 goto $stack33 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 310
2020-05-18 22:39:06 [INFO] - 	 -> $stack42 = this.<org.apache.cassandra.gms.FailureDetector: double PHI_FACTOR> AT LINE 319
2020-05-18 22:39:06 [INFO] - 	 -> $stack43 = $stack42 * phi AT LINE 319
2020-05-18 22:39:06 [INFO] - 	 -> $stack44 = $stack43 * 80.0 AT LINE 319
2020-05-18 22:39:06 [INFO] - 	 -> $stack45 = $stack44 / 100.0 AT LINE 319
2020-05-18 22:39:06 [INFO] - 	 -> $stack46 = virtualinvoke this.<org.apache.cassandra.gms.FailureDetector: double getPhiConvictThreshold()>() AT LINE 319
2020-05-18 22:39:06 [INFO] - 	 -> $stack47 = $stack45 cmpl $stack46 AT LINE 319
2020-05-18 22:39:06 [INFO] - 	 -> if $stack47 <= 0 goto $stack33 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 319
2020-05-18 22:39:06 [INFO] - 	 -> $stack48 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 312
2020-05-18 22:39:06 [INFO] - 	 -> $stack50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(phi) AT LINE 312
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack48.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("PHI for {} : {}", ep, $stack50) AT LINE 312
2020-05-18 22:39:06 [INFO] - 	 -> goto [?= return] AT LINE 312
2020-05-18 22:39:06 [INFO] - 	 -> return AT LINE 319
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.gms.FailureDetector: void interpret(java.net.InetAddress)> line 314 has 7 units and 2 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack34 == 0 goto return AT LINE 314
2020-05-18 22:39:06 [INFO] - 	 -> $stack35 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 316
2020-05-18 22:39:06 [INFO] - 	 -> $stack37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(phi) AT LINE 316
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack35.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("PHI for {} : {}", ep, $stack37) AT LINE 316
2020-05-18 22:39:06 [INFO] - 	 -> $stack38 = <org.apache.cassandra.gms.FailureDetector: org.slf4j.Logger logger> AT LINE 317
2020-05-18 22:39:06 [INFO] - 	 -> $stack40 = virtualinvoke hbWnd.<org.apache.cassandra.gms.ArrivalWindow: double mean()>() AT LINE 317
2020-05-18 22:39:06 [INFO] - 	 -> $stack41 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack40) AT LINE 317
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack38.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("mean for {} : {}", ep, $stack41) AT LINE 317
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Mx4jTool: boolean maybeLoad()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void onChange(java.net.InetAddress,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: boolean loadSummary()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy: boolean authorize(javax.security.auth.Subject,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: void finish(java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: void remove(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnPath,long,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doAbort(java.lang.Throwable)> line 237 has 9 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack6 == 0 goto $stack7 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.List obsoletions> AT LINE 237
2020-05-18 22:39:06 [INFO] - 	 -> $stack103 = <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.slf4j.Logger logger> AT LINE 238
2020-05-18 22:39:06 [INFO] - 	 -> $stack99 = newarray (java.lang.Object)[3] AT LINE 238
2020-05-18 22:39:06 [INFO] - 	 -> $stack100 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set originals> AT LINE 238
2020-05-18 22:39:06 [INFO] - 	 -> $stack99[0] = $stack100 AT LINE 238
2020-05-18 22:39:06 [INFO] - 	 -> $stack101 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State staged> AT LINE 238
2020-05-18 22:39:06 [INFO] - 	 -> $stack99[1] = $stack101 AT LINE 238
2020-05-18 22:39:06 [INFO] - 	 -> $stack102 = this.<org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction$State logged> AT LINE 238
2020-05-18 22:39:06 [INFO] - 	 -> $stack99[2] = $stack102 AT LINE 238
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack103.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Aborting transaction over {} staged: {}, logged: {}", $stack99) AT LINE 238
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.util.List get_multi_slice(org.apache.cassandra.thrift.MultiSliceRequest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.db.compaction.AbstractCompactionTask getUserDefinedTask(java.util.Collection,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: void run()>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: void run()> line 289 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack9 == 0 goto $stack10 = this.<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: org.apache.cassandra.db.lifecycle.LogFile data> AT LINE 289
2020-05-18 22:39:06 [INFO] - 	 -> $stack11 = staticinvoke <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger access$000()>() AT LINE 290
2020-05-18 22:39:06 [INFO] - 	 -> $stack12 = this.<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: org.apache.cassandra.db.lifecycle.LogFile data> AT LINE 290
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Closing transaction log {}", $stack12) AT LINE 290
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: void run()> line 267 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack3 == 0 goto $stack4 = this.<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: org.apache.cassandra.db.lifecycle.LogFile data> AT LINE 267
2020-05-18 22:39:06 [INFO] - 	 -> $stack32 = staticinvoke <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger access$000()>() AT LINE 268
2020-05-18 22:39:06 [INFO] - 	 -> $stack33 = this.<org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: org.apache.cassandra.db.lifecycle.LogFile data> AT LINE 268
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Removing files for transaction log {}", $stack33) AT LINE 268
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void replacementQuarantine(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onRemove(com.datastax.driver.core.Host)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void sendRepairMutation(org.apache.cassandra.db.partitions.PartitionUpdate,java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onDropKeyspace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void asyncRemoveFromBatchlog(java.util.Collection,java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.service.StorageProxy: void asyncRemoveFromBatchlog(java.util.Collection,java.util.UUID)> line 1019 has 2 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack12 == 0 goto $stack13 = staticinvoke <org.apache.cassandra.service.StorageProxy: boolean canDoLocalRequest(java.net.InetAddress)>(target) AT LINE 1019
2020-05-18 22:39:06 [INFO] - 	 -> $stack18 = <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger logger> AT LINE 1020
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack18.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Sending batchlog remove request {} to {}", uuid, target) AT LINE 1020
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReader$StreamDeserializer: void <init>(org.apache.cassandra.config.CFMetaData,java.io.InputStream,org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader,long,java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.FailureDetector: void forceConviction(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter: void switchCompactionLocation(org.apache.cassandra.db.Directories$DataDirectory)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution: java.util.List redistributeSummaries()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void mutateLevel(org.apache.cassandra.io.sstable.Descriptor,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void onUp(com.datastax.driver.core.Host)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewBuilder: void buildKey(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void realMarkAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void realMarkAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> line 1022 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack19 == 0 goto return AT LINE 1022
2020-05-18 22:39:06 [INFO] - 	 -> $stack21 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1023
2020-05-18 22:39:06 [INFO] - 	 -> $stack20 = this.<org.apache.cassandra.gms.Gossiper: java.util.List subscribers> AT LINE 1023
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Notified {}", $stack20) AT LINE 1023
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void realMarkAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)> line 1011 has 2 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack6 == 0 goto virtualinvoke localState.<org.apache.cassandra.gms.EndpointState: void markAlive()>() AT LINE 1011
2020-05-18 22:39:06 [INFO] - 	 -> $stack24 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1012
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack24.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("marking as alive {}", addr) AT LINE 1012
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.ReconnectableSnitchHelper: void reconnect(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void saveBloomFilter(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.utils.IFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService$PendingRangeTask: void run()>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.service.PendingRangeCalculatorService$PendingRangeTask: void run()> line 68 has 7 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack13 == 0 goto $stack14 = <org.apache.cassandra.service.PendingRangeCalculatorService: org.apache.cassandra.service.PendingRangeCalculatorService instance> AT LINE 68
2020-05-18 22:39:06 [INFO] - 	 -> $stack15 = staticinvoke <org.apache.cassandra.service.PendingRangeCalculatorService: org.slf4j.Logger access$100()>() AT LINE 69
2020-05-18 22:39:06 [INFO] - 	 -> $stack17 = interfaceinvoke keyspaces.<java.util.List: int size()>() AT LINE 69
2020-05-18 22:39:06 [INFO] - 	 -> $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17) AT LINE 69
2020-05-18 22:39:06 [INFO] - 	 -> $stack19 = staticinvoke <java.lang.System: long currentTimeMillis()>() AT LINE 69
2020-05-18 22:39:06 [INFO] - 	 -> $stack20 = $stack19 - start AT LINE 69
2020-05-18 22:39:06 [INFO] - 	 -> $stack21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack20) AT LINE 69
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack15.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Finished PendingRangeTask for {} keyspaces in {}ms", $stack18, $stack21) AT LINE 69
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void archiveAndDiscard(org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void resetVersion(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: void connectNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry: void registerUserExpressionClass(java.lang.Class,org.apache.cassandra.db.filter.RowFilter$UserExpression$Deserializer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat: java.util.List getSplits(org.apache.hadoop.mapreduce.JobContext)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.TopKSampler$1: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: void replayFailedBatches()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void createEphemeralSnapshotMarkerFile(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$8: void execute(org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.IncomingTcpConnection: void close()>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.net.IncomingTcpConnection: void close()> line 120 has 6 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack4 == 0 goto $stack5 = this.<org.apache.cassandra.net.IncomingTcpConnection: java.net.Socket socket> AT LINE 120
2020-05-18 22:39:06 [INFO] - 	 -> $stack13 = <org.apache.cassandra.net.IncomingTcpConnection: org.slf4j.Logger logger> AT LINE 121
2020-05-18 22:39:06 [INFO] - 	 -> $stack15 = this.<org.apache.cassandra.net.IncomingTcpConnection: java.net.Socket socket> AT LINE 121
2020-05-18 22:39:06 [INFO] - 	 -> $stack12 = this.<org.apache.cassandra.net.IncomingTcpConnection: java.net.Socket socket> AT LINE 121
2020-05-18 22:39:06 [INFO] - 	 -> $stack16 = virtualinvoke $stack12.<java.net.Socket: boolean isClosed()>() AT LINE 121
2020-05-18 22:39:06 [INFO] - 	 -> $stack17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack16) AT LINE 121
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Closing socket {} - isclosed: {}", $stack15, $stack17) AT LINE 121
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void registerIndex(org.apache.cassandra.index.Index)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void handleStateRemoving(java.net.InetAddress,java.lang.String[])>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void handleStateRemoving(java.net.InetAddress,java.lang.String[])> line 2522 has 2 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack25 == 0 goto $stack26 = this.<org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata tokenMetadata> AT LINE 2522
2020-05-18 22:39:06 [INFO] - 	 -> $stack37 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2523
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack37.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Tokens {} removed manually (endpoint was {})", removeTokens, endpoint) AT LINE 2523
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.ProposeCallback: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void convict(java.net.InetAddress,double)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: void <init>(org.apache.cassandra.db.compaction.OperationType,org.apache.cassandra.db.lifecycle.Tracker)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.lifecycle.LogTransaction: void <init>(org.apache.cassandra.db.compaction.OperationType,org.apache.cassandra.db.lifecycle.Tracker)> line 127 has 4 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack9 == 0 goto return AT LINE 127
2020-05-18 22:39:06 [INFO] - 	 -> $stack11 = <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger logger> AT LINE 128
2020-05-18 22:39:06 [INFO] - 	 -> $stack10 = this.<org.apache.cassandra.db.lifecycle.LogTransaction: org.apache.cassandra.db.lifecycle.LogFile txnFile> AT LINE 128
2020-05-18 22:39:06 [INFO] - 	 -> $stack13 = virtualinvoke $stack10.<org.apache.cassandra.db.lifecycle.LogFile: java.util.UUID id()>() AT LINE 128
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack11.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Created transaction logs with id {}", $stack13) AT LINE 128
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void maybeFinishShadowRound(java.net.InetAddress,boolean,java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void indexPartition(org.apache.cassandra.db.DecoratedKey,java.util.Set,int)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.index.SecondaryIndexManager: void indexPartition(org.apache.cassandra.db.DecoratedKey,java.util.Set,int)> line 550 has 7 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack29 == 0 goto $stack30 = interfaceinvoke indexes.<java.util.Set: boolean isEmpty()>() AT LINE 550
2020-05-18 22:39:06 [INFO] - 	 -> $stack106 = <org.apache.cassandra.index.SecondaryIndexManager: org.slf4j.Logger logger> AT LINE 551
2020-05-18 22:39:06 [INFO] - 	 -> $stack104 = this.<org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.db.ColumnFamilyStore baseCfs> AT LINE 551
2020-05-18 22:39:06 [INFO] - 	 -> $stack105 = $stack104.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.config.CFMetaData metadata> AT LINE 551
2020-05-18 22:39:06 [INFO] - 	 -> $stack108 = virtualinvoke $stack105.<org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.marshal.AbstractType getKeyValidator()>() AT LINE 551
2020-05-18 22:39:06 [INFO] - 	 -> $stack109 = virtualinvoke key.<org.apache.cassandra.db.DecoratedKey: java.nio.ByteBuffer getKey()>() AT LINE 551
2020-05-18 22:39:06 [INFO] - 	 -> $stack110 = virtualinvoke $stack108.<org.apache.cassandra.db.marshal.AbstractType: java.lang.String getString(java.nio.ByteBuffer)>($stack109) AT LINE 551
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack106.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Indexing partition {}", $stack110) AT LINE 551
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: void <init>(org.apache.cassandra.service.ResponseResolver,org.apache.cassandra.db.ConsistencyLevel,int,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.Keyspace,java.util.List,long)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.service.ReadCallback: void <init>(org.apache.cassandra.service.ResponseResolver,org.apache.cassandra.db.ConsistencyLevel,int,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.Keyspace,java.util.List,long)> line 100 has 5 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack13 == 0 goto return AT LINE 100
2020-05-18 22:39:06 [INFO] - 	 -> $stack14 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 101
2020-05-18 22:39:06 [INFO] - 	 -> $stack16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(blockfor) AT LINE 101
2020-05-18 22:39:06 [INFO] - 	 -> $stack17 = this.<org.apache.cassandra.service.ReadCallback: java.util.List endpoints> AT LINE 101
2020-05-18 22:39:06 [INFO] - 	 -> $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack17, ",") AT LINE 101
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Blockfor is {}; setting up requests to {}", $stack16, $stack18) AT LINE 101
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void waitUntilListening()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.util.List get_indexed_slices(org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.IndexClause,org.apache.cassandra.thrift.SlicePredicate,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void scheduleFlush()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceStateImpl: void traceImpl(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.tracing.TraceStateImpl: void traceImpl(java.lang.String)> line 68 has 2 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack11 == 0 goto return AT LINE 68
2020-05-18 22:39:06 [INFO] - 	 -> $stack12 = <org.apache.cassandra.tracing.TraceStateImpl: org.slf4j.Logger logger> AT LINE 69
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Adding <{}> to trace events", message) AT LINE 69
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void syncWriteToBatchlog(org.apache.cassandra.service.WriteResponseHandler,org.apache.cassandra.batchlog.Batch,java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.utils.Pair getBuckets(java.lang.Iterable,java.util.concurrent.TimeUnit,int,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void doCleanupOne(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy,java.util.Collection,boolean)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.compaction.CompactionManager: void doCleanupOne(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,org.apache.cassandra.db.compaction.CompactionManager$CleanupStrategy,java.util.Collection,boolean)> line 1124 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack63 == 0 goto $stack64 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1124
2020-05-18 22:39:06 [INFO] - 	 -> $stack172 = <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger logger> AT LINE 1125
2020-05-18 22:39:06 [INFO] - 	 -> $stack174 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(expectedBloomFilterSize) AT LINE 1125
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack172.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Expected bloom filter size : {}", $stack174) AT LINE 1125
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void addExpireTimeForEndpoint(java.net.InetAddress,long)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void addExpireTimeForEndpoint(java.net.InetAddress,long)> line 1655 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack5 == 0 goto $stack6 = this.<org.apache.cassandra.gms.Gossiper: java.util.Map expireTimeEndpointMap> AT LINE 1655
2020-05-18 22:39:06 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1657
2020-05-18 22:39:06 [INFO] - 	 -> $stack11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(expireTime) AT LINE 1657
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("adding expire time for endpoint : {} ({})", endpoint, $stack11) AT LINE 1657
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: java.lang.Iterable lambda$getSSTableSectionsForRanges$0(java.util.List,boolean,org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.streaming.StreamSession: java.lang.Iterable lambda$getSSTableSectionsForRanges$0(java.util.List,boolean,org.apache.cassandra.db.lifecycle.View)> line 386 has 8 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack16 == 0 goto return sstables AT LINE 386
2020-05-18 22:39:06 [INFO] - 	 -> $stack17 = <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger logger> AT LINE 387
2020-05-18 22:39:06 [INFO] - 	 -> $stack19 = interfaceinvoke sstables.<java.util.Set: int size()>() AT LINE 387
2020-05-18 22:39:06 [INFO] - 	 -> $stack20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack19) AT LINE 387
2020-05-18 22:39:06 [INFO] - 	 -> $stack21 = <org.apache.cassandra.db.lifecycle.SSTableSet: org.apache.cassandra.db.lifecycle.SSTableSet CANONICAL> AT LINE 387
2020-05-18 22:39:06 [INFO] - 	 -> $stack22 = virtualinvoke view.<org.apache.cassandra.db.lifecycle.View: java.lang.Iterable select(org.apache.cassandra.db.lifecycle.SSTableSet)>($stack21) AT LINE 387
2020-05-18 22:39:06 [INFO] - 	 -> $stack23 = staticinvoke <com.google.common.collect.Iterables: int size(java.lang.Iterable)>($stack22) AT LINE 387
2020-05-18 22:39:06 [INFO] - 	 -> $stack24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack23) AT LINE 387
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("ViewFilter for {}/{} sstables", $stack20, $stack24) AT LINE 387
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: void maybeAwaitFullDataRead()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeCommandIterator: void updateConcurrencyFactor()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$5: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: java.util.Iterator newQueryPlan(java.lang.String,com.datastax.driver.core.Statement)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MigrationRequestVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.List getAllRanges(java.util.List)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: java.util.List getAllRanges(java.util.List)> line 3709 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack7 == 0 goto $stack8 = interfaceinvoke sortedTokens.<java.util.List: boolean isEmpty()>() AT LINE 3709
2020-05-18 22:39:06 [INFO] - 	 -> $stack29 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 3710
2020-05-18 22:39:06 [INFO] - 	 -> $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(sortedTokens, ", ") AT LINE 3710
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("computing ranges for {}", $stack31) AT LINE 3710
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void handleLegacyMutation(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairMessageVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator: void decodeCredentials(byte[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction split(java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void sendReplicationNotification(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.service.StorageService: void sendReplicationNotification(java.net.InetAddress)> line 2636 has 2 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack9 == 0 goto $stack10 = interfaceinvoke failureDetector.<org.apache.cassandra.gms.IFailureDetector: boolean isAlive(java.net.InetAddress)>(remote) AT LINE 2636
2020-05-18 22:39:06 [INFO] - 	 -> $stack16 = <org.apache.cassandra.service.StorageService: org.slf4j.Logger logger> AT LINE 2637
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Notifying {} of replication completion\n", remote) AT LINE 2637
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: double estimateCompactionGain(java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.util.Set snapshotWithoutFlush(java.lang.String,com.google.common.base.Predicate,boolean)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.ColumnFamilyStore: java.util.Set snapshotWithoutFlush(java.lang.String,com.google.common.base.Predicate,boolean)> line 1797 has 8 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack46 == 0 goto interfaceinvoke snapshottedSSTables.<java.util.Set: boolean add(java.lang.Object)>(ssTable) AT LINE 1797
2020-05-18 22:39:06 [INFO] - 	 -> $stack51 = <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger logger> AT LINE 1798
2020-05-18 22:39:06 [INFO] - 	 -> $stack49 = newarray (java.lang.Object)[3] AT LINE 1798
2020-05-18 22:39:06 [INFO] - 	 -> $stack50 = this.<org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Keyspace keyspace> AT LINE 1798
2020-05-18 22:39:06 [INFO] - 	 -> $stack49[0] = $stack50 AT LINE 1798
2020-05-18 22:39:06 [INFO] - 	 -> $stack54 = virtualinvoke ssTable.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 1798
2020-05-18 22:39:06 [INFO] - 	 -> $stack49[1] = $stack54 AT LINE 1798
2020-05-18 22:39:06 [INFO] - 	 -> $stack49[2] = snapshotDirectory AT LINE 1798
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack51.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Snapshot for {} keyspace data file {} created in {}", $stack49) AT LINE 1798
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.concurrent.Future streamRanges(java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: void maybeSwitchWriter(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$1: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.IncomingTcpConnection: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.transport.Server$EventNotifier: void onStatusChange(java.net.InetAddress,org.apache.cassandra.transport.Event$StatusChange)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.transport.Server$EventNotifier: void onStatusChange(java.net.InetAddress,org.apache.cassandra.transport.Event$StatusChange)> line 579 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack6 == 0 goto $stack7 = this.<org.apache.cassandra.transport.Server$EventNotifier: java.util.Map latestEvents> AT LINE 579
2020-05-18 22:39:06 [INFO] - 	 -> $stack22 = staticinvoke <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>() AT LINE 580
2020-05-18 22:39:06 [INFO] - 	 -> $stack23 = event.<org.apache.cassandra.transport.Event$StatusChange: org.apache.cassandra.transport.Event$StatusChange$Status status> AT LINE 580
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("Status changed event : {}, {}", endpoint, $stack23) AT LINE 580
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.transport.Message$UnexpectedChannelExceptionHandler: boolean apply(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Clock: void <clinit>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void migrateDataDirs()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: int replay(com.google.common.util.concurrent.RateLimiter,java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.OutputHandler$LogOutput: void debug(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor: void maybeTryAdditionalReplicas()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: void insert(java.nio.ByteBuffer,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.Column,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$SocketThread: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedStreamWriter: void write(org.apache.cassandra.io.util.DataOutputStreamPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void syncWriteToBatchlog(org.apache.cassandra.service.WriteResponseHandler,org.apache.cassandra.batchlog.Batch,java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: void awaitResults()>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.service.ReadCallback: void awaitResults()> line 129 has 26 units and 3 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack15 == 0 goto (branch) AT LINE 129
2020-05-18 22:39:06 [INFO] - 	 -> $stack29 = this.<org.apache.cassandra.service.ReadCallback: int received> AT LINE 131
2020-05-18 22:39:06 [INFO] - 	 -> if $stack29 <= 0 goto $stack48 = "" AT LINE 131
2020-05-18 22:39:06 [INFO] - 	 -> $stack46 = this.<org.apache.cassandra.service.ReadCallback: org.apache.cassandra.service.ResponseResolver resolver> AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> $stack47 = virtualinvoke $stack46.<org.apache.cassandra.service.ResponseResolver: boolean isDataPresent()>() AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> if $stack47 == 0 goto $stack48 = " (only digests)" AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> $stack48 = " (including data)" AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> goto [?= gotData = $stack48] AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack48 = " (only digests)" AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> goto [?= gotData = $stack48] AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> $stack48 = "" AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> gotData = $stack48 AT LINE 131
2020-05-18 22:39:06 [INFO] - 	 -> $stack32 = <org.apache.cassandra.service.ReadCallback: org.slf4j.Logger logger> AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack30 = newarray (java.lang.Object)[4] AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> if failed == 0 goto $stack40 = "Timed out" AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack40 = "Failed" AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> goto [?= $stack30[0] = $stack40] AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> $stack40 = "Timed out" AT LINE 136
2020-05-18 22:39:06 [INFO] - 	 -> $stack30[0] = $stack40 AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack31 = this.<org.apache.cassandra.service.ReadCallback: int received> AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack31) AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack30[1] = $stack35 AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack36 = this.<org.apache.cassandra.service.ReadCallback: int blockfor> AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack36) AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack30[2] = $stack38 AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> $stack30[3] = gotData AT LINE 132
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("{}; received {} of {} responses{}", $stack30) AT LINE 132
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void requestAll(org.apache.cassandra.gms.GossipDigest,java.util.List,int)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.gms.Gossiper: void requestAll(org.apache.cassandra.gms.GossipDigest,java.util.List,int)> line 1251 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack8 == 0 goto return AT LINE 1251
2020-05-18 22:39:06 [INFO] - 	 -> $stack9 = <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger logger> AT LINE 1252
2020-05-18 22:39:06 [INFO] - 	 -> $stack11 = virtualinvoke gDigest.<org.apache.cassandra.gms.GossipDigest: java.net.InetAddress getEndpoint()>() AT LINE 1252
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("requestAll for {}", $stack11) AT LINE 1252
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: java.util.List lambda$forceCompactionForTokenRange$0(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void writePreparedStatement(java.lang.String,org.apache.cassandra.utils.MD5Digest,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void maybeAddKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: void readMutation(org.apache.cassandra.db.commitlog.CommitLogReadHandler,byte[],int,org.apache.cassandra.db.commitlog.CommitLogPosition,int,org.apache.cassandra.db.commitlog.CommitLogDescriptor)>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.db.commitlog.CommitLogReader: void readMutation(org.apache.cassandra.db.commitlog.CommitLogReadHandler,byte[],int,org.apache.cassandra.db.commitlog.CommitLogPosition,int,org.apache.cassandra.db.commitlog.CommitLogDescriptor)> line 480 has 17 units and 2 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack27 == 0 goto (branch) AT LINE 480
2020-05-18 22:39:06 [INFO] - 	 -> $stack29 = <org.apache.cassandra.db.commitlog.CommitLogReader: org.slf4j.Logger logger> AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> $stack28 = newarray (java.lang.Object)[3] AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> $stack32 = virtualinvoke mutation.<org.apache.cassandra.db.Mutation: java.lang.String getKeyspaceName()>() AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> $stack28[0] = $stack32 AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> $stack34 = virtualinvoke mutation.<org.apache.cassandra.db.Mutation: org.apache.cassandra.db.DecoratedKey key()>() AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> $stack28[1] = $stack34 AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> $stack35 = new java.lang.StringBuilder AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> specialinvoke $stack35.<java.lang.StringBuilder: void <init>()>() AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> $stack37 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{") AT LINE 481
2020-05-18 22:39:06 [INFO] - 	 -> $stack38 = virtualinvoke mutation.<org.apache.cassandra.db.Mutation: java.util.Collection getPartitionUpdates()>() AT LINE 482
2020-05-18 22:39:06 [INFO] - 	 -> $stack39 = interfaceinvoke $stack38.<java.util.Collection: java.util.Iterator iterator()>() AT LINE 482
2020-05-18 22:39:06 [INFO] - 	 -> $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack39, ", ") AT LINE 482
2020-05-18 22:39:06 [INFO] - 	 -> $stack41 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack40) AT LINE 482
2020-05-18 22:39:06 [INFO] - 	 -> $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}") AT LINE 482
2020-05-18 22:39:06 [INFO] - 	 -> $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.String toString()>() AT LINE 482
2020-05-18 22:39:06 [INFO] - 	 -> $stack28[2] = $stack43 AT LINE 482
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack29.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>("Read mutation for {}.{}: {}", $stack28) AT LINE 481
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: org.apache.cassandra.thrift.CqlResult execute_cql3_query(java.nio.ByteBuffer,org.apache.cassandra.thrift.Compression,org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage processStatement(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void scheduleKeepAliveTask()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void markSuspect()>
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.SSTableReader: void markSuspect()> line 1722 has 3 units and 1 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack2 == 0 goto $stack3 = this.<org.apache.cassandra.io.sstable.format.SSTableReader: java.util.concurrent.atomic.AtomicBoolean isSuspect> AT LINE 1722
2020-05-18 22:39:06 [INFO] - 	 -> $stack5 = <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger logger> AT LINE 1723
2020-05-18 22:39:06 [INFO] - 	 -> $stack7 = virtualinvoke this.<org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>() AT LINE 1723
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke $stack5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("Marking {} as a suspect for blacklisting.", $stack7) AT LINE 1723
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaryManager: org.apache.cassandra.db.DiskBoundaries getDiskBoundaryValue(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService: void blockUntilFinished()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: long getRingVersion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.locator.TokenMetadata cloneAfterAllSettled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.List getPendingRanges(java.lang.String,java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata getTokenMetadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isBootstrapMode()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.lang.String getName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.locator.AbstractReplicationStrategy getReplicationStrategy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: org.apache.cassandra.db.Directories$DataDirectory[] getWriteableLocations()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.dht.IPartitioner getPartitioner()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Directories getDirectories()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaries: void <init>(org.apache.cassandra.db.Directories$DataDirectory[],java.util.List,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isReplacingSameAddress()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastAddress()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.BlacklistedDirectories: int getDirectoriesVersion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.util.List sort(java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaryManager: java.util.List getDiskBoundaries(java.util.List,org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.db.Directories$DataDirectory[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getNumTokens()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.util.List unwrap()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range$2: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker$lambda_new_0__587: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$lambda_getNextBackgroundTask_0__580: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.SortedBiMultiValMap$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$lambda_new_0__220: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder$lambda_new_0__218: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder$lambda_new_1__219: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$lambda_new_0__196: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder$lambda_new_0__167: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps$4: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps$3: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps$2: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ColumnData$lambda_static_0__59: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$3: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$5: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_executeLocally_0__260: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$CompositeComparator: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer$lambda_new_0__164: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$2: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$lambda_static_0__51: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$lambda_static_1__52: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range$2: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$2: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$3: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$lambda_getOverlappingLiveSSTables_1__2: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ReadRateComparator: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$CommitLogSegmentFileComparator: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$lambda_static_2__53: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsStore$lambda_create_1__303: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$lambda_new_1__165: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval$2: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner$LongToken: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$LocalToken: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataComponent: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigest: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$DataDirectoryCandidate: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Slice: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Element: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: int compareTo(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: int compareTo(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: int compareTo(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int compareUnsigned(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FastByteOperations: int compareUnsigned(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FastByteOperations$PureJavaOperations: int compare(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: int read()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: int read()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LengthAvailableInputStream: int read()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedInputStream: int read()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FastByteArrayInputStream: int read()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: int read()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: int read(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: int read(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FastByteArrayInputStream: int read(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: int read(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedInputStream: int read(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LengthAvailableInputStream: int read(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: int available()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LengthAvailableInputStream: int available()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FastByteArrayInputStream: int available()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: int available()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.lang.Object[] toArray()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.AbstractIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator$1: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BasePartitions: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator$1: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.AbstractIterator: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1$1$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$getHostIdForEndpoint__579: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$lambda_makeResponsesDebugString_1__548: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$lambda_onMergedRangeTombstoneMarkers_0__547: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.SessionInfoCompositeData$2: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.SessionInfoCompositeData$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$get__526: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$getHostIdForEndpoint__524: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$2: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_updateAllTimestamp_3__489: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_purge_1__488: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_filter_0__487: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_withOnlyQueriedData_2__486: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.StreamStateCompositeData$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_shadowSources_3__469: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$getHostIdForEndpoint__436: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$column__392: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$lambda_restoreUpdatedOriginals_0__377: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$column__312: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$column__308: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.Views$lambda_metadatas_0__306: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.RawSelector$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$2: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$unfilteredIterator__246: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_filter_3__230: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_purge_9__210: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_updateAllTimestamp_8__192: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_updateAllTimestamp_0__189: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$lambda_cas_0__20: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$2: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$4: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs$1: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs$1: org.apache.cassandra.utils.concurrent.Ref apply(org.apache.cassandra.utils.concurrent.SelfRefCounted)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.utils.concurrent.Ref selfRef()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$4: org.apache.cassandra.db.lifecycle.View apply(org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: void <init>(java.util.List,java.util.List,java.util.Map,java.util.Map,org.apache.cassandra.db.lifecycle.SSTableIntervalTree)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.util.Map replace(java.util.Map,java.util.Set,java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.SSTableIntervalTree: org.apache.cassandra.db.lifecycle.SSTableIntervalTree build(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.SSTableIntervalTree: void <init>(java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.SSTableIntervalTree: java.util.List buildIntervals(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval: org.apache.cassandra.utils.Interval create(java.lang.Object,java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$2: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SegmentIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet$DistinctIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$lambda_validateCustomIndexOptions_1__539: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$8: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_1__492: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_2__493: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$lambda_invalidateFile_1__483: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$lambda_nonPkColumnIterator_0__484: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$shouldHint__435: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_select_0__405: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_transformAndFilter_2__190: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareCallback$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.IAsyncCallback$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$5: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$lambda_findAll_0__66: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy$contains__21: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$contains__17: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$contains__16: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.AbstractCompactionStrategy$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$isRepaired__13: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$2: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraAuthorizer$2: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement$lambda_announceMigration_0__30: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: boolean lambda$announceMigration$0(org.apache.cassandra.schema.IndexMetadata,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: boolean equalsWithoutName(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: boolean contains(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.ListIterator listIterator(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted: int compareTo(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: int compareTo(org.apache.cassandra.thrift.InvalidRequestException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: boolean isSetWhy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: int compareTo(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean isWrapAround(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: int compareTo(org.apache.cassandra.db.PartitionPosition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: org.apache.cassandra.dht.Token getToken()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: org.apache.cassandra.dht.Token getToken()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$LocalToken: int compareTo(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner$LongToken: org.apache.cassandra.dht.IPartitioner getPartitioner()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$LocalToken: org.apache.cassandra.dht.IPartitioner getPartitioner()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: int compare(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.PartitionerDefinedOrder: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BooleanType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DecimalType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DoubleType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.FloatType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.Int32Type: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ShortType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.EmptyType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ByteType: int compareCustom(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: long reorderTimestampBytes(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: long topbyte(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: long signedBytesToNativeLong(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: int compareListOrSet(org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: int readCollectionSize(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: java.nio.ByteBuffer readValue(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer readBytes(java.nio.ByteBuffer,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: int compareIntegers(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: int findMostSignificantByte(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: int compareLongs(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.Int32Type: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DurationSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DurationType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.EmptySerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.EmptyType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ByteSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.IntegerSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ShortSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AsciiType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SimpleDateType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ShortType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BytesType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ByteType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UTF8Type: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DecimalSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.FloatSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DecimalType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.FloatType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DoubleSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DoubleType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UUIDSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BooleanSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BooleanType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.InetAddressSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.InetAddressType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.LongSerializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: org.apache.cassandra.serializers.TypeSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.Int32Serializer: java.lang.Object deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.Int32Serializer: java.lang.Integer deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int toInt(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.LongSerializer: java.lang.Long deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: long toLong(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.serializers.MapSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: java.lang.Object deserializeForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: java.lang.Object deserializeForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: java.lang.Object deserializeForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: java.util.Map deserializeForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DurationSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.InetAddressSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.EmptySerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeUUIDSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ByteSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.AsciiSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UUIDSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UserTypeSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DecimalSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.IntegerSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ShortSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.Int32Serializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.FloatSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DoubleSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BooleanSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.LongSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TupleSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UTF8Serializer: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MarshalException: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException: int compareTo(org.apache.cassandra.thrift.UnavailableException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: int compareTo(org.apache.cassandra.thrift.TimedOutException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: boolean isSetPaxos_in_progress()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: boolean isSetAcknowledged_by_batchlog()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: boolean isSetAcknowledged_by()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection: int compareTo(org.apache.cassandra.db.filter.ColumnSubselection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: java.util.Comparator cellPathComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Slice: org.apache.cassandra.db.rows.CellPath comparisonPath()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Element: org.apache.cassandra.db.rows.CellPath comparisonPath()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection: org.apache.cassandra.config.ColumnDefinition column()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$1: int compare(org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath$SingleItemCellPath: java.nio.ByteBuffer get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath$SingleItemCellPath: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath$EmptyCellPath: java.nio.ByteBuffer get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath$EmptyCellPath: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: int compareTo(org.apache.cassandra.db.PartitionPosition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.NativeDecoratedKey: java.nio.ByteBuffer getKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.BufferDecoratedKey: java.nio.ByteBuffer getKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: int getInt(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: java.nio.ByteBuffer getByteBuffer(long,int,java.nio.ByteOrder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: java.nio.ByteBuffer getHollowDirectByteBuffer(java.nio.ByteOrder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: void setByteBuffer(java.nio.ByteBuffer,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: int getIntByByte(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner$LongToken: int compareTo(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException: int compareTo(org.apache.cassandra.thrift.NotFoundException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: int compareTo(org.apache.cassandra.auth.RoleResource)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: int compareTo(org.apache.cassandra.thrift.Column)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: boolean isSetTtl()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: boolean isSetTimestamp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: boolean isSetValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: boolean isSetName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: int compareTo(org.apache.cassandra.thrift.CqlRow)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: boolean isSetColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: boolean isSetKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: java.lang.Object get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.lang.Object get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: java.util.Set entrySet()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator$CountingDigest: byte[] engineDigest()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Standard$allocateBuffer__391: java.lang.Object get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Standard: java.nio.ByteBuffer allocateBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Standard: java.nio.ByteBuffer allocateBuffer(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.LZ4Compressor: int initialCompressedBufferLength(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: org.apache.cassandra.io.compress.ICompressor compressor()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: int chunkLength()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: int chunkLength()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: org.apache.cassandra.io.compress.ICompressor getSstableCompressor()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.BufferType$2: java.nio.ByteBuffer allocate(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.LZ4Compressor: org.apache.cassandra.io.compress.BufferType preferredBufferType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$max__374: java.lang.Object apply(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer$1$1: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseIterator: boolean hasMoreContents()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector: org.apache.cassandra.db.rows.RangeTombstoneMarker applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1FilterNotIndexed: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter$1FilterNotIndexed: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CQLFilter$1IsSatisfiedFilter: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$Pager: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1MetricRecording: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$CheckForAbort: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WithOnlyQueriedData: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundValidator$RowsTransformation: org.apache.cassandra.db.rows.RangeTombstoneMarker applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation: org.apache.cassandra.db.rows.RangeTombstoneMarker applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1MetricRecording: org.apache.cassandra.db.rows.RangeTombstoneMarker applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: org.apache.cassandra.db.rows.RangeTombstoneMarker applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.rows.RangeTombstoneMarker applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Filter: org.apache.cassandra.db.rows.Row applyToRow(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Filter: org.apache.cassandra.db.rows.RangeTombstoneMarker applyToMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$SkipLastIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatTombstoneIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatTombstoneIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SingleRangeResponse: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRangeIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$4: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$3: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeMerger: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeCommandIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager$PagersIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$7: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$3: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$4: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$SlicesIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$TrivialOneToOne: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$OneToOne: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$ManyToOne: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$2: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$1: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$2: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: java.lang.Object computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: void updateNextRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_3__182: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.Clustering clustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: org.apache.cassandra.db.rows.Row consumeNextRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: org.apache.cassandra.db.rows.RangeTombstoneMarker closeOpenedRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: org.apache.cassandra.db.ClusteringBound closeBound(org.apache.cassandra.db.RangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: org.apache.cassandra.db.rows.RangeTombstoneMarker openRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: org.apache.cassandra.db.ClusteringBound openBound(org.apache.cassandra.db.RangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: void updateNextRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.AbstractIterator: java.lang.Object endOfData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstone: org.apache.cassandra.db.DeletionTime deletionTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: org.apache.cassandra.db.RangeTombstone consumeOpenRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: org.apache.cassandra.db.RangeTombstone consumeNextRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: void <init>(org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker makeBoundary(boolean,org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractBufferClusteringPrefix: java.nio.ByteBuffer[] getRawValues()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: boolean isInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: boolean isExclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractBufferClusteringPrefix: org.apache.cassandra.db.ClusteringPrefix$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: boolean supersedes(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: int compare(org.apache.cassandra.db.ClusteringPrefix$Kind,org.apache.cassandra.db.ClusteringPrefix$Kind)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker exclusiveCloseInclusiveOpen(boolean,java.nio.ByteBuffer[],org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker inclusiveCloseExclusiveOpen(boolean,java.nio.ByteBuffer[],org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: void <init>(org.apache.cassandra.db.ClusteringBoundary,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: org.apache.cassandra.db.ClusteringBoundary inclusiveCloseExclusiveOpen(boolean,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundary: void <init>(org.apache.cassandra.db.ClusteringPrefix$Kind,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: void <init>(org.apache.cassandra.db.ClusteringPrefix$Kind,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: boolean isBoundary()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractBufferClusteringPrefix: void <init>(org.apache.cassandra.db.ClusteringPrefix$Kind,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractClusteringPrefix: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker: void <init>(org.apache.cassandra.db.ClusteringBoundOrBoundary)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: boolean isBoundary()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: org.apache.cassandra.db.ClusteringBoundary exclusiveCloseInclusiveOpen(boolean,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: long markedForDeleteAt()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: int localDeletionTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.ClusteringBound close(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstone: org.apache.cassandra.db.Slice deletedSlice()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.ClusteringBound open(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int compare(org.apache.cassandra.db.Clusterable,org.apache.cassandra.db.Clusterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int compare(org.apache.cassandra.db.ClusteringPrefix,org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker: org.apache.cassandra.db.ClusteringPrefix clustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.ClusteringPrefix clustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractBufferClusteringPrefix: org.apache.cassandra.db.ClusteringPrefix clustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker: org.apache.cassandra.db.ClusteringBoundOrBoundary clustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$1: org.apache.cassandra.db.ClusteringPrefix$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractBufferClusteringPrefix: java.nio.ByteBuffer get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractBufferClusteringPrefix: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int compareComponent(int,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int lambda$new$3(org.apache.cassandra.db.Clusterable,org.apache.cassandra.db.Clusterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row filter(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.DeletionTime,boolean,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row filter(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Map getDroppedColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: java.util.function.Predicate inOrderInclusionTester()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: org.apache.cassandra.db.Columns columns(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.PartitionColumns queriedColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.PartitionColumns fetchedColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: boolean allFetchedColumnsAreQueried()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: boolean fetchesAllColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: boolean deletes(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: org.apache.cassandra.db.DeletionTime time()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row transformAndFilter(org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.rows.Row$Deletion,com.google.common.base.Function)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: boolean isStatic()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: long timestamp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: org.apache.cassandra.db.rows.Row$Deletion regular(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_filter_3__230: com.google.common.base.Function bootstrap$(java.util.function.Predicate,java.util.Map,org.apache.cassandra.db.filter.ColumnFilter,boolean,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.LivenessInfo,java.util.function.Predicate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_filter_3__230: void <init>(java.util.function.Predicate,java.util.Map,org.apache.cassandra.db.filter.ColumnFilter,boolean,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.LivenessInfo,java.util.function.Predicate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: boolean isLive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: void <init>(org.apache.cassandra.db.DeletionTime,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: boolean isLive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] transformAndFilter(java.lang.Object[],com.google.common.base.Function)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: boolean isEmpty(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: int minDeletionTime(java.lang.Object[],org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.BTreeRow create(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.rows.Row$Deletion,java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: void <init>(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.rows.Row$Deletion,java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: boolean isShadowedBy(org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedInt: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedInt: int get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: int minDeletionTime(org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: int minDeletionTime(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_minDeletionTime_0__173: java.util.function.Consumer bootstrap$(org.apache.cassandra.utils.WrappedInt)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_minDeletionTime_1__174: com.google.common.base.Predicate bootstrap$(org.apache.cassandra.utils.WrappedInt)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: void apply(java.lang.Object[],java.util.function.Consumer,com.google.common.base.Predicate,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: boolean applyReverse(java.lang.Object[],java.util.function.Consumer,com.google.common.base.Predicate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: boolean applyForwards(java.lang.Object[],java.util.function.Consumer,com.google.common.base.Predicate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$lambda_deserializeRowBody_1__341: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_hasComplexDeletion_5__309: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_hasComplexDeletion_6__310: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$lambda_serializeRowBody_0__307: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows$lambda_collectStats_0__109: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_minDeletionTime_0__173: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_minDeletionTime_1__174: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: boolean isLeaf(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int getChildStart(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int getLeafKeyEnd(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int getBranchKeyEnd(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: boolean lambda$minDeletionTime$1(org.apache.cassandra.utils.WrappedInt,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: void lambda$minDeletionTime$0(org.apache.cassandra.utils.WrappedInt,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedInt: void set(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: int minDeletionTime(org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isSimple()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ColumnData: org.apache.cassandra.config.ColumnDefinition column()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: int minDeletionTime(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: int minDeletionTime(org.apache.cassandra.db.rows.ComplexColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.DeletionTime complexDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: boolean isTombstone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: int localDeletionTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: int ttl()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.util.Iterator iterator(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.util.Iterator iterator(java.lang.Object[],org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: void <init>(java.lang.Object[],java.util.Comparator,org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: void <init>(java.lang.Object[],java.util.Comparator,org.apache.cassandra.utils.btree.BTree$Dir,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int size(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: void rewind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: void <init>(java.util.Comparator,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: void <init>(java.lang.Object[],org.apache.cassandra.utils.btree.NodeCursor,java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: void reset(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: org.apache.cassandra.utils.btree.NodeCursor root()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int getKeyEnd(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: java.lang.Object current()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: void seekTo(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: int compareToLast(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: int moveOne(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: int globalLeafIndex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: org.apache.cassandra.utils.btree.NodeCursor descendToFirstChild(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: org.apache.cassandra.utils.btree.NodeCursor descend()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: int globalIndex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: boolean advanceLeafNode(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: boolean isLeaf()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: org.apache.cassandra.utils.btree.NodeCursor moveOutOfLeaf(boolean,org.apache.cassandra.utils.btree.NodeCursor,org.apache.cassandra.utils.btree.NodeCursor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: boolean advanceIntoBranchFromChild(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int treeIndexOfLeafKey(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int treeIndexOfKey(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int[] getSizeMap(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int getChildEnd(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: void resetNode(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int treeIndexOffsetOfChild(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int lookupSizeMap(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int getChildCount(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: java.lang.Object[] rootNode()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: void checkOnItem()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: java.lang.Object currentValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: java.lang.Object value()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isComplex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows: void lambda$collectStats$0(org.apache.cassandra.utils.WrappedInt,org.apache.cassandra.utils.WrappedInt,org.apache.cassandra.db.partitions.PartitionStatisticsCollector,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void update(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: boolean hasCells()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedInt: void increment()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void update(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cells: void collectStats(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.partitions.PartitionStatisticsCollector)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void updateHasLegacyCounterShards(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void update(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: boolean isCounterCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void updateHasLegacyCounterShards(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void update(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CounterCells: boolean hasLegacyShards(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: java.nio.ByteBuffer value()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: boolean hasLegacyShards(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int headerLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void updateTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: boolean isExpiring()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: long timestamp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void updateLocalDeletionTime(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void updateTTL(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isCounterColumn()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isCounter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: boolean isCounter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.db.marshal.AbstractType valueComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType valueComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.db.marshal.AbstractType valueComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void updateLocalDeletionTime(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void updateTTL(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void updateTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker: void update(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker: void update(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder: void update(java.lang.Number)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder: void update(java.lang.Number,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder: void flushHistogram()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: int lambda$new$0(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder: int lambda$new$1(java.lang.Number,java.lang.Number)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LengthAvailableInputStream: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FastByteArrayInputStream: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: void close(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: java.lang.Throwable merge(java.lang.Throwable,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: void maybeFail(java.lang.Throwable,java.lang.Class)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: boolean failIfCanCast(java.lang.Throwable,java.lang.Class)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmapRebufferer: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedRebufferer: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SharedCloseableImpl: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: org.apache.cassandra.io.util.ChannelProxy getChannel()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: org.apache.cassandra.io.util.ChannelProxy channel()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.AbstractReaderFileProxy: org.apache.cassandra.io.util.ChannelProxy channel()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: org.apache.cassandra.io.util.ChannelProxy channel()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: org.apache.cassandra.io.util.ChannelProxy channel()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: void ensureReleased()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: void maybeFail(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$State: java.lang.Throwable ensureReleased(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$GlobalState: java.lang.Throwable release(org.apache.cassandra.utils.concurrent.Ref$State,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$Debug: void deallocate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: void tidy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$Tidy: void tidy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Cleanup: void tidy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$Tidier: void tidy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory$MemoryTidy: void tidy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: void tidy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy$Cleanup: void tidy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: java.util.Set access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.FSReadError: void <init>(java.lang.Throwable,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.FSReadError: void <init>(java.lang.Throwable,java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.FSError: void <init>(java.lang.Throwable,java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean completed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: java.lang.Throwable removeUnfinishedLeftovers(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: org.slf4j.Logger access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier$abort__33: org.apache.cassandra.utils.Throwables$DiscreteAction bootstrap$(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: java.lang.Throwable perform(java.lang.Throwable,org.apache.cassandra.utils.Throwables$DiscreteAction[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: java.util.Queue access$100()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: java.lang.Throwable perform(java.lang.Throwable,java.util.stream.Stream)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: java.lang.Throwable perform(java.lang.Throwable,java.util.Iterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables$lambda_null_0__557: void perform()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State$lambda_null_0__556: void perform()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$abort__225: void perform()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$commit__224: void perform()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier$abort__33: void perform()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_visitDirectory_0__76: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$isLogFile__380: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_innerList_0__378: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lambda_make_0__373: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_executePreJoinTasks_1__439: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_list_3__385: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$lambda_applyBackPressure_1__338: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog$isPresent__295: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog$isHintFileName__293: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_migrateDataDirs_5__49: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$classifyFiles__381: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_innerList_1__379: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_executePreJoinTasks_2__440: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName$add__194: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_null_3__23: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_null_4__28: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: boolean isLegacyFile(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void deleteRecursive(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isLegacyFile__22: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_null_3__23: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void visitDirectory(java.nio.file.Path,java.util.function.Predicate,java.util.function.Consumer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$toFile__75: java.util.function.Function bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_visitDirectory_0__76: java.util.function.Predicate bootstrap$(java.util.function.Predicate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_visitDirectory_0__76: void <init>(java.util.function.Predicate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$toFile__75: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedRunnable: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.AsyncRepairCallback$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream$Reader: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$MutationInitiator$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$12: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$9: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationTask: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DefinitionsUpdateVerbHandler$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceStateImpl$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TracingImpl$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$Flush$1: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard: org.apache.cassandra.db.commitlog.CommitLogSegment createSegment()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: org.apache.cassandra.db.commitlog.CommitLogSegment createSegment()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: void signalAll()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: boolean access$000(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.apache.cassandra.db.commitlog.CommitLogSegment access$100(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.apache.cassandra.db.commitlog.CommitLogSegment access$102(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager,org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void access$200(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.apache.cassandra.utils.concurrent.WaitQueue access$300(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: boolean access$400(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void access$500(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector: void inspectThrowable(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: boolean handleCommitError(java.lang.String,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: java.util.function.BooleanSupplier access$600(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.apache.cassandra.utils.concurrent.WaitQueue access$700(org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: void waitOnCondition(java.util.function.BooleanSupplier,org.apache.cassandra.utils.concurrent.WaitQueue)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: org.apache.cassandra.utils.concurrent.WaitQueue$Signal register()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$lambda_new_0__222: boolean getAsBoolean()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal: void cancel()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$AbstractSignal: void awaitUninterruptibly()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$MultiSignal: boolean checkAndClear()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$AnySignal: boolean isSignalled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$TimedSignal: boolean checkAndClear()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal: boolean checkAndClear()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal: boolean isSignalled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal: boolean isSet()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$300()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: void access$400(org.apache.cassandra.utils.concurrent.WaitQueue)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: void cleanUpCancelled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void update(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void unlockForRegularUsage()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: double forwardDecayWeight(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void lockForRegularUsage()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void rescaleIfNeeded(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: boolean needRescale(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void rescale(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void unlockForRescale()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void lockForRescale()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$1: int compare(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$DataDirectoryCandidate: int compareTo(org.apache.cassandra.db.Directories$DataDirectoryCandidate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataComponent: int compareTo(org.apache.cassandra.io.sstable.metadata.MetadataComponent)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.StatsMetadata: org.apache.cassandra.io.sstable.metadata.MetadataType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: org.apache.cassandra.io.sstable.metadata.MetadataType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.CompactionMetadata: org.apache.cassandra.io.sstable.metadata.MetadataType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.ValidationMetadata: org.apache.cassandra.io.sstable.metadata.MetadataType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition: int compareTo(org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition$1: int compare(org.apache.cassandra.db.commitlog.CommitLogPosition,org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigest: int compareTo(org.apache.cassandra.gms.GossipDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: int compareTo(org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: int compareTo(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: int compareTo(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPermission(java.security.Permission)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.ThreadAwareSecurityManager: boolean isSecuredThread()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: boolean add(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: boolean add(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: int compareTo(org.apache.cassandra.utils.CounterId)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int compareSubArrays(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: int compareTo(org.apache.cassandra.thrift.TokenRange)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: boolean isSetEndpoint_details()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: boolean isSetRpc_endpoints()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: boolean isSetEndpoints()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: boolean isSetEnd_token()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: boolean isSetStart_token()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: int compareTo(org.apache.cassandra.thrift.IndexExpression)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: boolean isSetValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: boolean isSetOp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: boolean isSetColumn_name()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: int compareTo(org.apache.cassandra.thrift.EndpointDetails)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: boolean isSetRack()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: boolean isSetDatacenter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: boolean isSetHost()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: int compareTo(org.apache.cassandra.io.sstable.SSTableIdentityIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.AbstractIterator: java.lang.Object peek()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$lambda_selectOrderIterator_0__442: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: int lambda$selectOrderIterator$0(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Kind: boolean isPrimaryKeyKind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftFilter$1IsSatisfiedThriftFilter: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CQLFilter$1IsSatisfiedFilter: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundValidator: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkipper: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$Pager: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand$1CacheFilter: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1MetricRecording: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$CheckForAbort: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.EmptyPartitionsDiscarder: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Filter: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.rows.BaseRowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: java.lang.Throwable close(java.lang.Throwable,java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SingleRangeResponse: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeCommandIterator: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: java.lang.Throwable runOnClose(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BasePartitions: java.lang.Throwable runOnClose(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: void onClose()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: void onClose()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$Pager: void onClose()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1MetricRecording: void onClose()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.StoppingTransformation: void onClose()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: void onClose()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: void recordLatency(org.apache.cassandra.metrics.TableMetrics,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: void recordLatency(org.apache.cassandra.metrics.TableMetrics,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: java.lang.String toCQLString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn: void warn(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void trace(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: void trace(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: org.apache.cassandra.tracing.TraceState get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer$3: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.SimpleCachedBufferPool$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ChecksumType$3: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputStreamPlus$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer$2: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AsciiType$1: java.lang.Object initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AsciiType$1: java.nio.charset.CharsetEncoder initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer$2: java.text.SimpleDateFormat initialValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.lang.String access$100()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.ListIterator listIterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.utils.btree.BTreeSearchIterator searchIterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: org.apache.cassandra.utils.btree.BTreeSearchIterator slice(java.lang.Object[],java.util.Comparator,org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSearchIterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: org.apache.cassandra.utils.btree.BTreeSearchIterator slice(org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange: org.apache.cassandra.utils.btree.BTreeSearchIterator slice(org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSearchIterator slice(org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Dir: org.apache.cassandra.utils.btree.BTree$Dir invert()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object findByIndex(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: boolean outOfBounds(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace$1: org.apache.cassandra.db.Keyspace apply(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.SchemaConstants: boolean isLocalSystemKeyspace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace open(java.lang.String,org.apache.cassandra.config.Schema,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void storeKeyspaceInstance(org.apache.cassandra.db.Keyspace)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.db.Keyspace getKeyspaceInstance(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata getKSMetaData(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: void reload()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void initCf(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics: void <init>(org.apache.cassandra.db.Keyspace)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: void <init>(org.apache.cassandra.db.Keyspace)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$KeyspaceMetricNameFactory: org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName createMetricName(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics: com.codahale.metrics.Gauge createKeyspaceGauge(java.lang.String,org.apache.cassandra.metrics.KeyspaceMetrics$MetricValue)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$KeyspaceMetricNameFactory: void <init>(org.apache.cassandra.db.Keyspace)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$1: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$2: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$3: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$4: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$5: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$6: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$7: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$8: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$9: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$10: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$11: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$12: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$13: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$14: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$15: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$16: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.LatencyMetrics: void <init>(org.apache.cassandra.metrics.MetricNameFactory,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Histogram histogram(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Timer timer(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.LatencyMetrics: void <init>(org.apache.cassandra.metrics.MetricNameFactory,org.apache.cassandra.metrics.MetricNameFactory,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Counter counter(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Timer timer(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Counter counter(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$TableMetricNameFactory: org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName createMetricName(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DefaultNameFactory: org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName createMetricName(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$AllTableMetricNameFactory: org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName createMetricName(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DefaultNameFactory: org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName createMetricName(java.lang.String,java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DefaultNameFactory: java.lang.String createDefaultMBeanName(java.lang.String,java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: void registerAlias(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName: java.lang.String getMetricName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName: javax.management.ObjectName getMBeanName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: void registerMBean(com.codahale.metrics.Metric,javax.management.ObjectName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder: int lambda$new$0(java.lang.Number,java.lang.Number)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram: int lambda$new$0(java.lang.Number,java.lang.Number)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps$4: int compare(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps$3: int compare(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps$2: int compare(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps$1: int compare(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet$1: int compare(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: int position()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator: int compare(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$1: int compare(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int lambda$static$1(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder: int lambda$new$0(org.apache.cassandra.cql3.functions.Function,org.apache.cassandra.cql3.functions.Function)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$2: org.apache.cassandra.db.lifecycle.View apply(org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: com.google.common.base.Predicate idIn(java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.util.Map identityMap(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_iterable_1__191: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.util.Iterator lambda$iterable$1(java.lang.Object[],int,int,org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.util.Iterator iterator(java.lang.Object[],int,int,org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void maybeBuild()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.ImmutableBTreePartition: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder holder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: java.lang.Object[] build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder: void <init>(org.apache.cassandra.db.PartitionColumns,java.lang.Object[],org.apache.cassandra.db.DeletionInfo,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_build_2__188: java.util.function.BiFunction bootstrap$(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction$Simple: org.apache.cassandra.utils.btree.UpdateFunction$Simple of(java.util.function.BiFunction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] merge(java.lang.Object[],java.lang.Object[],java.util.Comparator,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: org.apache.cassandra.db.rows.EncodingStats collect(org.apache.cassandra.db.rows.Row,java.util.Iterator,org.apache.cassandra.db.DeletionInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: void collectStats(org.apache.cassandra.db.rows.EncodingStats$Collector)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: org.apache.cassandra.db.rows.EncodingStats get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows: int collectStats(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.partitions.PartitionStatisticsCollector)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void updateColumnSetPerRow(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void update(org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: void apply(java.util.function.Consumer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row$Deletion deletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.LivenessInfo primaryKeyLivenessInfo()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void updateColumnSetPerRow(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Collector: void update(org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows$lambda_collectStats_0__109: java.util.function.Consumer bootstrap$(org.apache.cassandra.utils.WrappedInt,org.apache.cassandra.utils.WrappedInt,org.apache.cassandra.db.partitions.PartitionStatisticsCollector)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows$lambda_collectStats_0__109: void <init>(org.apache.cassandra.utils.WrappedInt,org.apache.cassandra.utils.WrappedInt,org.apache.cassandra.db.partitions.PartitionStatisticsCollector)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: int localExpirationTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: int ttl()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: boolean isExpiring()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo: int localExpirationTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo: int ttl()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo: boolean isExpiring()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: void apply(java.lang.Object[],java.util.function.Consumer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void lambda$serializeRowBody$0(org.apache.cassandra.utils.SearchIterator,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.SerializationHeader,int,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: java.lang.Object next(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: java.lang.String toString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void writeComplexColumn(org.apache.cassandra.db.rows.ComplexColumnData,org.apache.cassandra.config.ColumnDefinition,boolean,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cell$Serializer: void serialize(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedException: void <init>(java.lang.Exception)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer: void serialize(org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.db.rows.CellPath$Serializer cellPathSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: org.apache.cassandra.db.rows.CellPath path()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: void writeValue(java.nio.ByteBuffer,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeByte(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.marshal.AbstractType getType(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void writeTTL(int,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void writeLocalDeletionTime(int,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void writeTimestamp(long,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUnsignedVInt(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: int computeUnsignedVIntSize(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: byte[] encodeVInt(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: int encodeExtraBytesToRead(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: int firstByteValueMask(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: void doFlush(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void doFlush(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBufferFixed: void doFlush(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void doFlush(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputStreamPlus$2: int write(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer$GrowingChannel: int write(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: void reallocate(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBufferFixed: void reallocate(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: void reallocate(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: long calculateNewSize(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: int checkedArraySizeCast(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: long validateReallocation(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: long capacity()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: long validateReallocation(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: long capacity()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: int saturatedArraySizeCast(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: long size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: java.nio.ByteBuffer tailBuffer(org.apache.cassandra.io.util.Memory)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: void free()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: org.apache.cassandra.io.util.SafeMemory copy(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: long length()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: long tailOffset(org.apache.cassandra.io.util.Memory)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: void <init>(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void put(long,org.apache.cassandra.io.util.Memory,long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void checkBounds(long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: void checkBounds(long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: java.lang.String printDebugInfo()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$Debug: void log(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$Debug: java.lang.String print(java.lang.String,java.lang.StackTraceElement[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkPackageAccess(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_cells_2__231: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_selectsKey_2__621: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_selectsClustering_3__620: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker$lambda_isShadowed_1__588: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator$lambda_new_0__546: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_0__491: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamState$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask$1: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$lambda_contains_0__387: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_hasLiveData_0__233: boolean apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: boolean lambda$hasLiveData$0(int,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: boolean isLive(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$2: boolean apply(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean hasNewStatsFile()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest$1: boolean apply(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: boolean isMarkedSuspect()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: boolean isRepaired()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.AbstractCompactionStrategy$1: boolean apply(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$1: boolean apply(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getMaxTimestamp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: boolean lambda$findAll$0(java.util.UUID,org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraAuthorizer$2: boolean apply(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: java.util.Set applicablePermissions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: java.util.Set applicablePermissions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: java.util.Set applicablePermissions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: java.util.Set applicablePermissions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.Permission: org.apache.cassandra.auth.Permission valueOf(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: boolean isAggregate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.NativeScalarFunction: boolean isAggregate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.NativeAggregateFunction: boolean isAggregate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: boolean isAggregate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.Optional findFunction(org.apache.cassandra.cql3.functions.FunctionName,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: java.lang.String toString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: org.apache.cassandra.cql3.functions.FunctionName getFunctionName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionName: void <init>(java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.util.List asCQLTypeStringList(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DurationType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AsciiType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SimpleDateType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DecimalType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DoubleType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.FloatType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.InetAddressType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.Int32Type: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ShortType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.EmptyType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ByteType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UTF8Type: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BooleanType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BytesType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: org.apache.cassandra.cql3.CQL3Type asCQL3Type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Collection: void <init>(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Tuple: org.apache.cassandra.cql3.CQL3Type$Tuple create(org.apache.cassandra.db.marshal.TupleType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Tuple: void <init>(org.apache.cassandra.db.marshal.TupleType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Custom: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$UserDefined: org.apache.cassandra.cql3.CQL3Type$UserDefined create(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$UserDefined: void <init>(java.lang.String,org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionName: boolean hasKeyspace()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$5: boolean apply(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.IAsyncCallback$1: boolean apply(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.FailureDetector: boolean isAlive(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.gms.EndpointState getEndpointStateForEndpoint(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.net.InetAddress getBroadcastAddress()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getLocalAddress()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.net.InetAddress getListenAddress()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper: void <init>(java.util.concurrent.Callable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: boolean isTracing()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.ExecutorLocals: org.apache.cassandra.concurrent.ExecutorLocals create()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: java.lang.Object get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn: java.lang.Object get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.ExecutorLocals: void <init>(org.apache.cassandra.tracing.TraceState,org.apache.cassandra.service.ClientWarn$State)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn: org.apache.cassandra.service.ClientWarn$State get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory: java.lang.Thread createThread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory: java.lang.Runnable threadLocalDeallocator(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory$lambda_threadLocalDeallocator_0__187: java.lang.Runnable bootstrap$(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory$lambda_threadLocalDeallocator_0__187: void <init>(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkAccess(java.lang.Thread)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.ThreadAwareSecurityManager: void checkAccess(java.lang.ThreadGroup)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.StageManager$1: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService$1: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: void onInitialRejection(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: void onFinalRejection(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: void onFinalAccept(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void onInitialRejection(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void onFinalRejection(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void onFinalAccept(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isShutdown()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor: org.slf4j.Logger access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$4: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService$4: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairMessageVerbHandler$2: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamManager$2: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamManager$3: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.StreamStateStore: void onFailure(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.StreamStateStore: void onSuccess(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.StreamingRepairTask: void onFailure(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.StreamingRepairTask: void onSuccess(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$2: void onFailure(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper$1: void onFailure(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$5: void onFailure(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$1: void onFailure(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.StreamEventJMXNotifier: void onFailure(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$2: void onSuccess(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper$1: void onSuccess(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$5: void onSuccess(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$1: void onSuccess(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.StreamEventJMXNotifier: void onSuccess(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator: int access$000(org.apache.cassandra.utils.concurrent.Accumulator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator: java.lang.Object[] access$100(org.apache.cassandra.utils.concurrent.Accumulator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: java.lang.Object[] toArray(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.lang.Object[] toArray(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.lang.Object[] toArray(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: java.lang.Object[] toArray(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int toArray(java.lang.Object[],int,int,java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int treeIndexOfBranchKey(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int toArray(java.lang.Object[],java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.lang.Object remove(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$2: int compare(org.apache.cassandra.utils.Pair,org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator: int compare(java.util.List,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$ColumnComparator: int compare(java.util.Comparator,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$CompositeComparator: int compare(java.util.List,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: int lambda$new$0(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone,org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: org.apache.cassandra.config.CFMetaData access$600(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: int indexOf(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: int indexOf(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int findIndex(java.lang.Object[],java.util.Comparator,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$lambda_new_2__166: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$lambda_static_0__88: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: int lambda$static$0(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: int lambda$new$2(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator: int compare(org.apache.cassandra.db.LegacyLayout$LegacyBound,org.apache.cassandra.db.LegacyLayout$LegacyBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ColumnData: int lambda$static$0(org.apache.cassandra.db.rows.ColumnData,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: int lambda$new$1(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareCallback$1: boolean apply(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareCallback: java.util.Map access$000(org.apache.cassandra.service.paxos.PrepareCallback)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: boolean lambda$transformAndFilter$2(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$1: boolean apply(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isStatic()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: boolean lambda$select$0(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: boolean shouldHint(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: long getEndpointDowntime(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.HintedHandoffMetrics: void incrPastWindow(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean hintedHandoffEnabled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.util.Set hintedHandoffDisabledDCs()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.locator.IEndpointSnitch getEndpointSnitch()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getMaxHintWindow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: void trace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEvent: org.apache.cassandra.utils.progress.ProgressEvent createNotification(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.jmx.JMXProgressSupport: void progress(java.lang.String,org.apache.cassandra.utils.progress.ProgressEvent)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.ExpiredTraceState: void traceImpl(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: void notifyActivity()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceStateImpl: void executeMutation(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: int elapsed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceKeyspace: org.apache.cassandra.db.Mutation makeEventMutation(java.nio.ByteBuffer,java.lang.String,int,java.lang.String,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.db.rows.Row$SimpleBuilder add(java.lang.String,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.db.rows.Row$SimpleBuilder ttl(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder: org.apache.cassandra.db.Mutation buildAsMutation()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder: org.apache.cassandra.db.rows.Row$SimpleBuilder row(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder simpleBuilder(org.apache.cassandra.config.CFMetaData,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: java.util.UUID getTimeUUID()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: long createTimeSafe()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: long createTime(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder: void <init>(org.apache.cassandra.config.CFMetaData,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$AbstractBuilder: void <init>(org.apache.cassandra.db.SimpleBuilders$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders: org.apache.cassandra.db.DecoratedKey access$100(org.apache.cassandra.config.CFMetaData,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders: org.apache.cassandra.db.DecoratedKey makePartitonKey(org.apache.cassandra.config.CFMetaData,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: org.apache.cassandra.db.Clustering make(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.DecoratedKey decorateKey(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.ClusteringComparator getKeyValidatorAsClusteringComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.nio.ByteBuffer serializePartitionKey(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: java.nio.ByteBuffer build(java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: java.nio.ByteBuffer build(boolean,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void writeShortLength(java.nio.ByteBuffer,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void arrayCopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FastByteOperations: void copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FastByteOperations$PureJavaOperations: void copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: void checkComparable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_0__179: java.util.Comparator bootstrap$(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_1__180: java.util.Comparator bootstrap$(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_2__181: java.util.Comparator bootstrap$(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_3__182: java.util.Comparator bootstrap$(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_3__182: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_2__181: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_1__180: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_0__179: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: org.apache.cassandra.db.DecoratedKey decorateKey(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CachedHashDecoratedKey: void <init>(org.apache.cassandra.dht.Token,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: org.apache.cassandra.dht.LocalPartitioner$LocalToken getToken(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$LocalToken: void <init>(org.apache.cassandra.dht.LocalPartitioner,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.ComparableObjectToken: void <init>(java.lang.Comparable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.AbstractAllocator: java.nio.ByteBuffer clone(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.HeapAllocator: java.nio.ByteBuffer allocate(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.BufferDecoratedKey: void <init>(org.apache.cassandra.dht.Token,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: void <init>(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: org.apache.cassandra.db.Clustering build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: org.apache.cassandra.db.CBuilder add(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: org.apache.cassandra.db.CBuilder add(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder: org.apache.cassandra.db.CBuilder create(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: boolean isDone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: int remainingCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer decompose(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: org.apache.cassandra.db.marshal.AbstractType subtype(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DurationSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.InetAddressSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.EmptySerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ByteSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.AbstractTextSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.FloatSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DecimalSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.IntegerSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DoubleSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.Int32Serializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ShortSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UUIDSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BooleanSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.LongSerializer: java.nio.ByteBuffer serialize(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.LongSerializer: java.nio.ByteBuffer serialize(java.lang.Long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer bytes(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BooleanSerializer: java.nio.ByteBuffer serialize(java.lang.Boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UUIDSerializer: java.nio.ByteBuffer serialize(java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: java.nio.ByteBuffer toByteBuffer(java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ShortSerializer: java.nio.ByteBuffer serialize(java.lang.Short)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer bytes(short)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.Int32Serializer: java.nio.ByteBuffer serialize(java.lang.Integer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer bytes(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DoubleSerializer: java.nio.ByteBuffer serialize(java.lang.Double)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer bytes(double)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.IntegerSerializer: java.nio.ByteBuffer serialize(java.math.BigInteger)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DecimalSerializer: java.nio.ByteBuffer serialize(java.math.BigDecimal)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.serializers.ListSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.serializers.SetSerializer getSerializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: java.nio.ByteBuffer serialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: int getElementCount(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: java.util.List serializeValues(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: int getElementCount(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: java.util.List serializeValues(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: int getElementCount(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: java.util.List serializeValues(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: java.nio.ByteBuffer pack(java.util.Collection,int,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: int sizeOfValue(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: int sizeOfCollectionSize(int,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: void writeCollectionSize(java.nio.ByteBuffer,int,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: void writeValue(java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: java.util.List serializeValues(java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.AbstractTextSerializer: java.nio.ByteBuffer serialize(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer bytes(java.lang.String,java.nio.charset.Charset)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.FloatSerializer: java.nio.ByteBuffer serialize(java.lang.Float)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer bytes(float)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.nio.ByteBuffer serialize(java.util.Date)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: java.nio.ByteBuffer serialize(java.lang.Integer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ByteSerializer: java.nio.ByteBuffer serialize(java.lang.Byte)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.EmptySerializer: java.nio.ByteBuffer serialize(java.lang.Void)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: java.nio.ByteBuffer serialize(java.lang.Long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.InetAddressSerializer: java.nio.ByteBuffer serialize(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DurationSerializer: java.nio.ByteBuffer serialize(org.apache.cassandra.cql3.Duration)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: long getNanoseconds()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: int getDays()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: int getMonths()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBufferFixed: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: java.nio.ByteBuffer buffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeVInt(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: int computeVIntSize(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: long encodeZigZag64(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputStreamPlus: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: java.nio.ByteBuffer getHollowDirectByteBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputStreamPlus: java.nio.channels.WritableByteChannel newDefaultChannel()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: java.nio.channels.WritableByteChannel newDefaultChannel()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer$GrowingChannel: void <init>(org.apache.cassandra.io.util.DataOutputBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputStreamPlus$2: void <init>(org.apache.cassandra.io.util.DataOutputStreamPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: int getElementCount(java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: java.util.List serializeValues(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: int getElementCount(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: java.util.List serializeValues(java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Pair: org.apache.cassandra.utils.Pair create(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Pair: void <init>(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: int getElementCount(java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: java.nio.ByteBuffer decompose(java.lang.Long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering: org.apache.cassandra.db.Clustering make(java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.BufferClustering: void <init>(java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$AbstractBuilder: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: long timestampMicros()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: int nowInSeconds()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$AbstractBuilder: void copyParams(org.apache.cassandra.db.SimpleBuilders$AbstractBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: void <init>(org.apache.cassandra.config.CFMetaData,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders: org.apache.cassandra.db.Clustering access$200(org.apache.cassandra.config.CFMetaData,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders: org.apache.cassandra.db.Clustering makeClustering(org.apache.cassandra.config.CFMetaData,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.PartitionColumns partitionColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void newRow(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row$Builder unsortedBuilder(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void <init>(boolean,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder$CellResolver: void <init>(int,org.apache.cassandra.db.rows.BTreeRow$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder$CellResolver: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder: org.apache.cassandra.db.partitions.PartitionUpdate build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: void <init>(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: void <init>(java.lang.String,org.apache.cassandra.db.DecoratedKey,java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.db.rows.Row build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: java.util.Set columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns$Builder: org.apache.cassandra.db.PartitionColumns build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns$Builder: org.apache.cassandra.db.PartitionColumns$Builder addAll(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.PartitionColumns,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void add(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void add(org.apache.cassandra.db.RangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void addPartitionDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: org.apache.cassandra.db.PartitionColumns$Builder builder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder$RTBuilder: org.apache.cassandra.db.RangeTombstone access$400(org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder$RTBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns$Builder: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void assertNotBuilt()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: void add(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: void add(org.apache.cassandra.db.RangeTombstone,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void add(org.apache.cassandra.db.RangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void <init>(org.apache.cassandra.db.ClusteringComparator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void <init>(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.ClusteringBound[],org.apache.cassandra.db.ClusteringBound[],long[],int[],long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.ClusteringBound start()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.ClusteringBound end()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void add(org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractBufferClusteringPrefix: long unsharedHeapSize()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void insertFrom(int,org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void addInternal(int,org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void setInternal(int,org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void moveElements(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void growToFree(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: int capacity()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void grow(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.ClusteringBound[] grow(org.apache.cassandra.db.ClusteringBound[],int,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: long[] grow(long[],int,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: int[] grow(int[],int,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ObjectSizes: long sizeOnHeapOf(java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ObjectSizes: long sizeOnHeapOf(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ObjectSizes: long sizeOfArray(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ObjectSizes: long sizeOfReferenceArray(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ObjectSizes: long sizeOfArray(int,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringBound invert()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: boolean isStart()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: boolean isEnd()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: boolean isEmpty(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: boolean isStart()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: org.apache.cassandra.db.ClusteringPrefix$Kind invert()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringBound create(org.apache.cassandra.db.ClusteringPrefix$Kind,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: void <init>(org.apache.cassandra.db.ClusteringPrefix$Kind,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: java.util.Collection columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: boolean containsAll(java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder add(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.db.rows.Row merge(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row$Builder sortedBuilder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows: long merge(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row$Builder,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: boolean supersedes(org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: boolean supersedes(org.apache.cassandra.db.rows.Row$Deletion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: boolean deletes(org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void addComplexDeletion(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void addRowDeletion(org.apache.cassandra.db.rows.Row$Deletion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void addPrimaryKeyLivenessInfo(org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.config.ColumnDefinition getColumnDefinition(org.apache.cassandra.db.rows.ColumnData,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cells: long reconcile(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.rows.Row$Builder,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cells: long reconcileComplex(org.apache.cassandra.config.ColumnDefinition,java.util.Iterator,java.util.Iterator,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.rows.Row$Builder,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cells: org.apache.cassandra.db.rows.Cell getNext(java.util.Iterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: boolean deletes(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void addCell(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cells: org.apache.cassandra.db.rows.Cell reconcile(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.rows.Cell,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: void <init>(org.apache.cassandra.config.ColumnDefinition,long,int,int,java.nio.ByteBuffer,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Conflicts: org.apache.cassandra.db.Conflicts$Resolution resolveCounter(long,boolean,java.nio.ByteBuffer,long,boolean,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Conflicts: java.nio.ByteBuffer mergeCounterValues(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Conflicts: org.apache.cassandra.db.Conflicts$Resolution resolveRegular(long,boolean,int,java.nio.ByteBuffer,long,boolean,int,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: java.nio.ByteBuffer merge(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: org.apache.cassandra.db.context.CounterContext instance()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$LazyHolder: org.apache.cassandra.db.context.CounterContext access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: java.nio.ByteBuffer merge(org.apache.cassandra.db.context.CounterContext$ContextState,org.apache.cassandra.db.context.CounterContext$ContextState,org.apache.cassandra.db.context.CounterContext$ContextState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: org.apache.cassandra.db.context.CounterContext$Relationship compare(org.apache.cassandra.db.context.CounterContext$ContextState,org.apache.cassandra.db.context.CounterContext$ContextState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void reset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void moveToNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: boolean isLocal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: boolean isGlobal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: boolean hasRemaining()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: int compareIdTo(org.apache.cassandra.db.context.CounterContext$ContextState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: org.apache.cassandra.db.context.CounterContext$ContextState wrap(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: org.apache.cassandra.db.context.CounterContext$ContextState allocate(int,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int access$200()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int access$300()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int access$400()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void updateIsGlobalOrLocal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int access$100(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: int getElementIndex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int access$500(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int compareId(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: org.apache.cassandra.utils.CounterId getCounterId()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: long getCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: long getClock()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int access$600()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: org.apache.cassandra.utils.CounterId wrap(java.nio.ByteBuffer,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: org.apache.cassandra.utils.CounterId wrap(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void writeLocal(org.apache.cassandra.utils.CounterId,long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void copyTo(org.apache.cassandra.db.context.CounterContext$ContextState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void writeElement(org.apache.cassandra.utils.CounterId,long,long,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void writeElementAtOffset(java.nio.ByteBuffer,int,org.apache.cassandra.utils.CounterId,long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: java.nio.ByteBuffer bytes()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isPrimaryKeyColumn()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cell: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ColumnData: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: boolean deletes(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.utils.btree.BTree$Builder getCells()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder auto(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: org.apache.cassandra.utils.btree.BTree$Builder builder(java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: void <init>(java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: void <init>(java.util.Comparator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_builder_1__185: java.lang.Object resolve(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.rows.Row lambda$builder$1(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractTypeVersionComparator: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractTypeVersionComparator: int compare(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean isTuple()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean isUDT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: boolean isTuple()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: boolean isCollection()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isCollection()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isTuple()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isUDT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractTypeVersionComparator: int compareCompositeTypes(org.apache.cassandra.db.marshal.CompositeType,org.apache.cassandra.db.marshal.CompositeType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractTypeVersionComparator: int compareCollectionTypes(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractTypeVersionComparator: int compareTuple(org.apache.cassandra.db.marshal.TupleType,org.apache.cassandra.db.marshal.TupleType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractTypeVersionComparator: int compareUserType(org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: org.apache.cassandra.db.marshal.AbstractType type(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractTypeVersionComparator: int compareMapType(org.apache.cassandra.db.marshal.MapType,org.apache.cassandra.db.marshal.MapType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.db.marshal.AbstractType getElementsType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.db.marshal.AbstractType getElementsType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType getValuesType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType getKeysType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: int componentsCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: java.util.List getComponents()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: boolean deletes(org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder$ComplexColumnDeletion: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: boolean isExpired()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiredLivenessInfo: boolean isExpired()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void <init>(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder sort()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder resolve(org.apache.cassandra.utils.btree.BTree$Builder$Resolver)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void reset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: int access$200(java.lang.Object[],org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: void reuse()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: void reuse(java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: void autoEnforce()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction: org.apache.cassandra.utils.btree.UpdateFunction noOp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] build(java.util.Collection,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] buildInternal(java.lang.Iterable,int,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction$Simple: void allocated(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction$Simple: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeBuilder: java.lang.Object[] build(java.lang.Iterable,org.apache.cassandra.utils.btree.UpdateFunction,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeBuilder: org.apache.cassandra.utils.btree.TreeBuilder newInstance()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeBuilder$1: java.lang.Object newObject(io.netty.util.Recycler$Handle)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeBuilder$1: org.apache.cassandra.utils.btree.TreeBuilder newObject(io.netty.util.Recycler$Handle)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeBuilder: void <init>(io.netty.util.Recycler$Handle,org.apache.cassandra.utils.btree.TreeBuilder$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeBuilder: void <init>(io.netty.util.Recycler$Handle)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void clear()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: java.lang.Object[] toNode()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: org.apache.cassandra.utils.btree.NodeBuilder ascendToRoot()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void addNewKey(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void reset(java.lang.Object[],java.lang.Object,org.apache.cassandra.utils.btree.UpdateFunction,java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: org.apache.cassandra.utils.btree.NodeBuilder ensureChild()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void ensureRoom(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void addExtraChild(java.lang.Object[],java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: org.apache.cassandra.utils.btree.NodeBuilder ensureParent()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: java.lang.Object[] buildFromRange(int,int,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: boolean isRoot()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: org.apache.cassandra.utils.btree.NodeBuilder ascend()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void finishChild(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void clearSelf()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval$1: int compare(org.apache.cassandra.utils.Interval,org.apache.cassandra.utils.Interval)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval$2: int compare(org.apache.cassandra.utils.Interval,org.apache.cassandra.utils.Interval)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsStore: int lambda$create$1(org.apache.cassandra.hints.HintsDescriptor,org.apache.cassandra.hints.HintsDescriptor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int lambda$static$2(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$CommitLogSegmentFileComparator: int compare(java.io.File,java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: org.apache.cassandra.db.commitlog.CommitLogDescriptor fromFileName(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: void <init>(int,long,org.apache.cassandra.config.ParameterizedClass,org.apache.cassandra.security.EncryptionContext)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.TransparentDataEncryptionOptions: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: void <init>(org.apache.cassandra.config.TransparentDataEncryptionOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: void <init>(org.apache.cassandra.config.TransparentDataEncryptionOptions,byte[],boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory: void <init>(org.apache.cassandra.config.TransparentDataEncryptionOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.ConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.LZ4Compressor: org.apache.cassandra.io.compress.LZ4Compressor create(java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.LZ4Compressor: void <init>(java.lang.String,java.lang.Integer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.LZ4Compressor: java.lang.String validateCompressorType(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.LZ4Compressor: java.lang.Integer validateCompressionLevel(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.ConfigurationException: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.RequestValidationException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.CassandraException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.RequestValidationException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,java.lang.String,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.CassandraException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,java.lang.String,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory$2: void <init>(org.apache.cassandra.security.CipherFactory)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory$1: void <init>(org.apache.cassandra.security.CipherFactory)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$UDFClassLoader: java.util.Enumeration getResources(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$1: java.net.URLConnection openConnection(java.net.URL)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction$1: java.net.URLConnection openConnection(java.net.URL)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$UDFClassLoader: java.lang.Class findClass(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$UDFClassLoader: java.net.URL findResource(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$UDFClassLoader: java.net.URL getResource(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.nio.ByteBuffer lambda$cas$0(org.apache.cassandra.thrift.Column)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy$1: java.util.Iterator apply(java.net.NetworkInterface)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.rows.Row lambda$updateAllTimestamp$0(long,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row updateAllTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: boolean isShadowable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiredLivenessInfo: org.apache.cassandra.db.LivenessInfo withUpdatedTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: org.apache.cassandra.db.LivenessInfo withUpdatedTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo: org.apache.cassandra.db.LivenessInfo withUpdatedTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: void <init>(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_updateAllTimestamp_8__192: com.google.common.base.Function bootstrap$(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_updateAllTimestamp_8__192: void <init>(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo: void <init>(long,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: void <init>(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiredLivenessInfo: void <init>(long,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo: void <init>(long,int,int,org.apache.cassandra.db.LivenessInfo$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.ColumnData lambda$updateAllTimestamp$8(long,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: org.apache.cassandra.db.rows.ColumnData updateAllTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ColumnData updateAllTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData updateAllTimestamp(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData transformAndFilter(org.apache.cassandra.db.DeletionTime,com.google.common.base.Function)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_updateAllTimestamp_3__489: com.google.common.base.Function bootstrap$(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_updateAllTimestamp_3__489: void <init>(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: void <init>(org.apache.cassandra.config.ColumnDefinition,java.lang.Object[],org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$FiltrationTracker: void <init>(com.google.common.base.Function,org.apache.cassandra.utils.btree.BTree$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] transformAndFilter(java.lang.Object[],org.apache.cassandra.utils.btree.BTree$FiltrationTracker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Iterable iterable(java.lang.Object[],int,int,org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_transformAndFilter_2__190: com.google.common.base.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_transformAndFilter_2__190: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_iterable_1__191: java.lang.Iterable bootstrap$(java.lang.Object[],int,int,org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_iterable_1__191: void <init>(java.lang.Object[],int,int,org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$FiltrationTracker: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.ColumnData lambda$purge$9(org.apache.cassandra.db.DeletionPurger,int,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: org.apache.cassandra.db.rows.ColumnData purge(org.apache.cassandra.db.DeletionPurger,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ColumnData purge(org.apache.cassandra.db.DeletionPurger,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData purge(org.apache.cassandra.db.DeletionPurger,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_purge_1__488: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.DeletionPurger,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_purge_1__488: void <init>(org.apache.cassandra.db.DeletionPurger,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: org.apache.cassandra.db.rows.Cell purge(org.apache.cassandra.db.DeletionPurger,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction$lambda_new_0__171: boolean shouldPurge(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionPurger$lambda_static_0__175: boolean shouldPurge(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: org.apache.cassandra.db.rows.BufferCell tombstone(org.apache.cassandra.config.ColumnDefinition,long,int,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionPurger: boolean lambda$static$0(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: boolean lambda$new$0(boolean,int,int,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_0__472: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_1__474: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_2__473: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController$lambda_getPurgeEvaluator_0__475: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1WithoutPurgeableTombstones$lambda_getPurgeEvaluator_0__471: boolean test(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$Purger: java.util.function.Predicate getPurgeEvaluator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1WithoutPurgeableTombstones: java.util.function.Predicate getPurgeEvaluator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1WithoutPurgeableTombstones$lambda_getPurgeEvaluator_0__471: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1WithoutPurgeableTombstones$lambda_getPurgeEvaluator_0__471: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: java.util.function.Predicate getPurgeEvaluator(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController: java.util.function.Predicate getPurgeEvaluator(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController$lambda_getPurgeEvaluator_0__475: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController$lambda_getPurgeEvaluator_0__475: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: boolean isPresent(org.apache.cassandra.utils.IFilter$FilterKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: boolean isPresent(org.apache.cassandra.utils.IFilter$FilterKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getMinTimestamp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.utils.IFilter getBloomFilter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.db.RowIndexEntry getPosition(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.io.sstable.format.SSTableReader$Operator,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: org.apache.cassandra.db.partitions.Partition getPartition(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.OverlapIterator: void update(java.lang.Comparable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.OverlapIterator: java.util.Set overlaps()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: boolean compactingRepaired()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_0__472: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_1__474: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_2__473: java.util.function.Predicate bootstrap$(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_2__473: void <init>(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_1__474: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_getPurgeEvaluator_0__472: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableReader: org.apache.cassandra.db.RowIndexEntry getPosition(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.io.sstable.format.SSTableReader$Operator,boolean,boolean,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-05-18 22:39:06 [WARN] - Both branch of logging guard if $stack89 == 0 goto virtualinvoke this.<org.apache.cassandra.io.sstable.format.big.BigTableReader: void cacheKey(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry)>(comparison#63, indexDecoratedKey#62) at line 248 don't have logging calls! Need manual examination!
2020-05-18 22:39:06 [INFO] - Find guard at method <org.apache.cassandra.io.sstable.format.big.BigTableReader: org.apache.cassandra.db.RowIndexEntry getPosition(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.io.sstable.format.SSTableReader$Operator,boolean,boolean,org.apache.cassandra.io.sstable.format.SSTableReadsListener)> line 248 has 23 units and 6 lines
2020-05-18 22:39:06 [INFO] - GUARD: if $stack89 == 0 goto virtualinvoke this.<org.apache.cassandra.io.sstable.format.big.BigTableReader: void cacheKey(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry)>(comparison#63, indexDecoratedKey#62) AT LINE 248
2020-05-18 22:39:06 [INFO] - 	 -> $stack91 = this.<org.apache.cassandra.io.sstable.format.big.BigTableReader: org.apache.cassandra.io.util.FileHandle dfile> AT LINE 251
2020-05-18 22:39:06 [INFO] - 	 -> $stack90 = indexDecoratedKey#62.<org.apache.cassandra.db.RowIndexEntry: long position> AT LINE 251
2020-05-18 22:39:06 [INFO] - 	 -> v#64 = virtualinvoke $stack91.<org.apache.cassandra.io.util.FileHandle: org.apache.cassandra.io.util.FileDataInput createReader(long)>($stack90) AT LINE 251
2020-05-18 22:39:06 [INFO] - 	 -> l22 = null AT LINE 251
2020-05-18 22:39:06 [INFO] - 	 -> $stack93 = staticinvoke <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer readWithShortLength(java.io.DataInput)>(v#64) AT LINE 253
2020-05-18 22:39:06 [INFO] - 	 -> keyInDisk#66 = virtualinvoke this.<org.apache.cassandra.io.sstable.format.big.BigTableReader: org.apache.cassandra.db.DecoratedKey decorateKey(java.nio.ByteBuffer)>($stack93) AT LINE 253
2020-05-18 22:39:06 [INFO] - 	 -> $stack95 = virtualinvoke keyInDisk#66.<org.apache.cassandra.db.DecoratedKey: boolean equals(java.lang.Object)>(key) AT LINE 254
2020-05-18 22:39:06 [INFO] - 	 -> if $stack95 != 0 goto (branch) AT LINE 254
2020-05-18 22:39:06 [INFO] - 	 -> $stack99 = new java.lang.AssertionError AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> $stack100 = newarray (java.lang.Object)[3] AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> $stack100[0] = keyInDisk#66 AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> $stack100[1] = key AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> $stack103 = interfaceinvoke v#64.<org.apache.cassandra.io.util.FileDataInput: java.lang.String getPath()>() AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> $stack100[2] = $stack103 AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> $stack104 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s != %s in %s", $stack100) AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> specialinvoke $stack99.<java.lang.AssertionError: void <init>(java.lang.Object)>($stack104) AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> throw $stack99 AT LINE 255
2020-05-18 22:39:06 [INFO] - 	 -> if v#64 == null goto virtualinvoke this.<org.apache.cassandra.io.sstable.format.big.BigTableReader: void cacheKey(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry)>(comparison#63, indexDecoratedKey#62) AT LINE 256
2020-05-18 22:39:06 [INFO] - 	 -> if null == null goto interfaceinvoke v#64.<org.apache.cassandra.io.util.FileDataInput: void close()>() AT LINE 262
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke v#64.<org.apache.cassandra.io.util.FileDataInput: void close()>() AT LINE 262
2020-05-18 22:39:06 [INFO] - 	 -> goto [?= virtualinvoke this.<org.apache.cassandra.io.sstable.format.big.BigTableReader: void cacheKey(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry)>(comparison#63, indexDecoratedKey#62)] AT LINE 262
2020-05-18 22:39:06 [INFO] - 	 -> interfaceinvoke v#64.<org.apache.cassandra.io.util.FileDataInput: void close()>() AT LINE 262
2020-05-18 22:39:06 [INFO] - 	 -> goto [?= virtualinvoke this.<org.apache.cassandra.io.sstable.format.big.BigTableReader: void cacheKey(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry)>(comparison#63, indexDecoratedKey#62)] AT LINE 262
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$SSTableReadMetricsCollector: void onSSTableSelected(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.sstable.format.SSTableReadsListener$SelectionReason)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry: int columnsIndexCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry: int columnsIndexCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: int columnsIndexCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: int columnsIndexCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: org.apache.cassandra.db.RowIndexEntry deserialize(org.apache.cassandra.io.util.DataInputPlus,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$Operator$GreaterThan: int apply(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.BloomFilterTracker: void addFalsePositive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int binarySearch(org.apache.cassandra.db.PartitionPosition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int getEffectiveIndexIntervalAfterIndex(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: long getFilePointer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: boolean isEOF()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: java.lang.String getPath()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: org.apache.cassandra.io.util.FileDataInput createReader(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.BloomFilterTracker: void addTruePositive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: org.apache.cassandra.db.DecoratedKey decorateKey(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.db.RowIndexEntry getCachedPosition(org.apache.cassandra.cache.KeyCacheKey,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$Operator$GreaterThanOrEqualTo: int apply(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$Operator$Equals: int apply(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.KeyCacheKey: void <init>(org.apache.cassandra.utils.Pair,org.apache.cassandra.io.sstable.Descriptor,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.CorruptSSTableException: void <init>(java.lang.Throwable,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void trace(java.lang.String,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getIndexScanPositionFromBinarySearchResult(int,org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int getIndexSummaryIndexFromBinarySearchResult(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer readWithShortLength(java.io.DataInput)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: void skip(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.io.sstable.format.Version)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: void trace(java.lang.String,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: long readPosition(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.io.sstable.format.Version)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: void skipPromotedIndex(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.io.sstable.format.Version)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: long readUnsignedVInt()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean storeRows()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: int readInt()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: long readPrimitiveSlowly(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: byte readByte()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream: void reBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.NIODataInputStream: void reBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: void reBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataInputBuffer: void reBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: void reBufferAt(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: long current()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: long offset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$Region: long offset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: long offset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Rebufferer$1: long offset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: void release()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$Region: void release()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: java.nio.ByteBuffer buffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$Region: java.nio.ByteBuffer buffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmapRebufferer: org.apache.cassandra.io.util.Rebufferer$BufferHolder rebuffer(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: org.apache.cassandra.io.util.Rebufferer$BufferHolder rebuffer(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: org.apache.cassandra.io.util.Rebufferer$BufferHolder rebuffer(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: void release()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedRebufferer: org.apache.cassandra.io.util.Rebufferer$BufferHolder rebuffer(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: java.nio.ByteBuffer buffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Rebufferer$1: void release()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: org.apache.cassandra.io.util.Rebufferer$BufferHolder rebuffer(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Rebufferer$1: java.nio.ByteBuffer buffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer$Unaligned: long alignedPosition(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer$Aligned: long alignedPosition(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Standard: void readChunk(long,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Mmap: void readChunk(long,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedRebufferer: long alignedPosition(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SimpleChunkReader: void readChunk(long,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: int read(java.nio.ByteBuffer,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: org.apache.cassandra.io.compress.CompressionMetadata$Chunk chunkFor(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: org.apache.cassandra.io.util.MmappedRegions$Region floor(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ChecksumType: long of(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: java.lang.String filePath()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.LZ4Compressor: void uncompress(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader: boolean shouldCheckCrc()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CorruptBlockException: void <init>(java.lang.String,org.apache.cassandra.io.compress.CompressionMetadata$Chunk)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CorruptBlockException: void <init>(java.lang.String,org.apache.cassandra.io.compress.CompressionMetadata$Chunk,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.CorruptSSTableException: void <init>(java.lang.Throwable,java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CorruptBlockException: void <init>(java.lang.String,long,int,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader: double getCrcCheckChance()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: double getCrcCheckChance()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ChecksumType$2: void update(java.util.zip.Checksum,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ChecksumType$1: void update(java.util.zip.Checksum,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SharedCloseableImpl: boolean isCleanedUp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: org.apache.cassandra.io.util.MmappedRegions$Region access$700(org.apache.cassandra.io.util.MmappedRegions$State,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: org.apache.cassandra.io.util.MmappedRegions$Region floor(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$Region: void <init>(long,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: int globalCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$GlobalState: int count()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: long getLong(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Chunk: void <init>(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: long getLongByByte(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator: void seek(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator: void validate(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CorruptFileException: void <init>(java.lang.Exception,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: byte[] getArray(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ChecksumType: long of(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator: long chunkStart(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: void seek(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: long length()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: long fileLength()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.AbstractReaderFileProxy: long fileLength()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: long fileLength()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: long fileLength()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: org.apache.cassandra.cache.ChunkCache$Buffer rebuffer(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$Key: void <init>(org.apache.cassandra.io.util.ChunkReader,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: com.github.benmanes.caffeine.cache.LoadingCache access$000(org.apache.cassandra.cache.ChunkCache)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter$lambda_new_0__394: java.nio.ByteBuffer nextChunk()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter: java.nio.ByteBuffer lambda$new$0(org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils: java.nio.ByteBuffer decrypt(org.apache.cassandra.io.util.FileDataInput,java.nio.ByteBuffer,boolean,javax.crypto.Cipher)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils: java.nio.ByteBuffer uncompress(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean,org.apache.cassandra.io.compress.ICompressor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer ensureCapacity(java.nio.ByteBuffer,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.BufferType: org.apache.cassandra.io.compress.BufferType typeOf(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer ensureCapacity(java.nio.ByteBuffer,int,boolean,org.apache.cassandra.io.compress.BufferType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.BufferType$1: java.nio.ByteBuffer allocate(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void clean(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils$DataInputReadChannel: void <init>(org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.security.EncryptionUtils$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils: java.nio.ByteBuffer decrypt(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer,boolean,javax.crypto.Cipher)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils$DataInputReadChannel: int read(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: void readFully(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FastByteOperations: void copy(java.nio.ByteBuffer,int,byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FastByteOperations$PureJavaOperations: void copy(java.nio.ByteBuffer,int,byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils$DataInputReadChannel: void <init>(org.apache.cassandra.io.util.FileDataInput)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: long readUnsignedVInt(java.io.DataInput)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: int numberOfExtraBytesToRead(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: long readLong()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int readShortLength(java.io.DataInput)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer read(java.io.DataInput,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: void readFully(byte[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: void readFully(byte[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: void decompressNextChunk()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: void decompress(byte[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedStreamReader$getCrcCheckChance__1: java.lang.Object get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: int readMulti(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: void writeMulti(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: boolean isExhausted(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: java.lang.Object getIfNotClosed(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: void maybeCreateDiskBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: void growMemBuffer(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: int readUnsignedShort()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: int readUnsignedShort()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: int readOne()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: void writeOne(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: int readUnsignedByte()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: short readShort()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: long getPosition(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: long calculateEnd(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int getPositionInSummary(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: int getInt(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: int getIntByByte(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.CacheKey: void <init>(org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: long getCapacity()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: java.lang.Object get(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: java.lang.Object getInternal(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: boolean cacheKeys()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: java.lang.Object get(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: org.apache.cassandra.cache.IMeasurableMemory get(org.apache.cassandra.cache.IMeasurableMemory)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$lambda_static_1__64: void onEviction(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$lambda_static_0__62: void onEviction(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: void lambda$static$0(org.apache.cassandra.utils.MD5Digest,org.apache.cassandra.cql3.statements.ParsedStatement$Prepared)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void removePreparedStatement(org.apache.cassandra.utils.MD5Digest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MD5Digest: java.nio.ByteBuffer byteBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternal(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthenticationStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthorizationStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SchemaAlteringStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TruncateStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UseStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepareInternal(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.service.QueryState internalQueryState()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.QueryOptions makeInternalOptions(org.apache.cassandra.cql3.statements.ParsedStatement$Prepared,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet: org.apache.cassandra.cql3.UntypedResultSet create(org.apache.cassandra.cql3.ResultSet)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet: void <init>(org.apache.cassandra.cql3.ResultSet,org.apache.cassandra.cql3.UntypedResultSet$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet: void <init>(org.apache.cassandra.cql3.ResultSet)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.QueryOptions makeInternalOptions(org.apache.cassandra.cql3.statements.ParsedStatement$Prepared,java.lang.Object[],org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.cql3.QueryOptions forInternalCalls(org.apache.cassandra.db.ConsistencyLevel,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$DefaultQueryOptions: void <init>(org.apache.cassandra.db.ConsistencyLevel,java.util.List,boolean,org.apache.cassandra.cql3.QueryOptions$SpecificOptions,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$SpecificOptions: org.apache.cassandra.cql3.QueryOptions$SpecificOptions access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$InternalStateInstance: org.apache.cassandra.service.QueryState access$000(org.apache.cassandra.cql3.QueryProcessor$InternalStateInstance)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterViewStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropViewStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RoleManagementStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropAggregateStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropFunctionStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateFunctionStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTypeStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTriggerStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTriggerStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListRolesStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropRoleStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterRoleStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateRoleStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListPermissionsStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PermissionsManagementStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterKeyspaceStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTableStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropKeyspaceStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateKeyspaceStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TruncateStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UseStatement: void validate(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.QueryState: org.apache.cassandra.service.ClientState getClientState()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared parseStatement(java.lang.String,org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared getStatement(java.lang.String,org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropAggregateStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropFunctionStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateFunctionStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTypeStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SchemaAlteringStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement$Parsed: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CFStatement: void prepareKeyspace(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropFunctionStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateFunctionStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthenticationStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthorizationStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SchemaAlteringStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TruncateStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UseStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement$Parsed: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement$Parsed: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.statements.ParsedStatement parseStatement(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void trace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.SyntaxException: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$query__98: org.apache.cassandra.cql3.CQLFragmentParser$CQLParserFunction bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQLFragmentParser: java.lang.Object parseAnyUnhandled(org.apache.cassandra.cql3.CQLFragmentParser$CQLParserFunction,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition$whereClause__606: java.lang.Object parse(org.apache.cassandra.cql3.CqlParser)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CQLTypeParser$comparatorType__91: java.lang.Object parse(org.apache.cassandra.cql3.CqlParser)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms$term__153: java.lang.Object parse(org.apache.cassandra.cql3.CqlParser)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$query__98: java.lang.Object parse(org.apache.cassandra.cql3.CqlParser)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: void throwFirstSyntaxError()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void addErrorListener(org.apache.cassandra.cql3.ErrorListener)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void <init>(org.antlr.runtime.CharStream)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: void addErrorListener(org.apache.cassandra.cql3.ErrorListener)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: void <init>(org.antlr.runtime.TokenStream)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: void <init>(org.antlr.runtime.TokenStream,org.antlr.runtime.RecognizerSharedState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void <init>(org.antlr.runtime.TokenStream,org.antlr.runtime.RecognizerSharedState,org.apache.cassandra.cql3.CqlParser)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA1: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA15: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA44: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA154: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA155: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA173: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA175: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA177: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA179: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA182: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA190: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA196: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA195: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA205: void <init>(org.apache.cassandra.cql3.Cql_Parser,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void addErrorListener(org.apache.cassandra.cql3.ErrorListener)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void <init>(org.antlr.runtime.CharStream,org.antlr.runtime.RecognizerSharedState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer$DFA1: void <init>(org.apache.cassandra.cql3.CqlLexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void <init>(org.antlr.runtime.CharStream,org.antlr.runtime.RecognizerSharedState,org.apache.cassandra.cql3.CqlLexer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA9: void <init>(org.apache.cassandra.cql3.Cql_Lexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA14: void <init>(org.apache.cassandra.cql3.Cql_Lexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA37: void <init>(org.apache.cassandra.cql3.Cql_Lexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA22: void <init>(org.apache.cassandra.cql3.Cql_Lexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA24: void <init>(org.apache.cassandra.cql3.Cql_Lexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA28: void <init>(org.apache.cassandra.cql3.Cql_Lexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA30: void <init>(org.apache.cassandra.cql3.Cql_Lexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA44: void <init>(org.apache.cassandra.cql3.Cql_Lexer,org.antlr.runtime.BaseRecognizer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: org.apache.cassandra.cql3.statements.ParsedStatement query()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: void recover(org.antlr.runtime.IntStream,org.antlr.runtime.RecognitionException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: org.apache.cassandra.cql3.statements.ParsedStatement cqlStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.ParsedStatement cqlStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ParsedStatement: void setBoundVariables(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void recover(org.antlr.runtime.IntStream,org.antlr.runtime.RecognitionException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.AlterViewStatement alterMaterializedViewStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropViewStatement dropMaterializedViewStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateViewStatement createMaterializedViewStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.RevokeRoleStatement revokeRoleStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.GrantRoleStatement grantRoleStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.ListRolesStatement listRolesStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropRoleStatement dropRoleStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.AlterRoleStatement alterRoleStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateRoleStatement createRoleStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropAggregateStatement dropAggregateStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateAggregateStatement createAggregateStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropFunctionStatement dropFunctionStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateFunctionStatement createFunctionStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropTypeStatement dropTypeStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.AlterTypeStatement alterTypeStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateTypeStatement createTypeStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropTriggerStatement dropTriggerStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateTriggerStatement createTriggerStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.ListRolesStatement listUsersStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropRoleStatement dropUserStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.AlterRoleStatement alterUserStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateRoleStatement createUserStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.ListPermissionsStatement listPermissionsStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.RevokePermissionsStatement revokePermissionsStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.GrantPermissionsStatement grantPermissionsStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.AlterKeyspaceStatement alterKeyspaceStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.AlterTableStatement alterTableStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropIndexStatement dropIndexStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropTableStatement dropTableStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DropKeyspaceStatement dropKeyspaceStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateIndexStatement createIndexStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement createTableStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.CreateKeyspaceStatement createKeyspaceStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.TruncateStatement truncateStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.UseStatement useStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.DeleteStatement$Parsed deleteStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.BatchStatement$Parsed batchStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.UpdateStatement$ParsedUpdate updateStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.ModificationStatement$Parsed insertStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.SelectStatement$RawStatement selectStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause$Builder: org.apache.cassandra.cql3.WhereClause build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw intValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void orderByClause(java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void groupByClause(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.WhereClause$Builder whereClause()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CFName columnFamilyName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List selectClause()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Parameters: void <init>(java.util.Map,java.util.List,boolean,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.statements.SelectStatement$Parameters,java.util.List,org.apache.cassandra.cql3.WhereClause,org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause: org.apache.cassandra.cql3.WhereClause empty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CFStatement: void <init>(org.apache.cassandra.cql3.CFName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ParsedStatement: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: java.lang.Object recoverFromMismatchedToken(org.antlr.runtime.IntStream,int,org.antlr.runtime.BitSet)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.Object recoverFromMismatchedToken(org.antlr.runtime.IntStream,int,org.antlr.runtime.BitSet)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: org.antlr.runtime.Token nextToken()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mTokens()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__183()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mTokens()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__204()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__203()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__202()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__201()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__200()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__199()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__198()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__197()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__196()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__195()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__194()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__193()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__192()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__191()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__190()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__189()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__188()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__187()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__186()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__185()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void mT__184()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_SELECT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mMULTILINE_COMMENT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mCOMMENT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mWS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mUUID()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mHEXNUMBER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mIDENT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mDURATION()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mBOOLEAN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mFLOAT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mQMARK()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mINTEGER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mEMPTY_QUOTED_NAME()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mQUOTED_NAME()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mSTRING_LITERAL()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_LIKE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_UNSET()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DEFAULT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_JSON()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_REPLACE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_OR()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_LANGUAGE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_INPUT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_CALLED()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_RETURNS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_INITCOND()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_FINALFUNC()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_STYPE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_SFUNC()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_AGGREGATE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_FUNCTIONS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_FUNCTION()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_FROZEN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_STATIC()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TRIGGER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TUPLE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_INFINITY()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_NAN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_LIST()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_MAP()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_EXISTS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_NOT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_NULL()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TIME()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DATE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_WRITETIME()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TOKEN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TIMEUUID()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_VARINT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_VARCHAR()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_UUID()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TEXT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TINYINT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_SMALLINT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_INT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_INET()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_FLOAT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DURATION()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DOUBLE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DECIMAL()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_COUNTER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_BOOLEAN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_BLOB()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_BIGINT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ASCII()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_CLUSTERING()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_OPTIONS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_NOLOGIN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_LOGIN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_PASSWORD()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_NOSUPERUSER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_SUPERUSER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ROLES()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ROLE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_USERS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_USER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_MBEANS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_MBEAN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_NORECURSIVE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_EXECUTE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DESCRIBE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_AUTHORIZE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_MODIFY()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_REVOKE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_OF()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_PERMISSIONS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_PERMISSION()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ALL()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_GRANT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_GROUP()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_CONTAINS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_IS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_IF()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_FILTERING()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ALLOW()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DESC()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ASC()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_BY()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ORDER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_STORAGE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_COMPACT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TYPE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ADD()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_RENAME()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ALTER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_CAST()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TTL()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TIMESTAMP()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_VALUES()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_INTO()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_PRIMARY()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DROP()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TO()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ON()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_CUSTOM()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_INDEX()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_VIEW()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_MATERIALIZED()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_COLUMNFAMILY()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_KEYSPACES()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_KEYSPACE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_CREATE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_IN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DELETE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_TRUNCATE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_APPLY()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_BATCH()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_UNLOGGED()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_BEGIN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_SET()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_COUNT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_DISTINCT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_USE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_USING()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_PARTITION()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_PER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_LIMIT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_WITH()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_UPDATE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_INSERT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_FULL()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_ENTRIES()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_KEYS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_KEY()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_AND()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_WHERE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_AS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK_FROM()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mF()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mM()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mO()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mR()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mA()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mW()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mE()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mH()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mD()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mN()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mK()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mY()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mI()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mL()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mU()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mP()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mG()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mC()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mB()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mZ()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mV()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mX()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mJ()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mEXPONENT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA44: int specialStateTransition(int,org.antlr.runtime.IntStream)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA1: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA182: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA44: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA154: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA15: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA196: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA195: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA155: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA190: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA179: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA173: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA177: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA175: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$DFA205: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer$DFA1: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA44: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA14: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA37: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA22: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA24: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA28: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA30: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer$DFA9: java.lang.String getDescription()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mDIGIT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mDURATION_UNIT()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mLETTER()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Lexer: void mHEX()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void emit(org.antlr.runtime.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlLexer: void displayRecognitionError(java.lang.String[],org.antlr.runtime.RecognitionException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: void syntaxError(org.antlr.runtime.BaseRecognizer,java.lang.String[],org.antlr.runtime.RecognitionException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: void appendQuerySnippet(org.antlr.runtime.Parser,java.lang.StringBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: int getSnippetFirstTokenIndex(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: void appendSnippet(java.lang.StringBuilder,org.antlr.runtime.Token,org.antlr.runtime.Token,org.antlr.runtime.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: int getSnippetLastTokenIndex(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: int getOffendingTokenIndex(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: boolean areTokensValid(org.antlr.runtime.Token[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: int getLastCharPositionInLine(org.antlr.runtime.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: int lineIndex(org.antlr.runtime.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: java.lang.String highlightToken(java.lang.String,org.antlr.runtime.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: java.lang.String insertChar(java.lang.String,int,char)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: int getLength(org.antlr.runtime.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: boolean isTokenValid(org.antlr.runtime.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.selection.RawSelector selector()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.ColumnIdentifier noncol_ident()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.selection.Selectable$Raw unaliasedSelector()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.RawSelector: void <init>(org.apache.cassandra.cql3.selection.Selectable$Raw,org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.FieldIdentifier fident()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List selectionFunctionArgs()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.functions.FunctionName functionName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type native_type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.config.ColumnDefinition$Raw cident()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw value()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithTerm$Raw: void <init>(org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.TypeCast: void <init>(org.apache.cassandra.cql3.CQL3Type$Raw,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL$Raw: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithCast$Raw: void <init>(org.apache.cassandra.cql3.selection.Selectable$Raw,org.apache.cassandra.cql3.CQL3Type)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection$Raw: void <init>(org.apache.cassandra.cql3.selection.Selectable$Raw,org.apache.cassandra.cql3.FieldIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw: org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw newCountRowsFunction()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AbstractFunction: org.apache.cassandra.cql3.functions.FunctionName name()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$Raw: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$Raw: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.String unreserved_keyword()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw: org.apache.cassandra.config.ColumnDefinition$Raw forQuoted(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw: org.apache.cassandra.config.ColumnDefinition$Raw forUnquoted(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$Literal: void <init>(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.String unreserved_function_keyword()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.String basic_unreserved_keyword()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.String[] getTokenNames()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: void displayRecognitionError(java.lang.String[],org.antlr.runtime.RecognitionException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: java.lang.String[] getTokenNames()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void displayRecognitionError(java.lang.String[],org.antlr.runtime.RecognitionException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.AbstractMarker$Raw newBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Tuples$Literal tupleLiteral()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.UserTypes$Literal usertypeLiteral()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw collectionLiteral()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Constants$Literal constant()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Constants$Literal string(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Constants$Literal integer(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Constants$Literal floatingPoint(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Constants$Literal bool(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Constants$Literal duration(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Constants$Literal uuid(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Constants$Literal hex(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: void <init>(org.apache.cassandra.cql3.Constants$Type,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw setOrMapLiteral(org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw term()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Literal: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Literal: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Term$Raw function()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List functionArgs()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall$Raw: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.String allowedFunctionName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.String keyspaceName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void ksName(org.apache.cassandra.cql3.KeyspaceElementName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CFName: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.KeyspaceElementName: java.lang.String getKeyspace()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.KeyspaceElementName: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void addRecognitionError(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.KeyspaceElementName: void setKeyspace(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.KeyspaceElementName: java.lang.String toInternalName(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ErrorCollector: void syntaxError(org.antlr.runtime.BaseRecognizer,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.UTName userTypeName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw tuple_type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.CQL3Type$Raw collection_type()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Custom: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type$Raw 'from'(org.apache.cassandra.cql3.CQL3Type)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type$Raw userType(org.apache.cassandra.cql3.UTName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type$Raw frozen(org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawType: void <init>(org.apache.cassandra.cql3.CQL3Type,org.apache.cassandra.cql3.CQL3Type$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawType: void <init>(org.apache.cassandra.cql3.CQL3Type)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: void freeze()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: void freeze()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple: void freeze()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawUT: void freeze()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple: boolean supportsFreezing()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: boolean supportsFreezing()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawUT: boolean supportsFreezing()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawType: boolean supportsFreezing()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.InvalidRequestException: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawUT: void <init>(org.apache.cassandra.cql3.UTName,org.apache.cassandra.cql3.CQL3Type$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawUT: void <init>(org.apache.cassandra.cql3.UTName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: org.apache.cassandra.db.marshal.AbstractType parse(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: void <init>(java.lang.String,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: int skipBlank(java.lang.String,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: boolean isEOS(java.lang.String,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: boolean isIdentifierChar(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: org.apache.cassandra.db.marshal.AbstractType getAbstractType(java.lang.String,org.apache.cassandra.db.marshal.TypeParser)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: org.apache.cassandra.db.marshal.AbstractType getAbstractType(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.Class classForName(java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: org.apache.cassandra.db.marshal.AbstractType getRawAbstractType(java.lang.Class,org.apache.cassandra.db.marshal.TypeParser)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: org.apache.cassandra.db.marshal.AbstractType getRawAbstractType(java.lang.Class)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: org.apache.cassandra.db.marshal.AbstractType parseDefaultParameters(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.TypeParser)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: java.util.Map getKeyValueParameters()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: org.apache.cassandra.db.marshal.ReversedType getInstance(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: void <init>(org.apache.cassandra.db.marshal.AbstractType$ComparisonType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType$lambda_new_0__161: java.util.Comparator bootstrap$(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType$lambda_new_0__161: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: void throwSyntaxError(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: java.lang.String readNextIdentifier()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: void skipBlank()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: boolean skipBlankAndComma()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: boolean isEOS()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: boolean isBlank(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type$Raw map(org.apache.cassandra.cql3.CQL3Type$Raw,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type$Raw list(org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type$Raw set(org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: void <init>(org.apache.cassandra.db.marshal.CollectionType$Kind,org.apache.cassandra.cql3.CQL3Type$Raw,org.apache.cassandra.cql3.CQL3Type$Raw,org.apache.cassandra.cql3.CQL3Type$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: void <init>(org.apache.cassandra.db.marshal.CollectionType$Kind,org.apache.cassandra.cql3.CQL3Type$Raw,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type$Raw tuple(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple: void <init>(java.util.List,org.apache.cassandra.cql3.CQL3Type$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.ColumnIdentifier non_type_ident()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UTName: void <init>(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: java.lang.String toString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: void <init>(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer bytes(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: long prefixComparison(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Literal: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Literal: void <init>(java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.FieldIdentifier: org.apache.cassandra.cql3.FieldIdentifier forUnquoted(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.FieldIdentifier: org.apache.cassandra.cql3.FieldIdentifier forQuoted(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.FieldIdentifier: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.FieldIdentifier: java.nio.ByteBuffer convert(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$MultiColumnRaw: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$Raw: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void cfName(org.apache.cassandra.cql3.CFName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CFName: void setColumnFamily(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void relationOrExpression(org.apache.cassandra.cql3.WhereClause$Builder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause$Builder: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void customIndexExpression(org.apache.cassandra.cql3.WhereClause$Builder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void relation(org.apache.cassandra.cql3.WhereClause$Builder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Tuples$Raw markerForTuple()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Operator relationType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List tupleOfMarkersForTuples()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List tupleOfTupleLiterals()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Tuples$INRaw inMarkerForTuple()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List tupleOfIdentifiers()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List singleColumnInValues()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.AbstractMarker$INRaw inMarker()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause$Builder: org.apache.cassandra.cql3.WhereClause$Builder add(org.apache.cassandra.cql3.Relation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: void <init>(java.util.List,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.SingleColumnRelation createInRelation(org.apache.cassandra.config.ColumnDefinition$Raw,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.MultiColumnRelation createInRelation(java.util.List,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.MultiColumnRelation createSingleMarkerInRelation(java.util.List,org.apache.cassandra.cql3.Tuples$INRaw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.MultiColumnRelation createNonInRelation(java.util.List,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$MultiColumnRaw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: void <init>(java.util.List,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$MultiColumnRaw,java.util.List,org.apache.cassandra.cql3.Tuples$INRaw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$Raw,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.AbstractMarker$INRaw newINBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$INRaw: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Tuples$INRaw newTupleINBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$INRaw: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Tuples$Raw newTupleBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Raw: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void idxName(org.apache.cassandra.cql3.IndexName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause$Builder: org.apache.cassandra.cql3.WhereClause$Builder add(org.apache.cassandra.cql3.restrictions.CustomIndexExpression)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.IndexName: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.CustomIndexExpression: void <init>(org.apache.cassandra.cql3.IndexName,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.IndexName: void setIndex(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause: void <init>(org.apache.cassandra.cql3.WhereClause$Builder,org.apache.cassandra.cql3.WhereClause$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause: void <init>(org.apache.cassandra.cql3.WhereClause$Builder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause: void <init>(java.util.List,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsertJson jsonInsertStatement(org.apache.cassandra.cql3.CFName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsert normalInsertStatement(org.apache.cassandra.cql3.CFName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void usingClause(org.apache.cassandra.cql3.Attributes$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes$Raw: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsert: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.Attributes$Raw,java.util.List,java.util.List,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement$Parsed: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.statements.StatementType,org.apache.cassandra.cql3.Attributes$Raw,java.util.List,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void usingClauseObjective(org.apache.cassandra.cql3.Attributes$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Json$Raw jsonValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsertJson: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.Attributes$Raw,org.apache.cassandra.cql3.Json$Raw,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Json$Marker newJsonBindVariables(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$Literal: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$Marker: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List updateConditions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void columnOperation(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement$ParsedUpdate: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.Attributes$Raw,java.util.List,org.apache.cassandra.cql3.WhereClause,java.util.List,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void columnOperationDifferentiator(java.util.List,org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void udtColumnOperation(java.util.List,org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.FieldIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void collectionColumnOperation(java.util.List,org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void shorthandColumnOperation(java.util.List,org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void normalColumnOperation(java.util.List,org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void addRawUpdate(java.util.List,org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.Operation$RawUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetValue: void <init>(org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Prepend: void <init>(org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Addition: void <init>(org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Substraction: void <init>(org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetField: boolean isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetElement: boolean isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Substraction: boolean isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Addition: boolean isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Prepend: boolean isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetValue: boolean isCompatibleWith(org.apache.cassandra.cql3.Operation$RawUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.FieldIdentifier: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetElement: void <init>(org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetField: void <init>(org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void columnCondition(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw simpleCondition(org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw simpleInCondition(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw simpleInCondition(org.apache.cassandra.cql3.AbstractMarker$INRaw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw collectionCondition(org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw collectionInCondition(org.apache.cassandra.cql3.Term$Raw,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw collectionInCondition(org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.AbstractMarker$INRaw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw udtFieldCondition(org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw udtFieldInCondition(org.apache.cassandra.cql3.FieldIdentifier,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition$Raw udtFieldInCondition(org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.AbstractMarker$INRaw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: void <init>(org.apache.cassandra.cql3.Term$Raw,java.util.List,org.apache.cassandra.cql3.AbstractMarker$INRaw,org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.statements.ModificationStatement$Parsed batchStatementObjective()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement$Parsed: void <init>(org.apache.cassandra.cql3.statements.BatchStatement$Type,org.apache.cassandra.cql3.Attributes$Raw,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void usingClauseDelete(org.apache.cassandra.cql3.Attributes$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.List deleteSelection()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DeleteStatement$Parsed: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.Attributes$Raw,java.util.List,org.apache.cassandra.cql3.WhereClause,java.util.List,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Operation$RawDeletion deleteOp()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ColumnDeletion: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ElementDeletion: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$FieldDeletion: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.FieldIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UseStatement: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TruncateStatement: void <init>(org.apache.cassandra.cql3.CFName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void properties(org.apache.cassandra.cql3.statements.PropertyDefinitions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.KeyspaceAttributes: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateKeyspaceStatement: void <init>(java.lang.String,org.apache.cassandra.cql3.statements.KeyspaceAttributes,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SchemaAlteringStatement: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PropertyDefinitions: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void property(org.apache.cassandra.cql3.statements.PropertyDefinitions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.Map convertPropertyMap(org.apache.cassandra.cql3.Maps$Literal)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Maps$Literal mapLiteral()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.String propertyValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PropertyDefinitions: void addProperty(java.lang.String,java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PropertyDefinitions: void addProperty(java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: java.lang.String getRawText()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void cfamDefinition(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement: void <init>(org.apache.cassandra.cql3.CFName,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CFProperties: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void cfamProperty(org.apache.cassandra.cql3.statements.CFProperties)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void cfamColumns(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.ColumnIdentifier ident()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void pkDef(org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement: void addColumnAlias(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement: void addKeyAliases(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement: void addDefinition(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.cql3.CQL3Type$Raw,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: org.apache.cassandra.cql3.ColumnIdentifier getInterned(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: org.apache.cassandra.cql3.ColumnIdentifier getInterned(org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier$InternedKey: void <init>(org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: void <init>(java.nio.ByteBuffer,java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer minimalBufferFor(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void cfamOrdering(org.apache.cassandra.cql3.statements.CFProperties)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CFProperties: void setCompactStorage()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CFProperties: void setOrdering(org.apache.cassandra.cql3.ColumnIdentifier,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void indexIdent(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexPropDefs: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.IndexName,java.util.List,org.apache.cassandra.cql3.statements.IndexPropDefs,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.IndexName: java.lang.String getIdx()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SchemaAlteringStatement: void <init>(org.apache.cassandra.cql3.CFName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Raw: org.apache.cassandra.cql3.statements.IndexTarget$Raw simpleIndexOn(org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Raw: org.apache.cassandra.cql3.statements.IndexTarget$Raw valuesOf(org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Raw: org.apache.cassandra.cql3.statements.IndexTarget$Raw keysOf(org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Raw: org.apache.cassandra.cql3.statements.IndexTarget$Raw keysAndValuesOf(org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Raw: org.apache.cassandra.cql3.statements.IndexTarget$Raw fullCollection(org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Raw: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.statements.IndexTarget$Type)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropKeyspaceStatement: void <init>(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTableStatement: void <init>(org.apache.cassandra.cql3.CFName,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.IndexName indexName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement: void <init>(org.apache.cassandra.cql3.IndexName,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.IndexName: org.apache.cassandra.cql3.CFName getCfName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.KeyspaceElementName: boolean hasKeyspace()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.config.ColumnDefinition$Raw schema_cident()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: boolean cfisStatic()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatementColumn: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatementColumn: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.CQL3Type$Raw,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatementColumn: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatement: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.statements.AlterTableStatement$Type,java.util.List,org.apache.cassandra.cql3.statements.TableAttributes,java.util.Map,java.lang.Long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: java.lang.String getText()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterKeyspaceStatement: void <init>(java.lang.String,org.apache.cassandra.cql3.statements.KeyspaceAttributes)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.Set filterPermissions(java.util.Set,org.apache.cassandra.auth.IResource)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.RoleName userOrRoleName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.auth.IResource resource()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.util.Set permissionOrAll()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.GrantPermissionsStatement: void <init>(java.util.Set,org.apache.cassandra.auth.IResource,org.apache.cassandra.cql3.RoleName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PermissionsManagementStatement: void <init>(java.util.Set,org.apache.cassandra.auth.IResource,org.apache.cassandra.cql3.RoleName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.RoleName: java.lang.String getName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthorizationStatement: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: org.apache.cassandra.auth.RoleResource role(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.auth.Permission permission()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.auth.JMXResource jmxResource()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.auth.FunctionResource functionResource()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.auth.RoleResource roleResource()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.auth.DataResource dataResource()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CFName: java.lang.String getColumnFamily()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: org.apache.cassandra.auth.DataResource root()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: org.apache.cassandra.auth.DataResource keyspace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: org.apache.cassandra.auth.DataResource table(java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: void <init>(org.apache.cassandra.auth.DataResource$Level,java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: org.apache.cassandra.auth.RoleResource root()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void roleName(org.apache.cassandra.cql3.RoleName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.RoleName: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.RoleName: void setName(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: org.apache.cassandra.auth.FunctionResource root()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: org.apache.cassandra.auth.FunctionResource keyspace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: org.apache.cassandra.auth.FunctionResource functionFromCql(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Native: org.apache.cassandra.db.marshal.AbstractType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Custom: org.apache.cassandra.db.marshal.AbstractType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Collection: org.apache.cassandra.db.marshal.AbstractType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Tuple: org.apache.cassandra.db.marshal.AbstractType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$UserDefined: org.apache.cassandra.db.marshal.AbstractType getType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: void <init>(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawTuple: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawUT: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawType: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.db.marshal.UserType freeze()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: org.apache.cassandra.db.marshal.UserType getNullable(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UTName: boolean hasKeyspace()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UTName: java.lang.String getKeyspace()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UTName: void setKeyspace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UTName: java.nio.ByteBuffer getUserTypeName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UTName: java.lang.String toString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$UserDefined: void <init>(java.lang.String,org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.cql3.CQL3Type$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: java.util.List fieldTypes()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: void <init>(java.lang.String,java.nio.ByteBuffer,java.util.List,java.util.List,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.FieldIdentifier: java.lang.String toString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: void <init>(java.util.List,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UserTypeSerializer: void <init>(java.util.LinkedHashMap)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TupleSerializer: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType$freeze__162: java.util.function.Function bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: java.util.List fieldSerializers(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType$freeze__162: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: boolean isCounter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawType: boolean isCounter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Tuple: void <init>(org.apache.cassandra.db.marshal.TupleType,org.apache.cassandra.cql3.CQL3Type$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: org.apache.cassandra.cql3.CQL3Type prepare(java.lang.String,org.apache.cassandra.schema.Types,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: boolean isDuration()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawType: boolean isDuration()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: void throwNestedNonFrozenError(org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.db.marshal.ListType getInstance(org.apache.cassandra.db.marshal.AbstractType,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.db.marshal.SetType getInstance(org.apache.cassandra.db.marshal.AbstractType,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.MapType getInstance(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: void <init>(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: void <init>(org.apache.cassandra.db.marshal.AbstractType$ComparisonType,org.apache.cassandra.db.marshal.CollectionType$Kind)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: org.apache.cassandra.serializers.MapSerializer getInstance(org.apache.cassandra.serializers.TypeSerializer,org.apache.cassandra.serializers.TypeSerializer,java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: void <init>(org.apache.cassandra.serializers.TypeSerializer,org.apache.cassandra.serializers.TypeSerializer,java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer$lambda_new_0__164: java.util.Comparator bootstrap$(java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.CollectionSerializer: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer$lambda_new_0__164: void <init>(java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: void <init>(org.apache.cassandra.db.marshal.AbstractType,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: org.apache.cassandra.serializers.SetSerializer getInstance(org.apache.cassandra.serializers.TypeSerializer,java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: void <init>(org.apache.cassandra.serializers.TypeSerializer,java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: void <init>(org.apache.cassandra.db.marshal.AbstractType,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: org.apache.cassandra.serializers.ListSerializer getInstance(org.apache.cassandra.serializers.TypeSerializer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: void <init>(org.apache.cassandra.serializers.TypeSerializer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: java.lang.String canonicalizeObjectName(java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Cql_Parser$mbean_return mbean()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: org.apache.cassandra.auth.JMXResource root()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: org.apache.cassandra.auth.JMXResource mbean(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$mbean_return: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: void clear()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.AbstractIterator: void remove()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void remove()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator$1: void remove()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator: void remove()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator: void remove()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: void remove()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: boolean lambda$removeInvalidPreparedStatementsForFunction$1(com.google.common.base.Predicate,org.apache.cassandra.cql3.statements.ParsedStatement$Prepared)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: java.lang.Iterable getFunctions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.lang.Iterable getFunctions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: java.lang.Iterable getFunctions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ParsedStatement: java.lang.Iterable getFunctions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractConditions: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations$lambda_addFunctionsTo_0__356: java.util.function.Consumer bootstrap$(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations$lambda_addFunctionsTo_1__357: java.util.function.Consumer bootstrap$(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations$lambda_addFunctionsTo_1__357: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_24__133: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addTable__136: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_23__132: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addView__137: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropType__134: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addType__135: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms$lambda_addFunctions_0__565: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_addFunctionsTo_1__354: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_addFunctionsTo_2__355: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$setupOnline__537: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_sstableMap_2__536: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$apply__108: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica$lambda_printContentsWithAnyErrors_0__514: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addAggregate__139: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropFunction__131: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addFunction__138: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_compactionStrategyMap_1__421: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$markIndexRemoved__449: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__443: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__444: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__409: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__410: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$enable__412: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$enable__411: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__413: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__414: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__415: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__416: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$disable__398: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$disable__397: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$migrateBuiltIndexesForTable__217: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations$lambda_addFunctionsTo_0__356: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations$lambda_addFunctionsTo_1__357: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$lambda_addFunctionsTo_0__351: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder$add__169: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$lambda_announceColumnFamilyUpdate_2__99: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$migrateBuiltIndexesForKeyspace__69: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$storeKeyspaceInNewSchemaTables__68: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTypes_10__204: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTables_7__206: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readKeyspace_5__198: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readSchema_4__97: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$list__105: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName: void list(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName$isLogFile__193: java.io.FileFilter bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName$add__194: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName$add__194: void <init>(org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName$isLogFile__193: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$2: boolean accept(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName$isLogFile__193: boolean accept(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean isLogFile(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: org.apache.cassandra.utils.Pair tryComponentFromFilename(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Component: org.apache.cassandra.utils.Pair fromFilename(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Component: void <init>(org.apache.cassandra.io.sstable.Component$Type,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: org.apache.cassandra.utils.Pair fromFilename(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Component$Type: org.apache.cassandra.io.sstable.Component$Type fromRepresentation(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: org.apache.cassandra.utils.Pair fromFilename(java.io.File,java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: org.apache.cassandra.utils.ChecksumType uncompressedChecksumType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean hasNewFileName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat: org.apache.cassandra.io.sstable.format.Version getVersion(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: void <init>(org.apache.cassandra.io.sstable.format.Version,java.io.File,java.lang.String,java.lang.String,int,org.apache.cassandra.io.sstable.format.SSTableFormat$Type,org.apache.cassandra.io.sstable.Component)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableFormat$Type: org.apache.cassandra.io.sstable.format.SSTableFormat$Type validate(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.Version: boolean validate(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Component: org.apache.cassandra.io.sstable.Component digestFor(org.apache.cassandra.utils.ChecksumType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableFormat$Type: org.apache.cassandra.io.sstable.format.SSTableFormat$Type[] values()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat: org.apache.cassandra.io.sstable.format.Version getLatestVersion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.Version: void <init>(org.apache.cassandra.io.sstable.format.SSTableFormat,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$toFile__75: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lastModified__372: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables$lambda_perform_1__482: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State$lambda_close_1__481: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_getBuiltIndexes_2__452: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex$toString__402: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$toFile__384: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_1__361: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_2__360: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_3__359: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$lambda_applyBackPressure_2__339: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog$get__296: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog$readFromFileQuietly__294: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_getColumns_0__253: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: org.apache.cassandra.config.ColumnDefinition lambda$getColumns$0(org.apache.cassandra.cql3.ColumnCondition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: java.util.Optional readFromFileQuietly(java.nio.file.Path)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: org.apache.cassandra.hints.HintsDescriptor deserialize(java.io.DataInput)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: void <init>(java.util.UUID,int,long,com.google.common.collect.ImmutableMap)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void updateChecksumInt(java.util.zip.Checksum,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: void updateChecksumLong(java.util.zip.CRC32,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: void validateCRC(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: com.google.common.collect.ImmutableMap decodeJSONBytes(byte[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$1: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$1: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$1: java.util.Collection next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$1: java.util.Collection buildNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$DeletionTracker: org.apache.cassandra.db.DeletionTime currentDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: org.apache.cassandra.db.rows.Row access$000(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: void access$100(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,java.util.Collection,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: org.apache.cassandra.config.CFMetaData access$200(org.apache.cassandra.db.view.TableViews)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: java.util.Collection access$300(org.apache.cassandra.db.view.TableViews,org.apache.cassandra.config.CFMetaData,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: java.util.Collection buildMutations(org.apache.cassandra.config.CFMetaData,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void clear()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: java.util.Collection generateViewUpdates()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.Mutation add(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: void <init>(java.lang.String,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: org.apache.cassandra.dht.IPartitioner getPartitioner()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: void addToViewUpdateGenerators(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,java.util.Collection,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void addBaseTableUpdate(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void deleteOldEntry(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void createEntry(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void updateEntry(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: org.apache.cassandra.db.view.ViewUpdateGenerator$UpdateAction updateAction(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.db.marshal.AbstractType cellValueType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: boolean isLive(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Cell getCell(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: boolean hasLiveData(int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_hasLiveData_0__233: com.google.common.base.Predicate bootstrap$(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiredLivenessInfo: boolean isLive(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: boolean isLive(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo: boolean isLive(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: java.lang.Iterable cells()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_cells_2__231: java.lang.Iterable bootstrap$(org.apache.cassandra.db.rows.BTreeRow)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_cells_2__231: void <init>(org.apache.cassandra.db.rows.BTreeRow)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_hasLiveData_0__233: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object find(java.lang.Object[],java.util.Comparator,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean isMultiCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: boolean isMultiCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: boolean isMultiCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: boolean isMultiCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isMultiCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: org.apache.cassandra.config.ColumnDefinition getViewColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void submitUpdate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void addColumnData(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: org.apache.cassandra.db.LivenessInfo computeLivenessInfoForEntry(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void startNewUpdate(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: boolean matchesViewFilter(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: boolean matchesViewFilter(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: boolean selectsClustering(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: boolean selectsClustering(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadQuery$1: boolean selectsClustering(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: boolean isSatisfiedBy(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.filter.RowFilter rowFilterForInternalCalls()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: org.apache.cassandra.cql3.statements.SelectStatement getSelectStatement()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.ReadQuery getQuery(org.apache.cassandra.cql3.QueryOptions,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.cql3.QueryOptions forInternalCalls(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(boolean,org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void setKeyspace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: org.apache.cassandra.service.ClientState forInternalCalls()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: boolean isNoCompactMode()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.VariableSpecifications: short[] getPartitionKeyBindIndexes(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.VariableSpecifications: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: org.apache.cassandra.cql3.Term prepareLimit(org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Term$Raw,java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: org.apache.cassandra.cql3.ColumnSpecification perPartitionLimitReceiver()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CFStatement: java.lang.String keyspace()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: org.apache.cassandra.cql3.ColumnSpecification limitReceiver()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: void checkNeedsFiltering(org.apache.cassandra.cql3.restrictions.StatementRestrictions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: boolean isReversed(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: java.util.Comparator getOrderingComparator(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.cql3.restrictions.StatementRestrictions,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: org.apache.cassandra.db.aggregation.AggregationSpecification getAggregationSpecification(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.cql3.restrictions.StatementRestrictions,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: org.apache.cassandra.cql3.restrictions.StatementRestrictions prepareRestrictions(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.selection.Selection,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: org.apache.cassandra.cql3.selection.Selection prepareSelection(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ParsedStatement: org.apache.cassandra.cql3.VariableSpecifications getBoundVariables()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CFStatement: java.lang.String columnFamily()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: void <init>(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.cql3.statements.SelectStatement$Parameters,org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.cql3.restrictions.StatementRestrictions,boolean,org.apache.cassandra.db.aggregation.AggregationSpecification,java.util.Comparator,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ParsedStatement$Prepared: void <init>(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.cql3.VariableSpecifications,short[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: org.apache.cassandra.config.CFMetaData validateColumnFamilyWithCompactMode(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: java.lang.Object checkNull(java.lang.Object,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: void validateDistinctSelection(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.cql3.restrictions.StatementRestrictions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: void checkFalse(boolean,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: void verifyOrderingIsAllowed(org.apache.cassandra.cql3.restrictions.StatementRestrictions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean isKeyRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean usesSecondaryIndexing()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: void checkTrue(boolean,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: void checkTrue(boolean,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: org.apache.cassandra.exceptions.InvalidRequestException invalidRequest(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isPartitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: java.util.List getColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: java.util.Set nonPKRestrictedColumns(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean hasNonPrimaryKeyRestrictions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean hasClusteringColumnsRestrictions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement$isStatic__255: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: void checkFalse(boolean,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement$isStatic__255: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: java.util.List getColumnDefs()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.List getColumnDefs()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: java.util.List getColumnDefs()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: java.util.List getColumnDefs()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: java.util.List getRestrictions()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: java.lang.Object checkNull(java.lang.Object,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.config.CFMetaData getCFMetaData(java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateKeyspace(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.Set getKeyspaces()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.KeyspaceNotDefinedException: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ParsedStatement$Prepared: void <init>(org.apache.cassandra.cql3.CQLStatement,java.util.List,short[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.VariableSpecifications: java.util.List getSpecifications()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.filter.ColumnFilter gatherQueriedColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection: boolean isWildcard()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: boolean isWildcard()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Builder: org.apache.cassandra.db.filter.ColumnFilter build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Builder: org.apache.cassandra.db.filter.ColumnFilter$Builder addAll(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Builder: org.apache.cassandra.db.filter.ColumnFilter$Builder add(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.filter.ColumnFilter all(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.filter.ColumnFilter$Builder allColumnsBuilder(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Builder: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.filter.ColumnFilter$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Builder: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: void <init>(boolean,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.PartitionColumns,com.google.common.collect.SortedSetMultimap)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns$Builder: org.apache.cassandra.db.PartitionColumns$Builder add(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isRegular()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$Builder: org.apache.cassandra.utils.btree.BTreeSet$Builder add(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSet$Builder builder(java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$Builder: void <init>(java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: void <init>(boolean,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.PartitionColumns,com.google.common.collect.SortedSetMultimap,org.apache.cassandra.db.filter.ColumnFilter$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: boolean add(org.apache.cassandra.db.view.View)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: boolean contains(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$lambda_contains_0__387: com.google.common.base.Predicate bootstrap$(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$lambda_contains_0__387: void <init>(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: boolean lambda$invalidateFile$1(java.lang.String,org.apache.cassandra.cache.ChunkCache$Key)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean lambda$nonPkColumnIterator$0(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: boolean lambda$removeInvalidPreparedStatementsForFunction$2(com.google.common.base.Predicate,org.apache.cassandra.cql3.statements.ParsedStatement$Prepared)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$Terminal: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithValues: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithMarker: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithValues: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithMarker: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$DelayedValue: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$DelayedValue: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DelayedValue: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$DelayedValue: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$DelayedValue: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms: void addFunctions(java.lang.Iterable,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AbstractFunction: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms$lambda_addFunctions_0__565: java.util.function.Consumer bootstrap$(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_setErrorInReplicas_3__610: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations$lambda_getLogMessage_0__538: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_printContentsWithAnyErrors_4__512: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getAllIndexColumnFamilyStores_15__404: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$validate__3: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void validate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: void validate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: void validate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: void validate(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: void validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: void validateForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: void validateForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: void validateForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UTF8Serializer$UTF8Validator: boolean validate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String bytesToHex(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Hex: java.lang.String bytesToHex(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Hex: java.lang.String wrapCharArray(char[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void removeShutdownHook()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector$Killer: void killCurrentJVM(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.HeapUtils: void logHeapHistogram()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$DiskFailurePolicy getDiskFailurePolicy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.HeapUtils: java.lang.Long getProcessId()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.HeapUtils: java.lang.String getJcmdPath()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.HeapUtils: void logProcessOutput(java.lang.Process)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.HeapUtils$1: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor$lambda_getTemporaryFiles_0__543: boolean accept(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog$lambda_recoverSegmentsOnDisk_0__425: boolean accept(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.triggers.CustomClassLoader$1: boolean accept(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.HeapUtils$1: boolean accept(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: boolean lambda$recoverSegmentsOnDisk$0(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: boolean isValid(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: boolean shouldReplay(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: boolean lambda$getTemporaryFiles$0(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: long getProcessID()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.HeapUtils: java.lang.Long getProcessIdFromJvmName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryDarwin: long callGetpid()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryWindows: long callGetpid()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryLinux: long callGetpid()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector$Killer: void killCurrentJVM(java.lang.Throwable,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector: org.slf4j.Logger access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getWindowsTimerInterval()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WindowsTimer: void endTimerPeriod(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DurationSerializer: boolean canBeCastToInt(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataInputBuffer: void <init>(java.nio.ByteBuffer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: long readVInt()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding: long decodeZigZag64(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: void validateCollectionMember(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: void validateCollectionMember(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.AbstractType validateComparator(int,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: boolean readIsStatic(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int readShortLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: boolean readStatic(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int getShortLength(java.nio.ByteBuffer,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType nameComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.db.marshal.AbstractType nameComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.db.marshal.AbstractType nameComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: void validateCell(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: void validateCell(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: void validateCellValue(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: void validateCellValue(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: void validateCellValue(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: void validateCellPath(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.db.marshal.ShortType nameComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: void validateContext(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.db.marshal.AbstractType fieldType(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ShortSerializer: java.lang.Short deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: short toShort(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void lambda$getAllIndexColumnFamilyStores$15(java.util.Set,org.apache.cassandra.index.Index)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$add__517: java.util.function.Consumer bootstrap$(java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: java.util.Optional getBackingTable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_handleFSError_2__67: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$lambda_addTo_1__589: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$lambda_setCrcCheckChance_4__581: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy$writeFullChecksum__561: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$lambda_invalidateCacheAtBoundary_1__558: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$add__517: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$withChunkCache__520: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$withChunkCache__521: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Cleanup$lambda_tidy_0__480: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter$TransactionalProxy$writeFullChecksum__441: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_handleCorruptSSTable_1__426: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void lambda$handleCorruptSSTable$1(org.apache.cassandra.io.sstable.CorruptSSTableException,org.apache.cassandra.io.FSErrorHandler)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DefaultFSErrorHandler: void handleCorruptSSTable(org.apache.cassandra.io.sstable.CorruptSSTableException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isDaemonSetupCompleted()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void stopTransports()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DefaultFSErrorHandler: void handleStartupFSError(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector: void killCurrentJVM(java.lang.Throwable,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void stopNativeTransport()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isNativeTransportRunning()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void stopRPCServer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isRPCServerRunning()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void stopGossiping()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isGossipActive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void stop()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void addLocalApplicationState(org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isSilentShutdownState(org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isJoined()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue shutdown(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: void <init>(org.apache.cassandra.net.MessagingService$Verb)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void sendOneWay(org.apache.cassandra.net.MessageOut,java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.MessagingService instance()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int nextId()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void enqueue(org.apache.cassandra.net.MessageOut,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.OutboundTcpConnection getConnection(java.net.InetAddress,org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.OutboundTcpConnectionPool getConnectionPool(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: org.apache.cassandra.net.OutboundTcpConnection getConnection(org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: int getTargetVersion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: long payloadSize(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: org.apache.cassandra.concurrent.Stage getStage()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation$MutationSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$CounterMutationSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSynSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$Serializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.BooleanSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.WriteResponse$Serializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit$CommitSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintResponse$Serializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$MigrationsSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAckSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2Serializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch$Serializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TruncationSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.ForwardingVersionedSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer: long serializedSize(org.apache.cassandra.db.TruncateResponse,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeof(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeof(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int encodedUTF8Length(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeof(short)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1: org.apache.cassandra.io.IVersionedSerializer delegate(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$3: org.apache.cassandra.io.IVersionedSerializer delegate(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$2: org.apache.cassandra.io.IVersionedSerializer delegate(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$1: org.apache.cassandra.io.IVersionedSerializer delegate(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: long serializedSize(org.apache.cassandra.db.ReadCommand,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: long serializedNamesCommandSize(org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: long serializedSliceCommandSize(org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.filter.ClusteringIndexFilter clusteringIndexFilter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: int nowInSec()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: boolean isDigestQuery()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.ReadCommand$Kind access$500(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: org.apache.cassandra.db.SinglePartitionReadCommand maybeConvertNamesToSlice(org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeof(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand withUpdatedClusteringIndexFilter(org.apache.cassandra.db.filter.ClusteringIndexFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.filter.ColumnFilter columnFilter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: boolean shouldConvertNamesToSlice(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: org.apache.cassandra.db.filter.ClusteringIndexSliceFilter convertNamesFilterToSliceFilter(org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.lang.Object first()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.AbstractClusteringIndexFilter: boolean isReversed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: java.util.NavigableSet requestedRows()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder: org.apache.cassandra.db.Slices build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder: org.apache.cassandra.db.Slices$Builder add(org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: void <init>(org.apache.cassandra.db.Slices,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringBound inclusiveStartOf(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringBound inclusiveEndOf(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringBound inclusiveEndOf(java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringBound inclusiveStartOf(java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.AbstractClusteringIndexFilter: void <init>(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder: org.apache.cassandra.db.Slices$Builder add(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.Slice make(org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: void <init>(org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder: java.util.List normalize(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: void <init>(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Slice[],org.apache.cassandra.db.Slices$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: void <init>(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Slice[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder$1: void <init>(org.apache.cassandra.db.Slices$Builder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice$1: boolean includes(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: boolean includes(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isCompound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isDense()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: org.apache.cassandra.utils.btree.BTreeSearchIterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.schema.IndexMetadata indexMetadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.filter.DataLimits limits()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.filter.RowFilter rowFilter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: int digestVersion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: void <init>(boolean,int,boolean,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: void <init>(org.apache.cassandra.db.ReadCommand$Kind,boolean,int,boolean,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: boolean selects(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: boolean selects(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: boolean selects(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: org.apache.cassandra.db.Slices requestedSlices()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: int count()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: int count()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: int count()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: long serializedSlicesSize(org.apache.cassandra.db.Slices,boolean,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeof(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.nio.ByteBuffer encodeBound(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.ClusteringBound,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int serializedSizeWithShortLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: long serializedStaticSliceSize(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: java.util.List subtypes()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$Builder: java.nio.ByteBuffer build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$Builder: java.nio.ByteBuffer buildAsEndOfRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$Builder: org.apache.cassandra.db.marshal.CompositeType$Builder add(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.CompositeType$Builder builder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.CompositeType getInstance(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: void <init>(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$Builder: void <init>(org.apache.cassandra.db.marshal.CompositeType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$Builder: void <init>(org.apache.cassandra.db.marshal.CompositeType,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$Builder: void <init>(org.apache.cassandra.db.marshal.CompositeType,java.util.List,byte[],boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: int getLength()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: byte[] getData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeShort(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void writeWithShortLength(java.nio.ByteBuffer,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeChar(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeSlow(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeExcessSlow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: java.nio.ByteBuffer duplicateDirectByteBuffer(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void flushData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: void flushData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: boolean trickleFsync()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: int trickleFsyncByteInterval()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter: void flushData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void resetBuffer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void syncDataOnlyInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: java.lang.String getPath()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.FSWriteError: void <init>(java.lang.Throwable,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.SyncUtil: void force(java.nio.channels.FileChannel,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.FSWriteError: void <init>(java.lang.Throwable,java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: long current()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksumWriter: void appendDirect(java.nio.ByteBuffer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeInt(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$lambda_new_1__523: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$lambda_new_0__522: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void lambda$new$0()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: long getLastFlushOffset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: void markIndexSynced(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: void refreshReadableBoundary()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void lambda$new$1()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: void markDataSynced(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: void addOffset(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: void seekToChunkStart()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: long getOnDiskFilePointer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void setLong(long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void putLongByByte(long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.WrappedDataOutputStreamPlus: void write(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.WrappedDataOutputStreamPlus: void write(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputStreamPlus: byte[] retrieveTemporaryBuffer(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void arrayCopy(java.nio.ByteBuffer,int,byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: long serializedNamesFilterSize(org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.nio.ByteBuffer encodeCellName(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.ClusteringPrefix,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isSuper()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: long serializedSize(org.apache.cassandra.db.ReadCommand,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: long selectionSerializedSize(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: long indexSerializedSize(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: long selectionSerializedSize(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Serializer: long serializedSize(org.apache.cassandra.config.CFMetaData,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Serializer: long serializedSize(org.apache.cassandra.db.filter.ColumnFilter,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Serializer: long serializedSize(org.apache.cassandra.db.filter.RowFilter,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Serializer: long serializedSize(org.apache.cassandra.db.filter.DataLimits,int,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeofUnsignedVInt(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.config.CFMetaData access$300(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: org.apache.cassandra.db.filter.DataLimits$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits: org.apache.cassandra.db.filter.DataLimits$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: org.apache.cassandra.db.filter.DataLimits$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: org.apache.cassandra.db.filter.DataLimits$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: org.apache.cassandra.db.filter.DataLimits$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification$Serializer: long serializedSize(org.apache.cassandra.db.aggregation.AggregationSpecification,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupingState$Serializer: long serializedSize(org.apache.cassandra.db.aggregation.GroupingState,int,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeof(byte)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits: java.nio.ByteBuffer access$700(org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int serializedSizeWithVIntLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits: int access$800(org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: java.nio.ByteBuffer access$1200(org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: int access$1300(org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupingState: boolean hasClustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$Serializer: long serializedSize(org.apache.cassandra.db.Clustering,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupingState: java.nio.ByteBuffer access$000(org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: long valuesWithoutSizeSerializedSize(org.apache.cassandra.db.ClusteringPrefix,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: long writtenLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: long makeHeader(org.apache.cassandra.db.ClusteringPrefix,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.EmptyType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BooleanType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DoubleType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.FloatType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.Int32Type: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: int valueLengthIfFixed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeofWithVIntLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification: org.apache.cassandra.db.aggregation.AggregationSpecification$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification$AggregateByPkPrefix: int access$100(org.apache.cassandra.db.aggregation.AggregationSpecification$AggregateByPkPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression$Serializer: long serializedSize(org.apache.cassandra.db.filter.RowFilter$Expression,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression: org.apache.cassandra.db.filter.RowFilter$Expression$Serializer access$1100()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operator: int serializedSize()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression: java.nio.ByteBuffer getIndexValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression: org.apache.cassandra.db.filter.RowFilter$Expression$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CustomExpression: org.apache.cassandra.db.filter.RowFilter$Expression$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$SimpleExpression: org.apache.cassandra.db.filter.RowFilter$Expression$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftExpression: org.apache.cassandra.db.filter.RowFilter$Expression$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression: org.apache.cassandra.config.ColumnDefinition column()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$Serializer: long serializedSize(org.apache.cassandra.schema.IndexMetadata,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression: java.nio.ByteBuffer access$600(org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CustomExpression: org.apache.cassandra.schema.IndexMetadata access$400(org.apache.cassandra.db.filter.RowFilter$CustomExpression)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression: long access$800(org.apache.cassandra.db.filter.RowFilter$UserExpression,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression: long serializedSize(org.apache.cassandra.db.filter.RowFilter$UserExpression,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDSerializer: long serializedSize(java.util.UUID,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: long serializedSize(org.apache.cassandra.db.Columns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Serializer: long serializedSize(org.apache.cassandra.db.filter.ColumnSubselection,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: boolean access$300(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.PartitionColumns access$600(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.PartitionColumns access$400(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: com.google.common.collect.SortedSetMultimap access$500(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer: long serializedSize(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Slice: org.apache.cassandra.db.filter.ColumnSubselection$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Element: org.apache.cassandra.db.filter.ColumnSubselection$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeofWithShortLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Slice: org.apache.cassandra.db.rows.CellPath access$200(org.apache.cassandra.db.filter.ColumnSubselection$Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Slice: org.apache.cassandra.db.rows.CellPath access$300(org.apache.cassandra.db.filter.ColumnSubselection$Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Element: org.apache.cassandra.db.rows.CellPath access$400(org.apache.cassandra.db.filter.ColumnSubselection$Element)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.marshal.AbstractType getKeyValidator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.AbstractClusteringIndexFilter$FilterSerializer: long serializedSize(org.apache.cassandra.db.filter.ClusteringIndexFilter,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: long serializedSizeInternal(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: long serializedSizeInternal(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Serializer: long serializedSize(org.apache.cassandra.db.Slices,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice$Serializer: long serializedSize(org.apache.cassandra.db.Slice,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: org.apache.cassandra.db.ClusteringComparator access$400(org.apache.cassandra.db.Slices$ArrayBackedSlices)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer: long serializedSize(org.apache.cassandra.db.ClusteringBoundOrBoundary,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.ClusteringBound access$100(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.ClusteringBound access$200(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.Comparator comparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.DataRange dataRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Serializer: long serializedSize(org.apache.cassandra.db.DataRange,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: org.apache.cassandra.db.Clustering access$100(org.apache.cassandra.db.DataRange$Paging)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer: long serializedSize(org.apache.cassandra.dht.AbstractBounds,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$TokenSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionPosition$RowPositionSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer: int kindInt(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionPosition$RowPositionSerializer: long serializedSize(org.apache.cassandra.db.PartitionPosition,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: org.apache.cassandra.db.PartitionPosition$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: org.apache.cassandra.db.PartitionPosition$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$TokenSerializer: long serializedSize(org.apache.cassandra.dht.Token,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner$2: java.nio.ByteBuffer toByteArray(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner: org.apache.cassandra.dht.Token$TokenFactory getTokenFactory()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$1: java.nio.ByteBuffer toByteArray(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: org.apache.cassandra.dht.Token$TokenFactory getTokenFactory()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer: long serializedSize(org.apache.cassandra.db.ReadResponse,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DigestResponse: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator makeIterator(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DataResponse: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator makeIterator(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse: org.apache.cassandra.db.ReadCommand access$600(org.apache.cassandra.db.ReadResponse)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: long serializedSizeAsLegacyPartition(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: long serializedSize(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCellName: java.nio.ByteBuffer encode(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: boolean isCounter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: boolean isCounterUpdate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: boolean isTombstone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: boolean isExpiring()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime$Serializer: long serializedSize(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: long getLocalCount(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyUnfilteredPartition fromUnfilteredRowIterator(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: int serializedSizeWithLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void add(org.apache.cassandra.db.LegacyLayout$LegacyBound,org.apache.cassandra.db.LegacyLayout$LegacyBound,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyBound: void <init>(org.apache.cassandra.db.ClusteringBound,boolean,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyUnfilteredPartition: void <init>(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList,java.util.List,org.apache.cassandra.db.LegacyLayout$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: org.apache.cassandra.db.DeletionTime getPartitionDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: java.util.Iterator rangeIterator(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: boolean hasRanges()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.DeletionInfo deletionInfo()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.ImmutableBTreePartition: org.apache.cassandra.db.partitions.ImmutableBTreePartition create(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.utils.Pair fromRowIterator(org.apache.cassandra.config.CFMetaData,java.util.Iterator,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: int maxCellsPerPartition(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: int perPartitionCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: boolean isDistinct()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: int perPartitionCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: int perPartitionCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: boolean isDistinct()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void <init>(org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$3: void <init>(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList,java.util.Iterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.AbstractIterator: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$3: java.util.Iterator initializeRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void addAll(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.utils.Pair access$300(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.utils.Pair fromRow(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$4: void <init>(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_cellsInLegacyOrder_10__506: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: java.lang.Iterable cellsInLegacyOrder(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isCompactTable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isCQLTable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_cellsInLegacyOrder_10__506: java.lang.Iterable bootstrap$(org.apache.cassandra.db.rows.BTreeRow,org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_cellsInLegacyOrder_10__506: void <init>(org.apache.cassandra.db.rows.BTreeRow,org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: java.util.Iterator lambda$cellsInLegacyOrder$10(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: void <init>(org.apache.cassandra.db.rows.BTreeRow,org.apache.cassandra.config.CFMetaData,boolean,org.apache.cassandra.db.rows.BTreeRow$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: void <init>(org.apache.cassandra.db.rows.BTreeRow,org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.marshal.AbstractType getColumnDefinitionNameComparator(org.apache.cassandra.config.ColumnDefinition$Kind)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: java.lang.Object[] access$000(org.apache.cassandra.db.rows.BTreeRow)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator$lambda_new_0__546: com.google.common.base.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator$lambda_new_0__546: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.marshal.AbstractType thriftColumnNameType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isStaticCompactTable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.ColumnDefinition compactValueColumn()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void insertFrom(int,org.apache.cassandra.db.LegacyLayout$LegacyBound,org.apache.cassandra.db.LegacyLayout$LegacyBound,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void addInternal(int,org.apache.cassandra.db.LegacyLayout$LegacyBound,org.apache.cassandra.db.LegacyLayout$LegacyBound,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void setInternal(int,org.apache.cassandra.db.LegacyLayout$LegacyBound,org.apache.cassandra.db.LegacyLayout$LegacyBound,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void moveElements(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void growToFree(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: int capacity()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void grow(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: org.apache.cassandra.db.LegacyLayout$LegacyBound[] grow(org.apache.cassandra.db.LegacyLayout$LegacyBound[],int,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: long[] grow(long[],int,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: int[] grow(int[],int,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void removeInternal(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void <init>(org.apache.cassandra.db.LegacyLayout$LegacyBoundComparator,org.apache.cassandra.db.LegacyLayout$LegacyBound[],org.apache.cassandra.db.LegacyLayout$LegacyBound[],long[],int[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void copyArrays(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList,org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void grow(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.ImmutableBTreePartition: org.apache.cassandra.db.partitions.ImmutableBTreePartition create(org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.ImmutableBTreePartition: org.apache.cassandra.db.partitions.ImmutableBTreePartition create(org.apache.cassandra.db.rows.UnfilteredRowIterator,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder build(org.apache.cassandra.db.rows.UnfilteredRowIterator,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.ImmutableBTreePartition: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void maybeInit()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.rows.UnfilteredRowIterator initializeIterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3$1: org.apache.cassandra.db.rows.UnfilteredRowIterator initializeIterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3: java.util.List access$000(org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator merge(java.util.List,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator access$000(java.util.List,int,org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator create(java.util.List,int,org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: boolean isReverseOrder()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.DeletionTime,int,boolean,org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: void checkForInvalidInput(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: org.apache.cassandra.db.PartitionColumns collectColumns(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: org.apache.cassandra.db.DeletionTime collectPartitionLevelDeletion(java.util.List,org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void closeAll(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$1$1: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void closeQuietly(java.lang.AutoCloseable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Reducer: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void closeInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardIndexedReader: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry$1: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$FileIndexInfoRetriever: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: void closeReader()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmapRebufferer: void closeReader()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: void closeReader()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: void closeReader()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: void put(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: void put(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: void removeFromLocalQueue(org.apache.cassandra.utils.memory.BufferPool$Chunk)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Chunk: org.apache.cassandra.utils.memory.BufferPool$Chunk getParentChunk(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Chunk: org.apache.cassandra.utils.memory.BufferPool$LocalPool access$1100(org.apache.cassandra.utils.memory.BufferPool$Chunk)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: java.lang.Object getAttachment(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: java.lang.String getFilename()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: java.lang.String path()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator$In: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics: void finishCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$Writer: org.apache.cassandra.db.compaction.CompactionInfo getCompactionInfo()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.db.compaction.CompactionInfo getCompactionInfo()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo: long getTotal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CollatedViewIndexBuilder: org.apache.cassandra.db.compaction.CompactionInfo getCompactionInfo()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: boolean remove(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean equals(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: boolean equals(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean equals(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator: long getBytesRead()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator: long getTotalBytes()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.compaction.OperationType,long,long,java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.compaction.OperationType,long,long,org.apache.cassandra.db.compaction.CompactionInfo$Unit,java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator: void maybeInit()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator: long getTotalBytes()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator: java.lang.Iterable iterators()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator$In: long length()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator$In: void maybeInit()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: org.apache.cassandra.io.util.RandomAccessReader open(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: void <init>(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SimpleChunkReader: org.apache.cassandra.io.util.Rebufferer instantiateRebufferer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SimpleChunkReader: void <init>(org.apache.cassandra.io.util.ChannelProxy,long,org.apache.cassandra.io.compress.BufferType,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader$RandomAccessReaderWithOwnChannel: void <init>(org.apache.cassandra.io.util.Rebufferer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: void <init>(org.apache.cassandra.io.util.Rebufferer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.AbstractReaderFileProxy: void <init>(org.apache.cassandra.io.util.ChannelProxy,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: long size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer$Unaligned: void <init>(org.apache.cassandra.io.util.ChunkReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer: void <init>(org.apache.cassandra.io.util.ChunkReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader: org.apache.cassandra.io.compress.BufferType preferredBufferType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader: int chunkSize()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SimpleChunkReader: org.apache.cassandra.io.compress.BufferType preferredBufferType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SimpleChunkReader: int chunkSize()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer get(int,org.apache.cassandra.io.compress.BufferType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer allocate(int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: java.nio.ByteBuffer access$000(org.apache.cassandra.utils.memory.BufferPool$LocalPool,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: java.nio.ByteBuffer allocate(int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer access$1000(int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemory(long,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: java.nio.ByteBuffer get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: org.apache.cassandra.utils.memory.BufferPool$Chunk addChunkFromGlobalPool()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: void addChunk(org.apache.cassandra.utils.memory.BufferPool$Chunk)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$GlobalPool: org.apache.cassandra.utils.memory.BufferPool$Chunk get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: org.apache.cassandra.utils.memory.BufferPool$GlobalPool access$900()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$GlobalPool: boolean allocateMoreChunks()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Debug: void register(org.apache.cassandra.utils.memory.BufferPool$Chunk)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$GlobalPool: long sizeInBytes()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Chunk: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Chunk: java.nio.ByteBuffer get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Chunk: void acquire(org.apache.cassandra.utils.memory.BufferPool$LocalPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean error(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean info(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: org.apache.cassandra.utils.NoSpamLogger access$500()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer access$600(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.nio.ByteBuffer allocateDirectAligned(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: int pageSize()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: long getAddress(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean info(long,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger$1: long nanoTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean log(org.apache.cassandra.utils.NoSpamLogger$Level,java.lang.String,long,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement getStatement(java.lang.String,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement: boolean log(org.apache.cassandra.utils.NoSpamLogger$Level,long,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement: boolean shouldLog(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: org.slf4j.Logger access$000(org.apache.cassandra.utils.NoSpamLogger)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement getStatement(java.lang.String,java.lang.String,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement: void <init>(org.apache.cassandra.utils.NoSpamLogger,java.lang.String,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean error(long,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Chunk: java.nio.ByteBuffer get(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Chunk: int unit()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$Chunk: java.nio.ByteBuffer setAttachment(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: void <init>(java.lang.Object,org.apache.cassandra.utils.concurrent.RefCounted$Tidy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: void setAttachment(java.nio.ByteBuffer,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$State: void <init>(org.apache.cassandra.utils.concurrent.Ref$GlobalState,org.apache.cassandra.utils.concurrent.Ref,java.lang.ref.ReferenceQueue)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$GlobalState: void <init>(org.apache.cassandra.utils.concurrent.RefCounted$Tidy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$GlobalState: void register(org.apache.cassandra.utils.concurrent.Ref$State)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$Debug: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: java.nio.channels.FileChannel openChannel(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: void <init>(java.lang.String,java.nio.channels.FileChannel)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy$Cleanup: void <init>(java.lang.String,java.nio.channels.FileChannel)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SharedCloseableImpl: void <init>(org.apache.cassandra.utils.concurrent.RefCounted$Tidy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator$1: void <init>(org.apache.cassandra.io.sstable.ReducingKeyIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator: org.apache.cassandra.utils.MergeIterator get(java.util.List,java.util.Comparator,org.apache.cassandra.utils.MergeIterator$Reducer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator$1: boolean trivialReduceIsTrivial()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer: boolean trivialReduceIsTrivial()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Reducer: boolean trivialReduceIsTrivial()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$TrivialOneToOne: void <init>(java.util.List,org.apache.cassandra.utils.MergeIterator$Reducer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$OneToOne: void <init>(java.util.List,org.apache.cassandra.utils.MergeIterator$Reducer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$ManyToOne: void <init>(java.util.List,java.util.Comparator,org.apache.cassandra.utils.MergeIterator$Reducer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator: void <init>(java.util.List,org.apache.cassandra.utils.MergeIterator$Reducer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Candidate: void <init>(int,java.util.Iterator,java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: java.lang.Object lowerBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.rows.Unfiltered lowerBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.rows.Unfiltered makeBound(org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.ClusteringBound getMetadataLowerBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.ClusteringBound getPartitionIndexLowerBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.db.RowIndexEntry getCachedPosition(org.apache.cassandra.db.DecoratedKey,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: boolean canUseMetadataLowerBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: org.apache.cassandra.db.ClusteringBound inclusiveOpen(boolean,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: boolean mayHaveTombstones()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int getMinLocalDeletionTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.metadata.StatsMetadata getSSTableMetadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Reducer: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator: long getBytesRead()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator$In: long getFilePointer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo: org.apache.cassandra.db.compaction.CompactionInfo forProgress(long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener: java.net.InetAddress[] access$200(org.apache.cassandra.service.DataResolver$RepairMergeListener)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: java.lang.String getString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: java.lang.String getString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: java.lang.String getString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: java.lang.String getString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: java.lang.String getString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: java.lang.String getString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.EmptyType: java.lang.String getString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.lang.String getString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: int blockFor(org.apache.cassandra.db.Keyspace)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation$MutationSerializer: long serializedSize(org.apache.cassandra.db.Mutation,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.net.MessageOut createMessage(org.apache.cassandra.net.MessagingService$Verb)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.ReadTimeoutException: void <init>(org.apache.cassandra.db.ConsistencyLevel,int,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.AsyncOneResponse sendRR(org.apache.cassandra.net.MessageOut,java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getMaxMutationSize()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.metrics.TableMetrics metricsFor(java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver: boolean access$400()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore getIfExists(java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.utils.Pair getCF(java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.ColumnFamilyStore getColumnFamilyStore(java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ConcurrentBiMap: java.util.Map inverse()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.AsyncOneResponse: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int sendRR(org.apache.cassandra.net.MessageOut,java.net.InetAddress,org.apache.cassandra.net.IAsyncCallback)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int sendRR(org.apache.cassandra.net.MessageOut,java.net.InetAddress,org.apache.cassandra.net.IAsyncCallback,long,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$12: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$13: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$9: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$7: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$8: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$1: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$3: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$6: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$5: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$4: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$10: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb$11: long getTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getWriteRpcTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getRpcTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getReadRpcTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getTruncateRpcTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getRangeRpcTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getCounterWriteRpcTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: org.apache.cassandra.net.MessageOut withParameter(java.lang.String,byte[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void updateBackPressureOnSend(java.net.InetAddress,org.apache.cassandra.net.IAsyncCallback,org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int addCallback(org.apache.cassandra.net.IAsyncCallback,org.apache.cassandra.net.MessageOut,java.net.InetAddress,long,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap: java.lang.Object put(java.lang.Object,java.lang.Object,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.CallbackInfo: void <init>(java.net.InetAddress,org.apache.cassandra.net.IAsyncCallback,org.apache.cassandra.io.IVersionedSerializer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap$CacheableObject: void <init>(java.lang.Object,long,org.apache.cassandra.utils.ExpiringMap$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap$CacheableObject: void <init>(java.lang.Object,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.Clock: long nanoTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: boolean supportsBackPressure()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: org.apache.cassandra.net.BackPressureState getBackPressureState()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean backPressureEnabled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: void waitForStarted()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: void start()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: void <init>(java.net.InetAddress,org.apache.cassandra.net.BackPressureState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void <init>(org.apache.cassandra.net.OutboundTcpConnectionPool,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.net.InetAddress getPreferredIP(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: boolean has(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.net.InetAddress getInetAddress(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet: org.apache.cassandra.cql3.UntypedResultSet$Row one()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: int size()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: void <init>(java.util.List,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: java.util.List requestNames()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: java.net.InetAddress endPoint()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: org.apache.cassandra.utils.CoalescingStrategies$CoalescingStrategy newCoalescingStrategy(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getOtcCoalescingStrategy()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getOtcCoalescingWindow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CoalescingStrategies: org.apache.cassandra.utils.CoalescingStrategies$CoalescingStrategy newCoalescingStrategy(java.lang.String,int,org.slf4j.Logger,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CoalescingStrategies: org.apache.cassandra.utils.CoalescingStrategies$CoalescingStrategy newCoalescingStrategy(java.lang.String,int,org.apache.cassandra.utils.CoalescingStrategies$Parker,org.slf4j.Logger,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics: void <init>(java.net.InetAddress,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.DefaultNameFactory: void <init>(java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Metric register(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,com.codahale.metrics.Metric)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$1: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$2: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$3: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$4: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$5: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$6: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$7: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$8: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$9: void <init>(org.apache.cassandra.metrics.ConnectionMetrics,org.apache.cassandra.net.OutboundTcpConnectionPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Meter meter(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxGauge: void <init>(com.codahale.metrics.Gauge,javax.management.ObjectName,org.apache.cassandra.metrics.CassandraMetricsRegistry$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxCounter: void <init>(com.codahale.metrics.Counter,javax.management.ObjectName,org.apache.cassandra.metrics.CassandraMetricsRegistry$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram: void <init>(com.codahale.metrics.Histogram,javax.management.ObjectName,org.apache.cassandra.metrics.CassandraMetricsRegistry$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter: void <init>(com.codahale.metrics.Metered,javax.management.ObjectName,java.util.concurrent.TimeUnit,org.apache.cassandra.metrics.CassandraMetricsRegistry$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer: void <init>(com.codahale.metrics.Timer,javax.management.ObjectName,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit,org.apache.cassandra.metrics.CassandraMetricsRegistry$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxTimer: void <init>(com.codahale.metrics.Timer,javax.management.ObjectName,java.util.concurrent.TimeUnit,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter: void <init>(com.codahale.metrics.Metered,javax.management.ObjectName,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxMeter: java.lang.String calculateRateUnit(java.util.concurrent.TimeUnit)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$AbstractBean: void <init>(javax.management.ObjectName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxHistogram: void <init>(com.codahale.metrics.Histogram,javax.management.ObjectName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxCounter: void <init>(com.codahale.metrics.Counter,javax.management.ObjectName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry$JmxGauge: void <init>(com.codahale.metrics.Gauge,javax.management.ObjectName)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon$1: void onMeterAdded(java.lang.String,com.codahale.metrics.Meter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: void <init>(org.apache.cassandra.net.MessagingService$Verb,java.lang.Object,org.apache.cassandra.io.IVersionedSerializer,java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: void <init>(java.net.InetAddress,org.apache.cassandra.net.MessagingService$Verb,java.lang.Object,org.apache.cassandra.io.IVersionedSerializer,java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.RequestTimeoutException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,org.apache.cassandra.db.ConsistencyLevel,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.RequestExecutionException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: void <init>(org.apache.cassandra.net.MessagingService$Verb,java.lang.Object,org.apache.cassandra.io.IVersionedSerializer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: java.util.Map getTraceHeaders()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: java.util.UUID getSessionId()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: org.apache.cassandra.tracing.Tracing$TraceType getTraceType()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: byte[] decompose(java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing$TraceType: byte serialize(org.apache.cassandra.tracing.Tracing$TraceType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.DecoratedKey key()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: java.lang.String getKeyspaceName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer: long serializedSize(org.apache.cassandra.db.partitions.PartitionUpdate,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: java.util.Map access$000(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: int rowCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.UnfilteredRowIterator unfilteredIterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer: long serializedSize(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.filter.ColumnFilter,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void <init>(boolean,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: long deletionTimeSerializedSize(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: long serializedSizeForMessaging(org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.filter.ColumnFilter,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: long serializedSize(org.apache.cassandra.db.rows.Unfiltered,org.apache.cassandra.db.SerializationHeader,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: long serializedSizeEndOfPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: long serializedSize(org.apache.cassandra.db.rows.Unfiltered,org.apache.cassandra.db.SerializationHeader,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: boolean isForSSTable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker: org.apache.cassandra.db.rows.Unfiltered$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: org.apache.cassandra.db.rows.Unfiltered$Kind kind()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: long serializedSize(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.SerializationHeader,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: long serializedSize(org.apache.cassandra.db.rows.RangeTombstoneMarker,org.apache.cassandra.db.SerializationHeader,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: long serializedMarkerBodySize(org.apache.cassandra.db.rows.RangeTombstoneMarker,org.apache.cassandra.db.SerializationHeader,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: java.util.List clusteringTypes()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.DeletionTime startDeletionTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.DeletionTime endDeletionTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.DeletionTime deletionTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker: boolean isBoundary()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: boolean isBoundary()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: long timestampSerializedSize(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: long localDeletionTimeSerializedSize(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: long serializedRowBodySize(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.SerializationHeader,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: boolean hasExtendedFlags(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: boolean hasComplexDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: long sizeOfComplexColumn(org.apache.cassandra.db.rows.ComplexColumnData,org.apache.cassandra.config.ColumnDefinition,boolean,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.Columns columns(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: long ttlSerializedSize(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: long serializedSubsetSize(java.util.Collection,org.apache.cassandra.db.Columns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cell$Serializer: long serializedSize(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$column__392: com.google.common.base.Function bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$column__392: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: int serializeLargeSubsetSize(java.util.Collection,int,org.apache.cassandra.db.Columns,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: long encodeBitmap(java.util.Collection,org.apache.cassandra.db.Columns,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: int indexOfCurrent()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSearchIterator: int compareToFirst(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: boolean seekTo(java.lang.Object,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: java.lang.Object bound(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: boolean seekInNode(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: void safeAdvanceIntoBranchFromChild(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeCursor: org.apache.cassandra.utils.btree.NodeCursor boundIterator(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeCursor: org.apache.cassandra.utils.btree.NodeCursor ensureValidLocation(boolean,org.apache.cassandra.utils.btree.NodeCursor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: int cellsCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_hasComplexDeletion_5__309: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: void apply(java.util.function.Consumer,com.google.common.base.Predicate,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedBoolean: void <init>(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedBoolean: boolean get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_hasComplexDeletion_6__310: com.google.common.base.Predicate bootstrap$(org.apache.cassandra.utils.WrappedBoolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_hasComplexDeletion_6__310: void <init>(org.apache.cassandra.utils.WrappedBoolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_hasComplexDeletion_5__309: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Serializer: int serializedSize(org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.rows.EncodingStats access$200(org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.PartitionColumns access$300(org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats: long access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats: int access$100()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void <init>(boolean,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.EncodingStats,java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.UnfilteredRowIterator unfilteredIterator(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.Slices,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.filter.ColumnFilter selection(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.UnfilteredRowIterator unfilteredIterator(org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.Slices,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: org.apache.cassandra.db.Slice get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: org.apache.cassandra.db.Slice get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: org.apache.cassandra.db.Slice get(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.UnfilteredRowIterator sliceIterator(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.Slice,boolean,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.Row staticRow(org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.filter.ColumnFilter,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$SlicesIterator: void <init>(org.apache.cassandra.db.partitions.AbstractBTreePartition,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.Slices,boolean,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.partitions.AbstractBTreePartition$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator noRowsIterator(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.DeletionTime,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator unfilteredRow(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,boolean,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: void <init>(org.apache.cassandra.db.Columns,org.apache.cassandra.db.Columns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredRowIterator: void <init>(org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,boolean,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: org.apache.cassandra.db.Columns 'from'(java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: void <init>(java.lang.Object[],int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder addAll(java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: int findFirstComplexIdx(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int ceilIndex(java.lang.Object[],java.util.Comparator,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder mergeAll(java.lang.Iterable,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: boolean equalComparators(java.util.Comparator,java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: boolean isNaturalComparator(java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder mergeAll(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBaseRowIterator: void <init>(org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,boolean,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$column__312: com.google.common.base.Function bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$column__312: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$SlicesIterator: void <init>(org.apache.cassandra.db.partitions.AbstractBTreePartition,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.Slices,boolean,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$AbstractIterator: void <init>(org.apache.cassandra.db.partitions.AbstractBTreePartition,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.filter.ColumnFilter,boolean,org.apache.cassandra.db.partitions.AbstractBTreePartition$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$AbstractIterator: void <init>(org.apache.cassandra.db.partitions.AbstractBTreePartition,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.filter.ColumnFilter,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.Row,boolean,org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.RowAndDeletionMergeIterator merge(java.util.Iterator,java.util.Iterator,org.apache.cassandra.db.filter.ColumnFilter,boolean,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: java.util.Iterator rangeIterator(org.apache.cassandra.db.Slice,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Dir: org.apache.cassandra.utils.btree.BTree$Dir desc(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: org.apache.cassandra.utils.btree.BTreeSearchIterator slice(java.lang.Object[],java.util.Comparator,java.lang.Object,boolean,java.lang.Object,boolean,org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int higherIndex(java.lang.Object[],java.util.Comparator,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int floorIndex(java.lang.Object[],java.util.Comparator,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: int lowerIndex(java.lang.Object[],java.util.Comparator,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: java.util.Iterator iterator(org.apache.cassandra.db.Slice,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: java.util.Iterator reverseIterator(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: java.util.Iterator forwardIterator(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.RangeTombstone rangeTombstoneWithNewBounds(int,org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: int searchInternal(org.apache.cassandra.db.ClusteringPrefix,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$3: void <init>(org.apache.cassandra.db.RangeTombstoneList,int,int,org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstone: void <init>(org.apache.cassandra.db.Slice,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$4: void <init>(org.apache.cassandra.db.RangeTombstoneList,int,int,org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: boolean canHaveShadowedData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.ImmutableBTreePartition: boolean canHaveShadowedData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowAndDeletionMergeIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.Row,boolean,org.apache.cassandra.db.rows.EncodingStats,java.util.Iterator,java.util.Iterator,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: java.util.Comparator reversed()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: int quorumFor(org.apache.cassandra.db.Keyspace)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: int localQuorumFor(org.apache.cassandra.db.Keyspace,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getLocalDataCenter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DurationSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.InetAddressSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UUIDSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ByteSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.EmptySerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BooleanSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.LongSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DecimalSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DoubleSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.FloatSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.Int32Serializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ShortSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.IntegerSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: java.lang.String toString(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: java.nio.ByteBuffer deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: java.lang.String toString(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.IntegerSerializer: java.math.BigInteger deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.IntegerSerializer: java.lang.String toString(java.math.BigInteger)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ShortSerializer: java.lang.String toString(java.lang.Short)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.Int32Serializer: java.lang.String toString(java.lang.Integer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.FloatSerializer: java.lang.Float deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: float toFloat(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.FloatSerializer: java.lang.String toString(java.lang.Float)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DoubleSerializer: java.lang.Double deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: double toDouble(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DoubleSerializer: java.lang.String toString(java.lang.Double)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DecimalSerializer: java.math.BigDecimal deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DecimalSerializer: java.lang.String toString(java.math.BigDecimal)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.LongSerializer: java.lang.String toString(java.lang.Long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BooleanSerializer: java.lang.Boolean deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.BooleanSerializer: java.lang.String toString(java.lang.Boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: java.lang.String toString(java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: java.lang.String toString(java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.String toString(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UUIDSerializer: java.lang.String toString(java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.EmptySerializer: java.lang.String toString(java.lang.Void)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.lang.String toString(java.util.Date)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: java.lang.String toString(java.lang.Integer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: long dayToTimeInMillis(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: void readFully(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ByteSerializer: java.lang.String toString(java.lang.Byte)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: java.lang.String toString(java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: java.lang.String toString(java.lang.Long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: void leftPadZeros(int,int,java.lang.StringBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.InetAddressSerializer: java.lang.String toString(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DurationSerializer: java.lang.String toString(org.apache.cassandra.cql3.Duration)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: java.lang.String toString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: long append(java.lang.StringBuilder,long,long,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.EmptySerializer: java.lang.Void deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.ByteSerializer: java.lang.Byte deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.UUIDSerializer: java.util.UUID deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: java.util.UUID getUUID(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.String deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String string(java.nio.ByteBuffer,java.nio.charset.Charset)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.util.Date deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: java.lang.Integer deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: java.lang.Long deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.InetAddressSerializer: java.net.InetAddress deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.DurationSerializer: org.apache.cassandra.cql3.Duration deserialize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: org.apache.cassandra.cql3.Duration newInstance(int,int,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: void <init>(int,int,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.AbstractType getAndAppendComparator(int,java.nio.ByteBuffer,java.lang.StringBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer readBytesWithShortLength(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: java.lang.String escape(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: int access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: void tryCloseFD(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryDarwin: int callClose(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryWindows: int callClose(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryLinux: int callClose(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: int errno(java.lang.RuntimeException)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void abort()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable abort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: java.lang.Throwable doPostCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy: java.lang.Throwable doPreCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: java.lang.Throwable doPostCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$TransactionalProxy: java.lang.Throwable doPostCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$TransactionalProxy: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter$TransactionalProxy: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter$TransactionalProxy: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter$TransactionalProxy: java.lang.Throwable doPreCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: java.lang.Throwable doPostCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable doPostCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable doPostCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: java.lang.Throwable doAbort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable doPreCleanup(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: java.lang.Throwable abort(java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$State: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable apply(com.google.common.base.Function,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable notifySSTablesChanged(java.util.Collection,java.util.Collection,org.apache.cassandra.db.compaction.OperationType,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$State: void clear()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.List restoreUpdatedOriginals()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.lang.Throwable abortObsoletion(java.util.List,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.lang.Iterable concatUniq(java.util.Set[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.lang.Iterable filterOut(java.lang.Iterable,java.util.Set[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.lang.Throwable prepareForObsoletion(java.lang.Iterable,org.apache.cassandra.db.lifecycle.LogTransaction,java.util.List,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.lang.Throwable markObsolete(java.util.List,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function updateLiveSet(java.util.Set,java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.lang.Throwable setReplaced(java.lang.Iterable,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: java.lang.Iterable selfRefs(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: java.lang.Throwable release(java.lang.Iterable,java.lang.Throwable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: void release()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$State: void release(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs$1: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void setReplaced()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy access$100(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: boolean access$200(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: boolean access$202(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$4: void <init>(java.util.Set,java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: java.lang.Runnable access$500(org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: java.lang.Runnable access$502(org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy,java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: void access$600(org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: void stopReadMeterPersistence()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier obsoleted(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: java.util.Map makeRemoveRecords(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$Obsoletion: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: java.util.Map makeRecords(org.apache.cassandra.db.lifecycle.LogRecord$Type,java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: java.lang.String getFileName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: java.util.Map make(org.apache.cassandra.db.lifecycle.LogRecord$Type,java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: java.lang.String baseFilename()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: java.util.List getAllFilePaths()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: java.lang.String absolutePath(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: java.util.Map getExistingFiles(java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: org.apache.cassandra.db.lifecycle.LogRecord make(org.apache.cassandra.db.lifecycle.LogRecord$Type,java.util.List,int,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: void <init>(org.apache.cassandra.db.lifecycle.LogRecord$Type,java.lang.String,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lastModified__372: java.util.function.Function bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lambda_make_0__373: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$max__374: java.util.function.BinaryOperator bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$max__374: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lambda_make_0__373: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lastModified__372: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: void <init>(org.apache.cassandra.db.lifecycle.LogRecord$Type,java.lang.String,long,int,long,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$Type: boolean hasFile()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: java.lang.String format()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: long computeChecksum()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$Status: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: java.lang.String absolutePath()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.Spliterator spliterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$init__613: java.lang.Object get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lambda_getExistingFiles_2__375: java.util.function.Function bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lambda_getExistingFiles_4__376: java.io.FilenameFilter bootstrap$(java.util.Set,java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lambda_getExistingFiles_4__376: void <init>(java.util.Set,java.util.Map)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$lambda_getExistingFiles_2__375: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: java.lang.String getCanonicalPath(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: java.lang.String filenameFor(org.apache.cassandra.io.sstable.Component)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Component: java.lang.String name()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: void appendFileName(java.lang.StringBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: org.apache.cassandra.db.lifecycle.LogReplica create(java.io.File,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$append__32: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogReplica)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$append__32: void <init>(org.apache.cassandra.db.lifecycle.LogReplica)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: void <init>(java.io.File,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: int tryOpenDirectory(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryDarwin: int callOpen(java.lang.String,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryWindows: int callOpen(java.lang.String,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryLinux: int callOpen(java.lang.String,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean contains(org.apache.cassandra.db.lifecycle.LogRecord$Type,org.apache.cassandra.io.sstable.SSTable,org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: void add(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void notifyDeleting(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,boolean,org.apache.cassandra.db.lifecycle.LogTransaction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: long bytesOnDisk()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: org.apache.cassandra.utils.concurrent.Ref tryRef()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: org.apache.cassandra.db.lifecycle.Tracker access$200(org.apache.cassandra.db.lifecycle.LogTransaction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: org.apache.cassandra.utils.concurrent.Ref access$300(org.apache.cassandra.db.lifecycle.LogTransaction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$GlobalState: boolean ref()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: void <init>(java.lang.Object,org.apache.cassandra.utils.concurrent.Ref$GlobalState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.notifications.SSTableDeletingNotification: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void handleNotification(org.apache.cassandra.notifications.INotification,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void handleFlushNotification(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void handleDeletingNotification(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void handleRepairStatusChangedNotification(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void handleListChangedNotification(java.lang.Iterable,java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: int compactionStrategyIndexFor(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: boolean maybeReloadDiskBoundaries()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaries: boolean isOutOfDate()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getTableName()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$getDiskBoundaries__395: java.lang.Object get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void startup()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void enable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void disable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: boolean shouldBeEnabled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void setStrategy(org.apache.cassandra.schema.CompactionParams)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: boolean isEnabled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__409: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__410: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.compaction.AbstractCompactionStrategy createCompactionStrategyInstance(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.CompactionParams)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: java.util.Map options()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: java.lang.Class klass()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__410: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__409: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$disable__398: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$disable__397: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$disable__397: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$disable__398: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$enable__412: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$enable__411: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$enable__411: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$enable__412: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.Iterable getSSTables(org.apache.cassandra.db.lifecycle.SSTableSet)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void enable()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.compaction.AbstractCompactionStrategy compactionStrategyFor(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__413: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__414: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__415: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__416: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$lambda_startup_1__417: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$lambda_startup_1__417: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__416: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__415: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__414: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$startup__413: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaries: int getDiskIndex(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaries: int getBoundariesFromSSTableDirectory(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.JsonNode startStrategies()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer: void writeStart(org.codehaus.jackson.JsonNode,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer$lambda_writeStart_0__419: java.lang.Runnable bootstrap$(org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer,java.lang.Object,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer$lambda_writeStart_0__419: void <init>(org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer,java.lang.Object,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.node.ArrayNode compactionStrategyMap(java.util.function.Function)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void describeStrategy(org.codehaus.jackson.node.ObjectNode)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$startStrategy__420: java.util.function.Function bootstrap$(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$startStrategy__420: void <init>(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void forEach(java.util.function.Consumer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_compactionStrategyMap_1__421: java.util.function.Consumer bootstrap$(org.codehaus.jackson.node.ArrayNode,java.util.function.Function)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_compactionStrategyMap_1__421: void <init>(org.codehaus.jackson.node.ArrayNode,java.util.function.Function)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_forEach_0__422: java.util.function.Consumer bootstrap$(java.util.function.Consumer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: java.util.List getStrategies()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_forEach_0__422: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void lambda$forEach$0(java.util.function.Consumer,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$addReplica__619: void accept(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void lambda$compactionStrategyMap$1(org.codehaus.jackson.node.ArrayNode,java.util.function.Function,org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$startStrategy__420: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$shutdownStrategy__445: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.JsonNode shutdownStrategy(org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: java.lang.String getId(org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_getId_3__468: java.util.function.Function bootstrap$(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_getId_3__468: void <init>(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.JsonNode startStrategy(org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: java.util.List getStrategyFolders(org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: boolean isRepaired(org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.JsonNode formatSSTables(org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.compaction.AbstractCompactionStrategy getCompactionStrategyFor(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.util.Set getLiveSSTables()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.JsonNode formatSSTable(org.apache.cassandra.db.compaction.AbstractCompactionStrategy,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.Version: java.lang.String getVersion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long onDiskLength()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.lifecycle.View getView()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: java.util.Set liveSSTables()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void markIndexRemoved(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void setIndexRemoved(java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void forceBlockingFlush(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.ColumnFamilyStore getColumnFamilyStore(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean isUnsafeSystem()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.Object waitOnFuture(java.util.concurrent.Future)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask: java.lang.Object get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SimpleCondition: void await()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SimpleCondition: boolean isSignaled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.UUID getId(java.lang.String,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ConcurrentBiMap: java.lang.Object get(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: org.apache.cassandra.db.lifecycle.LogReplica open(java.io.File)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: void apply()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.schema.KeyspaceMetadata getMetadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: void apply(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: void apply(boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void apply(org.apache.cassandra.db.Mutation,boolean,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: org.apache.cassandra.db.commitlog.CommitLogPosition add(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: boolean updatesAffectView(java.util.Collection,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: void pushViewReplicaUpdates(org.apache.cassandra.db.partitions.PartitionUpdate,boolean,java.util.concurrent.atomic.AtomicLong)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: org.apache.cassandra.db.view.TableViews forTable(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: java.util.Collection getPartitionUpdates()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: java.util.Collection getColumnFamilyIds()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.exceptions.WriteTimeoutException: void <init>(org.apache.cassandra.db.WriteType,org.apache.cassandra.db.ConsistencyLevel,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder: org.apache.cassandra.utils.concurrent.OpOrder$Group start()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: void execute(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: java.util.concurrent.locks.Lock acquireLockFor(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.StageManager: org.apache.cassandra.concurrent.LocalAwareExecutorService getStage(org.apache.cassandra.concurrent.Stage)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace$lambda_applyInternal_0__29: java.lang.Runnable bootstrap$(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.Mutation,boolean,boolean,java.util.concurrent.CompletableFuture)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace$lambda_applyInternal_0__29: void <init>(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.Mutation,boolean,boolean,java.util.concurrent.CompletableFuture)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: void addTask(org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask newTaskFor(java.lang.Runnable,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask newTaskFor(java.lang.Runnable,java.lang.Object,org.apache.cassandra.concurrent.ExecutorLocals)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask: void <init>(org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService,java.lang.Runnable,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask: void <init>(org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService,java.lang.Runnable,java.lang.Object,org.apache.cassandra.concurrent.ExecutorLocals)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask: void <init>(org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService,java.util.concurrent.Callable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SimpleCondition: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SharedExecutorPool: void maybeStartSpinningWorker()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SharedExecutorPool: void schedule(org.apache.cassandra.concurrent.SEPWorker$Work)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: boolean takeWorkPermit(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker$Work: void <init>(org.apache.cassandra.concurrent.SEPExecutor)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: int taskPermits(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: long updateTaskPermits(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: int workPermits(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: boolean hasWaiters()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: long combine(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal: java.lang.Thread access$200(org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker: boolean assign(org.apache.cassandra.concurrent.SEPWorker$Work,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker$Work: boolean isStop()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker: void <init>(java.lang.Long,org.apache.cassandra.concurrent.SEPWorker$Work,org.apache.cassandra.concurrent.SharedExecutorPool)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker$Work: boolean isStopped()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker$Work: boolean isSpinning()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker$Work: boolean canAssign(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker: boolean stop()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker: void stopSpinning()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: boolean maybeSchedule()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPWorker$Work: boolean isWorking()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal: void <init>(org.apache.cassandra.utils.concurrent.WaitQueue,org.apache.cassandra.utils.concurrent.WaitQueue$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal: void <init>(org.apache.cassandra.utils.concurrent.WaitQueue)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$AbstractSignal: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: boolean signal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$RegisteredSignal: boolean isCancelled()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: boolean access$100(org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: boolean register()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: void unlink()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadExecutionController: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator executeLocally(org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.ReadExecutionController executionController()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: java.util.Iterator generateViewUpdates(java.util.Collection,org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.rows.UnfilteredRowIterator,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: org.apache.cassandra.db.SinglePartitionReadCommand readExistingRowsCommand(org.apache.cassandra.db.partitions.PartitionUpdate,java.util.Collection,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: java.util.Collection updatedViews(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.ColumnFamilyStore openAndGetStore(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator getOnlyElement(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void mutateMV(java.nio.ByteBuffer,java.util.Collection,boolean,java.util.concurrent.atomic.AtomicLong,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isStarting()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isJoining()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isMoving()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup: void <init>(int,org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanupCallback)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup: void ackMutation()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Collection pendingEndpointsFor(org.apache.cassandra.dht.Token,java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.metrics.LatencyMetrics: void addNano(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch: org.apache.cassandra.batchlog.Batch createLocal(java.util.UUID,long,java.util.Collection)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: void store(org.apache.cassandra.batchlog.Batch,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_mutateMV_0__389: org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanupCallback bootstrap$(java.util.Collection,java.util.UUID)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUtils: java.util.Optional getViewNaturalEndpoint(java.lang.String,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.service.StorageProxy$WriteResponseHandlerWrapper wrapViewBatchResponseHandler(org.apache.cassandra.db.Mutation,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.db.ConsistencyLevel,java.util.List,java.util.concurrent.atomic.AtomicLong,org.apache.cassandra.db.WriteType,org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void asyncWriteBatchedMutations(java.util.List,java.lang.String,org.apache.cassandra.concurrent.Stage)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: void onFailure(java.net.InetAddress,org.apache.cassandra.exceptions.RequestFailureReason)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void sendToHintedEndpoints(org.apache.cassandra.db.Mutation,java.lang.Iterable,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.String,org.apache.cassandra.concurrent.Stage)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: long currentTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.net.MessageOut createMessage()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int sendRR(org.apache.cassandra.net.MessageOut,java.net.InetAddress,org.apache.cassandra.service.AbstractWriteResponseHandler,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void applyBackPressure(java.lang.Iterable,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void checkHintOverload(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: boolean canDoLocalRequest(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.concurrent.Future submitHint(org.apache.cassandra.db.Mutation,java.util.Collection,org.apache.cassandra.service.AbstractWriteResponseHandler)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$apply__337: java.lang.Runnable bootstrap$(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void performLocally(org.apache.cassandra.concurrent.Stage,java.util.Optional,java.lang.Runnable,org.apache.cassandra.net.IAsyncCallbackWithFailure)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int addCallback(org.apache.cassandra.net.IAsyncCallback,org.apache.cassandra.net.MessageOut,java.net.InetAddress,long,org.apache.cassandra.db.ConsistencyLevel,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.CompactEndpointSerializationHelper: void serialize(java.net.InetAddress,java.io.DataOutput)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void writeByte(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(byte[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void write(byte[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.WriteCallbackInfo: void <init>(java.net.InetAddress,org.apache.cassandra.net.IAsyncCallback,org.apache.cassandra.net.MessageOut,org.apache.cassandra.io.IVersionedSerializer,org.apache.cassandra.db.ConsistencyLevel,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.WriteCallbackInfo: java.lang.Object shouldHint(boolean,org.apache.cassandra.net.MessageOut,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: void maybeExecuteImmediately(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.StageManager$TracingExecutor: void maybeExecuteImmediately(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void maybeExecuteImmediately(java.lang.Runnable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$8: void <init>(java.util.Optional,java.lang.Runnable,org.apache.cassandra.net.IAsyncCallbackWithFailure)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$LocalMutationRunnable: void <init>(java.util.Optional)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: void returnWorkPermit()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: long updateWorkPermits(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.ExecutorLocals: void set(org.apache.cassandra.concurrent.ExecutorLocals)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void set(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn: void set(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn: void set(org.apache.cassandra.service.ClientWarn$State)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void set(org.apache.cassandra.tracing.TraceState)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$CounterCacheSerializer$1: java.lang.Object call()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$RowCacheSerializer$1: java.lang.Object call()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: void onCompletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SimpleCondition: void signalAll()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: org.slf4j.Logger access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy$1: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector$lambda_userFunctionTimeout_0__583: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$closeWriter__568: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$5$1: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_excise_3__532: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$FsyncWritersTask: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$FlushBufferPoolTask: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$lambda_closeAllWriters_0__498: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$FlushBufferTask: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$16: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver$2: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$Flush: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$14: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$replayFailedBatches__401: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker$lambda_submitOverflowSizeRecalculation_0__400: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$lambda_queryMemtableAndSSTablesInTimestampOrder_0__227: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$HintRunnable: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_updatePeerInfo_1__83: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_updateTokens_0__72: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$StrongLeakDetector: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$Visitor: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$LocalMutationRunnable: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace$lambda_applyInternal_0__29: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$updateVersionAndAnnounce__25: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$lambda_maybeScheduleSchemaPull_0__24: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$3: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon$lambda_setup_0__12: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$StreamSessionConnector: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$DroppableRunnable: void run()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: void close()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.slf4j.Logger access$000()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.Descriptor access$900(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.utils.IFilter access$1000(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.sstable.IndexSummary access$1100(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: java.lang.Runnable access$300(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.util.FileHandle access$1200(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.io.util.FileHandle access$1300(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: org.apache.cassandra.utils.concurrent.Ref access$800(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void incrementDroppedMessages(org.apache.cassandra.net.MessagingService$Verb,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$9: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$LocalReadRunnable: void runMayThrow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: void setMonitoringTime(long,boolean,long,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.ReadResponse createResponse(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: boolean complete()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: void response(org.apache.cassandra.db.ReadResponse)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: void onFailure(java.net.InetAddress,org.apache.cassandra.exceptions.RequestFailureReason)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void addLatency(java.net.InetAddress,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getSlowQueryTimeout()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.slf4j.Logger access$100()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void incrementDroppedMessages(org.apache.cassandra.net.MessagingService$Verb,long,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void incrementDroppedMessages(org.apache.cassandra.net.MessagingService$DroppedMessages,long,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void incrementDroppedMessages(org.apache.cassandra.net.MessagingService$DroppedMessages,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: boolean waitingFor(java.net.InetAddress)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: boolean isDatacenterLocal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: org.apache.cassandra.net.MessageIn create(java.net.InetAddress,java.lang.Object,java.util.Map,org.apache.cassandra.net.MessagingService$Verb,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: void <init>(java.net.InetAddress,java.lang.Object,java.util.Map,org.apache.cassandra.net.MessagingService$Verb,int,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.ApproximateTime: long currentTimeMillis()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ResponseResolver: void preprocess(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DigestResolver: void preprocess(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver: boolean isDataPresent()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DigestResolver: boolean isDataPresent()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback$AsyncRepairRunner: void <init>(org.apache.cassandra.service.ReadCallback,org.apache.cassandra.tracing.TraceState,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DataResponse: boolean isDigestResponse()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse: boolean isDigestResponse()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DigestResponse: boolean isDigestResponse()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator: void add(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask: void addSlowOperation(org.apache.cassandra.db.monitoring.Monitorable,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$SlowOperation: void <init>(org.apache.cassandra.db.monitoring.Monitorable,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$OperationsQueue: void access$000(org.apache.cassandra.db.monitoring.MonitoringTask$OperationsQueue,org.apache.cassandra.db.monitoring.MonitoringTask$Operation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$OperationsQueue: void offer(org.apache.cassandra.db.monitoring.MonitoringTask$Operation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$Operation: void <init>(org.apache.cassandra.db.monitoring.Monitorable,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: long constructionTime()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundValidator: void <init>(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator apply(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse: org.apache.cassandra.db.ReadResponse createDigestResponse(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse: org.apache.cassandra.db.ReadResponse createDataResponse(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LocalDataResponse: void <init>(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ReadResponse$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LocalDataResponse: void <init>(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DataResponse: void <init>(org.apache.cassandra.db.ReadCommand,java.nio.ByteBuffer,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LocalDataResponse: java.nio.ByteBuffer build(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer: void serialize(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators: org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer serializerForIntraNode()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredPartitions: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeBoolean(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer: void serialize(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer: void serialize(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.io.util.DataOutputPlus,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredRows: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredRows: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer: void serialize(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.io.util.DataOutputPlus,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredRows: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredRows: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void writeDeletionTime(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: void serializeForMessaging(org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.io.util.DataOutputPlus,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void serialize(org.apache.cassandra.db.rows.Unfiltered,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void writeEndOfPartition(org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void writeWithVIntLength(java.nio.ByteBuffer,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void serialize(org.apache.cassandra.db.rows.Unfiltered,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.io.util.DataOutputPlus,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void serialize(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.io.util.DataOutputPlus,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void serialize(org.apache.cassandra.db.rows.RangeTombstoneMarker,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.io.util.DataOutputPlus,long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer: void serialize(org.apache.cassandra.db.ClusteringBoundOrBoundary,org.apache.cassandra.io.util.DataOutputPlus,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: void serializeValuesWithoutSize(org.apache.cassandra.db.ClusteringPrefix,org.apache.cassandra.io.util.DataOutputPlus,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: long position()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void serializeRowBody(org.apache.cassandra.db.rows.Row,int,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$Serializer: void serialize(org.apache.cassandra.db.Clustering,org.apache.cassandra.io.util.DataOutputPlus,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: void serializeSubset(java.util.Collection,org.apache.cassandra.db.Columns,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$column__308: com.google.common.base.Function bootstrap$()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$lambda_serializeRowBody_0__307: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.rows.UnfilteredSerializer,org.apache.cassandra.utils.SearchIterator,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.SerializationHeader,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$lambda_serializeRowBody_0__307: void <init>(org.apache.cassandra.db.rows.UnfilteredSerializer,org.apache.cassandra.utils.SearchIterator,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.SerializationHeader,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$column__308: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: void serializeLargeSubset(java.util.Collection,int,org.apache.cassandra.db.Columns,int,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Serializer: void serialize(org.apache.cassandra.db.rows.EncodingStats,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: void serialize(org.apache.cassandra.db.Columns,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: void init()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.ClusteringBound closeBound(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.ClusteringBound closeBound(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.DeletionTime updateOpenDeletionTime(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.rows.RangeTombstoneMarker processDataMarker()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.rows.Row garbageFilterRow(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.rows.Unfiltered advance(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: org.apache.cassandra.db.rows.Row consumeNextToMerge()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: org.apache.cassandra.db.rows.Unfiltered consumeNextWrapped()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: boolean hasComplex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: void updateNextToMerge()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Iterable iterable(java.lang.Object[],org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_iterable_0__229: java.util.Iterator iterator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.util.Iterator lambda$iterable$0(java.lang.Object[],org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_iterable_0__229: java.lang.Iterable bootstrap$(java.lang.Object[],org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$lambda_iterable_0__229: void <init>(java.lang.Object[],org.apache.cassandra.utils.btree.BTree$Dir)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: java.util.Iterator lambda$cells$2()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellIterator: void <init>(org.apache.cassandra.db.rows.BTreeRow,org.apache.cassandra.db.rows.BTreeRow$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellIterator: void <init>(org.apache.cassandra.db.rows.BTreeRow)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.db.rows.Unfiltered doCompute()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: org.apache.cassandra.db.rows.Unfiltered nextInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader: org.apache.cassandra.db.rows.Unfiltered nextInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$NoRowsReader: org.apache.cassandra.db.rows.Unfiltered nextInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void access$200(org.apache.cassandra.db.columniterator.AbstractSSTableIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader: boolean hasNextInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardIndexedReader: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader: org.apache.cassandra.db.rows.Unfiltered handlePreSliceData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: int compareNextTo(org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: int compareNextTo(org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: boolean nextIsRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: boolean nextIsRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: void skipNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: void skipNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: org.apache.cassandra.db.rows.Unfiltered readNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: org.apache.cassandra.db.rows.Unfiltered readNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader: void updateOpenMarker(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: boolean isOpen(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.DeletionTime openDeletionTime(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker: boolean isOpen(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.DeletionTime openDeletionTime(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: boolean isOpen(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: boolean isOpen(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: boolean isEnd()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: org.apache.cassandra.db.ClusteringBoundOrBoundary deserializeNextBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: org.apache.cassandra.db.Clustering deserializeNextClustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: org.apache.cassandra.db.rows.RangeTombstoneMarker deserializeMarkerBody(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.ClusteringBoundOrBoundary)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: org.apache.cassandra.db.rows.Row deserializeRowBody(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,int,int,org.apache.cassandra.db.rows.Row$Builder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: org.apache.cassandra.db.rows.Unfiltered$Kind kind(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.DeletionTime readDeletionTime(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: int readLocalDeletionTime(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: int readTTL(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: long readTimestamp(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: void apply(java.util.function.Consumer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: org.apache.cassandra.db.Columns deserializeSubset(org.apache.cassandra.db.Columns,org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: boolean isStatic(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: org.apache.cassandra.db.LivenessInfo withExpirationTime(long,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$lambda_deserializeRowBody_1__341: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.rows.UnfilteredSerializer,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.rows.Row$Builder,org.apache.cassandra.db.LivenessInfo,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer$lambda_deserializeRowBody_1__341: void <init>(org.apache.cassandra.db.rows.UnfilteredSerializer,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.rows.Row$Builder,org.apache.cassandra.db.LivenessInfo,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiredLivenessInfo: void <init>(long,int,int,org.apache.cassandra.db.LivenessInfo$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: org.apache.cassandra.db.Columns deserializeLargeSubset(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.Columns,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: void <init>(java.lang.Object[],int,org.apache.cassandra.db.Columns$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: void <init>(java.lang.Object[],org.apache.cassandra.db.Columns$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: java.lang.Object[] access$200(org.apache.cassandra.db.Columns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: void <init>(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: void deserializeAll()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: boolean deserializeOne()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.nio.ByteBuffer readValue(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: boolean access$000(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: boolean access$100(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getMaxValueSize()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: boolean isEmpty(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: boolean isNull(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: org.apache.cassandra.db.ClusteringBoundOrBoundary create(org.apache.cassandra.db.ClusteringPrefix$Kind,java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: long bytesReadForNextAtom()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: long currentPosition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: org.apache.cassandra.db.rows.Unfiltered peek()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: boolean isStatic(org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: boolean isRow(org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone asRangeTombstone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone asRangeTombstone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: boolean hasOpeningMarkerBefore(org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator: org.apache.cassandra.db.LegacyLayout$LegacyAtom peek()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: org.apache.cassandra.db.rows.Unfiltered popOpeningMarker()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: boolean hasClosingMarkerBefore(org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: org.apache.cassandra.db.rows.Unfiltered popClosingMarker()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator: org.apache.cassandra.db.LegacyLayout$LegacyAtom next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: boolean isShadowed(org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: void openNew(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: boolean hasOpenTombstones()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: org.apache.cassandra.db.rows.Unfiltered popMarker()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: org.apache.cassandra.db.rows.Unfiltered readRow(org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: boolean isStatic()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: boolean isStatic()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: org.apache.cassandra.db.rows.Row getRow()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: boolean addAtom(org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: void reset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: org.apache.cassandra.db.LegacyLayout$CellGrouper staticGrouper(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.rows.SerializationHelper,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: boolean addCell(org.apache.cassandra.db.LegacyLayout$LegacyCell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: org.apache.cassandra.db.LegacyLayout$LegacyCell asCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: boolean isCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: org.apache.cassandra.db.LegacyLayout$LegacyCell asCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: boolean isCell()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: boolean addRangeTombstone(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: boolean addRowTombstone(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: boolean isCollectionTombstone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: boolean isRowDeletion(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: boolean addGenericRangeTombstone(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: boolean addCollectionTombstone(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyBound: org.apache.cassandra.db.Clustering getAsClustering(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: boolean includes(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: boolean fetches(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: boolean contains(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: boolean contains(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isIndex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: void startOfComplexColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: boolean includes(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: boolean isDropped(org.apache.cassandra.db.rows.Cell,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: void endOfComplexColumn()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: org.apache.cassandra.db.LivenessInfo create(long,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath: org.apache.cassandra.db.rows.CellPath create(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath$SingleItemCellPath: void <init>(java.nio.ByteBuffer,org.apache.cassandra.db.rows.CellPath$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath$SingleItemCellPath: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: org.apache.cassandra.db.LivenessInfo create(long,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: org.apache.cassandra.db.LivenessInfo expiring(long,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ExpirationDateOverflowHandling: int computeLocalExpirationTime(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Tester: boolean fetches(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Tester: boolean hasSubselection(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Slice: int compareInclusionOf(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Element: int compareInclusionOf(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.filter.ColumnFilter$Tester newTester(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Tester: void <init>(boolean,java.util.Iterator,org.apache.cassandra.db.filter.ColumnFilter$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Tester: void <init>(boolean,java.util.Iterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$readAtom__586: java.lang.Object get()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: org.apache.cassandra.db.LegacyLayout$LegacyAtom readAtom()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyAtom readLegacyAtom(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.ColumnDefinition getDroppedColumnDefinition(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone readLegacyRangeTombstoneBody(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyCell readLegacyCellBody(org.apache.cassandra.config.CFMetaData,java.io.DataInput,java.nio.ByteBuffer,int,org.apache.cassandra.db.rows.SerializationHelper$Flag,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: long readLong()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: int readInt()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: void <init>(org.apache.cassandra.db.LegacyLayout$LegacyCell$Kind,org.apache.cassandra.db.LegacyLayout$LegacyCellName,java.nio.ByteBuffer,long,int,int,org.apache.cassandra.db.LegacyLayout$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: java.nio.ByteBuffer createUpdate(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: java.nio.ByteBuffer clearAllLocal(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: boolean shouldClearLocal(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer readWithLength(java.io.DataInput)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyCellName decodeCellName(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.ColumnDefinition getColumnDefinition(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCellName: void <init>(org.apache.cassandra.db.Clustering,org.apache.cassandra.config.ColumnDefinition,java.nio.ByteBuffer,org.apache.cassandra.db.LegacyLayout$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnknownColumnException: void <init>(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.Clustering decodeClustering(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: java.nio.ByteBuffer extractComponent(java.nio.ByteBuffer,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyCellName decodeForSuperColumn(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.Clustering,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCellName: void <init>(org.apache.cassandra.db.Clustering,org.apache.cassandra.config.ColumnDefinition,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: boolean isStaticName(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: java.util.List splitName(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnknownColumnException: java.lang.String stringify(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: void <init>(org.apache.cassandra.db.LegacyLayout$LegacyCell$Kind,org.apache.cassandra.db.LegacyLayout$LegacyCellName,java.nio.ByteBuffer,long,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime$Serializer: org.apache.cassandra.db.DeletionTime deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: void <init>(org.apache.cassandra.db.LegacyLayout$LegacyBound,org.apache.cassandra.db.LegacyLayout$LegacyBound,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyBound decodeBound(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: byte lastEOC(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringPrefix$Kind boundKind(boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.ColumnDefinition getDroppedColumnDefinition(java.nio.ByteBuffer,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.config.ColumnDefinition staticDef(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.config.ColumnDefinition regularDef(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: void <init>(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType,int,org.apache.cassandra.config.ColumnDefinition$Kind)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: void <init>(java.lang.String,java.lang.String,org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType,int,org.apache.cassandra.config.ColumnDefinition$Kind)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: org.apache.cassandra.cql3.ColumnIdentifier getInterned(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: boolean isInterned()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnSpecification: void <init>(java.lang.String,java.lang.String,org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: java.util.Comparator makeCellPathComparator(org.apache.cassandra.config.ColumnDefinition$Kind,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$lambda_new_1__165: java.util.Comparator bootstrap$(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$lambda_new_2__166: java.util.Comparator bootstrap$(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: long comparisonOrder(org.apache.cassandra.config.ColumnDefinition$Kind,boolean,long,org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$lambda_new_2__166: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$lambda_new_1__165: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$1: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.rows.RangeTombstoneMarker withNewOpeningDeletionTime(boolean,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.rows.RangeTombstoneMarker withNewOpeningDeletionTime(boolean,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: void add(org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundMarker withNewOpeningDeletionTime(boolean,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker withNewOpeningDeletionTime(boolean,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: boolean access$500(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator,org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker$lambda_isShadowed_1__588: com.google.common.base.Predicate bootstrap$(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker$lambda_isShadowed_1__588: void <init>(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: org.apache.cassandra.db.ClusteringPrefix clustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: org.apache.cassandra.db.ClusteringPrefix clustering()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.ClusteringBound openBound(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.ClusteringBound openBound(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundary: org.apache.cassandra.db.ClusteringBound openBound(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: org.apache.cassandra.db.ClusteringPrefix$Kind openBoundOfBoundary(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator access$200(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator: org.apache.cassandra.db.LegacyLayout$LegacyAtom access$300(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: org.apache.cassandra.db.ClusteringPrefix$Kind skipNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void skipMarkerBody(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void skipRowBody(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: void skipValue(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void skipWithVIntLength(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: void prepareNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: void prepare(int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: boolean isEndOfPartition(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: int readExtendedFlags(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: int readUnsignedByte()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: boolean isExtended(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: org.apache.cassandra.db.ClusteringPrefix$Kind[] values()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: int compareNextTo(org.apache.cassandra.db.ClusteringBoundOrBoundary)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: boolean hasComponent(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: void updateBlock()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: boolean isDone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: int currentBlockIdx()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: org.apache.cassandra.io.util.DataPosition mark()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader: void seekToPosition(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: long columnOffset(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: org.apache.cassandra.io.sstable.IndexInfo currentIndex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: boolean isPastCurrentBlock()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: void setToBlock(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: void clearState()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: void clearState()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: boolean nextIsStatic()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: boolean nextIsStatic()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: org.apache.cassandra.io.sstable.IndexInfo index(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry$1: org.apache.cassandra.io.sstable.IndexInfo columnsIndex(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$FileIndexInfoRetriever: org.apache.cassandra.io.sstable.IndexInfo columnsIndex(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowInfoRetriever: org.apache.cassandra.io.sstable.IndexInfo fetchIndex(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyIndexInfoRetriever: org.apache.cassandra.io.sstable.IndexInfo fetchIndex(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo$Serializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo$Serializer: org.apache.cassandra.io.sstable.IndexInfo deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: boolean readBoolean()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$1: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$NewFormatSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: boolean readBoolean()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo: void <init>(org.apache.cassandra.db.ClusteringPrefix,org.apache.cassandra.db.ClusteringPrefix,long,long,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$NewFormatSerializer: org.apache.cassandra.db.ClusteringPrefix deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: int correspondingMessagingVersion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: org.apache.cassandra.db.ClusteringPrefix deserialize(org.apache.cassandra.io.util.DataInputPlus,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: byte readByte()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$Serializer: org.apache.cassandra.db.Clustering deserialize(org.apache.cassandra.io.util.DataInputPlus,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer: org.apache.cassandra.db.ClusteringBoundOrBoundary deserializeValues(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.ClusteringPrefix$Kind,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: java.nio.ByteBuffer[] deserializeValuesWithoutSize(org.apache.cassandra.io.util.DataInputPlus,int,int,java.util.List)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$1: org.apache.cassandra.db.ClusteringPrefix deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.List clusteringColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers: org.apache.cassandra.config.CFMetaData access$000(org.apache.cassandra.db.Serializers)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: org.apache.cassandra.io.sstable.IndexInfo[] access$800(org.apache.cassandra.db.RowIndexEntry$IndexedEntry)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: void clearState()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: void clearState()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator: void clearState()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader: void createDeserializer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.util.FileDataInput getFileDataInput(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: org.apache.cassandra.io.util.RandomAccessReader createReader()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: org.apache.cassandra.io.util.RandomAccessReader createReader(com.google.common.util.concurrent.RateLimiter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: org.apache.cassandra.io.util.Rebufferer instantiateRebufferer(com.google.common.util.concurrent.RateLimiter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.LimitingRebufferer: void <init>(org.apache.cassandra.io.util.Rebufferer,com.google.common.util.concurrent.RateLimiter,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: org.apache.cassandra.io.util.Rebufferer instantiateRebufferer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader: org.apache.cassandra.io.util.Rebufferer instantiateRebufferer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmapRebufferer: org.apache.cassandra.io.util.Rebufferer instantiateRebufferer()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferManagingRebufferer$Aligned: void <init>(org.apache.cassandra.io.util.ChunkReader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: boolean access$100(org.apache.cassandra.db.columniterator.AbstractSSTableIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer: org.apache.cassandra.db.UnfilteredDeserializer create(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.UnfilteredDeserializer$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime,boolean,org.apache.cassandra.db.UnfilteredDeserializer$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$readAtom__586: java.util.function.Supplier bootstrap$(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.rows.SerializationHelper,java.util.function.Supplier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$CellGrouper: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: void <init>(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator: void <init>(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator,java.util.function.Supplier,org.apache.cassandra.db.UnfilteredDeserializer$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$AtomIterator: void <init>(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator,java.util.function.Supplier)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker$lambda_new_0__587: java.util.Comparator bootstrap$(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker$lambda_new_0__587: void <init>(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$readAtom__586: void <init>(org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Deserializer: void <init>(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader$BufferedRandomAccessFileMark: void <init>(long,org.apache.cassandra.io.util.RandomAccessReader$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader$BufferedRandomAccessFileMark: void <init>(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: long bytesReadForUnconsumedData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$CurrentDeserializer: long bytesReadForUnconsumedData()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: long bytesPastMark(org.apache.cassandra.io.util.DataPosition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$NoRowsReader: boolean hasNextInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: boolean hasNextInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader: boolean hasNextInternal()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader: void readCurrentBlock(boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData createBuffer(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: int blocksCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: void setIterator(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: void loadFromDisk(org.apache.cassandra.db.ClusteringBound,org.apache.cassandra.db.ClusteringBound,boolean,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData: void reset()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData: void add(org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData: void build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: boolean stopReadingDisk()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader: boolean stopReadingDisk()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo$Builder: org.apache.cassandra.db.MutableDeletionInfo build()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.ImmutableBTreePartition: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.Row,java.lang.Object[],org.apache.cassandra.db.DeletionInfo,org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo$Builder: void add(org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.DeletionTime closeDeletionTime(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: boolean isClose(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.DeletionTime closeDeletionTime(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker: boolean isClose(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: boolean isClose(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: boolean isClose(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundary: org.apache.cassandra.db.ClusteringBound closeBound(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Kind: org.apache.cassandra.db.ClusteringPrefix$Kind closeBoundOfBoundary(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: org.apache.cassandra.db.MutableDeletionInfo$Builder builder(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.ClusteringComparator,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo$Builder: void <init>(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.ClusteringComparator,boolean,org.apache.cassandra.db.MutableDeletionInfo$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo$Builder: void <init>(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.ClusteringComparator,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: void <init>(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: void <init>(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.RangeTombstoneList)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$SkipLastIterator: void <init>(java.util.Iterator,org.apache.cassandra.db.columniterator.SSTableReversedIterator$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData: org.apache.cassandra.db.partitions.ImmutableBTreePartition access$300(org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices: org.apache.cassandra.db.Slices 'with'(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$SkipLastIterator: void <init>(java.util.Iterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: long percentile(double)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.utils.EstimatedHistogram getEstimatedColumnCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData: void <init>(org.apache.cassandra.db.columniterator.SSTableReversedIterator,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.PartitionColumns,int,org.apache.cassandra.db.columniterator.SSTableReversedIterator$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReusablePartitionData: void <init>(org.apache.cassandra.db.columniterator.SSTableReversedIterator,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.PartitionColumns,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: org.apache.cassandra.utils.btree.BTree$Builder builder(java.util.Comparator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: long count()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: void setForSlice(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader: void setForSlice(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: int findBlockIndex(org.apache.cassandra.db.ClusteringBound,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: int indexFor(org.apache.cassandra.db.ClusteringPrefix,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: java.util.Comparator indexComparator(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: int binarySearch(org.apache.cassandra.io.sstable.IndexInfo,java.util.Comparator,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_2__181: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator$lambda_new_1__180: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int lambda$new$1(org.apache.cassandra.io.sstable.IndexInfo,org.apache.cassandra.io.sstable.IndexInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int lambda$new$2(org.apache.cassandra.io.sstable.IndexInfo,org.apache.cassandra.io.sstable.IndexInfo)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator: boolean hasMoreSlices()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator: boolean hasMoreSlices()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void slice(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.Slice nextSlice()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator: int nextSliceIndex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator: int nextSliceIndex()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader: void setForSlice(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardIndexedReader: void setForSlice(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$NoRowsReader: void setForSlice(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.db.rows.Row removeShadowedCells(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.DeletionTime,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cells: void addNonShadowed(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.rows.Row$Builder,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cells: void addNonShadowedComplex(org.apache.cassandra.config.ColumnDefinition,java.util.Iterator,java.util.Iterator,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.rows.Row$Builder,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int getMinTTL()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats: void <init>(long,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse: void <init>(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DigestResponse: void <init>(java.nio.ByteBuffer,org.apache.cassandra.db.ReadResponse$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse: java.nio.ByteBuffer makeDigest(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.security.MessageDigest threadLocalMD5Digest()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators: void digest(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,java.security.MessageDigest,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators: void digest(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.rows.UnfilteredRowIterator,java.security.MessageDigest,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyUnfilteredPartition: void digest(org.apache.cassandra.config.CFMetaData,java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void updateWithBoolean(java.security.MessageDigest,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void updateWithByte(java.security.MessageDigest,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator$CountingDigest: void engineUpdate(byte)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void updateDigest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyCell: byte serializationFlags()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: void updateDigest(java.security.MessageDigest,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void updateWithLong(java.security.MessageDigest,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void updateWithInt(java.security.MessageDigest,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator$CountingDigest: void engineUpdate(byte[],int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: boolean isUpdate(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: boolean equals(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: void digest(java.security.MessageDigest,java.util.Set)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractClusteringPrefix: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo$ExpiringLivenessInfo: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath: void digest(java.security.MessageDigest)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer: org.apache.cassandra.db.rows.UnfilteredRowIterator deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer: org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$Header deserializeHeader(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer: org.apache.cassandra.db.rows.UnfilteredRowIterator deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.rows.SerializationHelper$Flag,org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$Header)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator unfilteredRow(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: void <init>(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$1: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.Row,boolean,org.apache.cassandra.db.rows.EncodingStats,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: void <init>(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.rows.SerializationHelper$Flag,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$Header: void <init>(org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.DecoratedKey,boolean,boolean,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.rows.Row,int,org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: org.apache.cassandra.db.SerializationHeader deserializeForMessaging(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.filter.ColumnFilter,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: org.apache.cassandra.db.rows.Row deserializeStaticRow(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer readWithVIntLength(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$Header: void <init>(org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.DecoratedKey,boolean,boolean,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.rows.Row,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats$Serializer: org.apache.cassandra.db.rows.EncodingStats deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$Serializer: org.apache.cassandra.db.Columns deserialize(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void <init>(boolean,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.EncodingStats,java.util.Map,org.apache.cassandra.db.SerializationHeader$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger: org.apache.cassandra.db.rows.UnfilteredRowIterator maybeWrap(org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.filter.ClusteringIndexFilter clusteringIndexFilter(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: org.apache.cassandra.db.Slices getSlices(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: org.apache.cassandra.db.Slices getSlices(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.filter.ClusteringIndexFilter clusteringIndexFilter(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder: void <init>(org.apache.cassandra.db.ClusteringComparator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.Slice make(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: java.nio.ByteBuffer[] extractValues(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.db.filter.ClusteringIndexFilter clusteringIndexFilter(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: org.apache.cassandra.db.filter.ClusteringIndexFilter clusteringIndexFilter(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: org.apache.cassandra.db.filter.ClusteringIndexFilter forPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: org.apache.cassandra.db.filter.ClusteringIndexFilter forPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.db.PartitionPosition startKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: org.apache.cassandra.db.filter.ClusteringIndexSliceFilter forPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: org.apache.cassandra.db.Slices forPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: org.apache.cassandra.db.Slices forPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: org.apache.cassandra.db.Slices forPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.Slice forPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringBound exclusiveEndOf(java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: org.apache.cassandra.db.ClusteringBound exclusiveStartOf(java.nio.ByteBuffer[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: org.apache.cassandra.db.Slices forReversePaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: org.apache.cassandra.db.Slices forForwardPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: org.apache.cassandra.db.filter.ClusteringIndexNamesFilter forPaging(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: java.util.NavigableSet headSet(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: java.util.NavigableSet tailSet(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.NavigableSet headSet(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: void <init>(java.util.NavigableSet,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: java.util.NavigableSet descendingSet()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.NavigableSet descendingSet()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSet descendingSet()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: org.apache.cassandra.utils.btree.BTreeSet descendingSet()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeDescRange: void <init>(org.apache.cassandra.utils.btree.BTreeSet$BTreeRange)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: void <init>(java.lang.Object[],java.util.Comparator,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: void <init>(java.lang.Object[],java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: void <init>(java.lang.Object[],java.util.Comparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: void <init>(java.lang.Object[],java.util.Comparator,java.lang.Object,boolean,java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSet tailSet(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: org.apache.cassandra.utils.btree.BTreeSet tailSet(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: void <init>(org.apache.cassandra.utils.btree.BTreeSet$BTreeRange,org.apache.cassandra.utils.btree.BTreeSet$BTreeRange)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSet headSet(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: org.apache.cassandra.utils.btree.BTreeSet headSet(java.lang.Object,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,int,org.apache.cassandra.thrift.ThriftResultsMerger$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,int,org.apache.cassandra.thrift.ThriftResultsMerger$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.rows.UnfilteredRowIterator apply(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.UnfilteredRows mutable(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.BaseIterator add(org.apache.cassandra.db.transform.BaseIterator,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BasePartitions: void add(org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: void add(org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredRows: void add(org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector: org.apache.cassandra.db.DeletionTime applyToDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WithOnlyQueriedData: org.apache.cassandra.db.PartitionColumns applyToPartitionColumns(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: org.apache.cassandra.db.DeletionTime applyToDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.DeletionTime applyToDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.PartitionColumns applyToPartitionColumns(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack: void add(org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1FilterNotIndexed: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter$1FilterNotIndexed: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: void attachTo(org.apache.cassandra.db.transform.BaseRows)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$Pager: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WithOnlyQueriedData: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1MetricRecording: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.StoppingTransformation: void attachTo(org.apache.cassandra.db.transform.BaseRows)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.DecoratedKey applyToPartitionKey(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Filter: org.apache.cassandra.db.rows.Row applyToStatic(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: void attachTo(org.apache.cassandra.db.transform.BaseRows)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: org.apache.cassandra.db.rows.Unfiltered applyOne(org.apache.cassandra.db.rows.Unfiltered,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$CheckForAbort: boolean maybeAbort()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$CheckForAbort: void maybeDelayForTesting()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: int access$400()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void sleepQuietly(long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: boolean isAborted()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.StoppingTransformation: void stop()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.StoppingTransformation: void stopInPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: void check()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: boolean abort()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask: void addFailedOperation(org.apache.cassandra.db.monitoring.Monitorable,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$FailedOperation: void <init>(org.apache.cassandra.db.monitoring.Monitorable,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row purge(org.apache.cassandra.db.DeletionPurger,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$Purger: void updateProgress()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: void updateProgress()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: long access$608(org.apache.cassandra.db.compaction.CompactionIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: void access$700(org.apache.cassandra.db.compaction.CompactionIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: void updateBytesRead()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: boolean hasDeletion(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_purge_9__210: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.DeletionPurger,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_purge_9__210: void <init>(org.apache.cassandra.db.DeletionPurger,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundMarker createCorrespondingCloseMarker(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundMarker createCorrespondingOpenMarker(boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1MetricRecording: void countTombstone(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.TombstoneOverwhelmingException: void <init>(int,java.lang.String,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.TombstoneOverwhelmingException: java.lang.String makePKString(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: java.nio.ByteBuffer[] split(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: void appendCQLWhereClause(java.lang.StringBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: void appendCQLWhereClause(java.lang.StringBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: boolean isUnrestricted()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: boolean isUnrestricted()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: java.lang.String toCQLString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: boolean isMinimum()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: boolean isStartInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: boolean isStartInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: boolean isStartInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean isStartInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: boolean isEndInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: boolean isEndInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: boolean isEndInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean isEndInclusive()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: java.lang.String toCQLString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: boolean isMinimum()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: java.lang.String toCQLString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: void appendClause(org.apache.cassandra.db.PartitionPosition,java.lang.StringBuilder,org.apache.cassandra.config.CFMetaData,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.db.PartitionPosition stopKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: boolean selectsAllPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: boolean selectsAllPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: boolean hasUpperBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: boolean hasLowerBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: boolean hasLowerBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: boolean hasLowerBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: boolean hasUpperBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: boolean hasUpperBound()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token: boolean isMinimum()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Token: org.apache.cassandra.dht.Token minValue()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner: org.apache.cassandra.dht.Token getMinimumToken()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: org.apache.cassandra.dht.Token getMinimumToken()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: org.apache.cassandra.dht.LocalPartitioner$LocalToken getMinimumToken()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner: org.apache.cassandra.dht.Murmur3Partitioner$LongToken getMinimumToken()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.List partitionKeyColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: java.lang.String toCQLString(java.lang.Iterable)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: java.lang.String getOperator(boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: void appendKeyString(java.lang.StringBuilder,org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: java.lang.String toCQLString(java.util.Iterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: java.lang.String toCQLString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: java.lang.String toCQLString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: java.lang.String toCQLString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.AbstractClusteringIndexFilter: void appendOrderByToCQLString(org.apache.cassandra.config.CFMetaData,java.lang.StringBuilder)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices$ComponentOfSlice: boolean isEQ()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices$ComponentOfSlice: org.apache.cassandra.db.Slices$ArrayBackedSlices$ComponentOfSlice fromSlice(int,org.apache.cassandra.db.Slice)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices$ComponentOfSlice: void <init>(boolean,java.nio.ByteBuffer,boolean,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row withOnlyQueriedData(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_withOnlyQueriedData_4__232: void <init>(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger: org.apache.cassandra.db.rows.Cell makeDynamicCell(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger: java.util.Iterator simpleCellsIterator(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.ComplexColumnData getComplexColumnData(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger$1: void <init>(org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger,java.util.Iterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: org.apache.cassandra.db.DecoratedKey access$400(org.apache.cassandra.service.pager.AbstractQueryPager)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: int access$602(org.apache.cassandra.service.pager.AbstractQueryPager,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: org.apache.cassandra.db.DecoratedKey access$402(org.apache.cassandra.service.pager.AbstractQueryPager,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: boolean isLive(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: void incrementRowCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupMaker$PkPrefixGroupMaker: boolean isNewGroup(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupMaker$1: boolean isNewGroup(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: void incrementRowCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: boolean isDoneForPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: void incrementGroupInCurrentPartitionCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: void incrementGroupCount()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: boolean isDone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression: boolean isSatisfiedBy(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CustomExpression: boolean isSatisfiedBy(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$SimpleExpression: boolean isSatisfiedBy(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftExpression: boolean isSatisfiedBy(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean enforceStrictLiveness()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: org.apache.cassandra.db.view.View getByName(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operator: boolean isSatisfiedBy(org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: org.apache.cassandra.db.Clustering access$200(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: org.apache.cassandra.db.Clustering makeCompactClustering(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: int compareForCQL(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: int compareForCQL(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: boolean startsWith(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: boolean endsWith(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: boolean contains(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: boolean startsWith(java.nio.ByteBuffer,java.nio.ByteBuffer,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: java.lang.Object compose(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: java.nio.ByteBuffer getSerializedValue(java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression: java.nio.ByteBuffer getValue(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Cell getCell(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: long total(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.Cell getCell(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: java.util.Comparator asymmetricCellPathComparator()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: java.lang.Long compose(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker: java.lang.String toString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: java.lang.String toString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundValidator$RowsTransformation: java.lang.IllegalStateException ise(java.lang.String)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: java.lang.String toString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: java.lang.String toString(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices$InForwardOrderTester: boolean includes(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices$InReverseOrderTester: boolean includes(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices$1: boolean includes(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices$1: boolean includes(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: org.apache.cassandra.db.Slice[] access$600(org.apache.cassandra.db.Slices$ArrayBackedSlices)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: java.util.NavigableSet access$100(org.apache.cassandra.db.filter.ClusteringIndexNamesFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.io.sstable.metadata.MetadataCollector updateClusteringValues(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: java.nio.ByteBuffer min(java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: java.nio.ByteBuffer maybeMinimize(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: java.nio.ByteBuffer max(java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits$PagingGroupByAwareCounter: void applyToPartition(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits$PagingAwareCounter: void applyToPartition(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: boolean isDoneForPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: void applyToPartition(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: void applyToPartition(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: boolean isDoneForPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: void applyToPartition(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: boolean isDone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupingState: java.nio.ByteBuffer partitionKey()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: boolean isDone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack: java.lang.Object[] resize(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: void attachTo(org.apache.cassandra.db.transform.BasePartitions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.StoppingTransformation: void attachTo(org.apache.cassandra.db.transform.BasePartitions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: void attachTo(org.apache.cassandra.db.transform.BasePartitions)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BasePartitions: org.apache.cassandra.db.rows.BaseRowIterator applyOne(org.apache.cassandra.db.rows.BaseRowIterator,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.MoreRows: org.apache.cassandra.db.rows.UnfilteredRowIterator extend(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.transform.MoreRows,org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.transform.RTBoundCloser$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.UnfilteredRows wrapIterator(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.BaseIterator add(org.apache.cassandra.db.transform.BaseIterator,org.apache.cassandra.db.transform.MoreContents)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack: void add(org.apache.cassandra.db.transform.MoreContents)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack$MoreContentsHolder: void <init>(org.apache.cassandra.db.transform.MoreContents,int,org.apache.cassandra.db.transform.Stack$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack$MoreContentsHolder: void <init>(org.apache.cassandra.db.transform.MoreContents,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredRows: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: void <init>(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseIterator: void <init>(org.apache.cassandra.utils.CloseableIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseIterator$Stop: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$CheckForAbort: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$Purger: void onEmptyPartitionPostPurge(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$Purger: void onNewPartition(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: void onEmptyPartitionPostPurge(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: void onNewPartition(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.db.compaction.OperationType access$300(org.apache.cassandra.db.compaction.CompactionIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1MetricRecording: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$PartitionMerger: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: org.apache.cassandra.db.rows.UnfilteredRowIterator getUnfilteredRowIterator(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.partitions.Partition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: org.apache.cassandra.db.rows.UnfilteredRowIterator getUnfilteredRowIterator(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.partitions.Partition)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$1: java.lang.Object next(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.EncodingStats stats()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.DeletionTime partitionLevelDeletion()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.utils.SearchIterator searchIterator(org.apache.cassandra.db.filter.ColumnFilter,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1: void <init>(org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.Row,boolean,org.apache.cassandra.db.rows.EncodingStats,java.util.Iterator,org.apache.cassandra.utils.SearchIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$1: void <init>(org.apache.cassandra.db.partitions.AbstractBTreePartition,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,boolean,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.DeletionInfo deletionInfo()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$1: org.apache.cassandra.db.rows.Row next(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: org.apache.cassandra.db.RangeTombstone rangeCovering(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.Row access$000(org.apache.cassandra.db.partitions.AbstractBTreePartition,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.filter.ColumnFilter,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.BTreeRow emptyDeletedRow(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Row$Deletion)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] empty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.RangeTombstone search(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.RangeTombstone rangeTombstone(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredRows: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: boolean isPreviouslyReturnedPartition(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$UnfilteredPager: org.apache.cassandra.db.rows.BaseRowIterator apply(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: boolean isPreviouslyReturnedPartition(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$RowPager: org.apache.cassandra.db.rows.BaseRowIterator apply(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.rows.RowIterator apply(org.apache.cassandra.db.rows.RowIterator,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: org.apache.cassandra.db.rows.RowIterator applyTo(org.apache.cassandra.db.rows.RowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.FilteredRows mutable(org.apache.cassandra.db.rows.RowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredRows: void <init>(org.apache.cassandra.db.rows.RowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: org.apache.cassandra.db.rows.UnfilteredRowIterator applyTo(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkipper: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: java.lang.Iterable shadowSources(org.apache.cassandra.db.DecoratedKey,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkippingUnfilteredRowIterator: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.rows.UnfilteredRowIterator,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: boolean provideTombstoneSources()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_shadowSources_3__469: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.compaction.CompactionController,org.apache.cassandra.db.DecoratedKey,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$lambda_shadowSources_3__469: void <init>(org.apache.cassandra.db.compaction.CompactionController,org.apache.cassandra.db.DecoratedKey,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundValidator: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundValidator$RowsTransformation: void <init>(org.apache.cassandra.config.CFMetaData,boolean,boolean,org.apache.cassandra.db.transform.RTBoundValidator$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundValidator$RowsTransformation: void <init>(org.apache.cassandra.config.CFMetaData,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CQLFilter$1IsSatisfiedFilter: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection: void <init>(org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.service.DataResolver$1)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.MoreRows: org.apache.cassandra.db.rows.UnfilteredRowIterator extend(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.transform.MoreRows)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredRows: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection: void <init>(org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftFilter$1IsSatisfiedThriftFilter: org.apache.cassandra.db.rows.UnfilteredRowIterator applyToPartition(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.Row getRow(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Filter: org.apache.cassandra.db.rows.RowIterator applyToPartition(org.apache.cassandra.db.rows.BaseRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredRows: void <init>(org.apache.cassandra.db.transform.Filter,org.apache.cassandra.db.transform.UnfilteredRows)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredRows: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.transform.Filter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: void <init>(org.apache.cassandra.db.transform.BaseRows)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseIterator: void <init>(org.apache.cassandra.db.transform.BaseIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack: void <init>(org.apache.cassandra.db.transform.Stack)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DigestResponse: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.UnfilteredPartitions mutable(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredPartitions: void <init>(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BasePartitions: void <init>(org.apache.cassandra.db.partitions.BasePartitionIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredPartitionIterator: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4: boolean isForThrift()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftFilter: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CQLFilter: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$1: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: boolean selectsFullPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator queryStorage(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: boolean selectsFullPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator withMetricsRecording(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.metrics.TableMetrics,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator withoutPurgeableTombstones(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator withStateTracking(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator queryStorage(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.index.Index getIndex(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.index.IndexNotAvailableException: void <init>(org.apache.cassandra.index.Index)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds: java.lang.String getString(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.dht.AbstractBounds keyRange()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator checkCacheFilter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function selectLive(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator maybeWrap(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.config.CFMetaData,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.io.sstable.format.SSTableReadsListener newReadCountUpdater()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator unfilteredPartition(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator mergeLazily(java.util.List,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredPartitionIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.UnfilteredPartitions: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3: void <init>(java.util.List,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4: void <init>(boolean,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.utils.MergeIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyUnfilteredPartitionIterator: void <init>(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger: void <init>(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand$1: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_selectLive_4__170: com.google.common.base.Function bootstrap$(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_selectLive_4__170: void <init>(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand$1CacheFilter: void <init>(org.apache.cassandra.db.PartitionRangeReadCommand,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: java.lang.String getClosingString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: java.lang.String getOpeningString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: java.lang.String getClosingString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: java.lang.String getOpeningString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: java.lang.String getClosingString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: java.lang.String getOpeningString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.lang.String getClosingString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds: java.lang.String format(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.lang.String getOpeningString()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$CheckForAbort: void <init>(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.transform.StoppingTransformation: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1WithoutPurgeableTombstones: void <init>(org.apache.cassandra.db.ReadCommand,boolean,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction: void <init>(boolean,int,int,int,boolean,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: int oldestUnrepairedTombstone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: int oldestUnrepairedTombstone()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction$lambda_new_0__171: org.apache.cassandra.db.DeletionPurger bootstrap$(org.apache.cassandra.db.partitions.PurgeFunction,boolean,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PurgeFunction$lambda_new_0__171: void <init>(org.apache.cassandra.db.partitions.PurgeFunction,boolean,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1MetricRecording: void <init>(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.metrics.TableMetrics,long)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getTombstoneFailureThreshold()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getTombstoneWarnThreshold()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: boolean hasExpressionOnClusteringOrRegularColumns()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: boolean selectsAllPartition()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isClusteringColumn()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.rows.UnfilteredRowIterator queryMemtableAndDisk(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.rows.UnfilteredRowIterator getThroughCache(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: boolean cacheAllRows()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: boolean cacheRows()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: int rowsPerPartitionToCache()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: boolean isHeadFilter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: boolean isHeadFilter()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: org.apache.cassandra.db.rows.UnfilteredRowIterator filterNotIndexed(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: org.apache.cassandra.db.rows.UnfilteredRowIterator filterNotIndexed(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: boolean putIfAbsent(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.RowCacheKey: void <init>(org.apache.cassandra.utils.Pair,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.cache.RowCacheSentinel: void <init>()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$1: void <init>(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.db.rows.UnfilteredRowIterator,int,boolean)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand fullPartitionRead(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.CachedBTreePartition: org.apache.cassandra.db.partitions.CachedBTreePartition create(org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator concat(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: org.apache.cassandra.db.PartitionColumns mergeTo(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$1Extend: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: org.apache.cassandra.db.Columns mergeTo(org.apache.cassandra.db.Columns)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] update(java.lang.Object[],java.util.Comparator,java.util.Collection,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] update(java.lang.Object[],java.util.Comparator,java.lang.Iterable,int,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.TreeBuilder: java.lang.Object[] update(java.lang.Object[],java.util.Comparator,java.lang.Iterable,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] build(java.lang.Iterable,int,org.apache.cassandra.utils.btree.UpdateFunction)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction$Simple: boolean abortEarly()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: org.apache.cassandra.utils.btree.NodeBuilder finish()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: org.apache.cassandra.utils.btree.NodeBuilder update(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction$Simple: java.lang.Object apply(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void copyChildren(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void copyKeys(int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: void replaceNextKey(java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.NodeBuilder: int compareUpperBound(java.util.Comparator,java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction$lambda_static_0__163: java.lang.Object apply(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_build_2__188: java.lang.Object apply(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.rows.Row lambda$build$2(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction: java.lang.Object lambda$static$0(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.CachedBTreePartition: org.apache.cassandra.db.partitions.CachedBTreePartition create(org.apache.cassandra.db.rows.UnfilteredRowIterator,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.CachedBTreePartition: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,int,int,int,int,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder build(org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Iterable iterable(java.lang.Object[])>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$1: java.lang.Object next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$1: boolean hasNext()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder reverse()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$1: org.apache.cassandra.db.rows.Unfiltered next()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand create(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Slices)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand create(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.filter.ClusteringIndexFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand create(boolean,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.filter.ClusteringIndexFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.schema.IndexMetadata findIndex(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.filter.RowFilter)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand create(boolean,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: boolean isEmpty()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.schema.Indexes getIndexes()>
2020-05-18 22:39:06 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.rows.UnfilteredRowIterator queryMemtableAndDiskInternal(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadExecutionController: boolean validForReadOn(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.rows.UnfilteredRowIterator withSSTablesIterated(java.util.List,org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.SinglePartitionReadCommand$SSTableReadMetricsCollector)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound makeIterator(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.io.sstable.format.SSTableReader,boolean,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: boolean shouldInclude(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.rows.UnfilteredRowIterator queryMemtableAndSSTablesInTimestampOrder(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.filter.ClusteringIndexNamesFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: boolean queriesMulticellType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$SSTableReadMetricsCollector: void <init>(org.apache.cassandra.db.SinglePartitionReadCommand$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.StorageHook$1: void reportRead(java.util.UUID,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function select(org.apache.cassandra.db.lifecycle.SSTableSet,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_select_3__226: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_select_3__226: void <init>(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$SSTableReadMetricsCollector: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: int hashCode()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.partitions.ImmutableBTreePartition add(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.partitions.ImmutableBTreePartition,org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.filter.ClusteringIndexNamesFilter reduceFilter(org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,org.apache.cassandra.db.partitions.Partition,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$SSTableReadMetricsCollector: int getMergedSSTables()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.StorageHook$1: org.apache.cassandra.db.rows.UnfilteredRowIterator makeRowIterator(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Slices,org.apache.cassandra.db.filter.ColumnFilter,boolean,boolean,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate fromIterator(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$lambda_queryMemtableAndSSTablesInTimestampOrder_0__227: java.lang.Runnable bootstrap$(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$lambda_queryMemtableAndSSTablesInTimestampOrder_0__227: void <init>(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.MutableDeletionInfo,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator withOnlyQueriedData(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.WithOnlyQueriedData: void <init>(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: boolean canRemoveRow(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.Columns,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$Builder: org.apache.cassandra.utils.btree.BTreeSet build()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$Builder: org.apache.cassandra.utils.btree.BTreeSet$Builder addAll(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: boolean shouldInclude(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: boolean shouldInclude(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: boolean intersects(java.util.List,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: boolean intersects(java.util.List,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: boolean intersects(java.util.List,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slice$1: boolean intersects(org.apache.cassandra.db.ClusteringComparator,java.util.List,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: boolean intersects(org.apache.cassandra.db.ClusteringComparator,java.util.List,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBound: int compareTo(org.apache.cassandra.db.ClusteringComparator,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: boolean isLive()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.StorageHook$1: org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound makeRowIteratorWithLowerBound(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.db.filter.ColumnFilter,boolean,int,boolean,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: void <init>(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.db.filter.ColumnFilter,boolean,int,boolean,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: void <init>(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$1UpdateSstablesIterated: void <init>(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.db.SinglePartitionReadCommand$SSTableReadMetricsCollector,org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.RowCacheKey: void <init>(org.apache.cassandra.utils.Pair,java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: boolean replace(org.apache.cassandra.cache.IMeasurableMemory,org.apache.cassandra.cache.IMeasurableMemory,org.apache.cassandra.cache.IMeasurableMemory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache$1: int weightOf(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$measure__61: int weightOf(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$measure__63: int weightOf(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: int measure(java.lang.Object,org.apache.cassandra.cql3.statements.ParsedStatement$Prepared)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ObjectSizes: long measureDeep(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache$1: int weightOf(org.apache.cassandra.cache.IMeasurableMemory,org.apache.cassandra.cache.IMeasurableMemory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ClockAndCount: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.CounterCacheKey: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.KeyCacheKey: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.RowCacheKey: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ObjectSizes: long sizeOfArray(byte[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ObjectSizes: long sizeOf(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo: long unsharedHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: boolean putIfAbsent(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: boolean putIfAbsent(org.apache.cassandra.cache.IMeasurableMemory,org.apache.cassandra.cache.IMeasurableMemory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices: org.apache.cassandra.db.Slices$InOrderTester inOrderTester(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectNoSlices: org.apache.cassandra.db.Slices$InOrderTester inOrderTester(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$SelectAllSlices: org.apache.cassandra.db.Slices$InOrderTester inOrderTester(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter$1FilterNotIndexed: void <init>(org.apache.cassandra.db.filter.ClusteringIndexSliceFilter,org.apache.cassandra.db.Slices$InOrderTester,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices$InForwardOrderTester: void <init>(org.apache.cassandra.db.Slices$ArrayBackedSlices,org.apache.cassandra.db.Slices$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices$InReverseOrderTester: void <init>(org.apache.cassandra.db.Slices$ArrayBackedSlices)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$ArrayBackedSlices$InForwardOrderTester: void <init>(org.apache.cassandra.db.Slices$ArrayBackedSlices)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1FilterNotIndexed: void <init>(org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: org.apache.cassandra.db.filter.DataLimits$Counter newCounter(int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits: org.apache.cassandra.db.filter.DataLimits$Counter newCounter(int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator applyTo(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: org.apache.cassandra.db.filter.DataLimits$Counter newCounter(int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: org.apache.cassandra.db.filter.DataLimits$Counter newCounter(int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: org.apache.cassandra.db.filter.DataLimits$Counter newCounter(int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: void <init>(org.apache.cassandra.db.filter.DataLimits$CQLLimits,int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: void <init>(int,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: void <init>(org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits,int,boolean,boolean,boolean,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: void <init>(org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits,int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification$AggregateByPkPrefix: org.apache.cassandra.db.aggregation.GroupMaker newGroupMaker(org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification$1: org.apache.cassandra.db.aggregation.GroupMaker newGroupMaker(org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupMaker: org.apache.cassandra.db.aggregation.GroupMaker newInstance(org.apache.cassandra.db.ClusteringComparator,int,org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupMaker$PkPrefixGroupMaker: void <init>(org.apache.cassandra.db.ClusteringComparator,int,org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupMaker$PkPrefixGroupMaker: void <init>(org.apache.cassandra.db.ClusteringComparator,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupMaker: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: void <init>(org.apache.cassandra.db.filter.DataLimits$ThriftLimits,int,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits$PagingAwareCounter: void <init>(org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits,int,boolean,boolean,boolean,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits$PagingAwareCounter: void <init>(org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits,int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits$PagingGroupByAwareCounter: void <init>(org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits,int,boolean,boolean,boolean,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits$PagingGroupByAwareCounter: void <init>(org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits,int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CQLFilter$1IsSatisfiedFilter: void <init>(org.apache.cassandra.db.filter.RowFilter$CQLFilter,java.util.List,org.apache.cassandra.config.CFMetaData,boolean,int,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftFilter$1IsSatisfiedThriftFilter: void <init>(org.apache.cassandra.db.filter.RowFilter$ThriftFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadExecutionController: org.apache.cassandra.db.ReadExecutionController forCommand(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadExecutionController: void <init>(org.apache.cassandra.utils.concurrent.OpOrder$Group,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.ReadExecutionController,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadExecutionController: org.apache.cassandra.db.ColumnFamilyStore maybeGetIndexCfs(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: org.apache.cassandra.db.Mutation applyCounterMutation()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: org.apache.cassandra.db.partitions.PartitionUpdate processModifications(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: java.util.Collection getPartitionUpdates()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: void grabCounterLocks(org.apache.cassandra.db.Keyspace,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: java.lang.String getKeyspaceName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: org.apache.cassandra.db.DecoratedKey key()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: org.apache.cassandra.db.ConsistencyLevel consistency()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: long getTimeout()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: java.lang.Iterable getCounterLockKeys()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1: void <init>(org.apache.cassandra.db.CounterMutation)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: java.util.List collectCounterMarks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: void updateWithCurrentValue(org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark,org.apache.cassandra.db.ClockAndCount,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: void updateWithCurrentValuesFromCFS(java.util.List,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: void updateWithCurrentValuesFromCache(java.util.List,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: long capacity()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark: org.apache.cassandra.db.rows.CellPath path()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark: org.apache.cassandra.config.ColumnDefinition column()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark: org.apache.cassandra.db.Clustering clustering()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark: void setValue(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark: java.nio.ByteBuffer value()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: java.nio.ByteBuffer createGlobal(org.apache.cassandra.utils.CounterId,long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: org.apache.cassandra.utils.CounterId getLocalId()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ClockAndCount: org.apache.cassandra.db.ClockAndCount create(long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ClockAndCount: void <init>(long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId: org.apache.cassandra.utils.CounterId$LocalCounterIdHolder localId()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.CounterId$LocalCounterIdHolder: org.apache.cassandra.utils.CounterId get()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext$ContextState: void writeGlobal(org.apache.cassandra.utils.CounterId,long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: void setValue(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath,java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: org.apache.cassandra.db.rows.Cell withUpdatedValue(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: void setValue(org.apache.cassandra.db.rows.CellPath,java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: void replaceInSitu(java.lang.Object[],java.util.Comparator,java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: java.util.Comparator cellComparator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: void updateForRow(com.google.common.collect.PeekingIterator,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Builder: org.apache.cassandra.db.filter.ColumnFilter$Builder select(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: org.apache.cassandra.db.filter.ColumnFilter$Builder selectionBuilder()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand create(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.ClusteringIndexFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.RowIterator filter(org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredRows: org.apache.cassandra.db.rows.RowIterator filter(org.apache.cassandra.db.rows.UnfilteredRowIterator,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Filter: void <init>(int,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Builder: org.apache.cassandra.db.filter.ColumnFilter$Builder addSubSelection(org.apache.cassandra.db.filter.ColumnSubselection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection: org.apache.cassandra.db.filter.ColumnSubselection element(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Element: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.db.filter.ColumnSubselection$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Element: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: int compare(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: org.apache.cassandra.db.ClockAndCount getLocalClockAndCount(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: org.apache.cassandra.db.ClockAndCount getClockAndCountOf(java.nio.ByteBuffer,org.apache.cassandra.utils.CounterId)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.context.CounterContext: int findPositionOf(java.nio.ByteBuffer,org.apache.cassandra.utils.CounterId)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isCounter()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void addMarksForRow(org.apache.cassandra.db.rows.Row,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark: void <init>(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.db.partitions.PartitionUpdate$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$CounterMark: void <init>(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void start()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: java.util.UUID planId()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: int sessionIndex()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: org.slf4j.Logger access$200()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void onError(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void onInitializationComplete()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask: void abort()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: void handleSessionComplete(org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void state(org.apache.cassandra.streaming.StreamSession$State)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamTransferTask: void abort()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.OutgoingFileMessage: void complete()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: void addSessionInfo(org.apache.cassandra.streaming.SessionInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: void maybeComplete()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: void fireStreamEvent(org.apache.cassandra.streaming.StreamEvent)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: org.apache.cassandra.streaming.SessionInfo getSessionInfo()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamEvent$SessionCompleteEvent: void <init>(org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: java.lang.String description()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: boolean isSuccess()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamEvent: void <init>(org.apache.cassandra.streaming.StreamEvent$Type,java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: void <init>(java.net.InetAddress,int,java.net.InetAddress,java.util.Collection,java.util.Collection,org.apache.cassandra.streaming.StreamSession$State)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: boolean hasActiveSessions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamState: boolean hasFailedSession()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: org.apache.cassandra.streaming.StreamState getCurrentState()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamException: void <init>(org.apache.cassandra.streaming.StreamState,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamState: void <init>(java.util.UUID,java.lang.String,java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: java.util.Set getAllSessionInfo()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData: java.util.Collection getAllSessionInfo()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamState$1: void <init>(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData: boolean hasActiveSessions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: org.apache.cassandra.streaming.StreamSession$State state()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData getOrCreateHostData(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData: void addSessionInfo(org.apache.cassandra.streaming.SessionInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData: void <init>(org.apache.cassandra.streaming.StreamCoordinator,org.apache.cassandra.streaming.StreamCoordinator$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData: void <init>(org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: com.google.common.util.concurrent.ListenableFuture closeOutgoing()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: com.google.common.util.concurrent.ListenableFuture closeIncoming()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: com.google.common.util.concurrent.ListenableFuture close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask: void abortTransaction()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: void sendMessage(org.apache.cassandra.streaming.messages.StreamMessage)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void startStreamingFiles()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.PrepareMessage: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage: void <init>(org.apache.cassandra.streaming.messages.StreamMessage$Type)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: void handleSessionPrepared(org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: void sendMessages(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void taskCompleted(org.apache.cassandra.streaming.StreamTransferTask)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: boolean maybeCompleted()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.CompleteMessage: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: boolean isClosed()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: void enqueue(org.apache.cassandra.streaming.messages.StreamMessage)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler$1: int compare(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.streaming.messages.StreamMessage)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage: int getPriority()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalSizeToSend()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalFilesToSend()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalSizeToReceive()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalFilesToReceive()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamEvent$SessionPreparedEvent: void <init>(java.util.UUID,org.apache.cassandra.streaming.SessionInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalFiles(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalSizes(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: boolean isOutgoingConnected()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void logError(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.SessionFailedMessage: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: boolean isKeepAliveSupported()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getStreamingKeepAlivePeriod()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getStreamingSocketTimeout()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: org.apache.cassandra.utils.CassandraVersion getReleaseVersion(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.CassandraVersion: boolean isSupportedBy(org.apache.cassandra.utils.CassandraVersion)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.CassandraVersion: int compareTo(org.apache.cassandra.utils.CassandraVersion)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.CassandraVersion: int compareIdentifiers(java.lang.String[],java.lang.String[],int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.CassandraVersion: java.lang.Integer tryParseInt(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: java.net.Socket createConnection()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler: void start(java.net.Socket,int,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: void start(java.net.Socket,int,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: void sendInitMessage()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: boolean keepSSTableLevel()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: boolean isIncremental()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamInitMessage: void <init>(java.net.InetAddress,int,java.util.UUID,java.lang.String,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamInitMessage: java.nio.ByteBuffer createMessage(boolean,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.WrappedDataOutputStreamPlus: void flush()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void write(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void flush()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: org.apache.cassandra.io.util.DataOutputStreamPlus getWriteChannel(java.net.Socket)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.WrappedDataOutputStreamPlus: void <init>(java.io.OutputStream)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void <init>(java.nio.channels.WritableByteChannel)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void <init>(java.nio.channels.WritableByteChannel,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void <init>(java.nio.channels.WritableByteChannel,java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputStreamPlus: void <init>(java.nio.channels.WritableByteChannel)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer: void serialize(org.apache.cassandra.streaming.messages.StreamInitMessage,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeUTF(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDSerializer: void serialize(java.util.UUID,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeLong(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void writeLong(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void writeUTF(java.lang.String,java.io.DataOutput)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamInitMessage$StreamInitMessageSerializer: long serializedSize(org.apache.cassandra.streaming.messages.StreamInitMessage,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.CompactEndpointSerializationHelper: int serializedSize(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.DefaultConnectionFactory: java.net.Socket createConnection(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: java.net.Socket newSocket(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: boolean isEncryptedChannel(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.EncryptionOptions$ServerEncryptionOptions getServerEncryptionOptions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getSSLStoragePort()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.SSLFactory: javax.net.ssl.SSLSocket getSocket(org.apache.cassandra.config.EncryptionOptions,java.net.InetAddress,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getStoragePort()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.SSLFactory: javax.net.ssl.SSLContext createSSLContext(org.apache.cassandra.config.EncryptionOptions,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.SSLFactory: void prepareSocket(javax.net.ssl.SSLSocket,org.apache.cassandra.config.EncryptionOptions)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.SSLFactory: java.lang.String[] filterCipherSuites(java.lang.String[],java.lang.String[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void closeQuietly(java.io.Closeable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: org.slf4j.Logger access$000()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void sendReply(org.apache.cassandra.net.MessageOut,int,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: void buildAllViews()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.lang.Iterable all()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: java.lang.Iterable allViews()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader open(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void handleCorruptSSTable(org.apache.cassandra.io.sstable.CorruptSSTableException)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void handleFSError(org.apache.cassandra.io.FSError)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_handleCorruptSSTable_1__426: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.sstable.CorruptSSTableException)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_handleCorruptSSTable_1__426: void <init>(org.apache.cassandra.io.sstable.CorruptSSTableException)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_handleFSError_2__67: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.FSError)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$lambda_handleFSError_2__67: void <init>(org.apache.cassandra.io.FSError)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: org.apache.cassandra.db.SerializationHeader toHeader(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: int size()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.cache.InstrumentingCache getKeyCache()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void validate()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void setup(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void load(org.apache.cassandra.io.sstable.metadata.ValidationMetadata,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer: java.util.Map deserialize(org.apache.cassandra.io.sstable.Descriptor,java.util.EnumSet)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: org.apache.cassandra.io.sstable.metadata.IMetadataSerializer getMetadataSerializer()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader internalOpen(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,java.lang.Long,org.apache.cassandra.io.sstable.metadata.StatsMetadata,org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: org.apache.cassandra.io.sstable.format.SSTableFormat getFormat()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$ReaderFactory: org.apache.cassandra.io.sstable.format.SSTableReader open(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,java.lang.Long,org.apache.cassandra.io.sstable.metadata.StatsMetadata,org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat: org.apache.cassandra.io.sstable.format.SSTableReader$Factory getReaderFactory()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableReader: void <init>(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,java.lang.Long,org.apache.cassandra.io.sstable.metadata.StatsMetadata,org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void <init>(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,long,org.apache.cassandra.io.sstable.metadata.StatsMetadata,org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat: org.apache.cassandra.db.RowIndexEntry$IndexSerializer getIndexSerializer(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.Version: org.apache.cassandra.io.sstable.format.SSTableFormat getSSTableFormat()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: void <init>(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DiskOptimizationStrategy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$UniqueIdentifier: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.BloomFilterTracker: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: void <init>(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.io.util.DiskOptimizationStrategy getDiskOptimizationStrategy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers: org.apache.cassandra.io.sstable.IndexInfo$Serializer indexInfoSerializer(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.Serializers serializers()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers: org.apache.cassandra.io.ISerializer indexEntryClusteringPrefixSerializer(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.Version: boolean equals(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo$Serializer: void <init>(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.ISerializer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$NewFormatSerializer: void <init>(org.apache.cassandra.io.sstable.format.Version,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers: org.apache.cassandra.io.ISerializer oldFormatSerializer(org.apache.cassandra.io.sstable.format.Version)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$1: void <init>(org.apache.cassandra.db.Serializers,org.apache.cassandra.io.sstable.format.Version)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.SerializationHeader makeWithoutStats(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: java.util.Map deserialize(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.io.util.FileDataInput,java.util.EnumSet)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.io.sstable.metadata.StatsMetadata defaultStatsMetadata()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.StatsMetadata: void <init>(org.apache.cassandra.utils.EstimatedHistogram,org.apache.cassandra.utils.EstimatedHistogram,org.apache.cassandra.db.commitlog.IntervalSet,long,long,int,int,int,int,double,org.apache.cassandra.utils.StreamingHistogram,int,java.util.List,java.util.List,boolean,long,long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder: org.apache.cassandra.utils.StreamingHistogram build()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.utils.EstimatedHistogram defaultPartitionSizeHistogram()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.utils.EstimatedHistogram defaultCellPerPartitionCountHistogram()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: org.apache.cassandra.db.commitlog.IntervalSet empty()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder defaultTombstoneDropTimeHistogramBuilder()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder: void <init>(int,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder$lambda_new_0__218: java.util.Comparator bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder$lambda_new_1__219: java.util.Comparator bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder$lambda_new_1__219: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder$lambda_new_0__218: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: void <init>(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: void <init>(int,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: long[] newOffsets(int,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram: void <init>(int,java.util.Map,org.apache.cassandra.utils.StreamingHistogram$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram: void <init>(int,java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$lambda_new_0__220: java.util.Comparator bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$lambda_new_0__220: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataComponent: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataType: org.apache.cassandra.io.sstable.metadata.MetadataType[] values()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean hasCommitLogLowerBound()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean hasCommitLogIntervals()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataInputPlus$DataInputStreamPlus: void <init>(java.io.InputStream)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer: org.apache.cassandra.utils.EstimatedHistogram deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer: org.apache.cassandra.db.commitlog.CommitLogPosition deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer: org.apache.cassandra.utils.StreamingHistogram deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$1: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: void <init>(java.lang.Comparable,java.lang.Comparable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.ValidationMetadata: void <init>(java.lang.String,double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.CompactionMetadata: void <init>(com.clearspring.analytics.stream.cardinality.ICardinality)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: void <init>(com.google.common.collect.ImmutableSortedMap)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$1: org.apache.cassandra.db.commitlog.IntervalSet deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: void <init>(com.google.common.collect.ImmutableSortedMap,org.apache.cassandra.db.commitlog.IntervalSet$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition: void <init>(long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: void <init>(long[],long[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.LengthAvailableInputStream: long skip(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FastByteArrayInputStream: long skip(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: long skip(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedInputStream: long skip(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean hasOldBfHashOrder()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void loadBloomFilter(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void load(boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy: int bufferSize(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SsdDiskOptimizationStrategy: int bufferSize(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int size()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void saveBloomFilter()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void saveSummary()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void buildSummary(boolean,boolean,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: org.apache.cassandra.io.util.FileHandle complete()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: org.apache.cassandra.io.util.FileHandle$Builder bufferSize(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: org.apache.cassandra.io.util.FileHandle$Builder withChunkCache(org.apache.cassandra.cache.ChunkCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: org.apache.cassandra.io.util.FileHandle$Builder mmapped(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: void <init>(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: org.apache.cassandra.io.util.FileHandle$Builder compressed(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$DiskAccessMode getIndexAccessMode()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$DiskAccessMode getDiskAccessMode()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: double getDiskOptimizationEstimatePercentile()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: java.lang.Throwable close(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SharedCloseableImpl: java.lang.Throwable close(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: java.lang.Throwable ensureReleased(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: org.apache.cassandra.io.util.FileHandle complete(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: org.apache.cassandra.io.util.ChannelProxy sharedCopy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: org.apache.cassandra.io.util.MmappedRegions sharedCopy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: org.apache.cassandra.io.util.RebuffererFactory maybeCached(org.apache.cassandra.io.util.ChunkReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: void updateRegions(org.apache.cassandra.io.util.ChannelProxy,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: void <init>(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Mmap: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.compress.CompressionMetadata,org.apache.cassandra.io.util.MmappedRegions)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmapRebufferer: void <init>(org.apache.cassandra.io.util.ChannelProxy,long,org.apache.cassandra.io.util.MmappedRegions)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Standard: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.compress.CompressionMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Cleanup: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.util.RebuffererFactory,org.apache.cassandra.io.compress.CompressionMetadata,org.apache.cassandra.cache.ChunkCache,org.apache.cassandra.io.util.FileHandle$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: void <init>(org.apache.cassandra.io.util.FileHandle$Cleanup,org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.util.RebuffererFactory,org.apache.cassandra.io.compress.CompressionMetadata,long,org.apache.cassandra.io.util.FileHandle$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: org.apache.cassandra.io.compress.CompressionMetadata create(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: org.apache.cassandra.io.util.MmappedRegions map(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.compress.CompressionMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.DiskOptimizationStrategy: int roundForCaching(int,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.compress.CompressionMetadata,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: void <init>(org.apache.cassandra.io.util.MmappedRegions$State,org.apache.cassandra.io.compress.CompressionMetadata,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.util.MmappedRegions$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: void <init>(org.apache.cassandra.io.util.ChannelProxy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: void <init>(org.apache.cassandra.io.util.ChannelProxy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SharedCloseableImpl: void <init>(org.apache.cassandra.utils.concurrent.SharedCloseableImpl)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: org.apache.cassandra.utils.concurrent.Ref ref()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$State: void assertNotReleased()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: void updateState(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: void updateState(org.apache.cassandra.io.compress.CompressionMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$Tidier: void <init>(org.apache.cassandra.io.util.MmappedRegions$State)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: void <init>(org.apache.cassandra.io.util.MmappedRegions$State,org.apache.cassandra.io.util.MmappedRegions$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: void <init>(org.apache.cassandra.io.util.MmappedRegions$State)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: void access$400(org.apache.cassandra.io.util.MmappedRegions$State,long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: long access$202(org.apache.cassandra.io.util.MmappedRegions$State,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: void add(long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: long access$300(org.apache.cassandra.io.util.MmappedRegions$State)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: long getPosition()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: org.apache.cassandra.utils.ChecksumType compressedChecksumType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: void <init>(java.lang.String,long,org.apache.cassandra.utils.ChecksumType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: org.apache.cassandra.io.sstable.Descriptor fromFilename(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: org.apache.cassandra.io.sstable.Descriptor fromFilename(java.lang.String,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: org.apache.cassandra.io.util.Memory readChunkOffsets(java.io.DataInput)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: void <init>(java.lang.String,java.lang.Integer,java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: void <init>(org.apache.cassandra.io.compress.ICompressor,java.lang.Integer,java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: java.lang.Class parseCompressorClass(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: org.apache.cassandra.io.compress.ICompressor createCompressor(java.lang.Class,java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: org.apache.cassandra.io.util.Memory allocate(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void <init>(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: long allocate(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory$MemoryTidy: void <init>(long,long,org.apache.cassandra.io.util.SafeMemory$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory$MemoryTidy: void <init>(long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void free()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: void free(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: void <init>(org.apache.cassandra.io.util.FileHandle$Cleanup,org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.util.RebuffererFactory,org.apache.cassandra.io.compress.CompressionMetadata,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Cleanup: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.util.RebuffererFactory,org.apache.cassandra.io.compress.CompressionMetadata,org.apache.cassandra.cache.ChunkCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.compress.CompressionMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Standard$allocateBuffer__391: java.util.function.Supplier bootstrap$(org.apache.cassandra.io.util.CompressedChunkReader$Standard)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Standard$allocateBuffer__391: void <init>(org.apache.cassandra.io.util.CompressedChunkReader$Standard)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: org.apache.cassandra.io.util.RebuffererFactory wrap(org.apache.cassandra.io.util.ChunkReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: long capacity()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: void <init>(org.apache.cassandra.cache.ChunkCache,org.apache.cassandra.io.util.ChunkReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: boolean isValid(org.apache.cassandra.io.util.ChannelProxy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: void extend(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: org.slf4j.Logger access$200()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: org.apache.cassandra.io.util.MmappedRegions map(org.apache.cassandra.io.util.ChannelProxy,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: boolean isCopy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: long access$200(org.apache.cassandra.io.util.MmappedRegions$State)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: boolean access$500(org.apache.cassandra.io.util.MmappedRegions$State,org.apache.cassandra.io.util.ChannelProxy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: boolean isValid(org.apache.cassandra.io.util.ChannelProxy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: void <init>(org.apache.cassandra.io.util.MmappedRegions)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean hasSamplingLevel()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: org.apache.cassandra.dht.IPartitioner getPartitioner()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary$IndexSummarySerializer: org.apache.cassandra.io.sstable.IndexSummary deserialize(java.io.DataInputStream,org.apache.cassandra.dht.IPartitioner,boolean,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void deleteWithConfirm(java.io.File)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: java.lang.Throwable deleteWithConfirm(java.io.File,boolean,java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MemoryOutputStream: void <init>(org.apache.cassandra.io.util.Memory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: void <init>(org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.io.util.Memory,int,org.apache.cassandra.io.util.Memory,long,int,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void setInt(long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: long copy(java.io.InputStream,java.io.OutputStream,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MemoryOutputStream: void write(byte[],int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void setBytes(long,byte[],int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void putIntByByte(long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WrappedSharedCloseable: void <init>(java.lang.AutoCloseable[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$Tidy: void <init>(java.lang.AutoCloseable[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: boolean isOverflowed()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: void add(org.apache.cassandra.utils.IFilter$FilterKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: void add(org.apache.cassandra.utils.IFilter$FilterKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: long estimateRowsFromIndex(org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: void <init>(long,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: org.apache.cassandra.io.sstable.IndexSummary build(org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: org.apache.cassandra.io.sstable.IndexSummaryBuilder maybeAddEntry(org.apache.cassandra.db.DecoratedKey,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FilterFactory: org.apache.cassandra.utils.IFilter getFilter(long,double,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: org.apache.cassandra.db.DecoratedKey getMinimalKey(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomCalculations: int maxBucketsPerElement(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomCalculations: org.apache.cassandra.utils.BloomCalculations$BloomSpecification computeBloomSpec(int,double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FilterFactory: org.apache.cassandra.utils.IFilter createFilter(int,long,int,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: void <init>(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: void <init>(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: void <init>(int,org.apache.cassandra.utils.obs.IBitSet,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WrappedSharedCloseable: void <init>(java.lang.AutoCloseable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: long bits2words(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: void clear()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void setMemory(long,long,byte)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomCalculations$BloomSpecification: void <init>(int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: org.apache.cassandra.io.sstable.IndexSummaryBuilder maybeAddEntry(org.apache.cassandra.db.DecoratedKey,long,long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: void setNextSamplePosition(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder$ReadableBoundary: void <init>(org.apache.cassandra.db.DecoratedKey,long,long,int,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: long getEntrySize(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: long getEntrySize(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: org.apache.cassandra.io.sstable.IndexSummary build(org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.io.sstable.IndexSummaryBuilder$ReadableBoundary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: org.apache.cassandra.io.util.SafeMemory sharedCopy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: org.apache.cassandra.io.util.SafeMemory currentBuffer()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: void <init>(org.apache.cassandra.io.util.SafeMemory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void <init>(org.apache.cassandra.io.util.Memory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: org.apache.cassandra.io.util.SafeMemoryWriter order(java.nio.ByteOrder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: void <init>(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Downsampling: int[] getStartPoints(int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Downsampling: java.util.List getSamplingPattern(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: void <init>(org.apache.cassandra.io.util.SafeMemory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: java.nio.ByteBuffer asByteBuffer(long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemoryUtil: java.nio.ByteBuffer getByteBuffer(long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: org.apache.cassandra.io.util.BufferedDataOutputStreamPlus order(java.nio.ByteOrder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void skipShortLength(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: long[] indexes(org.apache.cassandra.utils.IFilter$FilterKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: void set(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: void set(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: byte getByte(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void setByte(long,byte)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.PreHashedDecoratedKey: void filterHash(long[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: void filterHash(long[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: long capacity()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: long capacity()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: void setIndexes(long,long,int,long,long[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CachedHashDecoratedKey: void filterHash(long[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.MurmurHash: void hash3_x64_128(java.nio.ByteBuffer,int,int,long,long[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.MurmurHash: long getblock(java.nio.ByteBuffer,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.MurmurHash: long rotl64(long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.MurmurHash: long fmix(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: long abs(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void <init>(java.io.FileOutputStream)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary$IndexSummarySerializer: void serialize(org.apache.cassandra.io.sstable.IndexSummary,org.apache.cassandra.io.util.DataOutputPlus,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void writeWithLength(java.nio.ByteBuffer,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void writeInt(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: long getOffHeapSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void write(org.apache.cassandra.io.util.Memory,long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int access$000(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int access$100(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int access$200(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int access$300(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: org.apache.cassandra.io.util.Memory access$400(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: org.apache.cassandra.io.util.Memory access$500(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: long access$600(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: java.nio.ByteBuffer[] asByteBuffers(long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FilterFactory: void serialize(org.apache.cassandra.utils.IFilter,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilterSerializer: void serialize(org.apache.cassandra.utils.BloomFilter,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: void serialize(java.io.DataOutput)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: void serialize(java.io.DataOutput)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: long[] getPage(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: int getPageCount()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: int getPageSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: int getNumWords()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FilterFactory: org.apache.cassandra.utils.IFilter deserialize(java.io.DataInput,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilterSerializer: org.apache.cassandra.utils.BloomFilter deserialize(java.io.DataInput,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: org.apache.cassandra.utils.obs.OffHeapBitSet deserialize(java.io.DataInput)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: org.apache.cassandra.utils.obs.OpenBitSet deserialize(java.io.DataInput)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: void <init>(org.apache.cassandra.io.util.Memory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: void setup(org.apache.cassandra.io.sstable.format.SSTableReader,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: org.apache.cassandra.metrics.RestorableMeter access$700(org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: void ensureReadMeter()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: java.lang.Object get()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: org.apache.cassandra.utils.concurrent.Ref get(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy$1: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean isClientOrToolInitialized()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.metrics.RestorableMeter getSSTableReadMeter(java.lang.String,java.lang.String,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: java.util.concurrent.ScheduledThreadPoolExecutor access$1600()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: void <init>(double,double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: double getDouble(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA: void <init>(double,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA: void <init>(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: double access$100()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: long access$000()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: int size()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.UUID getSchemaVersion(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: boolean isSameVersion(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.UUID getRealVersion()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.UUID getAltVersion()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.lang.String schemaVersionToString(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: java.util.concurrent.Future submitMigrationTask(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationTask: void <init>(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask submit(java.lang.Runnable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask submit(org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedRunnable: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void updateVersionAndAnnounce()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.UUID getVersion()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void updateVersion()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue schema(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: void <init>(java.lang.String,org.apache.cassandra.gms.VersionedValue$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: void <init>(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: void <init>(java.lang.String,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionGenerator: int getNextVersion()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void addLocalApplicationStates(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void addLocalApplicationStateInternal(org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void doOnChangeNotifications(java.net.InetAddress,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void doBeforeChangeNotifications(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue cloneWithHigherVersion(org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void beforeChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void beforeChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: void beforeChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void beforeChange(java.net.InetAddress,org.apache.cassandra.gms.EndpointState,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void onChange(java.net.InetAddress,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void onChange(java.net.InetAddress,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: void onChange(java.net.InetAddress,org.apache.cassandra.gms.ApplicationState,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: boolean isMember(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void updateNetVersion(java.net.InetAddress,org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void notifyRpcChange(java.net.InetAddress,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void updateTopology(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isDeadState(org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.lang.String[] splitValue(org.apache.cassandra.gms.VersionedValue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.concurrent.Future updatePeerInfo(java.net.InetAddress,java.lang.String,java.lang.Object,java.util.concurrent.ExecutorService)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void scheduleSchemaPull(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_updatePeerInfo_1__83: java.lang.Runnable bootstrap$(java.lang.String,java.lang.String,java.net.InetAddress,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_updatePeerInfo_1__83: void <init>(java.lang.String,java.lang.String,java.net.InetAddress,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: java.util.UUID getSchemaVersion()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: boolean isEmpty()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: boolean shouldPullSchemaFrom(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$lambda_maybeScheduleSchemaPull_0__24: java.lang.Runnable bootstrap$(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$lambda_maybeScheduleSchemaPull_0__24: void <init>(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isGossipOnlyMember(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int getRawVersion(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: boolean knowsVersion(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: boolean is30Compatible(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: com.google.common.collect.Multimap inverse()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.lang.String getGossipStatus(org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.VersionedValue getApplicationState(org.apache.cassandra.gms.ApplicationState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isEnabled()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isAnyNodeOn30()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Optional getReplacingNode(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void updateHostId(java.util.UUID,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.Collection getTokensFor(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService: void update()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.UUID getHostId(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.UUID getHostId(java.net.InetAddress,java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService$PendingRangeTask: void <init>(org.apache.cassandra.service.PendingRangeCalculatorService$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService$PendingRangeTask: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void addBootstrapTokens(java.util.Collection,java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: java.lang.Object get(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: java.util.Collection removeValue(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: boolean containsAll(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$1: boolean apply(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: boolean isLeaving(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void addBootstrapTokens(java.util.Collection,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: void removeEndpoint(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void invalidateCachedRings()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.ArrayList sortTokens()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: java.util.Set keySet()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: void doRemoveEndpoint(java.net.InetAddress,org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Optional getReplacementNode(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.net.InetAddress getEndpointForHostId(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.net.InetAddress getEndpoint(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: boolean isMoving(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void updateNormalTokens(java.util.Collection,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void removeFromMoving(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: com.google.common.collect.Multimap getEndpointToTokenMapForReading()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void notifyJoined(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void notifyMoved(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void removeEndpoint(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void updatePeerInfo(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: int compareEndpointStartup(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.net.InetAddress getReplaceAddress()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.concurrent.Future updateTokens(java.net.InetAddress,java.util.Collection,java.util.concurrent.ExecutorService)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_updateTokens_0__72: java.lang.Runnable bootstrap$(java.lang.String,java.net.InetAddress,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_updateTokens_0__72: void <init>(java.lang.String,java.net.InetAddress,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void quarantineEndpoint(java.net.InetAddress,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void removeEndpoint(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void onRemove(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void onRemove(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: void onRemove(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void onRemove(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void quarantineEndpoint(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void buildSeedsList()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void destroyConnectionPool(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void refreshAllNodeMinVersions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.util.Set getSeeds()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: org.apache.cassandra.service.ActiveRepairService$ParentRepairSession removeParentRepairSession(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: double getPhiConvictThreshold()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: org.apache.cassandra.service.ActiveRepairService$ParentRepairSession getParentRepairSession(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService$ParentRepairSession: java.util.Map access$400(org.apache.cassandra.service.ActiveRepairService$ParentRepairSession)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isStatus(java.net.InetAddress,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void updateNormalTokens(com.google.common.collect.Multimap)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: void addEndpoint(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: void doAddEndpoint(java.net.InetAddress,java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Collection getTokens(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void addLeavingEndpoint(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void addExpireTimeIfFound(java.net.InetAddress,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: long extractExpireTime(java.lang.String[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void excise(java.util.Collection,java.net.InetAddress,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void drain()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void drain(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.util.Collection getColumnFamilyStores()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: com.google.common.util.concurrent.ListenableFuture forceFlush()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void disableAutoCompaction()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void setMode(org.apache.cassandra.service.StorageService$Mode,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void shutdownClientServers()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void pauseDispatch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void verifyNoHintsInProgress()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void forceShutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void shutdownBlocking()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: void forceRecycleAllSegments()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: void shutdownBlocking()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: boolean isTerminated()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_drain_4__494: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.lang.Iterable nonSystem()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.lang.Iterable system()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.util.List waitOnFutures(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void shutdownPostFlushExecutor()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_drain_5__495: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_drain_5__496: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_drain_5__497: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_drain_5__497: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_drain_5__496: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_drain_5__495: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: void unregisterMBean()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics: void release()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: boolean remove(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetricNameFactory: org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName createMetricName(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.List getNonSystemKeyspaces()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.Set getNonSystemKeyspacesSet()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_drain_4__494: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: int getActiveCount()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics: void release()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SimpleCondition: boolean await(long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap: boolean shutdownBlocking()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: boolean isShutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void handleIOExceptionOnClose(java.io.IOException)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.slf4j.Logger access$300()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void access$400(java.io.IOException)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void awaitTermination()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogService: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogService: void awaitTermination()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void wakeManager()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void discardAvailableSegment()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void discard(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void addSize(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.MemoryMappedSegment: long onDiskSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CompressedSegment: long onDiskSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedSegment: long onDiskSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void sync(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void discardUnusedTail()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.MemoryMappedSegment: void internalClose()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.MemoryMappedSegment: void flush(int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.MemoryMappedSegment: void write(int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CompressedSegment: void write(int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.FileDirectSegment: void internalClose()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.FileDirectSegment: void flush(int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedSegment: void write(int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void waitForModifications()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: int allocate(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder: void awaitNewBarrier()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder: org.apache.cassandra.utils.concurrent.OpOrder$Barrier newBarrier()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Barrier: void await()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Barrier: void issue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: void <init>(org.apache.cassandra.utils.concurrent.OpOrder$Group,org.apache.cassandra.utils.concurrent.OpOrder$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder: org.apache.cassandra.utils.concurrent.OpOrder$Group access$300(org.apache.cassandra.utils.concurrent.OpOrder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: org.apache.cassandra.utils.concurrent.OpOrder$Group access$402(org.apache.cassandra.utils.concurrent.OpOrder$Group,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder: org.apache.cassandra.utils.concurrent.OpOrder$Group access$302(org.apache.cassandra.utils.concurrent.OpOrder,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: void access$600(org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: void expire()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: void <init>(org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Barrier: boolean allPriorOpsAreFinished()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Barrier: org.apache.cassandra.utils.concurrent.WaitQueue$Signal register()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: int access$1100(org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: org.apache.cassandra.utils.concurrent.OpOrder$Group access$400(org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: org.apache.cassandra.utils.concurrent.OpOrder$Group access$900(org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: org.apache.cassandra.utils.concurrent.WaitQueue access$1000(org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Barrier: void <init>(org.apache.cassandra.utils.concurrent.OpOrder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.SimpleCachedBufferPool: java.nio.ByteBuffer getThreadLocalReusableBuffer(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.apache.cassandra.db.commitlog.SimpleCachedBufferPool getBufferPool()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: java.lang.String getPath()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: boolean isStillAllocating()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getCommitLogSegmentSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils: java.nio.ByteBuffer compress(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean,org.apache.cassandra.io.compress.ICompressor)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils: java.nio.ByteBuffer encryptAndWrite(java.nio.ByteBuffer,java.nio.channels.WritableByteChannel,boolean,javax.crypto.Cipher)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void writeSyncMarker(long,java.nio.ByteBuffer,int,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void internalClose()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.SimpleCachedBufferPool: void releaseBuffer(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void notifyBufferFreed()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SyncUtil: java.nio.MappedByteBuffer force(java.nio.MappedByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: void trySkipCache(int,long,int,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryDarwin: int callPosixFadvise(int,long,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryWindows: int callPosixFadvise(int,long,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryLinux: int callPosixFadvise(int,long,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryDarwin: com.sun.jna.Pointer callStrerror(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryWindows: com.sun.jna.Pointer callStrerror(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryLinux: com.sun.jna.Pointer callStrerror(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean log(org.slf4j.Logger,org.apache.cassandra.utils.NoSpamLogger$Level,long,java.util.concurrent.TimeUnit,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean log(org.slf4j.Logger,org.apache.cassandra.utils.NoSpamLogger$Level,java.lang.String,long,java.util.concurrent.TimeUnit,long,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: org.apache.cassandra.utils.NoSpamLogger$NoSpamLogStatement getStatement(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: org.apache.cassandra.utils.NoSpamLogger getLogger(org.slf4j.Logger,long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: void <init>(org.slf4j.Logger,long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogService: void requestExtraSync()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.SimpleCachedBufferPool: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void forceRecycleAll(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void advanceAllocatingFrom(org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void awaitAvailableSegment(org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: void maybeArchive(org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: void requestExtraSync()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: java.lang.String getName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver$1: void <init>(org.apache.cassandra.db.commitlog.CommitLogArchiver,org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue: org.apache.cassandra.utils.concurrent.WaitQueue$Signal register(com.codahale.metrics.Timer$Context)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$TimedSignal: void cancel()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$TimedSignal: void <init>(org.apache.cassandra.utils.concurrent.WaitQueue,com.codahale.metrics.Timer$Context,org.apache.cassandra.utils.concurrent.WaitQueue$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WaitQueue$TimedSignal: void <init>(org.apache.cassandra.utils.concurrent.WaitQueue,com.codahale.metrics.Timer$Context)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: boolean maybeWaitForArchiving(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard: void discard(org.apache.cassandra.db.commitlog.CommitLogSegment,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: void discard(org.apache.cassandra.db.commitlog.CommitLogSegment,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void processDiscardedSegment(org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getCDCLogLocation()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void renameWithConfirm(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void submitOverflowSizeRecalculation()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: int defaultSegmentSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker$lambda_submitOverflowSizeRecalculation_0__400: java.lang.Runnable bootstrap$(org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker$lambda_submitOverflowSizeRecalculation_0__400: void <init>(org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo$Holder: void stop()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics: java.util.List getCompactions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: java.util.concurrent.Future flushBufferPool(org.apache.cassandra.hints.HintsBufferPool)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: java.util.concurrent.Future closeAllWriters()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchExecutor: void shutdownBlocking()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: void shutdownBlocking()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: java.util.List shutdownNow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$lambda_closeAllWriters_0__498: java.lang.Runnable bootstrap$(org.apache.cassandra.hints.HintsWriteExecutor)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$lambda_closeAllWriters_0__498: void <init>(org.apache.cassandra.hints.HintsWriteExecutor)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$FlushBufferPoolTask: void <init>(org.apache.cassandra.hints.HintsWriteExecutor,org.apache.cassandra.hints.HintsBufferPool)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: int getHintsInProgress()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void setRpcReady(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue rpcReady(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.Iterable concatWithIndexes()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: boolean isClean()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: org.apache.cassandra.db.Memtable getCurrentMemtable()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: com.google.common.util.concurrent.ListenableFuture waitForFlushes()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: com.google.common.util.concurrent.ListenableFuture switchMemtableIfCurrent(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: com.google.common.util.concurrent.ListenableFuture switchMemtable()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$lambda_waitForFlushes_0__403: java.util.concurrent.Callable bootstrap$(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$lambda_waitForFlushes_0__403: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$Flush: void <init>(org.apache.cassandra.db.ColumnFamilyStore,boolean,org.apache.cassandra.db.ColumnFamilyStore$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$Flush: void <init>(org.apache.cassandra.db.ColumnFamilyStore,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: void setDiscarding(org.apache.cassandra.utils.concurrent.OpOrder$Barrier,java.util.concurrent.atomic.AtomicReference)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.Memtable switchMemtable(boolean,org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: void <init>(java.util.concurrent.atomic.AtomicReference,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$PostFlush: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.List,org.apache.cassandra.db.ColumnFamilyStore$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.lifecycle.Tracker access$000(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void access$200(java.util.concurrent.atomic.AtomicReference)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void setCommitLogUpperBound(java.util.concurrent.atomic.AtomicReference)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$LastCommitLogPosition: void <init>(org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: org.apache.cassandra.db.commitlog.CommitLogPosition getCurrentPosition()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.apache.cassandra.db.commitlog.CommitLogPosition getCurrentPosition()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: org.apache.cassandra.db.commitlog.CommitLogPosition getCurrentCommitLogPosition()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$PostFlush: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$StatsCollector: void <init>(org.apache.cassandra.db.Memtable$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.HeapPool: org.apache.cassandra.utils.memory.MemtableAllocator newAllocator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.SlabPool: org.apache.cassandra.utils.memory.MemtableAllocator newAllocator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.NativePool: org.apache.cassandra.utils.memory.MemtableAllocator newAllocator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$ColumnsCollector: void <init>(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.NativePool: org.apache.cassandra.utils.memory.NativeAllocator newAllocator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.NativeAllocator: void <init>(org.apache.cassandra.utils.memory.NativePool)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator newAllocator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator: void <init>(org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator,org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.EnsureOnHeap$CloneToHeap: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.EnsureOnHeap: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: void <init>(org.apache.cassandra.utils.memory.MemtablePool$SubPool)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.SlabAllocator: void <init>(org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator,org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableBufferAllocator: void <init>(org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator,org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.EnsureOnHeap$NoOp: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.HeapPool$Allocator: void <init>(org.apache.cassandra.utils.memory.HeapPool)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$StatsCollector: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$1: void <init>(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: java.util.Set getAllIndexColumnFamilyStores()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getAllIndexColumnFamilyStores_15__404: java.util.function.Consumer bootstrap$(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getAllIndexColumnFamilyStores_15__404: void <init>(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void lambda$printContentsWithAnyErrors$4(java.lang.StringBuilder,org.apache.cassandra.db.lifecycle.LogReplica)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: void printContentsWithAnyErrors(java.lang.StringBuilder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: java.util.List readLines(java.io.File)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica$lambda_printContentsWithAnyErrors_0__514: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogReplica,java.lang.StringBuilder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica$lambda_printContentsWithAnyErrors_0__514: void <init>(org.apache.cassandra.db.lifecycle.LogReplica,java.lang.StringBuilder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: void lambda$getLogMessage$0(java.lang.StringBuilder,org.apache.cassandra.db.monitoring.MonitoringTask$Operation)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: void addOperation(java.lang.StringBuilder,org.apache.cassandra.db.monitoring.MonitoringTask$Operation)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$SlowOperation: java.lang.String getLogMessage()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$FailedOperation: java.lang.String getLogMessage()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask: java.lang.String access$200()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: long timeout()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: boolean isCrossNode()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$Operation: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitorableImpl: long slowTimeout()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void addFunction(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata update(java.lang.String,java.util.function.Function)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyCreateFunction(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addFunction_10__511: java.util.function.Function bootstrap$(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addFunction_10__511: void <init>(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AbstractFunction: java.util.List argTypes()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onCreateFunction(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onCreateFunction(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onCreateFunctionInternal(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void removeInvalidPreparedStatementsForFunction(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_0__491: com.google.common.base.Predicate bootstrap$(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap access$300()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: java.util.concurrent.ConcurrentMap access$200()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_1__492: com.google.common.base.Predicate bootstrap$(com.google.common.base.Predicate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap access$400()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_2__493: com.google.common.base.Predicate bootstrap$(com.google.common.base.Predicate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_2__493: void <init>(com.google.common.base.Predicate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_1__492: void <init>(com.google.common.base.Predicate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber$lambda_removeInvalidPreparedStatementsForFunction_0__491: void <init>(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addTable_5__576: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addView_6__575: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addType_7__574: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropType_9__573: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addFunction_10__511: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropFunction_12__510: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addAggregate_13__509: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropAggregate_15__508: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateKeyspace_4__464: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateType_8__461: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateFunction_11__460: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void setKeyspaceMetadata(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateAggregate_14__459: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$updateAggregate$14(org.apache.cassandra.cql3.functions.UDAggregate,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$updateFunction$11(org.apache.cassandra.cql3.functions.UDFunction,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$updateType$8(org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$updateKeyspace$4(org.apache.cassandra.schema.KeyspaceParams,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$dropAggregate$15(org.apache.cassandra.cql3.functions.UDAggregate,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$addAggregate$13(org.apache.cassandra.cql3.functions.UDAggregate,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$dropFunction$12(org.apache.cassandra.cql3.functions.UDFunction,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$addFunction$10(org.apache.cassandra.cql3.functions.UDFunction,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$dropType$9(org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$addType$7(org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$addView$6(org.apache.cassandra.config.ViewDefinition,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.KeyspaceMetadata lambda$addTable$5(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void dropFunction(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyDropFunction(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropFunction_12__510: java.util.function.Function bootstrap$(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropFunction_12__510: void <init>(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthMigrationListener: void onDropFunction(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onDropFunction(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onDropFunction(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.IAuthorizer getAuthorizer()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: org.apache.cassandra.auth.FunctionResource function(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void addAggregate(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyCreateAggregate(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addAggregate_13__509: java.util.function.Function bootstrap$(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addAggregate_13__509: void <init>(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onCreateAggregate(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onCreateAggregate(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void dropAggregate(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyDropAggregate(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropAggregate_15__508: java.util.function.Function bootstrap$(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropAggregate_15__508: void <init>(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthMigrationListener: void onDropAggregate(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onDropAggregate(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onDropAggregate(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void addView(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyCreateView(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addView_6__575: java.util.function.Function bootstrap$(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addView_6__575: void <init>(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onCreateView(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onCreateColumnFamily(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore createColumnFamilyStore(org.apache.cassandra.db.Keyspace,org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore createColumnFamilyStore(org.apache.cassandra.db.Keyspace,java.lang.String,org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore createColumnFamilyStore(org.apache.cassandra.db.Keyspace,java.lang.String,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.Directories,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: boolean isCompatible()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister: java.util.Map list()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister: org.apache.cassandra.db.Directories$SSTableLister includeBackups(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: org.apache.cassandra.db.Directories$SSTableLister sstableLister(org.apache.cassandra.db.Directories$OnTxnErr)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: int minCompactionThreshold()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: int maxCompactionThreshold()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: java.util.Iterator iterator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void addInitialSSTables(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.Directories getDirectories()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.DefaultValue: java.lang.Object value()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: java.util.concurrent.Future addIndex(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: boolean isIndex()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister: org.apache.cassandra.db.Directories$SSTableLister skipTemporary(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaryManager: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.DefaultValue: void <init>(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void <init>(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: void <init>(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void <init>(org.apache.cassandra.db.Memtable,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void <init>(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$3: void <init>(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean isDaemonInitialized()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: java.util.Collection openAll(java.util.Set,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$3: void <init>(java.util.Map$Entry,org.apache.cassandra.config.CFMetaData,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: int getAvailableProcessors()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor createWithFixedPoolSize(java.lang.String,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor createWithMaximumPoolSize(java.lang.String,int,int,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory: void <init>(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory: void <init>(java.lang.String,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory: void <init>(java.lang.String,int,java.lang.ClassLoader,java.lang.ThreadGroup)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$getDiskBoundaries__395: java.util.function.Supplier bootstrap$(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void subscribe(org.apache.cassandra.notifications.INotificationConsumer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.lifecycle.Tracker getTracker()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.compaction.CompactionStrategyManager)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$getDiskBoundaries__395: void <init>(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$1: void <init>(org.apache.cassandra.db.Directories)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$2: void <init>(org.apache.cassandra.db.Directories,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer bytes(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.lang.String join(java.lang.String[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void createDirectory(java.io.File)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void reset(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.SSTableIntervalTree: org.apache.cassandra.db.lifecycle.SSTableIntervalTree empty()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isView()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: com.codahale.metrics.Counter createTableCounter(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: com.codahale.metrics.Gauge createTableGauge(java.lang.String,com.codahale.metrics.Gauge)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: org.apache.cassandra.metrics.TableMetrics$TableTimer createTableTimer(java.lang.String,com.codahale.metrics.Timer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: org.apache.cassandra.metrics.TableMetrics$TableHistogram createTableHistogram(java.lang.String,com.codahale.metrics.Histogram,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: com.codahale.metrics.Gauge createTableGauge(java.lang.String,com.codahale.metrics.Gauge,com.codahale.metrics.Gauge)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: com.codahale.metrics.Gauge createTableGauge(java.lang.String,java.lang.String,com.codahale.metrics.Gauge,com.codahale.metrics.Gauge)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$TableMetricNameFactory: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.TopKSampler: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$2: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$3: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$4: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$5: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$6: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$7: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$8: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Metric register(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,com.codahale.metrics.Metric)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$9: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$10: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$11: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$12: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$13: void <init>(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$14: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.LatencyMetrics: void <init>(org.apache.cassandra.metrics.MetricNameFactory,java.lang.String,org.apache.cassandra.metrics.LatencyMetrics[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$15: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$16: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$17: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$18: void <init>(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$19: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$20: void <init>(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$21: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$22: void <init>(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$23: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$24: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$25: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$26: void <init>(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$27: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$28: void <init>(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$29: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$30: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$31: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$32: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$33: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$34: void <init>(org.apache.cassandra.metrics.TableMetrics,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$Sampler: org.apache.cassandra.metrics.TableMetrics$Sampler[] values()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ClearableHistogram: void <init>(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void <init>(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void <init>(boolean,int,com.codahale.metrics.Clock)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$35: void <init>(org.apache.cassandra.metrics.TableMetrics,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: boolean register(java.lang.String,java.lang.String,com.codahale.metrics.Metric)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: com.codahale.metrics.Counter createTableCounter(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$36: void <init>(org.apache.cassandra.metrics.TableMetrics,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: org.apache.cassandra.metrics.TableMetrics$TableHistogram createTableHistogram(java.lang.String,java.lang.String,com.codahale.metrics.Histogram,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: com.codahale.metrics.Histogram histogram(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$TableHistogram: void <init>(com.codahale.metrics.Histogram,com.codahale.metrics.Histogram,com.codahale.metrics.Histogram,org.apache.cassandra.metrics.TableMetrics$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$TableHistogram: void <init>(com.codahale.metrics.Histogram,com.codahale.metrics.Histogram,com.codahale.metrics.Histogram)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: org.apache.cassandra.metrics.TableMetrics$TableTimer createTableTimer(java.lang.String,java.lang.String,com.codahale.metrics.Timer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$TableTimer: void <init>(com.codahale.metrics.Timer,com.codahale.metrics.Timer,com.codahale.metrics.Timer,org.apache.cassandra.metrics.TableMetrics$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$TableTimer: void <init>(com.codahale.metrics.Timer,com.codahale.metrics.Timer,com.codahale.metrics.Timer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: void <init>(org.apache.cassandra.utils.concurrent.OpOrder$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister: void <init>(org.apache.cassandra.db.Directories,org.apache.cassandra.db.Directories$OnTxnErr,org.apache.cassandra.db.Directories$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister: void <init>(org.apache.cassandra.db.Directories,org.apache.cassandra.db.Directories$OnTxnErr)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister: void filter()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister: java.util.function.BiFunction getFilter()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File[] access$100(org.apache.cassandra.db.Directories)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.BlacklistedDirectories: boolean isUnreadable(java.io.File)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File getSnapshotDirectory(java.io.File,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.List getFiles(java.nio.file.Path,java.util.function.BiFunction,org.apache.cassandra.db.Directories$OnTxnErr)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File getBackupsDirectory(java.io.File)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: java.util.List list()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: void <init>(java.nio.file.Path,java.util.function.BiFunction,org.apache.cassandra.db.Directories$OnTxnErr)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: java.util.List innerList()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: java.util.List list(java.nio.file.DirectoryStream)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_innerList_0__378: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_innerList_1__379: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogAwareFileLister)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$isLogFile__380: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$classifyFiles__381: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogAwareFileLister)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_innerList_2__382: java.util.function.Predicate bootstrap$(org.apache.cassandra.db.lifecycle.LogAwareFileLister)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$getKey__383: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$getKey__383: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_innerList_2__382: void <init>(org.apache.cassandra.db.lifecycle.LogAwareFileLister)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$classifyFiles__381: void <init>(org.apache.cassandra.db.lifecycle.LogAwareFileLister)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$isLogFile__380: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$toFile__384: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_list_3__385: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_list_3__385: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$toFile__384: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_innerList_1__379: void <init>(org.apache.cassandra.db.lifecycle.LogAwareFileLister)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_innerList_0__378: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File getOrCreate(java.io.File,java.lang.String[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister$lambda_getFilter_0__386: java.util.function.BiFunction bootstrap$(org.apache.cassandra.db.Directories$SSTableLister)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister$lambda_getFilter_0__386: void <init>(org.apache.cassandra.db.Directories$SSTableLister)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: java.util.concurrent.Future reloadIndex(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: java.util.concurrent.Future createIndex(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: java.util.concurrent.Callable getInitializationTask()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: void register(org.apache.cassandra.index.IndexRegistry)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void markIndexBuilt(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: org.apache.cassandra.index.Index createInstance(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: boolean isCustom()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: org.apache.cassandra.index.internal.CassandraIndex newIndex(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$1: org.apache.cassandra.index.internal.CassandraIndex newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$6: org.apache.cassandra.index.internal.CassandraIndex newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$5: org.apache.cassandra.index.internal.CassandraIndex newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$7: org.apache.cassandra.index.internal.CassandraIndex newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$3: org.apache.cassandra.index.internal.CassandraIndex newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$2: org.apache.cassandra.index.internal.CassandraIndex newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$4: org.apache.cassandra.index.internal.CassandraIndex newIndexInstance(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.TargetParser: org.apache.cassandra.utils.Pair parse(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: org.apache.cassandra.index.internal.CassandraIndexFunctions getFunctions(org.apache.cassandra.schema.IndexMetadata,org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: boolean isKeys()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.TargetParser: org.apache.cassandra.utils.Pair parse(org.apache.cassandra.config.CFMetaData,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Collection allColumns()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.ColumnDefinition getColumnDefinition(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Type: org.apache.cassandra.cql3.statements.IndexTarget$Type fromString(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.composites.PartitionKeyIndex: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: void setMetadata(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: org.apache.cassandra.config.CFMetaData indexCfsMetadata(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: org.apache.cassandra.db.marshal.AbstractType partitionOrdering()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.lang.String indexColumnFamilyName(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder addClusteringColumn(java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder addPartitionKey(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder withPartitioner(org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData reloadIndexMetadataProperties(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData build()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder addRegularColumn(java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder withId(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables$DefaultNames: java.lang.String defaultCompactValueName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$6: org.apache.cassandra.config.CFMetaData$Builder addIndexClusteringColumns(org.apache.cassandra.config.CFMetaData$Builder,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$6: org.apache.cassandra.db.marshal.AbstractType getIndexedValueType(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$5: org.apache.cassandra.db.marshal.AbstractType getIndexedValueType(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$7: org.apache.cassandra.db.marshal.AbstractType getIndexedValueType(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndexFunctions$3: org.apache.cassandra.config.CFMetaData$Builder addIndexClusteringColumns(org.apache.cassandra.config.CFMetaData$Builder,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder create(java.lang.String,java.lang.String,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder create(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables: org.apache.cassandra.db.CompactTables$DefaultNames defaultNameGenerator(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables$DefaultNames: void <init>(java.util.Set,org.apache.cassandra.db.CompactTables$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables$DefaultNames: void <init>(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder create(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder addClusteringColumn(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.CompositeType getInstance(org.apache.cassandra.db.marshal.AbstractType[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$1: void <init>(org.apache.cassandra.dht.LocalPartitioner)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$TokenFactory: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder addRegularColumn(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: void <init>(java.lang.String,java.lang.String,java.util.UUID,boolean,boolean,boolean,boolean,boolean,java.util.List,java.util.List,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.CFMetaData$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder$getPartitioner__195: java.util.function.Supplier bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder$getPartitioner__195: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: void <init>(java.lang.String,java.lang.String,java.util.UUID,boolean,boolean,boolean,boolean,boolean,java.util.List,java.util.List,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: void rebuild()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers: org.apache.cassandra.schema.Triggers none()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: org.apache.cassandra.schema.Indexes none()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: byte[] toWriteUTFBytes(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: boolean recalculateIsDense(org.apache.cassandra.db.Columns)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: org.apache.cassandra.config.ColumnDefinition getComplex(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: org.apache.cassandra.schema.Indexes$Builder builder()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes$Builder: org.apache.cassandra.schema.Indexes build()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: void <init>(org.apache.cassandra.schema.Indexes$Builder,org.apache.cassandra.schema.Indexes$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: void <init>(org.apache.cassandra.schema.Indexes$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes$Builder: void <init>(org.apache.cassandra.schema.Indexes$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes$Builder: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers: org.apache.cassandra.schema.Triggers$Builder builder()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers$Builder: org.apache.cassandra.schema.Triggers build()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers: void <init>(org.apache.cassandra.schema.Triggers$Builder,org.apache.cassandra.schema.Triggers$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers: void <init>(org.apache.cassandra.schema.Triggers$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers$Builder: void <init>(org.apache.cassandra.schema.Triggers$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers$Builder: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: void <init>(org.apache.cassandra.db.marshal.AbstractType[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.config.ColumnDefinition getCompactValueColumn(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables: org.apache.cassandra.config.ColumnDefinition getCompactValueColumn(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.db.CompactTables$DefaultNames columnNameGenerator(java.util.List,java.util.List,org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.config.ColumnDefinition getSuperCfKeyColumn(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.db.CompactTables$DefaultNames)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.config.ColumnDefinition getSuperCfValueColumn(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.CompactTables$DefaultNames)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.config.ColumnDefinition getSuperCfSschemaRepresentation(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: org.apache.cassandra.db.PartitionColumns of(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.List extractTypes(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: org.apache.cassandra.db.Columns of(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: java.lang.Object[] singleton(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean equals(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables$DefaultNames: java.lang.String defaultClusteringName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: int simpleColumnCount()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: int complexColumnCount()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: org.apache.cassandra.config.ColumnDefinition getSimple(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: boolean isSuperColumnMapColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder$getPartitioner__195: java.lang.Object get()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$fileLength__560: java.lang.Object get()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$estimatedSize__429: java.lang.Object get()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.dht.IPartitioner getPartitioner()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData params(org.apache.cassandra.schema.TableParams)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder gcGraceSeconds(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder dcLocalReadRepairChance(double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams build()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder readRepairChance(double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder caching(org.apache.cassandra.schema.CachingParams)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams: org.apache.cassandra.schema.TableParams$Builder builder(org.apache.cassandra.schema.TableParams)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder cdc(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder extensions(java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder speculativeRetry(org.apache.cassandra.schema.SpeculativeRetryParam)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder minIndexInterval(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder memtableFlushPeriodInMs(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder maxIndexInterval(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder defaultTimeToLive(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder crcCheckChance(double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder compression(org.apache.cassandra.schema.CompressionParams)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder compaction(org.apache.cassandra.schema.CompactionParams)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder comment(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.TableParams$Builder bloomFilterFpChance(double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams: void <init>(org.apache.cassandra.schema.TableParams$Builder,org.apache.cassandra.schema.TableParams$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams: void <init>(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: java.lang.String access$000(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: double defaultBloomFilterFbChance()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: double access$100(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: double access$200(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: java.lang.Double access$300(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.CompactionParams access$400(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: int access$500(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: int access$600(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: int access$700(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: int access$800(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: int access$900(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.SpeculativeRetryParam access$1000(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.CachingParams access$1100(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: org.apache.cassandra.schema.CompressionParams access$1200(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: com.google.common.collect.ImmutableMap access$1300(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Builder: boolean access$1400(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.composites.RegularColumnIndex: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.composites.ClusteringColumnIndex: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.composites.CollectionEntryIndex: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.composites.CollectionKeyIndex: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.composites.CollectionValueIndex: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.keys.KeysIndex: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void setIndexBuilt(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: org.apache.cassandra.schema.IndexMetadata getIndexMetadata()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: boolean isBuilt()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: boolean isEmpty()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: java.util.concurrent.Callable getBuildIndexTask()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex$lambda_getBuildIndexTask_5__396: java.util.concurrent.Callable bootstrap$(org.apache.cassandra.index.internal.CassandraIndex)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex$lambda_getBuildIndexTask_5__396: void <init>(org.apache.cassandra.index.internal.CassandraIndex)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: boolean isEmpty()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: long getOperations()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: boolean isIndexBuilt(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Function)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: boolean isDummy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: void setupOnline(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.util.Set emptySet()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void setupOnline()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void setCrcCheckChance(double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.db.ColumnFamilyStore getColumnFamilyStoreInstance(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$lambda_setCrcCheckChance_4__581: java.util.function.Consumer bootstrap$(double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: java.util.Optional compressionMetadata()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$lambda_setCrcCheckChance_4__581: void <init>(double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.utils.Pair apply(com.google.common.base.Predicate,com.google.common.base.Function)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$7: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$6: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$5: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$lambda_dropSSTables_0__223: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: org.apache.cassandra.db.lifecycle.View lambda$dropSSTables$0(com.google.common.base.Predicate,org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: com.google.common.base.Predicate notIn(java.util.Set[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: com.google.common.base.Predicate orIn(java.util.Collection[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.ColumnData lambda$filter$3(java.util.function.Predicate,java.util.Map,org.apache.cassandra.db.filter.ColumnFilter,boolean,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.LivenessInfo,java.util.function.Predicate,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData filter(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.config.CFMetaData$DroppedColumn,org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$lambda_inOrderInclusionTester_1__311: boolean test(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: boolean lambda$inOrderInclusionTester$1(org.apache.cassandra.utils.SearchIterator,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_filter_0__487: com.google.common.base.Function bootstrap$(org.apache.cassandra.config.CFMetaData$DroppedColumn,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.filter.ColumnFilter$Tester,org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_filter_0__487: void <init>(org.apache.cassandra.config.CFMetaData$DroppedColumn,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.filter.ColumnFilter$Tester,org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.ColumnData lambda$withOnlyQueriedData$4(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: boolean fetchedColumnIsQueried(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData withOnlyQueriedData(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_withOnlyQueriedData_2__486: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.rows.ComplexColumnData,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$lambda_withOnlyQueriedData_2__486: void <init>(org.apache.cassandra.db.rows.ComplexColumnData,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$2: org.apache.cassandra.cql3.ColumnIdentifier apply(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.RawSelector$1: org.apache.cassandra.cql3.selection.Selectable apply(org.apache.cassandra.cql3.selection.RawSelector)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithTerm$Raw: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$Literal: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection$Raw: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFunction$Raw: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithCast$Raw: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL$Raw: org.apache.cassandra.cql3.selection.Selectable prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL$Raw: org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL: void <init>(org.apache.cassandra.config.ColumnDefinition,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$Literal: org.apache.cassandra.config.ColumnDefinition prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$Literal: org.apache.cassandra.config.ColumnDefinition find(java.nio.ByteBuffer,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$Literal: org.apache.cassandra.config.ColumnDefinition find(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$Literal: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: java.lang.String maybeQuote(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.ReservedKeywords: boolean isReserved(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithCast$Raw: org.apache.cassandra.cql3.selection.Selectable$WithCast prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithCast: void <init>(org.apache.cassandra.cql3.selection.Selectable,org.apache.cassandra.cql3.CQL3Type)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithTerm: void <init>(org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionName: boolean equalsNativeFunction(org.apache.cassandra.cql3.functions.FunctionName)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithToJSonFunction: void <init>(java.util.List,org.apache.cassandra.cql3.selection.Selectable$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFunction: void <init>(org.apache.cassandra.cql3.functions.Function,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AbstractFunction: org.apache.cassandra.db.marshal.AbstractType returnType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionName: org.apache.cassandra.cql3.functions.FunctionName nativeFunction(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithTerm: org.apache.cassandra.cql3.Term$Raw access$100(org.apache.cassandra.cql3.selection.Selectable$WithTerm)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionResolver: org.apache.cassandra.cql3.functions.Function get(java.lang.String,org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.Collection getFunctions(org.apache.cassandra.cql3.functions.FunctionName)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionName: org.apache.cassandra.cql3.functions.FunctionName asNativeFunction()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TokenFct: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FromJsonFct: org.apache.cassandra.cql3.functions.FromJsonFct getInstance(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionResolver: void validateTypes(java.lang.String,org.apache.cassandra.cql3.functions.Function,java.util.List,java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionResolver: org.apache.cassandra.cql3.AssignmentTestable$TestResult matchAguments(java.lang.String,org.apache.cassandra.cql3.functions.Function,java.util.List,java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionResolver: java.lang.String format(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionResolver$toString__183: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionResolver$toString__183: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithTerm: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$RawDelayedColumnValue: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$ColumnValue: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$UnsetLiteral: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$Raw: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$NullLiteral: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall$Raw: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.TypeCast: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AbstractFunction: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAssignment(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionResolver: org.apache.cassandra.cql3.ColumnSpecification makeArgSpec(java.lang.String,java.lang.String,org.apache.cassandra.cql3.functions.Function,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionName: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean isValueCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.db.marshal.AbstractType freeze()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean isFreezable()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.db.marshal.AbstractType freeze()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.db.marshal.AbstractType freeze()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isReversed()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: boolean isFreezable()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: boolean isReversed()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isFreezable()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType freeze()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isValueCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: boolean isValueCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: org.apache.cassandra.db.marshal.AbstractType freeze()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DurationType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SimpleDateType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BytesType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: boolean isValueCompatibleWithInternal(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: boolean isValueCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: boolean isValueCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: boolean isValueCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BytesType: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UTF8Type: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isCompatibleWith(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: boolean isCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: boolean isCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: boolean isCompatibleWithFrozen(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionName: boolean equals(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists: org.apache.cassandra.cql3.ColumnSpecification valueSpecOf(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.AssignmentTestable$TestResult: org.apache.cassandra.cql3.AssignmentTestable$TestResult testAll(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets: org.apache.cassandra.cql3.ColumnSpecification valueSpecOf(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Literal: void validateAssignableTo(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.AssignmentTestable$TestResult: boolean isAssignable()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.FieldIdentifier fieldName(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes: org.apache.cassandra.cql3.ColumnSpecification fieldSpecOf(org.apache.cassandra.cql3.ColumnSpecification,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal: void validateAssignableTo(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples: boolean checkIfTupleType(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples: org.apache.cassandra.db.marshal.TupleType getTupleType(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples: org.apache.cassandra.cql3.ColumnSpecification componentSpecOf(org.apache.cassandra.cql3.ColumnSpecification,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$UserDefined: boolean isUDT()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Collection: boolean isCollection()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps: org.apache.cassandra.cql3.ColumnSpecification keySpecOf(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps: org.apache.cassandra.cql3.ColumnSpecification valueSpecOf(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FromJsonFct: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.NativeScalarFunction: void <init>(java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.NativeFunction: void <init>(java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AbstractFunction: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TokenFct: org.apache.cassandra.db.marshal.AbstractType[] getKeyTypes(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithToJSonFunction: void <init>(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection$Raw: org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection: void <init>(org.apache.cassandra.cql3.selection.Selectable,org.apache.cassandra.cql3.FieldIdentifier)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn: org.apache.cassandra.config.ColumnDefinition prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Views: org.apache.cassandra.config.CFMetaData lambda$metadatas$0(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.io.sstable.format.SSTableReader lambda$restoreUpdatedOriginals$0(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.io.sstable.format.SSTableReader current(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader cloneWithRestoredStart(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader cloneAndReplace(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader cloneAndReplace(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason,org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: org.apache.cassandra.io.sstable.IndexSummary sharedCopy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: void <init>(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WrappedSharedCloseable: void <init>(org.apache.cassandra.utils.concurrent.WrappedSharedCloseable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: org.apache.cassandra.io.util.FileHandle sharedCopy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: org.apache.cassandra.utils.IFilter sharedCopy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: org.apache.cassandra.utils.IFilter sharedCopy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader internalOpen(org.apache.cassandra.io.sstable.Descriptor,java.util.Set,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.FileHandle,org.apache.cassandra.io.util.FileHandle,org.apache.cassandra.io.sstable.IndexSummary,org.apache.cassandra.utils.IFilter,long,org.apache.cassandra.io.sstable.metadata.StatsMetadata,org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: void <init>(org.apache.cassandra.utils.BloomFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: void <init>(org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$State: boolean contains(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.lang.Object select(java.lang.Object,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.UUID getHostIdForEndpoint(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.UUID getHostId(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: org.apache.cassandra.db.rows.UnfilteredRowIterator lambda$shadowSources$3(org.apache.cassandra.db.DecoratedKey,boolean,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: org.apache.cassandra.db.rows.UnfilteredRowIterator getShadowIterator(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.DecoratedKey,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableReader: org.apache.cassandra.db.rows.UnfilteredRowIterator simpleIterator(org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.db.RowIndexEntry getPosition(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.io.sstable.format.SSTableReader$Operator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$openDataFile__545: java.util.function.Function bootstrap$(org.apache.cassandra.db.compaction.CompactionController)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$openDataFile__545: void <init>(org.apache.cassandra.db.compaction.CompactionController)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$openDataFile__545: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: org.apache.cassandra.io.util.FileDataInput openDataFile(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.util.RandomAccessReader openDataReader(com.google.common.util.concurrent.RateLimiter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.util.RandomAccessReader openDataReader()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.db.RowIndexEntry getPosition(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.io.sstable.format.SSTableReader$Operator,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: org.apache.cassandra.io.sstable.SSTableIdentityIterator create(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.db.DecoratedKey,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableIdentityIterator: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DeletionTime,java.lang.String,org.apache.cassandra.io.sstable.SSTableSimpleIterator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator: org.apache.cassandra.io.sstable.SSTableSimpleIterator createTombstoneOnly(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator: org.apache.cassandra.io.sstable.SSTableSimpleIterator create(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.io.sstable.SSTableSimpleIterator$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.io.sstable.SSTableSimpleIterator$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.io.sstable.SSTableSimpleIterator$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatTombstoneIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.io.sstable.SSTableSimpleIterator$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatTombstoneIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.io.sstable.SSTableSimpleIterator$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatTombstoneIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatTombstoneIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatTombstoneIterator: org.apache.cassandra.db.rows.Row readStaticRow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatTombstoneIterator: org.apache.cassandra.db.rows.Row readStaticRow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatIterator: org.apache.cassandra.db.rows.Row readStaticRow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatIterator: org.apache.cassandra.db.rows.Row readStaticRow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: void reset(org.apache.cassandra.io.util.DataPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer: void setSkipStatic()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.rows.Row extractStaticColumns(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.Columns)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyAtom readLegacyAtomSkippingUnknownColumn(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: boolean hasStatic()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1: java.lang.Iterable apply(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1$1: void <init>(org.apache.cassandra.db.CounterMutation$1,org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.StreamStateCompositeData$1: javax.management.openmbean.CompositeData apply(org.apache.cassandra.streaming.SessionInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.SessionInfoCompositeData: javax.management.openmbean.CompositeData toCompositeData(java.util.UUID,org.apache.cassandra.streaming.SessionInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: java.util.Collection getSendingFiles()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: java.util.Collection getReceivingFiles()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.SessionInfoCompositeData$1: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.SessionInfoCompositeData$2: void <init>(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.SessionInfoCompositeData: javax.management.openmbean.CompositeData[] toArrayOfCompositeData(java.util.Collection,com.google.common.base.Function)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: boolean equals(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.LivenessInfo: boolean equals(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: boolean equals(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.Cell lambda$withOnlyQueriedData$2(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter: boolean fetchedCellIsQueried(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.Cell lambda$filter$0(org.apache.cassandra.config.CFMetaData$DroppedColumn,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.filter.ColumnFilter$Tester,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Tester: boolean fetchedCellIsQueried(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.Cell lambda$purge$1(org.apache.cassandra.db.DeletionPurger,int,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.Cell lambda$updateAllTimestamp$3(long,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: org.apache.cassandra.db.rows.Cell updateAllTimestamp(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$2: org.apache.cassandra.db.marshal.AbstractType apply(org.apache.cassandra.cql3.selection.Selector$Factory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector$1: org.apache.cassandra.db.marshal.AbstractType getReturnType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1: org.apache.cassandra.db.marshal.AbstractType getReturnType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector$1: org.apache.cassandra.db.marshal.AbstractType getReturnType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: org.apache.cassandra.db.marshal.AbstractType getReturnType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector$1: org.apache.cassandra.db.marshal.AbstractType getReturnType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$1: java.lang.String apply(org.apache.cassandra.cql3.selection.Selector$Factory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector$1: java.lang.String getColumnName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1: java.lang.String getColumnName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector$1: java.lang.String getColumnName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: java.lang.String getColumnName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector$1: java.lang.String getColumnName()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: java.util.List getColumnNames()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$CastFunction: java.lang.String columnName(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$1: java.lang.String columnName(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AbstractFunction: java.lang.String columnName(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$CastFunction: org.apache.cassandra.db.marshal.AbstractType outputType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts: java.lang.String access$000(org.apache.cassandra.cql3.CQL3Type)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts: java.lang.String toLowerCaseString(org.apache.cassandra.cql3.CQL3Type)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$1: void <init>(org.apache.cassandra.cql3.selection.SelectorFactories)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog: org.apache.cassandra.hints.HintsStore get(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog$lambda_get_1__434: java.util.function.Function bootstrap$(org.apache.cassandra.hints.HintsCatalog)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog$lambda_get_1__434: void <init>(org.apache.cassandra.hints.HintsCatalog)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.SessionInfoCompositeData$1: javax.management.openmbean.CompositeData apply(org.apache.cassandra.streaming.StreamSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.StreamSummaryCompositeData: javax.management.openmbean.CompositeData toCompositeData(org.apache.cassandra.streaming.StreamSummary)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.SessionInfoCompositeData$2: javax.management.openmbean.CompositeData apply(org.apache.cassandra.streaming.ProgressInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.ProgressInfoCompositeData: javax.management.openmbean.CompositeData toCompositeData(java.util.UUID,org.apache.cassandra.streaming.ProgressInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1$1: java.lang.Iterable apply(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1$1$1: void <init>(org.apache.cassandra.db.CounterMutation$1$1,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: java.lang.String lambda$onMergedRangeTombstoneMarkers$0(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: java.lang.String lambda$makeResponsesDebugString$1(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse: java.lang.String toDebugString(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DataResponse: java.nio.ByteBuffer digest(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator makeIterator(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse: java.nio.ByteBuffer digest(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse: java.lang.String toDebugString(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DigestResponse: java.nio.ByteBuffer digest(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker: java.lang.String toString(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: java.lang.String toString(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: java.lang.String toString(org.apache.cassandra.config.CFMetaData,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$2: java.lang.String toString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$1: java.lang.String toString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_1__361: java.util.function.Function bootstrap$(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_2__360: java.util.function.Function bootstrap$(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_3__359: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_3__359: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_2__360: void <init>(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow$lambda_toString_1__361: void <init>(org.apache.cassandra.db.marshal.CollectionType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$1: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: boolean contains(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: boolean contains(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: boolean contains(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean contains(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse$1: void <init>(org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse,org.apache.cassandra.db.ReadCommand,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean contains(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer$1: void <init>(org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer,boolean,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$1$1$1: java.lang.Object apply(org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$5: org.apache.cassandra.db.lifecycle.View apply(org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$6: org.apache.cassandra.db.lifecycle.View apply(org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Predicate access$000(java.lang.Comparable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Predicate lessThan(java.lang.Comparable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$8: void <init>(java.lang.Comparable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$7: org.apache.cassandra.db.lifecycle.View apply(org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.util.Set emptySet()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams$Option: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor$UncomplainingRunnable: void <init>(java.lang.Runnable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean isCompatible()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: void addView(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: void removeView(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isInitialized()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition: org.apache.cassandra.config.CFMetaData baseTableMetadata()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: org.apache.cassandra.config.ViewDefinition getDefinition()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: void removeByName(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void setViewRemoved(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.repair.SystemDistributedKeyspace: void setViewRemoved(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.repair.SystemDistributedKeyspace: void forceBlockingFlush(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$lambda_removeByName_2__388: java.util.function.Predicate bootstrap$(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$lambda_removeByName_2__388: boolean test(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: boolean lambda$removeByName$2(java.lang.String,org.apache.cassandra.db.view.View)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$lambda_removeByName_2__388: void <init>(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.config.CFMetaData getCFMetaData(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: boolean hasColumnFamilyStore(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: void <init>(org.apache.cassandra.config.ViewDefinition,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: void updateDefinition(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ConcurrentBiMap: boolean containsKey(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ConcurrentBiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void addTable(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyCreateColumnFamily(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addTable_5__576: java.util.function.Function bootstrap$(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addTable_5__576: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void addType(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyCreateUserType(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addType_7__574: java.util.function.Function bootstrap$(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_addType_7__574: void <init>(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: java.lang.String getNameAsString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onCreateUserType(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void dropType(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyDropUserType(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropType_9__573: java.util.function.Function bootstrap$(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_dropType_9__573: void <init>(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onDropUserType(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void lambda$updateKeyspace$24(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void dropTable(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void unload(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void interruptCompactionFor(java.lang.Iterable,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyDropColumnFamily(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: void forceRecycleAllSegments(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void dropCf(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean isAutoSnapshot()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.lang.String getTimestampedSnapshotNameWithPrefix(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.lang.String getTimestampedSnapshotName(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void shutdown()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.compaction.CompactionStrategyManager getCompactionStrategyManager()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void unloadCf(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void interruptCompactionForCFs(java.lang.Iterable,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo: org.apache.cassandra.config.CFMetaData getCFMetaData()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo: org.apache.cassandra.db.compaction.OperationType getTaskType()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.commitlog.CommitLogPosition forceBlockingFlush()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void invalidate()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void invalidate(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void dropSSTables()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void invalidateAllIndexesBlocking()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void invalidateCaches()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void unregisterMBean()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void removeTruncationRecord(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void waitForDeletions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: void waitForDeletions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: void release()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.LatencyMetrics: void release()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: boolean remove(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName,org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CassandraMetricsRegistry: void removeAlias(org.apache.cassandra.metrics.CassandraMetricsRegistry$MetricName)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService: void invalidateKeyCacheForCf(org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService: void invalidateRowCacheForCf(org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService: void invalidateCounterCacheForCf(org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: java.util.Iterator keyIterator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: java.util.Iterator keyIterator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void markAllIndexesRemoved()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$getInvalidateTask__448: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void executeAllBlocking(java.util.stream.Stream,java.util.function.Function)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_executeAllBlocking_28__408: java.util.function.Consumer bootstrap$(java.util.function.Function,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_executeAllBlocking_28__408: void <init>(java.util.function.Function,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$getInvalidateTask__448: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$markIndexRemoved__449: java.util.function.Consumer bootstrap$(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: java.util.List getBuiltIndexNames()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBuiltIndexNames_14__450: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$add__451: java.util.function.Consumer bootstrap$(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.List getBuiltIndexes(java.lang.String,java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_getBuiltIndexes_2__452: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_getBuiltIndexes_2__452: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$add__451: void <init>(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBuiltIndexNames_14__450: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void lambda$updateKeyspace$23(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void dropView(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void unload(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyDropView(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onDropView(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SizeEstimatesRecorder: void onDropColumnFamily(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthMigrationListener: void onDropColumnFamily(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.slf4j.Logger access$500()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void removeInvalidPreparedStatements(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void removeInvalidPreparedStatements(java.util.Iterator,java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void removeInvalidPersistentPreparedStatements(java.util.Iterator,java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: boolean shouldInvalidate(java.lang.String,java.lang.String,org.apache.cassandra.cql3.CQLStatement)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.lang.String columnFamily()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.lang.String keyspace()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: java.lang.String columnFamily()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: java.lang.String keyspace()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: java.util.List getStatements()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void clearSizeEstimates(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ConcurrentBiMap: java.lang.Object remove(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask$lambda_run_0__567: void accept(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask: void lambda$run$0(org.apache.cassandra.hints.HintsBuffer,org.apache.cassandra.hints.HintsStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: void access$100(org.apache.cassandra.hints.HintsWriteExecutor,java.util.Iterator,org.apache.cassandra.hints.HintsStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: java.util.Iterator consumingHintsIterator(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$1: void <init>(org.apache.cassandra.hints.HintsBuffer,java.util.Queue)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: java.nio.ByteBuffer access$000(org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: void flush(java.util.Iterator,org.apache.cassandra.hints.HintsStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: void flushInternal(java.util.Iterator,org.apache.cassandra.hints.HintsStore)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getMaxHintsFileSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder: org.apache.cassandra.schema.Functions$Builder add(org.apache.cassandra.cql3.functions.Function)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms: void lambda$addFunctions$0(java.util.List,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$DelayedColumnValue: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$markIndexRemoved__449: void <init>(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable dropSSTables(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable dropSSTables(com.google.common.base.Predicate,org.apache.cassandra.db.compaction.OperationType,java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: org.apache.cassandra.db.compaction.OperationType type()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Object finish()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$lambda_dropSSTables_0__223: com.google.common.base.Function bootstrap$(com.google.common.base.Predicate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier: void abort()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$lambda_dropSSTables_0__223: void <init>(com.google.common.base.Predicate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void prepareToCommit()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void commit()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: java.lang.Throwable commit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$TransactionalProxy: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter$TransactionalProxy: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter$TransactionalProxy: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: java.lang.Throwable doCommit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: java.lang.Throwable commit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter$complete__571: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter$complete__572: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter$complete__572: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter$complete__571: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: org.apache.cassandra.db.compaction.OperationType type()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.notifications.SSTableListChangedNotification: void <init>(java.util.Collection,java.util.Collection,org.apache.cassandra.db.compaction.OperationType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Throwable unmarkCompacting(java.util.Set,java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable dropSSTablesIfInvalid(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function updateCompacting(java.util.Set,java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$2: void <init>(java.lang.Iterable,java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: boolean isValid()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$commit__224: org.apache.cassandra.utils.Throwables$DiscreteAction bootstrap$(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: java.lang.Throwable complete(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: java.util.UUID id()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: java.util.UUID id()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$commit__224: void <init>(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: java.lang.Throwable commit(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter: org.apache.cassandra.io.util.SequentialWriter access$000(org.apache.cassandra.io.util.ChecksummedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: org.apache.cassandra.io.compress.CompressionMetadata$Writer access$000(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: java.lang.Throwable close(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter access$100(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.util.FileHandle$Builder access$700(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: java.lang.Throwable close(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: java.lang.Throwable close(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: java.lang.Throwable close(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$TransactionalProxy: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter$TransactionalProxy: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter$TransactionalProxy: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: void doPrepare()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: void prepareToCommit()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: org.apache.cassandra.io.sstable.format.SSTableWriter setOpenResult(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: org.apache.cassandra.io.sstable.format.SSTableReader finished()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: org.apache.cassandra.io.sstable.format.SSTableWriter setRepairedAt(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: long getFilePointer()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: void switchWriter(org.apache.cassandra.io.sstable.format.SSTableWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: void moveStarts(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: void abort()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.sstable.format.SSTableReader openFinalEarly()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: org.apache.cassandra.io.sstable.format.SSTableWriter setMaxDataAge(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void sync()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.sstable.format.SSTableReader openFinal(org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: org.apache.cassandra.io.util.SequentialWriter access$000(org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void syncInternal()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Builder: org.apache.cassandra.io.util.FileHandle$Builder withCompressionMetadata(org.apache.cassandra.io.compress.CompressionMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: org.apache.cassandra.io.compress.CompressionMetadata open(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void invalidateCacheAtBoundary(org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: org.apache.cassandra.io.sstable.metadata.StatsMetadata statsMetadata()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: java.util.Map finalizeMetadata()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: java.util.Map finalizeMetadata(java.lang.String,double,long,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker: long min()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker: long max()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker: int min()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker: int max()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.SerializationHeader$Component toComponent()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: java.util.List makeList(java.nio.ByteBuffer[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: void <init>(org.apache.cassandra.db.marshal.AbstractType,java.util.List,java.util.Map,java.util.Map,org.apache.cassandra.db.rows.EncodingStats,org.apache.cassandra.db.SerializationHeader$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: void <init>(org.apache.cassandra.db.marshal.AbstractType,java.util.List,java.util.Map,java.util.Map,org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$lambda_invalidateCacheAtBoundary_1__558: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.sstable.format.big.BigTableWriter,org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: long dataLength()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$lambda_dataLength_0__559: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$fileLength__560: java.util.function.Supplier bootstrap$(org.apache.cassandra.io.util.RebuffererFactory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$fileLength__560: void <init>(org.apache.cassandra.io.util.RebuffererFactory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$lambda_dataLength_0__559: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$lambda_weightedSize_2__428: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: java.lang.Long lambda$weightedSize$2(com.github.benmanes.caffeine.cache.Policy$Eviction)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$estimatedSize__431: java.util.function.LongSupplier bootstrap$(com.github.benmanes.caffeine.cache.LoadingCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$estimatedSize__431: void <init>(com.github.benmanes.caffeine.cache.LoadingCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$estimatedSize__431: long getAsLong()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: java.lang.Long lambda$dataLength$0(org.apache.cassandra.io.compress.CompressionMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$lambda_dataLength_0__559: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$lambda_invalidateCacheAtBoundary_1__558: void <init>(org.apache.cassandra.io.sstable.format.big.BigTableWriter,org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: org.apache.cassandra.io.compress.CompressionMetadata open(long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: void <init>(java.lang.String,org.apache.cassandra.schema.CompressionParams,org.apache.cassandra.io.util.SafeMemory,long,long,long,org.apache.cassandra.utils.ChecksumType,org.apache.cassandra.io.compress.CompressionMetadata$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: void <init>(java.lang.String,org.apache.cassandra.schema.CompressionParams,org.apache.cassandra.io.util.SafeMemory,long,long,long,org.apache.cassandra.utils.ChecksumType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: long position()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter$InvalidateKeys: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,java.util.Collection,org.apache.cassandra.io.sstable.SSTableRewriter$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter$InvalidateKeys: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: void put(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: void put(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: void put(org.apache.cassandra.cache.IMeasurableMemory,org.apache.cassandra.cache.IMeasurableMemory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void checkpoint()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: java.lang.Iterable filterIn(java.lang.Iterable,java.util.Set[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$State: void log(org.apache.cassandra.db.lifecycle.LifecycleTransaction$State)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Iterable fresh()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.util.Set toUpdate()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers: void checkNotReplaced(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: boolean isReplaced()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: java.lang.Iterable current()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void prepareToCommit()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter: java.util.Optional access$200(org.apache.cassandra.io.util.ChecksummedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter: org.apache.cassandra.io.util.ChecksumWriter access$100(org.apache.cassandra.io.util.ChecksummedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter$TransactionalProxy$writeFullChecksum__441: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.util.ChecksumWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter$TransactionalProxy$writeFullChecksum__441: void <init>(org.apache.cassandra.io.util.ChecksumWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.io.sstable.metadata.MetadataCollector addCompressionRatio(long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: org.apache.cassandra.io.compress.CompressionMetadata$Writer finalizeLength(long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: void access$100(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: java.util.Optional access$300(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: org.apache.cassandra.io.util.ChecksumWriter access$200(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy$writeFullChecksum__561: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.util.ChecksumWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: org.apache.cassandra.io.sstable.metadata.MetadataCollector access$600(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: long access$400(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: long access$500(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: long access$700(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: int access$800(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy$writeFullChecksum__561: void <init>(org.apache.cassandra.io.util.ChecksumWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: java.nio.ByteBuffer access$900(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: java.nio.ByteBuffer access$902(org.apache.cassandra.io.compress.CompressedSequentialWriter,java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: void writeHeader(java.io.DataOutput,long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: java.util.Map access$200(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void access$300(org.apache.cassandra.io.sstable.format.big.BigTableWriter,org.apache.cassandra.io.sstable.Descriptor,java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: java.util.Set access$400(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void access$500(org.apache.cassandra.io.sstable.Descriptor,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.sstable.format.SSTableReader access$600(org.apache.cassandra.io.sstable.format.big.BigTableWriter,org.apache.cassandra.io.sstable.format.SSTableReader$OpenReason)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: void appendTOC(org.apache.cassandra.io.sstable.Descriptor,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void writeMetadata(org.apache.cassandra.io.sstable.Descriptor,java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer: void serialize(java.util.Map,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.io.sstable.format.Version)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void serialize(java.util.Map,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.io.sstable.format.Version)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void <init>(java.io.File,org.apache.cassandra.io.util.SequentialWriterOption)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void finish()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: boolean finishOnClose()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: org.apache.cassandra.io.util.SequentialWriter$TransactionalProxy txnProxy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter: org.apache.cassandra.io.util.SequentialWriter$TransactionalProxy txnProxy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: org.apache.cassandra.io.util.SequentialWriter$TransactionalProxy txnProxy()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: java.nio.ByteBuffer allocateBuffer()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: java.nio.channels.FileChannel openChannel(java.io.File)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SyncUtil: void trySyncDir(java.io.File)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SyncUtil: void trySync(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: void trySync(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryDarwin: int callFsync(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryWindows: int callFsync(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryLinux: int callFsync(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter$TransactionalProxy: void <init>(org.apache.cassandra.io.util.SequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter$TransactionalProxy: void <init>(org.apache.cassandra.io.util.ChecksummedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter$TransactionalProxy: void <init>(org.apache.cassandra.io.compress.CompressedSequentialWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer: int serializedSize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.MetadataComponent)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer: int serializedSize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.MetadataComponent)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer: int serializedSize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.MetadataComponent)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: int serializedSize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.MetadataComponent)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer: void serialize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.MetadataComponent,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer: void serialize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.MetadataComponent,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer: void serialize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.MetadataComponent,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: void serialize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.MetadataComponent,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: void serialize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader$Component,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: void writeColumnsWithTypes(java.util.Map,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: void writeType(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: org.apache.cassandra.db.rows.EncodingStats access$400(org.apache.cassandra.db.SerializationHeader$Component)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: org.apache.cassandra.db.marshal.AbstractType access$500(org.apache.cassandra.db.SerializationHeader$Component)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: java.util.List access$600(org.apache.cassandra.db.SerializationHeader$Component)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: java.util.Map access$700(org.apache.cassandra.db.SerializationHeader$Component)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Component: java.util.Map access$800(org.apache.cassandra.db.SerializationHeader$Component)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: java.lang.String toString(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: java.lang.String toString(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: java.lang.String toString(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: java.lang.String stringifyTypeParameters(java.util.List,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: java.lang.String toString(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.lang.String toString(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: java.lang.String stringifyTypeParameters(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: java.lang.String stringifyCollectionsParameters(java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TypeParser: java.lang.String stringifyUserTypeParameters(java.lang.String,java.nio.ByteBuffer,java.util.List,java.util.List,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer: void serialize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.StatsMetadata,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.BufferedDataOutputStreamPlus: void writeDouble(double)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: java.util.Optional upperBound()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: java.util.Optional lowerBound()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer: void serialize(org.apache.cassandra.utils.EstimatedHistogram,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer: void serialize(org.apache.cassandra.db.commitlog.CommitLogPosition,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer: void serialize(org.apache.cassandra.utils.StreamingHistogram,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$1: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$1: void serialize(org.apache.cassandra.db.commitlog.IntervalSet,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: java.util.NavigableMap access$000(org.apache.cassandra.db.commitlog.IntervalSet)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram: java.util.Map getAsMap()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram: int access$100(org.apache.cassandra.utils.StreamingHistogram)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: long[] getBuckets(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: long[] getBucketOffsets()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: boolean isEmpty()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer: void serialize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.CompactionMetadata,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$BigVersion: boolean hasCompactionAncestors()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: void writeWithLength(byte[],java.io.DataOutput)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer: void serialize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.ValidationMetadata,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: int serializedSize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.db.SerializationHeader$Component)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: long sizeofColumnsWithTypes(java.util.Map)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader$Serializer: int sizeofType(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.StatsMetadata$StatsMetadataSerializer: int serializedSize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.StatsMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram$EstimatedHistogramSerializer: long serializedSize(org.apache.cassandra.utils.EstimatedHistogram)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer: long serializedSize(org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer: long serializedSize(org.apache.cassandra.utils.StreamingHistogram)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$1: long serializedSize(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$1: long serializedSize(org.apache.cassandra.db.commitlog.IntervalSet)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogPosition$CommitLogPositionSerializer: long serializedSize(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer: int serializedSize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.CompactionMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.ValidationMetadata$ValidationMetadataSerializer: int serializedSize(org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.metadata.ValidationMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: void prepareToCommit()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void flushBf()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void truncate(java.lang.String,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: java.util.Set access$1200(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SyncUtil: void sync(java.io.FileOutputStream)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SyncUtil: void sync(java.io.FileDescriptor)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemoryWriter: void setCapacity(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: void <init>(org.apache.cassandra.db.compaction.OperationType,java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: void <init>(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__443: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void disable()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__444: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__444: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer: void write(org.codehaus.jackson.JsonNode,org.apache.cassandra.db.compaction.CompactionLogger$StrategySummary,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$shutdownStrategy__445: java.util.function.Function bootstrap$(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$startStrategies__446: org.apache.cassandra.db.compaction.CompactionLogger$StrategySummary bootstrap$(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$startStrategies__446: void <init>(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$shutdownStrategy__445: void <init>(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer$lambda_write_1__447: java.lang.Runnable bootstrap$(org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer,java.lang.Object,org.apache.cassandra.db.compaction.CompactionLogger$StrategySummary,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer$lambda_write_1__447: void <init>(org.apache.cassandra.db.compaction.CompactionLogger$CompactionLogSerializer,java.lang.Object,org.apache.cassandra.db.compaction.CompactionLogger$StrategySummary,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$shutdown__443: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName: void add(java.io.File)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog$lambda_load_0__297: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog: java.util.UUID lambda$load$0(org.apache.cassandra.hints.HintsDescriptor)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$readLines__611: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_readRecords_2__612: java.lang.Object apply(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: boolean addAll(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter$1: boolean apply(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$8: boolean apply(java.lang.Comparable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: boolean lambda$validateCustomIndexOptions$1(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: java.util.List lambda$readRecords$2(java.util.List,java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: java.util.List readLines()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$lambda_startup_1__417: boolean test(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: boolean lambda$startup$1(org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsStore$lambda_new_0__304: long applyAsLong(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsStore: long lambda$new$0(org.apache.cassandra.hints.HintsDescriptor)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void lambda$setErrorInReplicas$3(org.apache.cassandra.db.lifecycle.LogRecord,org.apache.cassandra.db.lifecycle.LogReplica)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: void setError(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: java.lang.String error()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void notifySwitched(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void notifyRenewed(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function switchMemtable(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$5: void <init>(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.notifications.MemtableRenewedNotification: void <init>(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void notify(org.apache.cassandra.notifications.INotification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.notifications.MemtableSwitchedNotification: void <init>(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator: void setDiscarding()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator$LifeCycle: org.apache.cassandra.utils.memory.MemtableAllocator$LifeCycle transition(org.apache.cassandra.utils.memory.MemtableAllocator$LifeCycle)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: void markAllReclaiming()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: void reclaiming(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool: java.util.concurrent.atomic.AtomicLongFieldUpdater access$200()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: float ownershipRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: long owns()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator offHeap()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator: org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator onHeap()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: org.apache.cassandra.utils.memory.MemtableAllocator getAllocator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void excise(java.util.Collection,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void removeBootstrapTokens(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void notifyLeft(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getMinRpcTimeout()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_excise_3__532: java.lang.Runnable bootstrap$(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_excise_3__532: void <init>(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: java.lang.Object remove(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: com.google.common.collect.Multimap getNewSourceRanges(java.lang.String,java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.List getNonLocalStrategyKeyspaces()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamResultFuture execute()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamPlan requestRanges(java.net.InetAddress,java.net.InetAddress,java.lang.String,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: void <init>(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$5: void <init>(org.apache.cassandra.service.StorageService,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers: java.util.Iterator iterator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables: java.util.Iterator iterator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps: java.util.Iterator iterator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet$DistinctIterator: void <init>(java.util.Iterator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator$1: void <init>(org.apache.cassandra.utils.concurrent.Accumulator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: void <init>(java.lang.String,long,int,boolean,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: void <init>(int,boolean,boolean,org.apache.cassandra.streaming.StreamConnectionFactory,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.DefaultConnectionFactory: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamPlan requestRanges(java.net.InetAddress,java.net.InetAddress,java.lang.String,java.util.Collection,java.lang.String[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void addStreamRequest(java.lang.String,java.util.Collection,java.util.Collection,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: org.apache.cassandra.streaming.StreamSession getOrCreateNextSession(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData: org.apache.cassandra.streaming.StreamSession getOrCreateNextSession(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void <init>(java.net.InetAddress,java.net.InetAddress,org.apache.cassandra.streaming.StreamConnectionFactory,int,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: int access$300(org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: org.apache.cassandra.streaming.StreamConnectionFactory access$400(org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: boolean access$500(org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: boolean access$600(org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler: void <init>(org.apache.cassandra.streaming.StreamSession,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.StreamingMetrics: org.apache.cassandra.metrics.StreamingMetrics get(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.StreamingMetrics: void <init>(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: void <init>(org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$IncomingMessageHandler: void <init>(org.apache.cassandra.streaming.StreamSession,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: void <init>(org.apache.cassandra.streaming.StreamSession,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler$1: void <init>(org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamRequest: void <init>(java.lang.String,java.util.Collection,java.util.Collection,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: org.apache.cassandra.streaming.StreamResultFuture init(java.util.UUID,java.lang.String,java.util.Collection,org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: void connect(org.apache.cassandra.streaming.StreamResultFuture)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: java.util.Collection getAllStreamSessions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: void addEventListener(org.apache.cassandra.streaming.StreamEventHandler)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: org.apache.cassandra.streaming.StreamResultFuture createAndRegister(java.util.UUID,java.lang.String,org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamResultFuture: void <init>(java.util.UUID,java.lang.String,org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamManager: void register(org.apache.cassandra.streaming.StreamResultFuture)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamManager$2: void <init>(org.apache.cassandra.streaming.StreamManager,org.apache.cassandra.streaming.StreamResultFuture)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: boolean isReceiving()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData: java.util.Collection getAllStreamSessions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: void connectSequentially(org.apache.cassandra.streaming.StreamResultFuture)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: void connectAllStreamSessions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$HostStreamingData: void connectAllStreamSessions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$StreamSessionConnector: void <init>(org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator: org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor access$700()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$1: void <init>(org.apache.cassandra.streaming.StreamCoordinator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamHook$1: void reportStreamFuture(org.apache.cassandra.streaming.StreamSession,org.apache.cassandra.streaming.StreamResultFuture)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession$KeepAliveTask: void <init>(org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_getNonLocalStrategyKeyspaces_0__453: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_getNonLocalStrategyKeyspaces_1__454: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_getNonLocalStrategyKeyspaces_1__454: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_getNonLocalStrategyKeyspaces_0__453: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.locator.TokenMetadata cloneOnlyTokenMap()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.locator.TokenMetadata cloneAfterAllLeft()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.Collection getRangesForEndpoint(java.lang.String,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.locator.TokenMetadata removeEndpoints(org.apache.cassandra.locator.TokenMetadata,java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void <init>(org.apache.cassandra.utils.BiMultiValMap,com.google.common.collect.BiMap,org.apache.cassandra.locator.TokenMetadata$Topology,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: void <init>(org.apache.cassandra.locator.TokenMetadata$Topology)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SortedBiMultiValMap: org.apache.cassandra.utils.SortedBiMultiValMap create(org.apache.cassandra.utils.BiMultiValMap,java.util.Comparator,java.util.Comparator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SortedBiMultiValMap: org.apache.cassandra.utils.SortedBiMultiValMap create(java.util.Comparator,java.util.Comparator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SortedBiMultiValMap: void <init>(java.util.SortedMap,com.google.common.collect.SortedSetMultimap)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SortedBiMultiValMap: java.util.Comparator defaultComparator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.SortedBiMultiValMap$1: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: void <init>(java.util.Map,com.google.common.collect.Multimap)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void addMovingEndpoint(org.apache.cassandra.dht.Token,java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: org.apache.cassandra.dht.Token$TokenFactory getTokenFactory()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void updateTopology(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: void updateEndpoint(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: void updateEndpoint(java.net.InetAddress,org.apache.cassandra.locator.IEndpointSnitch)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void notifyUp(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void notifyDown(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isRpcReady(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isAlive(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.utils.Pair calculateSchemaDigest()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void updateSchemaVersion(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.utils.Pair calculateSchemaDigest(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.partitions.PartitionIterator executeInternal(org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.ReadCommand getReadCommandForTableSchema(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: boolean isSystemKeyspaceSchemaPartition(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowIterators: void digest(org.apache.cassandra.db.rows.RowIterator,java.security.MessageDigest,java.security.MessageDigest,java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: void digest(java.security.MessageDigest,java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.ColumnFamilyStore getSchemaCFS(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.PartitionRangeReadCommand allDataRead(org.apache.cassandra.config.CFMetaData,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: void <init>(boolean,int,boolean,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.DataRange,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.db.DataRange allData(org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: void <init>(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.db.DataRange forTokenRange(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: org.apache.cassandra.dht.Range makeRowRange(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.db.DataRange forKeyRange(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: void <init>(org.apache.cassandra.dht.AbstractBounds,org.apache.cassandra.db.filter.ClusteringIndexFilter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: org.apache.cassandra.dht.Range makeRowRange(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Token: org.apache.cassandra.dht.Token$KeyBound maxKeyBound()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds: void <init>(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: org.apache.cassandra.dht.IPartitioner getPartitioner()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: void <init>(org.apache.cassandra.dht.Token,boolean,org.apache.cassandra.dht.Token$1)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Token: org.apache.cassandra.dht.Token$KeyBound minKeyBound()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: void <init>(org.apache.cassandra.dht.Token,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators: org.apache.cassandra.db.partitions.PartitionIterator filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredPartitions: org.apache.cassandra.db.transform.FilteredPartitions filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredPartitions: org.apache.cassandra.db.transform.FilteredPartitions filter(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.transform.Filter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.EmptyPartitionsDiscarder: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.partitions.PartitionIterator apply(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: org.apache.cassandra.db.transform.FilteredPartitions mutable(org.apache.cassandra.db.partitions.PartitionIterator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredPartitions: void <init>(org.apache.cassandra.db.partitions.PartitionIterator)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredPartitions: void <init>(org.apache.cassandra.db.transform.Filter,org.apache.cassandra.db.transform.UnfilteredPartitions)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.FilteredPartitions: void <init>(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.transform.Filter)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BasePartitions: void <init>(org.apache.cassandra.db.transform.BasePartitions)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void lambda$applyInternal$0(org.apache.cassandra.db.Mutation,boolean,boolean,java.util.concurrent.CompletableFuture)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void incrementDroppedMutations(java.util.Optional,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$6: void runMayThrow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$6: org.apache.cassandra.net.MessagingService$Verb verb()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$8: void runMayThrow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$8: org.apache.cassandra.net.MessagingService$Verb verb()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$7: void runMayThrow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$7: org.apache.cassandra.net.MessagingService$Verb verb()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$LocalMutationRunnable$1: void <init>(org.apache.cassandra.service.StorageProxy$LocalMutationRunnable,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.concurrent.Future access$700(org.apache.cassandra.service.StorageProxy$HintRunnable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.concurrent.Future submitHint(org.apache.cassandra.service.StorageProxy$HintRunnable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.concurrent.atomic.AtomicInteger getHintsInProgressFor(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$1: java.lang.Object load(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$1: java.util.concurrent.atomic.AtomicInteger load(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$HintRunnable: void <init>(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_asyncRemoveFromBatchlog_3__34: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void lambda$asyncRemoveFromBatchlog$3(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: void remove(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate fullPartitionDelete(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate fullPartitionDelete(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: void <init>(long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$ViewWriteMetricsWrapped: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$apply__337: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.WriteResponseHandler: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_syncWriteToBatchlog_2__45: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void lambda$syncWriteToBatchlog$2(org.apache.cassandra.batchlog.Batch)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: void store(org.apache.cassandra.batchlog.Batch)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation$MutationSerializer: void serialize(org.apache.cassandra.db.Mutation,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.db.rows.Row$SimpleBuilder appendAll(java.lang.String,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.db.rows.Row$SimpleBuilder timestamp(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$AbstractBuilder: java.lang.Object timestamp(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.db.rows.Row$SimpleBuilder add(java.lang.String,java.lang.Object,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.db.rows.Cell cell(org.apache.cassandra.config.ColumnDefinition,java.nio.ByteBuffer,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: java.nio.ByteBuffer toByteBuffer(java.lang.Object,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.config.ColumnDefinition getColumn(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: void maybeInit()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: byte[] getTimeUUIDBytes()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: byte[] createTimeUUIDBytes(long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.Clustering clustering()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: org.apache.cassandra.db.rows.BufferCell live(org.apache.cassandra.config.ColumnDefinition,long,java.nio.ByteBuffer,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: org.apache.cassandra.db.rows.BufferCell expiring(org.apache.cassandra.config.ColumnDefinition,long,int,int,java.nio.ByteBuffer,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer: void serialize(org.apache.cassandra.db.partitions.PartitionUpdate,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Serializer: void serialize(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: void serializeAsLegacyPartition(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void serialize(org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime$Serializer: void serialize(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void serializeSimple(org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: void serializeCompound(org.apache.cassandra.io.util.DataOutputPlus,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.CompositeType$Builder builder(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: void signal()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: int totalEndpoints()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: int totalBlockFor()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: boolean waitingFor(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: int totalBlockFor()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: void signal()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: int totalEndpoints()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$ReplayWriteResponseHandler: int totalBlockFor()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: boolean waitingFor(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_mutateMV_0__389: void invoke()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_mutateAtomically_1__352: void invoke()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void lambda$mutateAtomically$1(org.apache.cassandra.service.StorageProxy$BatchlogEndpoints,java.util.UUID,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void asyncRemoveFromBatchlog(org.apache.cassandra.service.StorageProxy$BatchlogEndpoints,java.util.UUID,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.WriteResponseHandler: void <init>(java.util.Collection,java.util.Collection,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.db.Keyspace,java.lang.Runnable,org.apache.cassandra.db.WriteType,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: org.apache.cassandra.db.Mutation getRemoveMutation(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: void <init>(org.apache.cassandra.db.Keyspace,java.util.Collection,java.util.Collection,org.apache.cassandra.db.ConsistencyLevel,java.lang.Runnable,org.apache.cassandra.db.WriteType,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_asyncRemoveFromBatchlog_3__34: java.lang.Runnable bootstrap$(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void performLocally(org.apache.cassandra.concurrent.Stage,java.lang.Runnable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$7: void <init>(java.lang.Runnable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$LocalMutationRunnable: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_asyncRemoveFromBatchlog_3__34: void <init>(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void lambda$mutateMV$0(java.util.Collection,java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.metrics.ViewWriteMetrics access$600()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PaxosState: void commit(org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void apply(org.apache.cassandra.db.Mutation,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit: org.apache.cassandra.db.Mutation makeMutation()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: long unixTimestamp(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: long getTruncatedAt(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void savePaxosCommit(org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: long microsTimestamp(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: int paxosTtlSec(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: java.nio.ByteBuffer toBytes(org.apache.cassandra.db.partitions.PartitionUpdate,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.utils.Pair getTruncationRecord(java.util.UUID)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.Map readTruncationRecords()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.util.Map getMap(java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.utils.Pair truncationRecordFromBlob(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataInputBuffer: int available()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void updateDroppedMutationCount(org.apache.cassandra.db.IMutation)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: java.util.Collection getColumnFamilyIds()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$Visitor: void traverse(org.apache.cassandra.utils.concurrent.RefCounted$Tidy)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$GlobalState: org.apache.cassandra.utils.concurrent.RefCounted$Tidy access$300(org.apache.cassandra.utils.concurrent.Ref$GlobalState)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.WrappedSharedCloseable$Tidy: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Cleanup: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$Tidier: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory$MemoryTidy: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChannelProxy$Cleanup: java.lang.String name()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$InProgressVisit: org.apache.cassandra.utils.Pair nextChild()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: java.util.List getFields(java.lang.Class)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: org.apache.cassandra.utils.concurrent.Ref$InProgressVisit newInProgressVisit(java.lang.Object,java.util.List,java.lang.reflect.Field,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean log(org.slf4j.Logger,org.apache.cassandra.utils.NoSpamLogger$Level,java.lang.String,long,java.util.concurrent.TimeUnit,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref: void returnInProgressVisit(org.apache.cassandra.utils.concurrent.Ref$InProgressVisit)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$InProgressVisit: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$InProgressVisit: java.lang.reflect.Field nextField()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: java.lang.String toString(boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: java.lang.String getDirectories()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void printContentsWithAnyErrors(java.lang.StringBuilder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_printContentsWithAnyErrors_4__512: java.util.function.Consumer bootstrap$(java.lang.StringBuilder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: java.util.Collection replicas()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_printContentsWithAnyErrors_4__512: void <init>(java.lang.StringBuilder)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$getDirectory__513: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$getDirectory__513: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: java.lang.String toString(long,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: org.apache.cassandra.io.util.ChannelProxy access$800(org.apache.cassandra.io.util.MmappedRegions$State)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$StrongLeakDetector: void removeExpected(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: java.lang.Iterable allKnownSSTables()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$IdentityCollection: void <init>(java.util.Set)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$IdentityCollection: void add(org.apache.cassandra.utils.concurrent.Ref)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$IdentityCollection: void add(org.apache.cassandra.utils.concurrent.SelfRefCounted)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Ref$IdentityCollection: void add(org.apache.cassandra.io.util.Memory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.SharedCloseableImpl: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.SafeMemory: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$lambda_addTo_1__589: java.util.function.Consumer bootstrap$(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$lambda_addTo_1__589: void <init>(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void lambda$updateTokens$0(java.lang.String,java.net.InetAddress,java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.Set tokensAsSet(java.util.Collection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void lambda$updatePeerInfo$1(java.lang.String,java.lang.String,java.net.InetAddress,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$LocalMutationRunnable$1: void runMayThrow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.concurrent.atomic.AtomicInteger access$800(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void write(java.lang.Iterable,org.apache.cassandra.hints.Hint)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.Hint: org.apache.cassandra.hints.Hint create(org.apache.cassandra.db.Mutation,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$11$incrCreatedHints__15: java.util.function.Consumer bootstrap$(org.apache.cassandra.metrics.HintedHandoffMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$11$incrCreatedHints__15: void <init>(org.apache.cassandra.metrics.HintedHandoffMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: int smallestGCGS()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.Hint: void <init>(org.apache.cassandra.db.Mutation,long,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog: void maybeLoadStores(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBufferPool: void write(java.lang.Iterable,org.apache.cassandra.hints.Hint)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$Allocation: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$Allocation: void write(java.lang.Iterable,org.apache.cassandra.hints.Hint)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBufferPool: org.apache.cassandra.hints.HintsBuffer$Allocation allocate(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.Hint$Serializer: long serializedSize(org.apache.cassandra.hints.Hint,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBufferPool: org.apache.cassandra.hints.HintsBuffer currentBuffer()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$flushBuffer__290: void flush(org.apache.cassandra.hints.HintsBuffer,org.apache.cassandra.hints.HintsBufferPool)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: org.apache.cassandra.hints.HintsBuffer$Allocation allocate(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBufferPool: boolean switchCurrentBuffer(org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBufferPool: org.apache.cassandra.hints.HintsBuffer createBuffer()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: org.apache.cassandra.hints.HintsBuffer create(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: org.apache.cassandra.hints.HintsBuffer$Allocation allocate(int,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$Allocation: void <init>(org.apache.cassandra.hints.HintsBuffer,int,int,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: int allocateBytes(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: java.util.concurrent.Future flushBuffer(org.apache.cassandra.hints.HintsBuffer,org.apache.cassandra.hints.HintsBufferPool)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$FlushBufferTask: void <init>(org.apache.cassandra.hints.HintsWriteExecutor,org.apache.cassandra.hints.HintsBuffer,org.apache.cassandra.hints.HintsBufferPool)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBufferPool: void initializeCurrentBuffer()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: void access$100(org.apache.cassandra.hints.HintsBuffer,java.util.UUID,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$Allocation: void write(org.apache.cassandra.hints.Hint)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBufferFixed: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.Hint$Serializer: void serialize(org.apache.cassandra.hints.Hint,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void updateChecksum(java.util.zip.CRC32,java.nio.ByteBuffer,int,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: void put(java.util.UUID,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$lambda_put_0__433: java.util.function.Function bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$lambda_put_0__433: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: void lambda$queryMemtableAndSSTablesInTimestampOrder$0(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void apply(org.apache.cassandra.db.Mutation,boolean,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: boolean isLocalHost(com.datastax.driver.core.Host)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: com.datastax.driver.core.HostDistance distance(com.datastax.driver.core.Host)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy: void close()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: java.util.List shutdownNow()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: boolean takeTaskPermit()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory$2: void onRemoval(com.google.common.cache.RemovalNotification)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory: org.slf4j.Logger access$000(org.apache.cassandra.security.CipherFactory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.HintedHandoffMetrics$2: java.lang.Object load(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.HintedHandoffMetrics$1: java.lang.Object load(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache$1: com.google.common.util.concurrent.ListenableFuture reload(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache$1: java.lang.Object load(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory$1: java.lang.Object load(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory$1: java.lang.Object load(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory$1: java.lang.reflect.Constructor load(java.lang.Class)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.sasi.analyzer.filter.StemmerFactory: org.slf4j.Logger access$000()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory$1: java.security.Key load(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory: org.apache.cassandra.security.KeyProvider access$100(org.apache.cassandra.security.CipherFactory)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.RolesCache$lambda_new_0__349: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.PermissionsCache$lambda_new_0__288: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy$JMXPermissionsCache$lambda_new_0__279: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache: java.util.function.Function access$000(org.apache.cassandra.auth.AuthCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy$JMXPermissionsCache: java.util.Set lambda$new$0(org.apache.cassandra.auth.RoleResource)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy: java.util.Set access$000(org.apache.cassandra.auth.RoleResource)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy: java.util.Set loadPermissions(org.apache.cassandra.auth.RoleResource)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy$lambda_loadPermissions_6__470: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthorizationProxy$lambda_loadPermissions_6__470: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.PermissionsCache: java.util.Set lambda$new$0(org.apache.cassandra.auth.IAuthorizer,org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.RolesCache: java.util.Set lambda$new$0(org.apache.cassandra.auth.IRoleManager,org.apache.cassandra.auth.RoleResource)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.HintedHandoffMetrics$1: org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter load(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter: void <init>(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.HintedHandoffMetrics: org.apache.cassandra.metrics.MetricNameFactory access$000()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.HintedHandoffMetrics$2: com.codahale.metrics.Counter load(java.net.InetAddress)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache$1$lambda_reload_0__490: java.util.concurrent.Callable bootstrap$(org.apache.cassandra.auth.AuthCache$1,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache: java.util.concurrent.ThreadPoolExecutor access$100(org.apache.cassandra.auth.AuthCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache$1$lambda_reload_0__490: void <init>(org.apache.cassandra.auth.AuthCache$1,java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$replayFailedBatches__438: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$2: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$3: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$lambda_static_2__65: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$lambda_new_0__221: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$4: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$2: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$lambda_new_0__292: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.ApproximateTime$lambda_static_0__81: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis$updateTimestampBase__82: void run()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void handleOrLog(java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon$2: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon: org.slf4j.Logger access$000()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$5: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap: java.util.concurrent.ConcurrentMap access$000(org.apache.cassandra.utils.ExpiringMap)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap$CacheableObject: boolean access$100(org.apache.cassandra.utils.ExpiringMap$CacheableObject,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap: org.slf4j.Logger access$200()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$5: java.lang.Object apply(org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void maybeAddLatency(org.apache.cassandra.net.IAsyncCallback,java.net.InetAddress,long)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: void incrementTimeout()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void updateBackPressureOnReceive(java.net.InetAddress,org.apache.cassandra.net.IAsyncCallback,boolean)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$5$1: void <init>(org.apache.cassandra.net.MessagingService$5,org.apache.cassandra.net.CallbackInfo)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.concurrent.Future submitHint(org.apache.cassandra.db.Mutation,java.net.InetAddress,org.apache.cassandra.service.AbstractWriteResponseHandler)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$11: void <init>(java.util.Collection,org.apache.cassandra.db.Mutation,org.apache.cassandra.service.AbstractWriteResponseHandler)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationTask$1: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.AsyncRepairCallback: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$3: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.TruncateResponseHandler: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$10: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.AbstractPaxosCallback: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.WriteResponseHandler: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.AsyncOneResponse: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: boolean isLatencyForSnitch()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis: void updateTimestampBase()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.ApproximateTime: void lambda$static$0()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void lambda$new$0()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: java.util.concurrent.Future submitWrite(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: org.apache.cassandra.cache.AutoSavingCache$Writer getWriter(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: java.util.concurrent.Future submitCacheWrite(org.apache.cassandra.cache.AutoSavingCache$Writer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$15: void <init>(org.apache.cassandra.db.compaction.CompactionManager,org.apache.cassandra.cache.AutoSavingCache$Writer)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor: com.google.common.util.concurrent.ListenableFuture submitIfRunning(java.lang.Runnable,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutor: com.google.common.util.concurrent.ListenableFuture submitIfRunning(java.util.concurrent.Callable,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$Writer: void <init>(org.apache.cassandra.cache.AutoSavingCache,int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$CacheType: java.lang.String toString()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: java.util.Iterator hotKeyIterator(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo$Holder: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData createFake(java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder addPartitionKey(java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: java.util.Iterator hotKeyIterator(int)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage: boolean wasSent()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.KeepAliveMessage: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: org.slf4j.Logger access$000()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void access$200(org.apache.cassandra.net.MessagingService)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void logDroppedMessages()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: java.util.List getDroppedMessagesLogs()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.StatusLogger: void log()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$36: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$35: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$34: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$32: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$31: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$30: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$29: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$28: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$27: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$26: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$25: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$24: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$23: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$22: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$21: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$20: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$19: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$18: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$17: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$16: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$15: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$14: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$13: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$12: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$11: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$10: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$9: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$8: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$7: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$6: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$5: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$4: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$3: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$2: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$9: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$8: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$7: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$6: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$5: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$4: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$3: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$2: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ViewWriteMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics$3: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics$2: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$7: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$6: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CQLMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.BufferPoolMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMissMetrics$capacity__242: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMissMetrics$weightedSize__243: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMissMetrics$size__244: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CommitLogMetrics$3: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CommitLogMetrics$2: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CommitLogMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$4: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$3: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$2: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics$4: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics$3: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics$2: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$1: java.lang.Object getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: int getActiveCompactions()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: int getPendingTasks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: java.util.Map getSmallMessagePendingTasks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: java.util.Map getLargeMessagePendingTasks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.InstrumentingCache: long weightedSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics: com.google.common.collect.Multimap getJmxThreadPools(javax.management.MBeanServerConnection)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics: java.lang.Object getJmxMetric(javax.management.MBeanServerConnection,java.lang.String,java.lang.String,java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getKeyCacheKeysToSave()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getRowCacheKeysToSave()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.Iterable all()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ConcurrentLinkedHashCache: long weightedSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics$1: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics$2: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: long getPendingTasks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics$3: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.concurrent.SEPExecutor: long getCompletedTasks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.SEPMetrics$4: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$1: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$2: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$3: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$4: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CommitLogMetrics$1: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogService: long getCompletedTasks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CommitLogMetrics$2: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogService: long getPendingTasks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CommitLogMetrics$3: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: long onDiskSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$33: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$5: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$4: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$3: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$2: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CQLMetrics$2: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMissMetrics$4: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMissMetrics$3: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMissMetrics$2: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMissMetrics$1: com.codahale.metrics.RatioGauge$Ratio getRatio()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CQLMetrics$2: double getDenominator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CQLMetrics$2: double getNumerator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$33: double getDenominator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$33: double getNumerator()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getKeyCacheHit()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: java.lang.Iterable select(org.apache.cassandra.db.lifecycle.SSTableSet)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_select_0__405: com.google.common.base.Predicate bootstrap$(org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_select_0__405: void <init>(org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getKeyCacheRequest()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: int size()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: long weightedSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$lambda_weightedSize_2__428: java.util.function.Function bootstrap$(org.apache.cassandra.cache.ChunkCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$estimatedSize__429: java.util.function.Supplier bootstrap$(com.github.benmanes.caffeine.cache.LoadingCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$estimatedSize__429: void <init>(com.github.benmanes.caffeine.cache.LoadingCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$lambda_weightedSize_2__428: void <init>(org.apache.cassandra.cache.ChunkCache)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.BufferPoolMetrics$1: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: long sizeInBytes()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CQLMetrics$1: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: int preparedStatementsCount()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$1: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$6: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CacheMetrics$7: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics$1: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: int getEstimatedRemainingTasks()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics: java.util.Set access$000()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics$2: java.util.Map getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics$3: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ViewWriteMetrics$1: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$1: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: int getPendingMessages()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$2: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: long getCompletedMesssages()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$3: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: long getDroppedMessages()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$4: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$5: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$6: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$7: java.lang.Integer getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$8: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics$9: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$17: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$16: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$15: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$14: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$13: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$12: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$11: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$10: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$9: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$8: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$7: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$6: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$5: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$4: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$3: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$2: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$1: java.lang.Long getValue(org.apache.cassandra.metrics.TableMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics: org.apache.cassandra.db.Keyspace access$000(org.apache.cassandra.metrics.KeyspaceMetrics)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$1: java.lang.Double getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: boolean isIndexColumnFamily(java.lang.String)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$2: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$3: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$4: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$5: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: long getLiveDataSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$6: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$7: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$8: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$9: long[] getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$9$1: void <init>(org.apache.cassandra.metrics.TableMetrics$9)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: long[] access$000(java.lang.Iterable,org.apache.cassandra.metrics.TableMetrics$GetHistogram)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: long[] combineHistograms(java.lang.Iterable,org.apache.cassandra.metrics.TableMetrics$GetHistogram)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$9$1: org.apache.cassandra.utils.EstimatedHistogram getHistogram(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$11$1: org.apache.cassandra.utils.EstimatedHistogram getHistogram(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.utils.EstimatedHistogram getEstimatedPartitionSize()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$10: java.lang.Long getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: int partitionCount()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: java.lang.Iterable getAllMemtables()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getApproximateKeyCount(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: org.apache.cassandra.io.sstable.metadata.MetadataComponent deserialize(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.io.sstable.metadata.MetadataType)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long estimatedKeys()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$2: void <init>()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: long getEstimatedKeyCount()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int getMaxNumberOfEntries()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$11: long[] getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$11$1: void <init>(org.apache.cassandra.metrics.TableMetrics$11)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$12: java.lang.Double getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: java.lang.Double access$100(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics: java.lang.Double computeCompressionRatio(java.lang.Iterable)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.compress.CompressionMetadata getCompressionMetadata()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$13: java.lang.Double getValue()>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$13$lambda_getValue_0__427: java.util.function.Consumer bootstrap$(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$13$lambda_getValue_0__427: void <init>(java.util.List)>
2020-05-18 22:39:08 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$14: java.lang.Double getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long uncompressedLength()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$15: java.lang.Integer getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$16: java.lang.Integer getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$17: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: long min()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$18: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$19: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: long max()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$20: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$21: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: long mean()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: double rawMean()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$22: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.util.List getAllSSTables(org.apache.cassandra.db.lifecycle.SSTableSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$23: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getBloomFilterFalsePositiveCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.BloomFilterTracker: long getFalsePositiveCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$24: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getRecentBloomFilterFalsePositiveCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.BloomFilterTracker: long getRecentFalsePositiveCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$25: java.lang.Double getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getBloomFilterTruePositiveCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.BloomFilterTracker: long getTruePositiveCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$26: java.lang.Double getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$27: java.lang.Double getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getRecentBloomFilterTruePositiveCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.BloomFilterTracker: long getRecentTruePositiveCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$28: java.lang.Double getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$29: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getBloomFilterSerializedSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: long serializedSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: long serializedSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilterSerializer: long serializedSize(org.apache.cassandra.utils.BloomFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: long serializedSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: long serializedSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$30: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getBloomFilterOffHeapSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter: long offHeapSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.AlwaysPresentFilter: long offHeapSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: long offHeapSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: long offHeapSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$31: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getIndexSummaryOffHeapSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$32: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getCompressionMetadataOffHeapSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: long offHeapSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$34: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: long trueSnapshotsSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: long trueSnapshotsSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: long getTrueAllocatedSizeIn(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableLister: java.util.List listFiles()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableSizeSummer: void <init>(org.apache.cassandra.db.Directories,java.io.File,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.DirectorySizeCalculator: long getAllocatedSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.DirectorySizeCalculator: java.nio.file.FileVisitResult visitFileFailed(java.lang.Object,java.io.IOException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.DirectorySizeCalculator: java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.DirectorySizeCalculator: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.DirectorySizeCalculator: boolean isAcceptable(java.nio.file.Path)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$SSTableSizeSummer: boolean isAcceptable(java.nio.file.Path)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: org.apache.cassandra.config.CFMetaData access$200(org.apache.cassandra.db.Directories)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.DirectorySizeCalculator: java.nio.file.FileVisitResult visitFileFailed(java.nio.file.Path,java.io.IOException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.DirectorySizeCalculator: void <init>(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$35: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.TableMetrics$36: java.lang.Long getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot: double getMean()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: com.codahale.metrics.Snapshot getSnapshot()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: void rescaleIfNeeded()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot: void <init>(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir,org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: java.util.concurrent.atomic.AtomicLongArray access$000(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: com.codahale.metrics.Clock access$100(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: double access$200(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir: long[] access$300(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask: void lambda$new$0()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask: void logOperations(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: java.lang.String getLogMessage()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: long num()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean warn(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$OperationsQueue: org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations access$100(org.apache.cassandra.db.monitoring.MonitoringTask$OperationsQueue)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$OperationsQueue: org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations popOperations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations: void <init>(java.util.Map,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$Operation: void add(org.apache.cassandra.db.monitoring.MonitoringTask$Operation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NoSpamLogger: boolean warn(long,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations$lambda_getLogMessage_0__538: java.util.function.Consumer bootstrap$(java.lang.StringBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.monitoring.MonitoringTask$AggregatedOperations$lambda_getLogMessage_0__538: void <init>(java.lang.StringBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: void lambda$static$2()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getPreparedStatementsCacheSizeMB()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getThriftPreparedStatementsCacheSizeMB()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSyn: void <init>(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.concurrent.locks.ReentrantLock access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: org.slf4j.Logger access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void access$200(org.apache.cassandra.gms.Gossiper,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getClusterName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getPartitionerName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean access$300(org.apache.cassandra.gms.Gossiper,org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void access$400(org.apache.cassandra.gms.Gossiper,org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.Set access$500(org.apache.cassandra.gms.Gossiper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void access$600(org.apache.cassandra.gms.Gossiper,org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void access$700(org.apache.cassandra.gms.Gossiper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: long getExpireTimeForEndpoint(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.FailureDetector: double getPhiConvictThreshold()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void markAsShutdown(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isShutdown(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void onDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: void markDead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void onDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: void onDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void onDead(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection$QueuedMessage: void <init>(org.apache.cassandra.net.MessageOut,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection$QueuedMessage: boolean isTimedOut(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getOtcBacklogExpirationInterval()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.FailureDetector: void remove(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: long computeExpireTime()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void maybeGossipToSeed(org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void maybeGossipToUnreachableMember(org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean doGossipToLiveMember(org.apache.cassandra.net.MessageOut)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: int getMaxEndpointStateVersion(org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigest: void <init>(java.net.InetAddress,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatState: int getHeartBeatVersion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: java.util.Set states()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: org.apache.cassandra.gms.HeartBeatState getHeartBeatState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SizeEstimatesRecorder: void recordSizeEstimates(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.Collection getPrimaryRangesForEndpoint(java.lang.String,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.lang.Iterable nonLocalStrategy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.dht.Token getPredecessor(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.ArrayList sortedTokens()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SizeEstimatesRecorder: long estimateMeanPartitionSize(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SizeEstimatesRecorder: long estimatePartitionsCount(java.util.Collection,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: void release()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: java.util.List sstablesInBounds(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.db.lifecycle.SSTableIntervalTree)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: org.apache.cassandra.utils.concurrent.Refs tryRef(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void updateSizeEstimates(java.lang.String,java.lang.String,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void <init>(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.db.PartitionColumns,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: org.apache.cassandra.db.Slice make(org.apache.cassandra.db.ClusteringComparator,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows: org.apache.cassandra.db.rows.Row$SimpleBuilder simpleBuilder(org.apache.cassandra.config.CFMetaData,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: org.apache.cassandra.db.ClusteringBound buildBound(boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.MutableDeletionInfo,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: org.apache.cassandra.db.MutableDeletionInfo live()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.utils.btree.BTree$Builder builder(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder setQuickResolver(org.apache.cassandra.utils.btree.BTree$Builder$QuickResolver)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_builder_1__185: org.apache.cassandra.utils.btree.BTree$Builder$QuickResolver bootstrap$(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_builder_1__185: void <init>(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: void release(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.utils.concurrent.Ref tryRef()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntervalTree: java.util.List search(org.apache.cassandra.utils.Interval)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntervalTree: java.lang.Comparable max()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntervalTree: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds: boolean strictlyWrapsAround(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval: org.apache.cassandra.utils.Interval create(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntervalTree$IntervalNode: void searchInternal(org.apache.cassandra.utils.Interval,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.AsymmetricOrdering: int binarySearchAsymmetric(java.util.List,java.lang.Object,org.apache.cassandra.utils.AsymmetricOrdering$Op)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval: org.apache.cassandra.utils.AsymmetricOrdering maxOrdering()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval: org.apache.cassandra.utils.AsymmetricOrdering minOrdering()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.AsymmetricOrdering: int strictnessOfLessThan(org.apache.cassandra.utils.AsymmetricOrdering$Op)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval$2: int compareAsymmetric(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval$1: int compareAsymmetric(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.AsymmetricOrdering: int selectBoundary(org.apache.cassandra.utils.AsymmetricOrdering$Op,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval$1: int compareAsymmetric(org.apache.cassandra.utils.Interval,java.lang.Comparable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Interval$2: int compareAsymmetric(org.apache.cassandra.utils.Interval,java.lang.Comparable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: org.apache.cassandra.dht.RingPosition minValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: org.apache.cassandra.dht.RingPosition minValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token: org.apache.cassandra.dht.RingPosition minValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean isWrapAround()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$KeyBound: org.apache.cassandra.dht.Token$KeyBound minValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: org.apache.cassandra.dht.Token$KeyBound minValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long estimatedKeysForRanges(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int getMinIndexInterval()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: int getSamplingLevel()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: java.util.List getSampleIndexesForRanges(org.apache.cassandra.io.sstable.IndexSummary,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.util.List normalize(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range$1: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.util.List deoverlap(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: void fillTemporaryKey(int,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: int compareTo(org.apache.cassandra.dht.IPartitioner,java.nio.ByteBuffer,org.apache.cassandra.db.PartitionPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: org.apache.cassandra.dht.Token getToken(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.Memory: void setByteBuffer(java.nio.ByteBuffer,long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SpeculativeRetryParam: double threshold()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SpeculativeRetryParam: org.apache.cassandra.schema.SpeculativeRetryParam$Kind kind()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot: double getValue(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir$EstimatedHistogramReservoirSnapshot: long count()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: java.lang.String getName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: boolean isAutoCompactionDisabled()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate: void <init>(org.apache.cassandra.db.compaction.CompactionManager,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: boolean isEnabled()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: void processBatchlogEntries(org.apache.cassandra.cql3.UntypedResultSet,int,com.google.common.util.concurrent.RateLimiter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Set getAllEndpoints()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getBatchlogReplayThrottleInKB()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: long getBatchlogTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: java.util.UUID maxTimeUUID(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: int calculatePageSize(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternalWithPaging(java.lang.String,int,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.service.pager.QueryPager getPager(org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: org.apache.cassandra.service.pager.QueryPager getPager(org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadQuery$1: org.apache.cassandra.service.pager.QueryPager getPager(org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet: org.apache.cassandra.cql3.UntypedResultSet create(org.apache.cassandra.cql3.statements.SelectStatement,org.apache.cassandra.service.pager.QueryPager,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager: void <init>(org.apache.cassandra.cql3.statements.SelectStatement,org.apache.cassandra.service.pager.QueryPager,int,org.apache.cassandra.cql3.UntypedResultSet$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager: void <init>(org.apache.cassandra.cql3.statements.SelectStatement,org.apache.cassandra.service.pager.QueryPager,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.cql3.ResultSet$ResultMetadata getResultMetadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.ResultSet$ResultMetadata getResultMetadata(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: void addNonSerializedColumn(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: void <init>(java.util.EnumSet,java.util.List,int,org.apache.cassandra.service.pager.PagingState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnSpecification: boolean allInSameTable(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: int getLimit(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: int getPageSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.ReadQuery getQuery(org.apache.cassandra.cql3.QueryOptions,int,int,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: int getPerPartitionLimit(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: int getLimit(org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Marker: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$NonTerminal: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Value: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Marker: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$InMarker: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$InValue: java.nio.ByteBuffer get(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$DelayedColumnValue: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$DefaultQueryOptions: org.apache.cassandra.transport.ProtocolVersion getProtocolVersion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Marker: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Marker: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Marker: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Marker: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Marker: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Value: java.nio.ByteBuffer get(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Value: java.nio.ByteBuffer get(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Value: java.nio.ByteBuffer get(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Value: java.nio.ByteBuffer get(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Value: java.nio.ByteBuffer get(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Value: java.nio.ByteBuffer get(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$DelayedValue: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$DelayedValue: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DelayedValue: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$DelayedValue: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$DelayedValue: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$DelayedValue: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DelayedValue: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$Terminal: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: java.nio.ByteBuffer bindAndGet(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Value: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$MultiItemTerminal: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$Terminal: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: void checkBindValueSet(java.nio.ByteBuffer,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: java.nio.ByteBuffer executeInternal(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.functions.ScalarFunction,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ToJsonFct: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$12: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$11: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$10: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$9: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$8: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$7: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$6: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$5: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$4: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$3: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$2: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TimeFcts$1: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UuidFcts$1: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.BytesConversionFcts$1: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.BytesConversionFcts$2: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$JavaFunctionWrapper: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$CassandraFunctionWrapper: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$CastAsTextFunction: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.BytesConversionFcts$4: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.BytesConversionFcts$3: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FromJsonFct: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.TokenFct: java.nio.ByteBuffer execute(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DurationType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.InetAddressType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.EmptyType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AsciiType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BooleanType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SimpleDateType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DecimalType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DoubleType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.FloatType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.Int32Type: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ShortType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BytesType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ByteType: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UTF8Type: org.apache.cassandra.cql3.Term fromJSONObject(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.FunctionExecutionException: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.cql3.QueryOptions forProtocolVersion(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.FunctionExecutionException: org.apache.cassandra.exceptions.FunctionExecutionException create(org.apache.cassandra.cql3.functions.Function,java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UTF8Type: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Value: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ByteType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.MarshalException: void <init>(java.lang.String,java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: java.nio.ByteBuffer parse(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: int version(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BytesType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Hex: byte[] hexToBytes(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$DelayedValue: void <init>(java.util.Comparator,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json: java.lang.Object decodeJson(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$NonTerminal: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: long dateStringToTimestamp(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ShortType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.Int32Type: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.FloatType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DoubleType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SimpleDateType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: int dateStringToDays(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.SimpleDateSerializer: int timeInMillisToDay(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BooleanType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AsciiType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$DelayedValue: void <init>(java.util.Comparator,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$DelayedValue: void <init>(org.apache.cassandra.db.marshal.TupleType,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$DelayedValue: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DelayedValue: void <init>(org.apache.cassandra.db.marshal.UserType,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json: void handleCaseSensitivity(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: java.lang.Long timeStringToLong(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimeSerializer: java.lang.Long parseTimeStrictly(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.InetAddressType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DurationType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: org.apache.cassandra.cql3.Duration 'from'(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: org.apache.cassandra.cql3.Duration parseIso8601WeekFormat(boolean,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: org.apache.cassandra.cql3.Duration parseIso8601AlternativeFormat(boolean,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: org.apache.cassandra.cql3.Duration parseIso8601Format(boolean,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: org.apache.cassandra.cql3.Duration parseStandardFormat(boolean,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: void <init>(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: long groupAsLong(java.util.regex.Matcher,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: org.apache.cassandra.cql3.Duration$Builder add(org.apache.cassandra.cql3.Duration$Builder,long,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addNanos(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addMicros(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addMillis(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addSeconds(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addMinutes(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addHours(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addDays(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addWeeks(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addMonths(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: org.apache.cassandra.cql3.Duration$Builder addYears(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: void validateOrder(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: void validateMonths(long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: void validate(long,long,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: java.lang.String getUnitName(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: void validateDays(long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration$Builder: void validateNanos(long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Duration: void <init>(int,int,long,org.apache.cassandra.cql3.Duration$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$DelayedValue: java.nio.ByteBuffer[] bindInternal(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: java.nio.ByteBuffer buildValue(java.nio.ByteBuffer[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DelayedValue: java.nio.ByteBuffer[] bindInternal(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: java.lang.String fieldNameAsString(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$DefaultQueryOptions: java.util.List getValues()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.lang.String toCQLLiteral(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.BytesSerializer: java.lang.String toCQLLiteral(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.AbstractTextSerializer: java.lang.String toCQLLiteral(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$CastFunction: org.apache.cassandra.db.marshal.AbstractType inputType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SimpleDateType: java.nio.ByteBuffer fromTimeInMillis(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: java.nio.ByteBuffer fromTimeInMillis(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SimpleDateType: long toTimeInMillis(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$lambda_all_1__323: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$lambda_getDecimalConversionFunction_2__331: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$lambda_getDecimalConversionFunction_3__333: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$lambda_getDecimalConversionFunction_4__332: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$lambda_all_0__330: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$doubleValue__329: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$floatValue__328: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$longValue__327: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$intValue__326: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$shortValue__325: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$byteValue__324: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$JavaCounterFunctionWrapper: java.lang.Object compose(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$JavaFunctionWrapper: java.lang.Object compose(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts$JavaCounterFunctionWrapper: java.lang.Long compose(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts: java.math.BigInteger lambda$all$0(java.lang.Number)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts: java.math.BigDecimal lambda$getDecimalConversionFunction$4(java.lang.Number)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts: java.math.BigDecimal lambda$getDecimalConversionFunction$3(java.lang.Number)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts: java.math.BigDecimal lambda$getDecimalConversionFunction$2(java.lang.Number)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts: java.lang.String lambda$all$1(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction: java.nio.ByteBuffer executeUserDefined(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.nio.ByteBuffer executeUserDefined(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$1: java.nio.ByteBuffer executeUserDefined(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.nio.ByteBuffer executeAsync(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.util.List makeEmptyParametersNull(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: boolean isCallableWrtNullable(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: void assertUdfsEnabled(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean enableUserDefinedFunctionsThreads()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean enableUserDefinedFunctions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean enableScriptedUserDefinedFunctions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: boolean isNullOrEmpty(org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.InetAddressType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BooleanType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DecimalType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DoubleType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.FloatType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.Int32Type: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UUIDType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeUUIDType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean isEmptyValueMeaningless()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$lambda_executeAsync_0__582: java.util.concurrent.Callable bootstrap$(org.apache.cassandra.cql3.functions.UDFunction,org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime,org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.lang.Object async(org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime,java.util.concurrent.Callable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction: java.util.concurrent.ExecutorService executor()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.util.concurrent.ExecutorService executor()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$1: java.util.concurrent.ExecutorService executor()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getUserDefinedFunctionWarnTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getUserDefinedFunctionFailTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$UserFunctionTimeoutPolicy getUserFunctionTimeoutPolicy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector: void userFunctionTimeout(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector$lambda_userFunctionTimeout_0__583: java.lang.Runnable bootstrap$(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector$lambda_userFunctionTimeout_0__583: void <init>(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn$State: void access$000(org.apache.cassandra.service.ClientWarn$State,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn$State: void add(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn$State: java.lang.String maybeTruncate(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$lambda_executeAsync_0__582: void <init>(org.apache.cassandra.cql3.functions.UDFunction,org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime,org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$1: org.apache.cassandra.exceptions.InvalidRequestException broken()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.nio.ByteBuffer decompose(org.apache.cassandra.transport.ProtocolVersion,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction: java.lang.Object executeScriptInternal(java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.lang.Object compose(org.apache.cassandra.transport.ProtocolVersion,int,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.lang.Object compose(com.datastax.driver.core.TypeCodec[],org.apache.cassandra.transport.ProtocolVersion,int,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: java.lang.Object deserialize(com.datastax.driver.core.TypeCodec,org.apache.cassandra.transport.ProtocolVersion,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.ProtocolVersion: int asInt()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: java.lang.Class asJavaClass(com.datastax.driver.core.TypeCodec)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.nio.ByteBuffer decompose(com.datastax.driver.core.TypeCodec,org.apache.cassandra.transport.ProtocolVersion,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: java.nio.ByteBuffer serialize(com.datastax.driver.core.TypeCodec,org.apache.cassandra.transport.ProtocolVersion,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: java.util.UUID minTimeUUID(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: long fromUnixTimestamp(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: long fromUnixTimestamp(long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AsciiType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.LongType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BooleanType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SimpleDateType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DecimalType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DoubleType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DurationType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.FloatType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.InetAddressType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.Int32Type: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ShortType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimeType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TimestampType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.BytesType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.EmptyType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ByteType: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UTF8Type: java.lang.String toJSONString(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json: java.lang.String quoteAsJsonString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: java.lang.String setOrListToJsonString(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.text.SimpleDateFormat getJsonDateFormatter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: java.nio.ByteBuffer[] split(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Value: void <init>(java.util.SortedSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DelayedValue: org.apache.cassandra.cql3.UserTypes$Value bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Value: void <init>(org.apache.cassandra.db.marshal.UserType,java.nio.ByteBuffer[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$DelayedValue: org.apache.cassandra.cql3.Tuples$Value bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Value: void <init>(java.nio.ByteBuffer[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Value: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Value: org.apache.cassandra.cql3.Lists$Value fromSerialized(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.ListType,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.ListSerializer: java.util.List deserializeForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Value: org.apache.cassandra.cql3.Sets$Value fromSerialized(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.SetType,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.SetSerializer: java.util.Set deserializeForNativeProtocol(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Value: org.apache.cassandra.cql3.Maps$Value fromSerialized(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.MapType,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Value: org.apache.cassandra.cql3.UserTypes$Value fromSerialized(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Marker: org.apache.cassandra.cql3.Constants$Value bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$1: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$Terminal: org.apache.cassandra.cql3.Term$Terminal bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.cql3.Term getJsonColumnValue(int,org.apache.cassandra.cql3.ColumnIdentifier,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$PreparedMarker: int access$000(org.apache.cassandra.cql3.Json$PreparedMarker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$PreparedMarker: java.util.Collection access$100(org.apache.cassandra.cql3.Json$PreparedMarker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json: java.util.Map parseJson(java.lang.String,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: org.apache.cassandra.cql3.Term$Terminal makeTerminal(org.apache.cassandra.cql3.functions.Function,java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$InMarker: org.apache.cassandra.cql3.Tuples$InValue bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$InValue: org.apache.cassandra.cql3.Tuples$InValue fromSerialized(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.ListType,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$InValue: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Marker: org.apache.cassandra.cql3.Tuples$Value bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Value: org.apache.cassandra.cql3.Tuples$Value fromSerialized(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.TupleType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.filter.DataLimits getDataLimits(int,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.ReadQuery getSliceCommands(org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.db.filter.DataLimits,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.ReadQuery getRangeCommand(org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.db.filter.DataLimits,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: org.apache.cassandra.dht.AbstractBounds getPartitionKeyBounds(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.filter.RowFilter getRowFilter(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.filter.ClusteringIndexFilter makeClusteringIndexFilter(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: void maybeValidateIndex()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.PartitionRangeReadCommand create(boolean,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.DataRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean isColumnRange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: boolean containsStaticColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: java.util.NavigableSet getRequestedRows(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.Slices makeSlices(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: java.util.NavigableSet getClusteringColumnsBounds(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: java.util.NavigableSet boundsAsClustering(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder: org.apache.cassandra.db.MultiCBuilder create(org.apache.cassandra.db.ClusteringComparator,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiSliceRestriction: org.apache.cassandra.db.MultiCBuilder appendBoundTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction: org.apache.cassandra.db.MultiCBuilder appendBoundTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction: org.apache.cassandra.db.MultiCBuilder appendBoundTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: org.apache.cassandra.db.MultiCBuilder appendBoundTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: boolean isSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction: org.apache.cassandra.config.ColumnDefinition getLastColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction: java.util.List getColumnDefs()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: org.apache.cassandra.db.MultiCBuilder appendBoundTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: boolean isSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: org.apache.cassandra.db.MultiCBuilder appendBoundTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction: org.apache.cassandra.config.ColumnDefinition getLastColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction: java.util.List getColumnDefs()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: boolean handleInFilter(org.apache.cassandra.cql3.restrictions.SingleRestriction,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: boolean hasMultiColumnSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: boolean hasIN()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.Bound: boolean isStart()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.Bound: org.apache.cassandra.cql3.statements.Bound reverse()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder: java.util.NavigableSet buildBound(boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder: java.util.NavigableSet buildBoundForSlice(boolean,boolean,boolean,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder: java.util.NavigableSet buildBound(boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder: boolean hasMissingElements()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder: java.util.NavigableSet buildBoundForSlice(boolean,boolean,boolean,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSet empty(java.util.Comparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnSpecification: boolean isReversedType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: org.apache.cassandra.db.ClusteringBound buildBoundWith(java.util.List,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSet of(java.util.Comparator,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: boolean hasIN()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction: boolean isIN()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction: boolean isIN()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction: boolean isMultiColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction: org.apache.cassandra.config.ColumnDefinition getFirstColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction: org.apache.cassandra.config.ColumnDefinition getFirstColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: boolean isLIKE()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: boolean isContains()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: org.apache.cassandra.cql3.Term bound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: boolean hasBound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder: org.apache.cassandra.db.MultiCBuilder addElementToAll(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder: org.apache.cassandra.db.MultiCBuilder addElementToAll(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.Bound: org.apache.cassandra.cql3.statements.Bound reverseIfNeeded(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder: void checkUpdateable()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder: boolean hasRemaining()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder: int remainingCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: boolean hasBound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: boolean hasComponent(org.apache.cassandra.cql3.statements.Bound,int,java.util.EnumMap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: java.util.List componentBounds(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder: org.apache.cassandra.db.MultiCBuilder addAllElementsToAll(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder: org.apache.cassandra.db.MultiCBuilder addAllElementsToAll(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.Bound: boolean isEnd()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder: org.apache.cassandra.db.MultiCBuilder addEachElementToAll(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Value: java.util.List getElements()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: java.util.NavigableSet getClusteringColumns(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: java.util.NavigableSet valuesAsClustering(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiEQRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction: org.apache.cassandra.db.MultiCBuilder appendTo(org.apache.cassandra.db.MultiCBuilder,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$OneClusteringBuilder: java.util.NavigableSet build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder: java.util.NavigableSet build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: org.apache.cassandra.db.Clustering buildWith(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$ArrayBackedBuilder: org.apache.cassandra.db.ClusteringComparator comparator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder: boolean containsUnset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder: boolean containsNull()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestrictionWithValues: java.util.List getValues(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestrictionWithMarkers: java.util.List getValues(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithValues: java.util.List getValues(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithMarker: java.util.List getValues(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MultiCBuilder$MultiClusteringBuilder: org.apache.cassandra.db.MultiCBuilder addEachElementToAll(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Value: java.util.List getElements()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithValues: java.util.List splitValues(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithMarker: java.util.List splitValues(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: java.util.Collection toIdentifiers(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$2: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$InValue: java.util.List getSplitValues()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Value: java.util.List getElements()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: boolean hasOnlyEqualityRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: int size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: int size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: boolean hasOnlyEqualityRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: boolean isEQ()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction: boolean isEQ()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean hasStaticColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: org.apache.cassandra.db.filter.RowFilter getRowFilter(org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.CustomIndexExpression: void addToRowFilter(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: java.util.List getCustomIndexExpressions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: org.apache.cassandra.db.filter.RowFilter create()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CQLFilter: void <init>(java.util.List,org.apache.cassandra.db.filter.RowFilter$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CQLFilter: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.CustomIndexExpression$lambda_addToRowFilter_0__570: java.util.function.Supplier bootstrap$(org.apache.cassandra.cql3.restrictions.CustomIndexExpression,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: void addCustomIndexExpression(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.IndexMetadata,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: java.util.Optional get(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.CustomIndexExpression$lambda_addToRowFilter_0__570: java.lang.Object get()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.CustomIndexExpression: org.apache.cassandra.exceptions.InvalidRequestException lambda$addToRowFilter$0(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: org.apache.cassandra.exceptions.InvalidRequestException indexNotFound(org.apache.cassandra.cql3.IndexName,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CustomExpression: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.IndexMetadata,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: void add(org.apache.cassandra.db.filter.RowFilter$Expression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Operator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$CustomExpression: org.apache.cassandra.config.ColumnDefinition makeDefinition(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.CustomIndexExpression$lambda_addToRowFilter_0__570: void <init>(org.apache.cassandra.cql3.restrictions.CustomIndexExpression,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction: void addRowFilterTo(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.index.SecondaryIndexManager,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: org.apache.cassandra.db.filter.RowFilter$SimpleExpression add(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Operator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$SimpleExpression: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Operator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: void addMapEquality(org.apache.cassandra.config.ColumnDefinition,java.nio.ByteBuffer,org.apache.cassandra.cql3.Operator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: java.util.List bindAndGet(java.util.List,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$MapEqualityExpression: void <init>(org.apache.cassandra.config.ColumnDefinition,java.nio.ByteBuffer,org.apache.cassandra.cql3.Operator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: org.apache.cassandra.cql3.Operator getIndexOperator(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.Bound: org.apache.cassandra.cql3.statements.Bound[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: org.apache.cassandra.utils.Pair makeSpecific(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction$lambda_addRowFilterTo_0__607: java.util.function.Supplier bootstrap$(org.apache.cassandra.db.filter.RowFilter$SimpleExpression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction$lambda_addRowFilterTo_0__607: void <init>(org.apache.cassandra.db.filter.RowFilter$SimpleExpression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction: boolean hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction: boolean hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: int numberOfEntries()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: int numberOfKeys()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: int numberOfValues()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: boolean isSupportedBy(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: boolean isSupportedBy(org.apache.cassandra.index.Index)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: org.apache.cassandra.dht.AbstractBounds getPartitionKeyBoundsForTokenRestrictions(org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: boolean isOnToken()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean isOnToken()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: org.apache.cassandra.dht.AbstractBounds getPartitionKeyBounds(org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: boolean needFiltering(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction: boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean needFiltering(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: boolean needFiltering(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: boolean isInclusive(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: java.nio.ByteBuffer getPartitionKeyBound(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: void <init>(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: void <init>(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: void <init>(org.apache.cassandra.dht.RingPosition,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionPosition$ForKey: org.apache.cassandra.db.PartitionPosition get(java.nio.ByteBuffer,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner: org.apache.cassandra.db.DecoratedKey decorateKey(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PreHashedDecoratedKey: void <init>(org.apache.cassandra.dht.Token,java.nio.ByteBuffer,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner: org.apache.cassandra.dht.Murmur3Partitioner$LongToken getToken(java.nio.ByteBuffer,long[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner: long[] getHash(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner: long normalize(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner$LongToken: void <init>(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: java.util.List bounds(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: java.util.List bounds(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction: java.util.List bounds(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.List bounds(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: java.util.List toByteBuffers(java.util.SortedSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction: java.util.List values(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: int size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: int size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: boolean hasContains()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: boolean hasSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: boolean hasUnrestrictedPartitionKeyComponents(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: boolean hasContains()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: org.apache.cassandra.cql3.restrictions.SingleRestriction lastRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: org.apache.cassandra.dht.Token getTokenBound(org.apache.cassandra.cql3.statements.Bound,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: boolean hasBound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction: boolean hasBound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean hasBound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$1: org.apache.cassandra.dht.Token fromByteArray(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: boolean hasBound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: boolean hasBound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: boolean hasBound(org.apache.cassandra.cql3.statements.Bound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: java.util.List getPartitionKeys(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions getSuperColumnRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: void <init>(java.util.List,org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: void validateKey(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer clone(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.db.filter.ColumnFilter getColumnFilter(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction: java.nio.ByteBuffer bindValue(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Builder: org.apache.cassandra.db.filter.ColumnFilter$Builder slice(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions: org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction access$000(org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions: org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction access$100(org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions: org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction access$200(org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions: org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiEQRestriction access$300(org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection: org.apache.cassandra.db.filter.ColumnSubselection slice(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Slice: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.db.filter.ColumnSubselection$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Slice: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: java.util.Iterator iterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions: void <init>(java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: java.util.List values(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: java.util.List values(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.List values(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.List filter(java.util.List,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: com.google.common.collect.RangeSet toRangeSet(org.apache.cassandra.cql3.restrictions.TokenRestriction,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: boolean hasSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: boolean hasSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.List filterWithRangeSet(com.google.common.collect.RangeSet,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: com.google.common.collect.RangeSet toRangeSet(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: org.apache.cassandra.dht.Token deserializeToken(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: com.google.common.collect.BoundType toBoundType(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: boolean needsPostQueryOrdering()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.filter.DataLimits distinctLimits(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.filter.DataLimits groupByLimits(int,int,int,org.apache.cassandra.db.aggregation.AggregationSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.filter.DataLimits cqlLimits(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: void <init>(int,int,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: void <init>(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: void <init>(int,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: org.apache.cassandra.db.filter.DataLimits$CQLLimits access$300(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: org.apache.cassandra.db.filter.DataLimits$CQLLimits distinct(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: void <init>(int,int,int,org.apache.cassandra.db.aggregation.AggregationSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: void <init>(int,int,int,org.apache.cassandra.db.aggregation.AggregationSpecification,org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: void <init>(int,int,boolean,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean keyIsInRelation()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: boolean hasIN()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean hasIN()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$DefaultQueryOptions: org.apache.cassandra.cql3.QueryOptions$SpecificOptions getSpecificOptions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$SpecificOptions: int access$300(org.apache.cassandra.cql3.QueryOptions$SpecificOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: void <init>(org.apache.cassandra.db.SinglePartitionReadCommand$Group,org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.service.pager.SinglePartitionPager access$300(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.service.pager.SinglePartitionPager getPager(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: void <init>(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: void restoreState(org.apache.cassandra.db.DecoratedKey,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: void <init>(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.service.pager.SinglePartitionPager getPager(org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: int nowInSec()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: org.apache.cassandra.db.filter.DataLimits limits()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: void <init>(org.apache.cassandra.db.PartitionRangeReadCommand,org.apache.cassandra.service.pager.PagingState,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: void finishAndClearBatches(java.util.ArrayList,java.util.Set,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.util.List getList(java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: int getInt(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.util.UUID getUUID(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager: java.util.Iterator iterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: void <init>(java.util.UUID,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void flushAndFsyncBlockingly(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$getHostIdForEndpoint__524: com.google.common.base.Function bootstrap$(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$remove__525: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$remove__525: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$getHostIdForEndpoint__524: void <init>(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$get__526: com.google.common.base.Function bootstrap$(org.apache.cassandra.hints.HintsCatalog)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: java.util.concurrent.Future flushBufferPool(org.apache.cassandra.hints.HintsBufferPool,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: void fsyncWritersBlockingly(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$FsyncWritersTask: void <init>(org.apache.cassandra.hints.HintsWriteExecutor,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask: void <init>(org.apache.cassandra.hints.HintsWriteExecutor,org.apache.cassandra.hints.HintsBufferPool,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$get__526: void <init>(org.apache.cassandra.hints.HintsCatalog)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: org.slf4j.Logger access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: int gcgs(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: java.util.List sendReplays(java.util.List,long,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$ReplayWriteResponseHandler sendSingleReplayMutation(org.apache.cassandra.db.Mutation,long,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.lang.Iterable getNaturalAndPendingEndpoints(java.lang.String,org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void write(java.util.UUID,org.apache.cassandra.hints.Hint)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$ReplayWriteResponseHandler: void <init>(java.util.Collection,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.List getNaturalEndpoints(java.lang.String,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: int addMutations(int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: void addMutation(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation$MutationSerializer: org.apache.cassandra.db.Mutation deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation$MutationSerializer: org.apache.cassandra.db.Mutation deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: java.lang.String readUTF()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: java.lang.String readUTF()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer: org.apache.cassandra.db.partitions.PartitionUpdate deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.rows.SerializationHelper$Flag,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer: org.apache.cassandra.db.partitions.PartitionUpdate deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.rows.SerializationHelper$Flag,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer: org.apache.cassandra.db.partitions.PartitionUpdate deserialize30(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer: org.apache.cassandra.db.partitions.PartitionUpdate deserializePre30(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.rows.SerializationHelper$Flag,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.rows.UnfilteredRowIterator deserializeLegacyPartition(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.rows.SerializationHelper$Flag,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Serializer: org.apache.cassandra.config.CFMetaData deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo: org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo deserialize(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.util.Iterator deserializeCells(org.apache.cassandra.config.CFMetaData,java.io.DataInput,org.apache.cassandra.db.rows.SerializationHelper$Flag,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.rows.UnfilteredRowIterator onWireCellstoUnfilteredRowIterator(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo,java.util.Iterator,boolean,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.util.Comparator legacyCellComparator(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.rows.UnfilteredRowIterator toUnfilteredRowIterator(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo,java.util.Iterator,boolean,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo: java.util.Iterator inRowRangeTombstones()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$1: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.util.Iterator asLegacyAtomIterator(java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.util.Comparator legacyAtomComparator(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.rows.Row getNextRow(org.apache.cassandra.db.LegacyLayout$CellGrouper,com.google.common.collect.PeekingIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.util.Iterator convertToRows(org.apache.cassandra.db.LegacyLayout$CellGrouper,com.google.common.collect.PeekingIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$2: void <init>(com.google.common.collect.PeekingIterator,org.apache.cassandra.db.LegacyLayout$CellGrouper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$lambda_legacyAtomComparator_0__106: java.util.Comparator bootstrap$(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$lambda_legacyAtomComparator_0__106: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: java.util.Iterator iterator(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$2: void <init>(org.apache.cassandra.db.RangeTombstoneList)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$1: void <init>(org.apache.cassandra.db.RangeTombstoneList)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: int access$000(org.apache.cassandra.db.RangeTombstoneList)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$5: void <init>(java.util.Comparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.util.Comparator legacyCellNameComparator(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$6: void <init>(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$7: void <init>(int,org.apache.cassandra.config.CFMetaData,java.io.DataInput,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo: void <init>(org.apache.cassandra.db.MutableDeletionInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo: void add(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo: void add(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.RangeTombstone)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone withNewStart(org.apache.cassandra.db.LegacyLayout$LegacyBound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone: org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone withNewEnd(org.apache.cassandra.db.LegacyLayout$LegacyBound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo: org.apache.cassandra.db.ClusteringBound staticBound(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDSerializer: java.util.UUID deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.UnknownColumnFamilyException: void <init>(java.lang.String,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.MutableDeletionInfo,boolean,org.apache.cassandra.db.partitions.PartitionUpdate$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate emptyUpdate(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.Mutation without(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.Mutation without(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.Mutation copy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager$1: void <init>(org.apache.cassandra.cql3.UntypedResultSet$FromPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: java.util.UUID access$000(org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractWriteResponseHandler: void get()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch: void writeHintsForUndeliveredEndpoints(int,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$ReplayWriteResponseHandler: java.util.Set access$200(org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$ReplayWriteResponseHandler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$getHostIdForEndpoint__579: com.google.common.base.Function bootstrap$(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$getHostIdForEndpoint__579: void <init>(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.WriteResponseHandler: int ackCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.WriteFailureException: void <init>(org.apache.cassandra.db.ConsistencyLevel,int,int,org.apache.cassandra.db.WriteType,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.RequestFailureException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,org.apache.cassandra.db.ConsistencyLevel,int,int,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$lambda_run_0__500: java.util.function.Predicate bootstrap$(org.apache.cassandra.hints.HintsDispatchTrigger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog: java.util.stream.Stream stores()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$isLive__501: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$lambda_run_1__502: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$lambda_run_2__503: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$schedule__504: java.util.function.Consumer bootstrap$(org.apache.cassandra.hints.HintsDispatchTrigger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$schedule__504: void <init>(org.apache.cassandra.hints.HintsDispatchTrigger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$lambda_run_2__503: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$lambda_run_1__502: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$isLive__501: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger$lambda_run_0__500: void <init>(org.apache.cassandra.hints.HintsDispatchTrigger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue load(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: org.slf4j.Logger access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void setLastProcessedMessageAt(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: long getLifetimeInMS()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: long getTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageDeliveryTask: void handleFailure(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchRemoveVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchStoreVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.CommitVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.ProposeVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommandVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadRepairVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler: void doVerb(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.IVerbHandler getVerbHandler(org.apache.cassandra.net.MessagingService$Verb)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void incrementDroppedMessages(org.apache.cassandra.net.MessageIn,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: boolean isCrossNode()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: java.util.concurrent.CompletableFuture applyFuture()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler: void failed()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler: void reply(int,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler: void forwardToLocalNodes(org.apache.cassandra.db.Mutation,org.apache.cassandra.net.MessagingService$Verb,byte[],java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: boolean isLegacyBatchlogMutation(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler$lambda_doVerb_0__366: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.MutationVerbHandler,int,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler$lambda_doVerb_1__367: java.util.function.Function bootstrap$(org.apache.cassandra.db.MutationVerbHandler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler$lambda_doVerb_1__367: void <init>(org.apache.cassandra.db.MutationVerbHandler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler$lambda_doVerb_0__366: void <init>(org.apache.cassandra.db.MutationVerbHandler,int,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.partitions.PartitionUpdate getPartitionUpdate(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator$lambda_handleLegacyMutation_0__46: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator$lambda_handleLegacyMutation_0__46: void <init>(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FastByteArrayInputStream: void <init>(byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.CompactEndpointSerializationHelper: java.net.InetAddress deserialize(java.io.DataInput)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WriteResponse: org.apache.cassandra.net.MessageOut createMessage()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.util.concurrent.CompletableFuture applyFuture(org.apache.cassandra.db.Mutation,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler$lambda_doVerb_0__366: void accept(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$lambda_doVerb_0__4: void accept(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler: void lambda$doVerb$0(int,org.apache.cassandra.net.MessageIn,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler: void reply(int,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler: void lambda$doVerb$0(int,java.net.InetAddress,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler$lambda_doVerb_1__367: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$lambda_doVerb_1__5: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutationVerbHandler: java.lang.Void lambda$doVerb$1(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: long getSlowQueryTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeSliceVerbHandler: org.apache.cassandra.io.IVersionedSerializer serializer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommandVerbHandler: org.apache.cassandra.io.IVersionedSerializer serializer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutationVerbHandler$1: void <init>(org.apache.cassandra.db.CounterMutationVerbHandler,int,org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.service.AbstractWriteResponseHandler applyCounterMutationOnLeader(org.apache.cassandra.db.CounterMutation,java.lang.String,java.lang.Runnable,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.service.AbstractWriteResponseHandler performWrite(org.apache.cassandra.db.IMutation,org.apache.cassandra.db.ConsistencyLevel,java.lang.String,org.apache.cassandra.service.StorageProxy$WritePerformer,java.lang.Runnable,org.apache.cassandra.db.WriteType,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$4: void apply(org.apache.cassandra.db.IMutation,java.lang.Iterable,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.String,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$2: void apply(org.apache.cassandra.db.IMutation,java.lang.Iterable,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.String,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$3: void apply(org.apache.cassandra.db.IMutation,java.lang.Iterable,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.String,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.lang.Runnable access$000(org.apache.cassandra.db.IMutation,java.lang.Iterable,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.lang.Runnable counterWriteTask(org.apache.cassandra.db.IMutation,java.lang.Iterable,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$9: void <init>(org.apache.cassandra.net.MessagingService$Verb,org.apache.cassandra.db.IMutation,org.apache.cassandra.service.AbstractWriteResponseHandler,java.lang.Iterable,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$DroppableRunnable: void <init>(org.apache.cassandra.net.MessagingService$Verb)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateResponse: org.apache.cassandra.net.MessageOut createMessage()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateResponse: void <init>(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateVerbHandler: void respondError(org.apache.cassandra.db.Truncation,org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.FSError: org.apache.cassandra.io.FSError findNested(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PaxosState: org.apache.cassandra.service.paxos.PrepareResponse prepare(org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit: boolean isAfter(org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareResponse: void <init>(boolean,org.apache.cassandra.service.paxos.Commit,org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: int unixTimestampInSec(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.service.paxos.PaxosState loadPaxosState(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.config.CFMetaData,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void savePaxosPromise(org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PaxosState: void <init>(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit: void <init>(java.util.UUID,org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PaxosState: void <init>(org.apache.cassandra.service.paxos.Commit,org.apache.cassandra.service.paxos.Commit,org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.nio.ByteBuffer getBytes(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeInternalWithNow(int,long,java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit: org.apache.cassandra.service.paxos.Commit emptyCommit(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate fromBytes(java.nio.ByteBuffer,int,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.transport.messages.ResultMessage$Rows executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager: org.apache.cassandra.cql3.statements.SelectStatement$Pager forInternalQuery(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: org.apache.cassandra.db.partitions.PartitionIterator executeInternal(org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: org.apache.cassandra.db.ReadExecutionController executionController()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadQuery$1: org.apache.cassandra.db.partitions.PartitionIterator executeInternal(org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadQuery$1: org.apache.cassandra.db.filter.DataLimits limits()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadQuery$1: org.apache.cassandra.db.ReadExecutionController executionController()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.transport.messages.ResultMessage$Rows execute(org.apache.cassandra.cql3.statements.SelectStatement$Pager,org.apache.cassandra.cql3.QueryOptions,int,int,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.service.pager.QueryPager getPager(org.apache.cassandra.db.ReadQuery,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.transport.messages.ResultMessage$Rows processResults(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.cql3.QueryOptions,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.cql3.ResultSet process(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.cql3.QueryOptions,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Rows: void <init>(org.apache.cassandra.cql3.ResultSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage: void <init>(org.apache.cassandra.transport.messages.ResultMessage$Kind)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Message$Response: void <init>(org.apache.cassandra.transport.Message$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Message: void <init>(org.apache.cassandra.transport.Message$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: java.lang.Object next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: boolean hasNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: void trim(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: org.apache.cassandra.cql3.ResultSet build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder resultSetBuilder(org.apache.cassandra.cql3.QueryOptions,boolean,org.apache.cassandra.db.aggregation.AggregationSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: void orderResults(org.apache.cassandra.cql3.ResultSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: void processPartition(org.apache.cassandra.db.rows.RowIterator,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator: java.lang.Object next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator: boolean hasNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: java.lang.Object next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: boolean hasNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: org.apache.cassandra.db.rows.Row staticRow()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: void add(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: void newRow(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: boolean queriesFullPartitions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: void processPartition(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.db.rows.RowIterator,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder,org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: java.nio.ByteBuffer[] getComponents(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: void addValue(org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.Row,int,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: java.nio.ByteBuffer serializeForNativeProtocol(java.util.Iterator,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: void add(org.apache.cassandra.db.rows.Cell,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: java.nio.ByteBuffer serializeForNativeProtocol(java.util.Iterator,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: java.util.List serializedValues(java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: int collectionSize(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: java.util.List serializedValues(java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: int collectionSize(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: java.util.List serializedValues(java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: java.nio.ByteBuffer value(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: int remainingTTL(org.apache.cassandra.db.rows.Cell,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction: java.nio.ByteBuffer bindValue(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int compare(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isSuperColumnValueColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isSuperColumnKeyColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions: org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiSliceRestriction access$400(org.apache.cassandra.cql3.SuperColumnCompatibility$SuperColumnRestrictions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection$1: void addInputRow(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing$1: void addInputRow(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: void addRow(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: java.util.List getOutputRow()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: java.util.List access$300(org.apache.cassandra.cql3.selection.Selection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection$1: java.util.List getOutputRow(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing$1: java.util.List getOutputRow(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.ResultSet$ResultMetadata access$500(org.apache.cassandra.cql3.selection.Selection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: java.util.List rowToJson(java.util.List,org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.ResultSet$ResultMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: java.util.Map access$600(org.apache.cassandra.cql3.selection.Selection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: int getColumnCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector: java.nio.ByteBuffer getOutput(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector: java.nio.ByteBuffer getOutput(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.ScalarFunctionSelector: java.nio.ByteBuffer getOutput(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AggregateFunctionSelector: java.nio.ByteBuffer getOutput(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector: java.nio.ByteBuffer getOutput(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector: java.nio.ByteBuffer getOutput(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate$2: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$24$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$22$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$23$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$21$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$20$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$19$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$17$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$16$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$15$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$14$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$13$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$LongSumAggregate: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$11$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$10$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$9$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$8$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$7$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$6$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$5$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$4$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$3$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$2$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$1$1: java.nio.ByteBuffer compute(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$AvgAggregate: long computeInternal()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate: double computeInternal()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate: double computeInternal()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate$2: void maybeInit(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.cql3.functions.ScalarFunction access$000(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.cql3.functions.ScalarFunction access$200(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: com.datastax.driver.core.TypeCodec access$100(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: com.datastax.driver.core.TypeCodec access$300(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction: java.lang.Object executeAggregateUserDefined(org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.lang.Object executeAggregateUserDefined(org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$1: java.lang.Object executeAggregateUserDefined(org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.lang.Object executeAggregateAsync(org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$lambda_executeAggregateAsync_1__608: java.util.concurrent.Callable bootstrap$(org.apache.cassandra.cql3.functions.UDFunction,org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime,org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$lambda_executeAggregateAsync_1__608: void <init>(org.apache.cassandra.cql3.functions.UDFunction,org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime,org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector: void setArg(int,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.ScalarFunctionSelector: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AggregateFunctionSelector: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector: java.util.List args()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate$2: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$24$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$22$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$23$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$21$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$20$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$LongSumAggregate: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$10$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$8$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$AvgAggregate: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$6$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$5$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$4$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$3$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$2$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$1$1: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: int valueCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.ScalarFunctionSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AggregateFunctionSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector: void addInput(org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$24$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$22$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$23$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$21$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$20$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$LongSumAggregate: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$10$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$8$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$AvgAggregate: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$6$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$5$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$4$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$3$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$2$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$1$1: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate$2: void addInput(org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: org.apache.cassandra.db.rows.Row next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringComparator: int compare(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.Clustering,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: org.apache.cassandra.db.rows.RowIterator access$300(org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: org.apache.cassandra.db.rows.RowIterator access$302(org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator,org.apache.cassandra.db.rows.RowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: void fetchNextRowIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager: org.apache.cassandra.service.pager.QueryPager access$000(org.apache.cassandra.service.pager.AggregationQueryPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager$PagersIterator: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.QueryPager$1: int maxRemaining()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: int maxRemaining()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: int maxRemaining()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: int maxRemaining()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.QueryPager$1: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator: int computeSubPageSize(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator: org.apache.cassandra.service.pager.QueryPager updatePagerLimit(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.filter.DataLimits,java.nio.ByteBuffer,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator: boolean isDone(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: org.apache.cassandra.db.partitions.PartitionIterator fetchSubPage(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: int computeSubPageSize(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: org.apache.cassandra.service.pager.QueryPager updatePagerLimit(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.filter.DataLimits,java.nio.ByteBuffer,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: boolean isDone(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager: org.apache.cassandra.db.filter.DataLimits access$100(org.apache.cassandra.service.pager.AggregationQueryPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager: org.apache.cassandra.service.pager.QueryPager access$002(org.apache.cassandra.service.pager.AggregationQueryPager,org.apache.cassandra.service.pager.QueryPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.QueryPager$1: org.apache.cassandra.db.partitions.PartitionIterator fetchPage(int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPage(int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPage(int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPage(int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.QueryPager$1: org.apache.cassandra.db.partitions.PartitionIterator fetchPageInternal(int,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPageInternal(int,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPageInternal(int,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPageInternal(int,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager$PagersIterator: void <init>(org.apache.cassandra.service.pager.MultiPartitionPager,int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,org.apache.cassandra.db.ReadExecutionController,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPageInternal(int,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: org.apache.cassandra.db.ReadCommand nextPageReadCommand(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.db.ReadCommand nextPageReadCommand(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$RowPager: void <init>(org.apache.cassandra.service.pager.AbstractQueryPager,org.apache.cassandra.db.filter.DataLimits,int,org.apache.cassandra.service.pager.AbstractQueryPager$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators: org.apache.cassandra.db.partitions.PartitionIterator partition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$RowPager: void <init>(org.apache.cassandra.service.pager.AbstractQueryPager,org.apache.cassandra.db.filter.DataLimits,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$Pager: void <init>(org.apache.cassandra.service.pager.AbstractQueryPager,org.apache.cassandra.db.filter.DataLimits,int,org.apache.cassandra.service.pager.AbstractQueryPager$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$Pager: void <init>(org.apache.cassandra.service.pager.AbstractQueryPager,org.apache.cassandra.db.filter.DataLimits,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: boolean access$300(org.apache.cassandra.service.pager.AbstractQueryPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.db.filter.DataLimits limits()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PagingState$RowMark: org.apache.cassandra.db.Clustering clustering(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int,java.nio.ByteBuffer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int,java.nio.ByteBuffer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int,java.nio.ByteBuffer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int,java.nio.ByteBuffer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: org.apache.cassandra.db.filter.DataLimits forPaging(int,java.nio.ByteBuffer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand forPaging(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: int remainingInPartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: java.nio.ByteBuffer key()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits: void <init>(int,int,boolean,java.nio.ByteBuffer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: void <init>(int,int,int,org.apache.cassandra.db.aggregation.AggregationSpecification,org.apache.cassandra.db.aggregation.GroupingState,java.nio.ByteBuffer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: void <init>(int,int,int,org.apache.cassandra.db.aggregation.AggregationSpecification,org.apache.cassandra.db.aggregation.GroupingState,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: void <init>(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.ProtocolVersion: boolean isSmallerOrEqualTo(org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$Serializer: org.apache.cassandra.db.Clustering deserialize(java.nio.ByteBuffer,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PagingState$RowMark: java.util.List makeClusteringTypes(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: org.apache.cassandra.db.DataRange forSubRange(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.db.DataRange forSubRange(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: org.apache.cassandra.db.DataRange forPaging(org.apache.cassandra.dht.AbstractBounds,org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.PartitionRangeReadCommand withUpdatedLimitsAndDataRange(org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.DataRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: org.apache.cassandra.dht.AbstractBounds makeKeyBounds(org.apache.cassandra.db.PartitionPosition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: void <init>(org.apache.cassandra.dht.AbstractBounds,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean,org.apache.cassandra.db.DataRange$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: void <init>(org.apache.cassandra.dht.AbstractBounds,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPage(int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.partitions.PartitionIterator execute(org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.partitions.PartitionIterator execute(org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: org.apache.cassandra.db.SinglePartitionReadCommand$Group one(org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.partitions.PartitionIterator read(org.apache.cassandra.db.SinglePartitionReadCommand$Group,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: boolean isSerialConsistency()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.IsBootstrappingException: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: boolean systemKeyspaceQuery(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.partitions.PartitionIterator readWithPaxos(org.apache.cassandra.db.SinglePartitionReadCommand$Group,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.partitions.PartitionIterator readRegular(org.apache.cassandra.db.SinglePartitionReadCommand$Group,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.partitions.PartitionIterator filter(org.apache.cassandra.db.partitions.PartitionIterator,int,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: boolean selectsFullPartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.partitions.PartitionIterator fetchRows(java.util.List,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: void doInitialQueries()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: void maybeTryAdditionalReplicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: void awaitResultsAndRetryOnDigestMismatch()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: boolean isDone()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: org.apache.cassandra.db.partitions.PartitionIterator getResult()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SinglePartitionReadLifecycle: void <init>(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionIterators: org.apache.cassandra.db.partitions.PartitionIterator concat(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.MorePartitions: org.apache.cassandra.db.partitions.PartitionIterator extend(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.db.transform.MorePartitions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionIterators$1Extend: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor: org.apache.cassandra.service.AbstractReadExecutor getReadExecutor(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: java.util.List filterForQuery(org.apache.cassandra.db.Keyspace,java.util.List,org.apache.cassandra.config.ReadRepairDecision)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.ReadRepairDecision newReadRepairDecision()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$NeverSpeculatingReadExecutor: void <init>(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel,java.util.List,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$AlwaysSpeculatingReadExecutor: void <init>(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel,java.util.List,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor: void <init>(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel,java.util.List,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.List getLiveSortedEndpoints(org.apache.cassandra.db.Keyspace,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.List getLiveNaturalEndpoints(org.apache.cassandra.db.Keyspace,org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void getLiveNaturalEndpoints(org.apache.cassandra.db.Keyspace,org.apache.cassandra.dht.RingPosition,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor: void <init>(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel,java.util.List,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.db.ReadCommand setDigestVersion(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: void <init>(org.apache.cassandra.service.ResponseResolver,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.db.ReadCommand,java.util.List,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DigestResolver: void <init>(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ResponseResolver: void <init>(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator: void <init>(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: boolean isLocal(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: java.util.List filterForEachQuorum(org.apache.cassandra.db.Keyspace,java.util.List,org.apache.cassandra.config.ReadRepairDecision)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.util.Comparator getLocalComparator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: java.util.List subList(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.util.List subList(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: org.apache.cassandra.utils.btree.BTreeSet subList(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet$BTreeRange: org.apache.cassandra.utils.btree.BTreeSet subList(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: java.util.Map countPerDCEndpoints(org.apache.cassandra.db.Keyspace,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: int countLocalEndpoints(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.UnavailableException: void <init>(org.apache.cassandra.db.ConsistencyLevel,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.UnavailableException: void <init>(org.apache.cassandra.db.ConsistencyLevel,java.lang.String,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.UnavailableException: void <init>(java.lang.String,org.apache.cassandra.db.ConsistencyLevel,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver: org.apache.cassandra.db.partitions.PartitionIterator getData()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DigestResolver: org.apache.cassandra.db.partitions.PartitionIterator getData()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver: org.apache.cassandra.db.partitions.PartitionIterator resolve()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: long getTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: long getTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: boolean await(long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.ReadFailureException: void <init>(org.apache.cassandra.db.ConsistencyLevel,int,int,boolean,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator: int size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DigestMismatchException: void <init>(org.apache.cassandra.db.DecoratedKey,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Accumulator: java.lang.Object get(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator mergeWithShortReadProtection(java.util.List,java.net.InetAddress[],org.apache.cassandra.db.filter.DataLimits$Counter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: boolean isUnlimited()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: boolean isUnlimited()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: boolean isUnlimited()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator extendWithShortReadProtection(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,java.net.InetAddress,org.apache.cassandra.db.filter.DataLimits$Counter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener: void <init>(org.apache.cassandra.service.DataResolver,java.net.InetAddress[],org.apache.cassandra.service.DataResolver$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator merge(java.util.List,int,org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$MergeListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1: void <init>(java.util.List,org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$MergeListener,org.apache.cassandra.config.CFMetaData,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2: void <init>(boolean,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.utils.MergeIterator,org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$MergeListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener: void <init>(org.apache.cassandra.service.DataResolver,java.net.InetAddress[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: boolean isLimitedToOnePartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: org.apache.cassandra.db.filter.DataLimits$Counter onlyCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: boolean isLimitedToOnePartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: void <init>(org.apache.cassandra.service.DataResolver,java.net.InetAddress,org.apache.cassandra.db.filter.DataLimits$Counter,org.apache.cassandra.db.filter.DataLimits$Counter,long,org.apache.cassandra.service.DataResolver$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.MorePartitions: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator extend(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator,org.apache.cassandra.db.transform.MorePartitions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: void <init>(org.apache.cassandra.service.DataResolver,java.net.InetAddress,org.apache.cassandra.db.filter.DataLimits$Counter,org.apache.cassandra.db.filter.DataLimits$Counter,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.net.MessageOut createMessage(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int sendRRWithFailure(org.apache.cassandra.net.MessageOut,java.net.InetAddress,org.apache.cassandra.net.IAsyncCallbackWithFailure)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor: org.apache.cassandra.db.partitions.PartitionIterator get()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor: java.util.Collection getContactedReplicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$AlwaysSpeculatingReadExecutor: java.util.Collection getContactedReplicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$NeverSpeculatingReadExecutor: java.util.Collection getContactedReplicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver: void <init>(org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$NeverSpeculatingReadExecutor: void maybeTryAdditionalReplicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$AlwaysSpeculatingReadExecutor: void maybeTryAdditionalReplicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.ReadCommand copyAsDigestQuery()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor: org.slf4j.Logger access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand copyAsDigestQuery()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$NeverSpeculatingReadExecutor: void executeAsync()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$SpeculatingReadExecutor: void executeAsync()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor$AlwaysSpeculatingReadExecutor: void executeAsync()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor: void makeDataRequests(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AbstractReadExecutor: void makeDigestRequests(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$LocalReadRunnable: void <init>(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.service.ReadCallback)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Counter: org.apache.cassandra.db.partitions.PartitionIterator applyTo(org.apache.cassandra.db.partitions.PartitionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.utils.Pair getPaxosParticipants(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.utils.Pair beginAndRepairPaxos(long,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.config.CFMetaData,java.util.List,int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.db.ConsistencyLevel,boolean,org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: long getTimestampForPaxos(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareCallback: java.lang.Iterable replicasMissingMostRecentCommit(org.apache.cassandra.config.CFMetaData,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getCasContentionTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: java.util.UUID getRandomTimeUUIDFromMicros(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit: org.apache.cassandra.service.paxos.Commit newPrepare(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.config.CFMetaData,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.service.paxos.PrepareCallback preparePaxos(org.apache.cassandra.service.paxos.Commit,java.util.List,int,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit: org.apache.cassandra.service.paxos.Commit newProposal(java.util.UUID,org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: boolean proposePaxos(org.apache.cassandra.service.paxos.Commit,java.util.List,int,boolean,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void commitPaxos(org.apache.cassandra.service.paxos.Commit,org.apache.cassandra.db.ConsistencyLevel,boolean,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void recordCasContention(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void sendCommit(org.apache.cassandra.service.paxos.Commit,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void commitPaxosLocal(org.apache.cassandra.net.MessageOut,org.apache.cassandra.service.AbstractWriteResponseHandler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$6: void <init>(org.apache.cassandra.net.MessageOut,org.apache.cassandra.service.AbstractWriteResponseHandler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.OverloadedException: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.ProposeCallback: int getAcceptCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.ProposeCallback: boolean isFullyRefused()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.ProposeCallback: boolean isSuccessful()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.AbstractPaxosCallback: void await()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.ProposeCallback: void <init>(int,int,boolean,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.AbstractPaxosCallback: void <init>(int,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.AbstractPaxosCallback: int getResponseCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: void updateAllTimestamp(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: org.apache.cassandra.db.DeletionInfo updateAllTimestamp(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_updateAllTimestamp_0__189: com.google.common.base.Function bootstrap$(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_updateAllTimestamp_0__189: void <init>(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void updateAllTimestamp(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareCallback: void <init>(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareCallback$1: void <init>(org.apache.cassandra.service.paxos.PrepareCallback)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: com.google.common.base.Predicate sameDCPredicateFor(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$5: void <init>(java.lang.String,org.apache.cassandra.locator.IEndpointSnitch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.partitions.PartitionIterator postReconciliationProcessing(org.apache.cassandra.db.partitions.PartitionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeIterator: int rangeCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeIterator: void <init>(org.apache.cassandra.db.PartitionRangeReadCommand,org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeCommandIterator: void <init>(org.apache.cassandra.service.StorageProxy$RangeIterator,org.apache.cassandra.db.PartitionRangeReadCommand,int,org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: float estimateResultsPerRange(org.apache.cassandra.db.PartitionRangeReadCommand,org.apache.cassandra.db.Keyspace)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: float estimateTotalResults(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: float estimateTotalResults(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: float estimateTotalResults(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeMerger: void <init>(java.util.Iterator,org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.StorageProxy$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeMerger: void <init>(java.util.Iterator,org.apache.cassandra.db.Keyspace,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: java.util.List unwrap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: java.util.List unwrap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: java.util.List unwrap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.List getRestrictedRanges(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token: org.apache.cassandra.dht.RingPosition upperBound(java.lang.Class)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token: org.apache.cassandra.dht.Token getToken()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: org.apache.cassandra.utils.Pair split(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: org.apache.cassandra.utils.Pair split(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: org.apache.cassandra.utils.Pair split(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: org.apache.cassandra.utils.Pair split(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Iterator ringIterator(java.util.ArrayList,org.apache.cassandra.dht.Token,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$2: void <init>(int,org.apache.cassandra.dht.Token,java.util.ArrayList,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: int firstTokenIndex(java.util.ArrayList,org.apache.cassandra.dht.Token,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: org.apache.cassandra.db.filter.DataLimits forGroupByInternalPaging(org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: org.apache.cassandra.db.filter.DataLimits forGroupByInternalPaging(org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.filter.DataLimits forGroupByInternalPaging(org.apache.cassandra.db.aggregation.GroupingState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.QueryPager$1: org.apache.cassandra.service.pager.QueryPager withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.service.pager.QueryPager withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: org.apache.cassandra.service.pager.QueryPager withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: org.apache.cassandra.service.pager.QueryPager withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupingState: void <init>(java.nio.ByteBuffer,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: void <init>(org.apache.cassandra.service.pager.SinglePartitionPager[],org.apache.cassandra.db.filter.DataLimits,int,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: org.apache.cassandra.service.pager.PartitionRangeQueryPager withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: void <init>(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.service.pager.PagingState$RowMark,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.ReadCommand withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.ReadCommand withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: int maxRemaining()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.service.pager.SinglePartitionPager withUpdatedLimit(org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: void <init>(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.transport.ProtocolVersion,org.apache.cassandra.service.pager.PagingState$RowMark,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyBasePartitionIterator: org.apache.cassandra.db.rows.BaseRowIterator next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: int access$300(org.apache.cassandra.service.pager.MultiPartitionPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: int access$302(org.apache.cassandra.service.pager.MultiPartitionPager,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator: org.apache.cassandra.db.rows.Row next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: org.apache.cassandra.db.Clustering access$202(org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean hasRegularColumnsRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: void <init>(org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.cql3.QueryOptions,boolean,org.apache.cassandra.cql3.selection.Selection$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification: org.apache.cassandra.db.aggregation.GroupMaker newGroupMaker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: void <init>(org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.cql3.QueryOptions,boolean,org.apache.cassandra.db.aggregation.GroupMaker,org.apache.cassandra.cql3.selection.Selection$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: void <init>(org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.cql3.QueryOptions,boolean,org.apache.cassandra.db.aggregation.GroupMaker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: org.apache.cassandra.cql3.ResultSet$ResultMetadata copy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection: org.apache.cassandra.cql3.selection.Selection$Selectors newSelectors(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing: org.apache.cassandra.cql3.selection.Selection$Selectors newSelectors(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: void <init>(org.apache.cassandra.cql3.ResultSet$ResultMetadata,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: boolean access$200(org.apache.cassandra.cql3.selection.Selection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: boolean access$400(org.apache.cassandra.cql3.selection.Selection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing$1: void <init>(org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing: org.apache.cassandra.cql3.selection.SelectorFactories access$700(org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: java.util.List newInstances(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1: org.apache.cassandra.cql3.selection.Selector newInstance(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector$1: org.apache.cassandra.cql3.selection.Selector newInstance(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: org.apache.cassandra.cql3.selection.Selector newInstance(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector$1: org.apache.cassandra.cql3.selection.Selector newInstance(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector$1: org.apache.cassandra.cql3.selection.Selector newInstance(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector: void <init>(java.lang.String,int,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.selection.SimpleSelector$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector: void <init>(java.lang.String,int,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selector: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector: void <init>(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.selection.TermSelector$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector: void <init>(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.ScalarFunctionSelector: void <init>(org.apache.cassandra.cql3.functions.Function,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AggregateFunctionSelector: void <init>(org.apache.cassandra.cql3.functions.Function,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector: void <init>(org.apache.cassandra.cql3.functions.Function,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$24: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$22: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$23: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$21: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$20: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$19: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$18: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$17: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$16: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$15: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$14: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$13: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$12: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$11: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$10: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$9: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$8: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$7: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$6: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$5: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$4: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$3: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$2: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$1: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate$1: org.apache.cassandra.cql3.functions.AggregateFunction$Aggregate newAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate$2: void <init>(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$1$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$2$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$2)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$3$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$3)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$4$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$4)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$5$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$5)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$6$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$6)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$7$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$7,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$AvgAggregate: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$8$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$8)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$9$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$9,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$10$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$10)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$11$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$11,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$LongSumAggregate: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$LongSumAggregate: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$13$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$13,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$14$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$14,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$FloatSumAggregate: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$15$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$15,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$FloatAvgAggregate: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$16$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$16,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$17$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$17,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$19$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$19,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$20$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$20)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$21$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$21)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$23$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$23)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$22$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$22)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.AggregateFcts$24$1: void <init>(org.apache.cassandra.cql3.functions.AggregateFcts$24)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector: void <init>(org.apache.cassandra.db.marshal.UserType,int,org.apache.cassandra.cql3.selection.Selector,org.apache.cassandra.cql3.selection.FieldSelector$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector: void <init>(java.lang.String,int,boolean,org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector: void <init>(java.lang.String,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector: void <init>(org.apache.cassandra.db.marshal.UserType,int,org.apache.cassandra.cql3.selection.Selector)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection$1: void <init>(org.apache.cassandra.cql3.selection.Selection$SimpleSelection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder: void <init>(org.apache.cassandra.cql3.selection.Selection,org.apache.cassandra.cql3.QueryOptions,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupMaker$1: boolean returnAtLeastOneRow()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupMaker: boolean returnAtLeastOneRow()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: org.apache.cassandra.db.rows.RowIterator next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator$GroupByRowIterator: void <init>(org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator,org.apache.cassandra.db.rows.RowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.service.pager.PagingState getPagingState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager: void <init>(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.filter.DataLimits)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.filter.DataLimits cqlLimits(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: void <init>(int,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: void <init>(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$SpecificOptions: org.apache.cassandra.service.pager.PagingState access$400(org.apache.cassandra.cql3.QueryOptions$SpecificOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: void setHasMorePages(org.apache.cassandra.service.pager.PagingState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager: org.apache.cassandra.service.pager.PagingState state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPage(int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean hasPartitionKeyRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: void warn(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$InternalPager: org.apache.cassandra.service.pager.PagingState state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$InternalPager: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$InternalPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPage(int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPageInternal(int,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: boolean isGroupByLimit()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: boolean isGroupByLimit()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: void <init>(org.apache.cassandra.service.pager.AggregationQueryPager,int,org.apache.cassandra.db.ReadExecutionController,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator: void <init>(org.apache.cassandra.service.pager.AggregationQueryPager,int,org.apache.cassandra.db.ReadExecutionController,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: void <init>(org.apache.cassandra.service.pager.AggregationQueryPager,int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,org.apache.cassandra.db.ReadExecutionController,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: int handlePagingOff(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager: boolean isExhausted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager: org.apache.cassandra.service.pager.PagingState state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager: org.apache.cassandra.service.pager.PagingState state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.QueryPager$1: org.apache.cassandra.service.pager.PagingState state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.service.pager.PagingState state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: org.apache.cassandra.service.pager.PagingState state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: org.apache.cassandra.service.pager.PagingState state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PagingState: void <init>(java.nio.ByteBuffer,org.apache.cassandra.service.pager.PagingState$RowMark,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager: org.apache.cassandra.db.partitions.PartitionIterator fetchPage(int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$AggregationPartitionIterator: void <init>(org.apache.cassandra.service.pager.AggregationQueryPager,int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AggregationQueryPager$GroupByPartitionIterator: void <init>(org.apache.cassandra.service.pager.AggregationQueryPager,int,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadExecutionController: org.apache.cassandra.db.ReadExecutionController empty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator executeLocally(org.apache.cassandra.db.ReadExecutionController,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.DecoratedKey access$200(org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_executeLocally_0__260: java.util.Comparator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_executeLocally_1__259: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator concat(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Extend: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_executeLocally_1__259: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_executeLocally_0__260: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$InternalPager: void <init>(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.ReadExecutionController,org.apache.cassandra.cql3.statements.SelectStatement$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$InternalPager: void <init>(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager: void <init>(org.apache.cassandra.service.pager.QueryPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PaxosState: java.lang.Boolean propose(org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit: boolean hasBallot(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void savePaxosProposal(org.apache.cassandra.service.paxos.Commit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.Hint: java.util.concurrent.CompletableFuture applyFuture()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.net.InetAddress getEndpointForHostId(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.UUID getLocalHostUUID()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void writeForAllReplicas(org.apache.cassandra.hints.Hint)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: boolean appliesLocally(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$validate__3: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$lambda_doVerb_0__4: java.util.function.Consumer bootstrap$(int,org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$lambda_doVerb_1__5: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$lambda_doVerb_1__5: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$lambda_doVerb_0__4: void <init>(int,org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintVerbHandler$validate__3: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$shouldHint__435: com.google.common.base.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$getHostIdForEndpoint__436: com.google.common.base.Function bootstrap$(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$getHostIdForEndpoint__436: void <init>(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService$shouldHint__435: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.Hint: boolean isLive()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void confirmReplication(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationTask$1: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AsyncRepairCallback: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: org.apache.cassandra.exceptions.RequestFailureReason getFailureReason()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: boolean isFailureResponse()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$3: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.TruncateResponseHandler: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$10: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$ReplayingBatch$ReplayWriteResponseHandler: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.AsyncOneResponse: void response(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.CallbackInfo removeRegisteredCallback(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: long getRegisteredCallbackAge(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap: long getAge(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap$CacheableObject: long access$400(org.apache.cassandra.utils.ExpiringMap$CacheableObject)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap: java.lang.Object remove(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void onAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: void updateTimestamp()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: void markAlive()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void onAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: void onAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void onAlive(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: boolean containsFailureReason()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataInputBuffer: void <init>(byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.RequestFailureReason: org.apache.cassandra.exceptions.RequestFailureReason fromCode(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AsyncRepairCallback$1: void <init>(org.apache.cassandra.service.AsyncRepairCallback)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void mergeSchemaAndAnnounceVersion(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationTask: org.slf4j.Logger access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void mergeSchema(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.schema.Keyspaces getKeyspaces(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_mergeSchema_16__107: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$apply__108: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void flush()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Keyspaces fetchKeyspacesOnly(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void mergeSchema(org.apache.cassandra.schema.Keyspaces,org.apache.cassandra.schema.Keyspaces)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: java.util.stream.Stream udas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: java.util.stream.Stream udfs()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces: com.google.common.collect.MapDifference diff(org.apache.cassandra.schema.Keyspaces)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void dropKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void addKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__119: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropFunction__120: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_mergeSchema_17__121: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_mergeSchema_18__122: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropType__123: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceMetadata: org.apache.cassandra.schema.KeyspaceMetadata create(java.lang.String,org.apache.cassandra.schema.KeyspaceParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addType__114: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addTable__115: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addView__116: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addFunction__117: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addAggregate__118: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void updateKeyspace(java.lang.String,org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables: com.google.common.collect.MapDifference diff(org.apache.cassandra.schema.Tables)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views: com.google.common.collect.MapDifference diff(org.apache.cassandra.schema.Views)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: com.google.common.collect.MapDifference diff(org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceParams: boolean equals(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void updateKeyspace(java.lang.String,org.apache.cassandra.schema.KeyspaceParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void updateType(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void updateTable(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void updateView(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void updateFunction(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void updateAggregate(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_19__126: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_20__127: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_21__128: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_22__129: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropFunction__131: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_23__132: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_24__133: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropType__134: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addType__135: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addTable__136: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addView__137: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addFunction__138: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addAggregate__139: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addAggregate__139: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addFunction__138: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addView__137: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addTable__136: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addType__135: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropType__134: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_24__133: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_23__132: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropFunction__131: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__130: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_22__129: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_21__128: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_20__127: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_updateKeyspace_19__126: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyUpdateAggregate(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateAggregate_14__459: java.util.function.Function bootstrap$(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateAggregate_14__459: void <init>(org.apache.cassandra.cql3.functions.UDAggregate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onUpdateAggregate(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onUpdateAggregate(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyUpdateFunction(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateFunction_11__460: java.util.function.Function bootstrap$(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateFunction_11__460: void <init>(org.apache.cassandra.cql3.functions.UDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: void onUpdateFunction(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onUpdateFunction(java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewManager: void update(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyUpdateView(org.apache.cassandra.config.ViewDefinition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onUpdateView(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onUpdateColumnFamily(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyUpdateColumnFamily(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyUpdateUserType(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateType_8__461: java.util.function.Function bootstrap$(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateType_8__461: void <init>(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onUpdateUserType(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$lambda_notifyUpdateUserType_1__462: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$lambda_notifyUpdateUserType_1__462: void <init>(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyUpdateKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateKeyspace_4__464: java.util.function.Function bootstrap$(org.apache.cassandra.schema.KeyspaceParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_updateKeyspace_4__464: void <init>(org.apache.cassandra.schema.KeyspaceParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onUpdateKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.ReplicationParams: boolean equals(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_udas_2__362: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: java.util.stream.Stream stream()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_udas_3__363: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_udas_3__363: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_udas_2__362: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_udfs_0__364: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_udfs_1__365: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_udfs_1__365: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_udfs_0__364: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addAggregate__118: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addFunction__117: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addView__116: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addTable__115: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$addType__114: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceMetadata: void <init>(java.lang.String,org.apache.cassandra.schema.KeyspaceParams,org.apache.cassandra.schema.Tables,org.apache.cassandra.schema.Views,org.apache.cassandra.schema.Types,org.apache.cassandra.schema.Functions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables: org.apache.cassandra.schema.Tables none()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views: org.apache.cassandra.schema.Views none()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: org.apache.cassandra.schema.Types none()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: org.apache.cassandra.schema.Functions none()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: org.apache.cassandra.schema.Functions$Builder builder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder: org.apache.cassandra.schema.Functions build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: void <init>(org.apache.cassandra.schema.Functions$Builder,org.apache.cassandra.schema.Functions$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: void <init>(org.apache.cassandra.schema.Functions$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder: void <init>(org.apache.cassandra.schema.Functions$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder$lambda_new_0__167: java.util.Comparator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder$lambda_new_0__167: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views: org.apache.cassandra.schema.Views$Builder builder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views$Builder: org.apache.cassandra.schema.Views build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views: void <init>(org.apache.cassandra.schema.Views$Builder,org.apache.cassandra.schema.Views$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views: void <init>(org.apache.cassandra.schema.Views$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views$Builder: void <init>(org.apache.cassandra.schema.Views$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables: org.apache.cassandra.schema.Tables$Builder builder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables$Builder: org.apache.cassandra.schema.Tables build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables: void <init>(org.apache.cassandra.schema.Tables$Builder,org.apache.cassandra.schema.Tables$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables: void <init>(org.apache.cassandra.schema.Tables$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables$Builder: void <init>(org.apache.cassandra.schema.Tables$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropType__123: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_mergeSchema_18__122: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_mergeSchema_17__121: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropFunction__120: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$dropAggregate__119: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema load(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyCreateKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onCreateKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$load__335: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$load__336: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$load__336: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$load__335: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void clearKeyspaceMetadata(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void notifyDropKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace clear(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: org.apache.cassandra.db.Keyspace clear(java.lang.String,org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.db.Keyspace removeKeyspaceInstance(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics: void release()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthMigrationListener: void onDropKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void onDropKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.lang.String getString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet: java.util.Iterator iterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces$Builder: org.apache.cassandra.schema.Keyspaces build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces$Builder: org.apache.cassandra.schema.Keyspaces$Builder add(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces: org.apache.cassandra.schema.Keyspaces$Builder builder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.cql3.UntypedResultSet query(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.KeyspaceMetadata fetchKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.KeyspaceParams fetchKeyspaceParams(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Types fetchTypes(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Tables fetchTables(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Views fetchViews(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Functions fetchFunctions(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceMetadata: org.apache.cassandra.schema.KeyspaceMetadata create(java.lang.String,org.apache.cassandra.schema.KeyspaceParams,org.apache.cassandra.schema.Tables,org.apache.cassandra.schema.Views,org.apache.cassandra.schema.Types,org.apache.cassandra.schema.Functions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder: org.apache.cassandra.schema.Functions$Builder add(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Functions fetchUDFs(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Functions fetchUDAs(java.lang.String,org.apache.cassandra.schema.Functions,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.cql3.functions.UDAggregate createUDAFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row,org.apache.cassandra.schema.Functions,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.util.List getFrozenList(java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_createUDAFromRow_15__145: java.util.function.Function bootstrap$(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CQLTypeParser: org.apache.cassandra.db.marshal.AbstractType parse(java.lang.String,java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms: java.nio.ByteBuffer asBytes(java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.cql3.functions.UDAggregate create(org.apache.cassandra.schema.Functions,org.apache.cassandra.cql3.functions.FunctionName,java.util.List,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.functions.FunctionName,org.apache.cassandra.cql3.functions.FunctionName,org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.cql3.functions.UDAggregate createBroken(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer,org.apache.cassandra.exceptions.InvalidRequestException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate$1: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.functions.ScalarFunction,org.apache.cassandra.cql3.functions.ScalarFunction,java.nio.ByteBuffer,org.apache.cassandra.exceptions.InvalidRequestException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.functions.ScalarFunction,org.apache.cassandra.cql3.functions.ScalarFunction,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: com.datastax.driver.core.DataType driverType(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: com.datastax.driver.core.TypeCodec codecFor(com.datastax.driver.core.DataType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: com.datastax.driver.core.DataType driverTypeFromAbstractType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.cql3.functions.ScalarFunction resolveScalar(org.apache.cassandra.schema.Functions,org.apache.cassandra.cql3.functions.FunctionName,org.apache.cassandra.cql3.functions.FunctionName,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: java.util.Optional find(org.apache.cassandra.cql3.functions.FunctionName,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: com.datastax.driver.core.DataType[] driverTypes(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_find_5__168: java.util.function.Predicate bootstrap$(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: java.util.Collection get(org.apache.cassandra.cql3.functions.FunctionName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$lambda_find_5__168: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$Raw: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$NullLiteral: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall$Raw: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TypeCast: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms$term__153: org.apache.cassandra.cql3.CQLFragmentParser$CQLParserFunction bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQLFragmentParser: java.lang.Object parseAny(org.apache.cassandra.cql3.CQLFragmentParser$CQLParserFunction,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms$term__153: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TypeCast: org.apache.cassandra.cql3.ColumnSpecification castedSpecOf(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$Raw: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TypeCast: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$RawDelayedColumnValue: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$ColumnValue: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$UnsetLiteral: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Literal: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$Raw: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Literal: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Literal: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Literal: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$NullLiteral: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall$Raw: java.lang.String getText()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall$Raw$getText__247: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall$Raw$getText__247: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Literal$getText__248: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Literal$getText__248: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Literal$getText__249: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Literal$getText__249: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal$getText__250: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal$getText__250: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Literal$lambda_getText_0__251: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Literal$lambda_getText_0__251: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$RawDelayedColumnValue: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$ColumnValue: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$UnsetLiteral: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: void <init>(org.apache.cassandra.cql3.functions.ScalarFunction,java.util.List,org.apache.cassandra.cql3.functions.FunctionCall$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: void <init>(org.apache.cassandra.cql3.functions.ScalarFunction,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$DelayedColumnValue: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$DelayedValue: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$DelayedValue: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DelayedValue: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$DelayedValue: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$DelayedValue: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$Terminal: boolean containsBindMarker()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Literal: void validateAssignableTo(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Literal: void validateAssignableTo(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: java.util.List fieldNames()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$Raw: org.apache.cassandra.cql3.Term$NonTerminal prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$INRaw: org.apache.cassandra.cql3.Term$NonTerminal prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$INRaw: org.apache.cassandra.cql3.AbstractMarker prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$Raw: int bindIndex()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Marker: void <init>(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$INRaw: org.apache.cassandra.cql3.ColumnSpecification makeInReceiver(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker: void <init>(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Marker: void <init>(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Marker: void <init>(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Marker: void <init>(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Marker: void <init>(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.cql3.Constants$Value prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: java.nio.ByteBuffer parsedValue(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.EmptyType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CounterColumnType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DecimalType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.IntegerType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: java.nio.ByteBuffer fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.nio.ByteBuffer hexToBytes(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: java.util.List split(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$StaticParsedComparator: void serializeComparator(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$StaticParsedComparator: int getComparatorSerializedSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$StaticParsedComparator: java.lang.String getRemainingPart()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$StaticParsedComparator: org.apache.cassandra.db.marshal.AbstractType getAbstractType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.AbstractCompositeType$ParsedComparator parseComparator(int,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: java.lang.String unescape(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType$StaticParsedComparator: void <init>(org.apache.cassandra.db.marshal.AbstractType,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Literal: void validateAssignableTo(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$MultiColumnRaw: org.apache.cassandra.cql3.Term$NonTerminal prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$DelayedColumnValue: void <init>(org.apache.cassandra.cql3.Json$PreparedMarker,org.apache.cassandra.config.ColumnDefinition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawCollection: org.apache.cassandra.cql3.CQL3Type prepareInternal(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: org.apache.cassandra.cql3.CQL3Type prepareInternal(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Native: org.apache.cassandra.cql3.CQL3Type$Native valueOf(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CQLTypeParser: org.apache.cassandra.cql3.CQL3Type$Raw parseRaw(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CQLTypeParser$comparatorType__91: org.apache.cassandra.cql3.CQLFragmentParser$CQLParserFunction bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CQLTypeParser$comparatorType__91: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_createUDAFromRow_15__145: void <init>(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet$1: void <init>(org.apache.cassandra.cql3.UntypedResultSet$FromResultSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet: org.apache.cassandra.cql3.ResultSet access$300(org.apache.cassandra.cql3.UntypedResultSet$FromResultSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: boolean isCalledOnNullInput()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.lang.String body()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.lang.String language()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.util.List argNames()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: boolean getBoolean(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: org.apache.cassandra.cql3.functions.UDFunction create(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: org.apache.cassandra.cql3.functions.UDFunction createBrokenFunction(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String,java.lang.String,org.apache.cassandra.exceptions.InvalidRequestException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$1: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String,java.lang.String,org.apache.cassandra.exceptions.InvalidRequestException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,com.datastax.driver.core.DataType[],org.apache.cassandra.db.marshal.AbstractType,com.datastax.driver.core.DataType,boolean,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFContextImpl: void <init>(java.util.List,com.datastax.driver.core.TypeCodec[],com.datastax.driver.core.TypeCodec,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: com.datastax.driver.core.TypeCodec[] codecsFor(com.datastax.driver.core.DataType[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.util.List,org.apache.cassandra.db.marshal.AbstractType,boolean,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper: void <init>(org.apache.cassandra.cql3.functions.ScriptBasedUDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$lambda_new_1__281: java.security.PrivilegedExceptionAction bootstrap$(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$lambda_new_1__281: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper$4: void <init>(org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper,org.apache.cassandra.cql3.functions.ScriptBasedUDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper$1: void <init>(org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper,org.apache.cassandra.cql3.functions.ScriptBasedUDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper$2: void <init>(org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper,org.apache.cassandra.cql3.functions.ScriptBasedUDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper$3: void <init>(org.apache.cassandra.cql3.functions.ScriptBasedUDFunction$UDFContextWrapper,org.apache.cassandra.cql3.functions.ScriptBasedUDFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjCompilationUnit: void <init>(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier: java.util.Set verify(java.lang.String,byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction$EcjTargetClassLoader: byte[] classData(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDHelper: com.google.common.reflect.TypeToken[] typeTokens(com.datastax.driver.core.TypeCodec[],boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.lang.String generateClassName(org.apache.cassandra.cql3.functions.FunctionName,char)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: int countNewlines(java.lang.StringBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.lang.String generateArguments(com.google.common.reflect.TypeToken[],java.util.List,boolean)>
2020-05-18 22:39:09 [WARN] - Both branch of logging guard if $stack11 == 0 goto $stack12 = virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("            (") at line 460 don't have logging calls! Need manual examination!
2020-05-18 22:39:09 [INFO] - Find guard at method <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.lang.String generateArguments(com.google.common.reflect.TypeToken[],java.util.List,boolean)> line 460 has 4 units and 1 lines
2020-05-18 22:39:09 [INFO] - GUARD: if $stack11 == 0 goto $stack12 = virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("            (") AT LINE 460
2020-05-18 22:39:09 [INFO] - 	 -> $stack37 = virtualinvoke code.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("            /* parameter \'") AT LINE 461
2020-05-18 22:39:09 [INFO] - 	 -> $stack38 = interfaceinvoke argNames.<java.util.List: java.lang.Object get(int)>(i) AT LINE 461
2020-05-18 22:39:09 [INFO] - 	 -> $stack39 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack38) AT LINE 461
2020-05-18 22:39:09 [INFO] - 	 -> virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' */\n") AT LINE 461
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.lang.String generateArgumentList(com.google.common.reflect.TypeToken[],java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.lang.String javaSourceName(com.google.common.reflect.TypeToken)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.JavaBasedUDFunction: java.lang.String composeMethod(com.google.common.reflect.TypeToken)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1: void <init>(org.apache.cassandra.cql3.functions.UDFByteCodeVerifier,int,java.util.Set,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1: void visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1: org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$1: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ExecuteImplVisitor: void <init>(org.apache.cassandra.cql3.functions.UDFByteCodeVerifier,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ConstructorVisitor: void <init>(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ExecuteImplVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ExecuteImplVisitor: void visitInsn(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ConstructorVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ConstructorVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ConstructorVisitor: void visitInsn(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier$ExecuteImplVisitor: void errorDisallowed(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier: java.util.Set access$000(org.apache.cassandra.cql3.functions.UDFByteCodeVerifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier: com.google.common.collect.Multimap access$100(org.apache.cassandra.cql3.functions.UDFByteCodeVerifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFByteCodeVerifier: java.util.List access$200(org.apache.cassandra.cql3.functions.UDFByteCodeVerifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder$add__169: java.util.function.Consumer bootstrap$(org.apache.cassandra.schema.Functions$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions$Builder$add__169: void <init>(org.apache.cassandra.schema.Functions$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views$Builder: org.apache.cassandra.schema.Views$Builder add(org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.config.ViewDefinition fetchView(java.lang.String,java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData droppedColumns(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition: void <init>(java.lang.String,java.lang.String,java.util.UUID,java.lang.String,boolean,org.apache.cassandra.cql3.statements.SelectStatement$RawStatement,java.lang.String,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: java.util.List fetchColumns(java.lang.String,java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: java.util.Map fetchDroppedColumns(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData create(java.lang.String,java.lang.String,java.util.UUID,boolean,boolean,boolean,boolean,boolean,java.util.List,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.TableParams createTableParamsFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: java.lang.String buildSelectStatement(java.lang.String,java.util.Collection,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$lambda_buildSelectStatement_1__146: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$lambda_buildSelectStatement_1__146: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.util.Map getFrozenMap(java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.util.Map getFrozenTextMap(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams: org.apache.cassandra.schema.TableParams$Builder builder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: org.apache.cassandra.schema.CachingParams fromMap(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: org.apache.cassandra.schema.CompactionParams fromMap(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: org.apache.cassandra.schema.CompressionParams fromMap(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SpeculativeRetryParam: org.apache.cassandra.schema.SpeculativeRetryParam fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SpeculativeRetryParam: org.apache.cassandra.schema.SpeculativeRetryParam custom(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SpeculativeRetryParam: org.apache.cassandra.schema.SpeculativeRetryParam percentile(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SpeculativeRetryParam: void <init>(org.apache.cassandra.schema.SpeculativeRetryParam$Kind,double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: java.util.Map copyOptions(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: boolean isEnabled(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: boolean containsSstableCompressionClass(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: boolean removeEnabled(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: java.lang.String removeSstableCompressionClass(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: java.lang.Integer removeChunkLength(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: java.lang.Integer parseChunkLength(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: java.lang.Class classFromName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: org.apache.cassandra.schema.CompactionParams create(java.lang.Class,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: void <init>(java.lang.Class,java.util.Map,boolean,org.apache.cassandra.schema.CompactionParams$TombstoneOption)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams$TombstoneOption: org.apache.cassandra.schema.CompactionParams$TombstoneOption valueOf(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: boolean supportsThresholdParams(java.lang.Class)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams$Option: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: void <init>(boolean,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: boolean keysFromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: int rowsPerPartitionFromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.config.CFMetaData$DroppedColumn createDroppedColumnFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: long getLong(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$DroppedColumn: void <init>(java.lang.String,org.apache.cassandra.db.marshal.AbstractType,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$MissingColumns: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_fetchColumns_12__147: java.util.function.Consumer bootstrap$(java.util.List,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$isPartitionKey__148: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$isPartitionKey__148: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_fetchColumns_12__147: void <init>(java.util.List,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables$Builder: org.apache.cassandra.schema.Tables$Builder add(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.config.CFMetaData fetchTable(java.lang.String,java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.util.Set getFrozenSet(java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData triggers(org.apache.cassandra.schema.Triggers)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData indexes(org.apache.cassandra.schema.Indexes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Set flagsFromStrings(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$isPartitionKey__144: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Indexes fetchIndexes(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Triggers fetchTriggers(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_fetchTriggers_14__149: java.util.function.Consumer bootstrap$(org.apache.cassandra.schema.Triggers$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_fetchTriggers_14__149: void <init>(org.apache.cassandra.schema.Triggers$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_fetchIndexes_13__150: java.util.function.Consumer bootstrap$(org.apache.cassandra.schema.Indexes$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_fetchIndexes_13__150: void <init>(org.apache.cassandra.schema.Indexes$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$isPartitionKey__144: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$toUpperCase__151: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$valueOf__152: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$valueOf__152: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$toUpperCase__151: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder: org.apache.cassandra.schema.Types build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder: void add(java.lang.String,java.util.List,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: org.apache.cassandra.schema.Types$RawBuilder rawBuilder(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder: void <init>(java.lang.String,org.apache.cassandra.schema.Types$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT: void <init>(java.lang.String,java.util.List,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$parseRaw__157: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$parseRaw__157: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT: org.apache.cassandra.db.marshal.UserType prepare(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT: boolean referencesUserType(org.apache.cassandra.schema.Types$RawBuilder$RawUDT)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: void <init>(java.util.Map,org.apache.cassandra.schema.Types$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$Builder: org.apache.cassandra.schema.Types build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$Builder: org.apache.cassandra.schema.Types$Builder add(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$lambda_build_0__158: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: java.util.Map access$400(org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: org.apache.cassandra.schema.Types$Builder builder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$Builder: void <init>(org.apache.cassandra.schema.Types$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$lambda_build_0__158: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$Builder$add__159: java.util.function.Consumer bootstrap$(org.apache.cassandra.schema.Types$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$Builder$add__159: void <init>(org.apache.cassandra.schema.Types$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: void <init>(org.apache.cassandra.schema.Types$Builder,org.apache.cassandra.schema.Types$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: void <init>(org.apache.cassandra.schema.Types$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT$lambda_referencesUserType_0__184: java.util.function.Predicate bootstrap$(org.apache.cassandra.schema.Types$RawBuilder$RawUDT)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT$lambda_referencesUserType_0__184: void <init>(org.apache.cassandra.schema.Types$RawBuilder$RawUDT)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT$lambda_prepare_1__515: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT$lambda_prepare_2__516: java.util.function.Function bootstrap$(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT$lambda_prepare_2__516: void <init>(java.lang.String,org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Types$RawBuilder$RawUDT$lambda_prepare_1__515: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceParams$Option: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceParams: org.apache.cassandra.schema.KeyspaceParams create(boolean,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceParams: void <init>(boolean,org.apache.cassandra.schema.ReplicationParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.ReplicationParams: org.apache.cassandra.schema.ReplicationParams fromMap(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.ReplicationParams: void <init>(java.lang.Class,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.AbstractReplicationStrategy: java.lang.Class getClass(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces$Builder: void <init>(org.apache.cassandra.schema.Keyspaces$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces: void <init>(org.apache.cassandra.schema.Keyspaces$Builder,org.apache.cassandra.schema.Keyspaces$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces: void <init>(org.apache.cassandra.schema.Keyspaces$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Keyspaces$Builder: com.google.common.collect.ImmutableMap$Builder access$000(org.apache.cassandra.schema.Keyspaces$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_flush_1__95: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_flush_1__95: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$apply__108: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_mergeSchema_16__107: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_getKeyspaces_3__455: java.util.function.Predicate bootstrap$(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$add__456: java.util.function.Consumer bootstrap$(org.apache.cassandra.schema.Keyspaces$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$add__456: void <init>(org.apache.cassandra.schema.Keyspaces$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$lambda_getKeyspaces_3__455: void <init>(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: java.util.concurrent.Future submitValidation(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.repair.Validator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairMessageVerbHandler: void logErrorAndSendFailureResponse(java.lang.String,java.net.InetAddress,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void registerParentRepairSession(java.util.UUID,java.net.InetAddress,java.util.List,java.util.Collection,boolean,long,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void handleMessage(java.net.InetAddress,org.apache.cassandra.repair.messages.RepairMessage)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: com.google.common.util.concurrent.ListenableFuture doAntiCompaction(java.util.UUID,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairMessageVerbHandler$1: void <init>(org.apache.cassandra.repair.RepairMessageVerbHandler,org.apache.cassandra.repair.RepairJobDesc)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage: org.apache.cassandra.net.MessageOut createMessage()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete: void <init>(org.apache.cassandra.repair.RepairJobDesc)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: void <init>(org.apache.cassandra.repair.RepairJobDesc,java.net.InetAddress,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.StreamingRepairTask: void run()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.StreamingRepairTask: void <init>(org.apache.cassandra.repair.RepairJobDesc,org.apache.cassandra.repair.messages.SyncRequest,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairMessageVerbHandler$2: void <init>(org.apache.cassandra.repair.RepairMessageVerbHandler,int,org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore getIfExists(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamPlan transferRanges(java.net.InetAddress,java.net.InetAddress,java.lang.String,java.util.Collection,java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamPlan flushBeforeTransfer(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamPlan listeners(org.apache.cassandra.streaming.StreamEventHandler,org.apache.cassandra.streaming.StreamEventHandler[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void addTransferRanges(java.lang.String,java.util.Collection,java.util.Collection,boolean,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void addTransferFiles(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void flushSSTables(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: java.util.Collection getColumnFamilyStores(java.lang.String,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void failIfFinished()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: java.util.List getSSTableSectionsForRanges(java.util.Collection,java.util.Collection,long,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: java.util.List getPositionsForRanges(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment selectAndReference(com.google.common.base.Function)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: org.apache.cassandra.utils.concurrent.Ref get(org.apache.cassandra.utils.concurrent.RefCounted)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: org.apache.cassandra.utils.concurrent.Refs addAll(org.apache.cassandra.utils.concurrent.Refs)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession$SSTableStreamingSections: void <init>(org.apache.cassandra.utils.concurrent.Ref,java.util.List,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession$lambda_getSSTableSectionsForRanges_0__368: com.google.common.base.Function bootstrap$(java.util.List,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession$lambda_getSSTableSectionsForRanges_0__368: void <init>(java.util.List,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ColumnFamilyStore$ViewFragment select(com.google.common.base.Function)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment: void <init>(java.util.List,java.lang.Iterable,org.apache.cassandra.utils.concurrent.Refs)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$ViewFragment: void <init>(java.util.List,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession$lambda_getSSTableSectionsForRanges_0__368: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_selectFunction_1__71: java.lang.Object apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: java.lang.Iterable lambda$selectFunction$1(org.apache.cassandra.db.lifecycle.SSTableSet,org.apache.cassandra.db.lifecycle.View)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamTransferTask: void addTransferFile(org.apache.cassandra.utils.concurrent.Ref,long,java.util.List,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamTransferTask: void <init>(org.apache.cassandra.streaming.StreamSession,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamTask: void <init>(org.apache.cassandra.streaming.StreamSession,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.FileMessageHeader: long size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.OutgoingFileMessage: void <init>(org.apache.cassandra.utils.concurrent.Ref,int,long,java.util.List,long,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamHook$1: org.apache.cassandra.streaming.messages.OutgoingFileMessage reportOutgoingFile(org.apache.cassandra.streaming.StreamSession,org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.streaming.messages.OutgoingFileMessage)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int getSSTableLevel()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.FileMessageHeader: void <init>(java.util.UUID,int,org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.format.SSTableFormat$Type,long,java.util.List,org.apache.cassandra.io.compress.CompressionMetadata,long,int,org.apache.cassandra.db.SerializationHeader$Component)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.FileMessageHeader: long calculateSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: long getTotalSizeForSections(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: void <init>(org.apache.cassandra.repair.RepairJobDesc,java.net.InetAddress,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage: void <init>(org.apache.cassandra.repair.messages.RepairMessage$Type,org.apache.cassandra.repair.RepairJobDesc)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: com.google.common.util.concurrent.ListenableFuture submitAntiCompaction(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,org.apache.cassandra.utils.concurrent.Refs,long,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService$4: void <init>(org.apache.cassandra.service.ActiveRepairService,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService$ParentRepairSession: java.util.Collection access$500(org.apache.cassandra.service.ActiveRepairService$ParentRepairSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$9: void <init>(org.apache.cassandra.db.compaction.CompactionManager,org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.utils.concurrent.Refs,java.util.Collection,long,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void register(org.apache.cassandra.gms.IEndpointStateChangeSubscriber)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.FailureDetector: void registerFailureDetectionEventListener(org.apache.cassandra.gms.IFailureDetectionEventListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService$ParentRepairSession: void <init>(java.net.InetAddress,java.util.List,java.util.Collection,boolean,long,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$13: void <init>(org.apache.cassandra.db.compaction.CompactionManager,org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.repair.Validator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSyn: java.util.List getGossipDigests()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isInShadowRound()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSynVerbHandler: void doSort(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck: void <init>(java.util.List,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigest: int getGeneration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigest: int getMaxVersion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigest: java.net.InetAddress getEndpoint()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void sendAll(org.apache.cassandra.gms.GossipDigest,java.util.Map,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: void addApplicationStates(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: void <init>(org.apache.cassandra.gms.HeartBeatState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatState: void <init>(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: void <init>(org.apache.cassandra.gms.HeartBeatState,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: void addApplicationStates(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck: java.util.Map getEndpointStateMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck: java.util.List getGossipDigestList()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void notifyFailureDetector(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatState: int getGeneration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean anyEndpointOn30()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$updateVersionAndAnnounce__25: java.lang.Runnable bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$updateVersionAndAnnounce__25: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.ArrivalWindow: double mean()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.ArrivalWindow: void <init>(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.ArrayBackedBoundedStats: void <init>(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.ArrivalWindow: long getMaxInterval()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.ArrayBackedBoundedStats: void add(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.ArrayBackedBoundedStats: int size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.ArrayBackedBoundedStats: double mean()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void onJoin(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void onRestart(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void onJoin(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ActiveRepairService: void onRestart(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: void onJoin(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: void onRestart(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void onJoin(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void onRestart(java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$3: void <init>(org.apache.cassandra.gms.Gossiper,java.net.InetAddress,org.apache.cassandra.gms.EndpointState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$getReleaseVersion__465: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$nonNull__466: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$is30__467: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$is30__467: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$nonNull__466: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$getReleaseVersion__465: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2: java.util.Map getEndpointStateMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DefinitionsUpdateVerbHandler$1: void <init>(org.apache.cassandra.db.DefinitionsUpdateVerbHandler,org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: java.util.Collection convertSchemaToMutations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void convertSchemaToMutations(java.util.Map,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.partitions.PartitionUpdate makeUpdateForSchema(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean isCDCEnabled()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void clearSnapshot(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.Directories$DataDirectory[] getInitialDirectories()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.util.List getKSChildDirectories(java.lang.String,org.apache.cassandra.db.Directories$DataDirectory[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SnapshotDeletingTask: void addFailedSnapshot(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SnapshotDeletingTask: void <init>(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WindowsFailedSnapshotTracker: void handleFailedSnapshot(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: boolean doCallbackOnFailure()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamManager: java.util.Map access$100(org.apache.cassandra.streaming.StreamManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamManager: java.util.Map access$000(org.apache.cassandra.streaming.StreamManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void lambda$submitOverflowSizeRecalculation$0()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void recalculateOverflowSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: org.apache.cassandra.db.commitlog.CommitLogSegment$CDCState getCDCState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: org.apache.cassandra.db.commitlog.CommitLogSegment allocatingFrom()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void processNewSegment(org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void calculateSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector: void inspectCommitLogThrowable(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$CommitFailurePolicy getCommitFailurePolicy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: long allowableCDCBytes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: long totalCDCSizeOnDisk()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void setCDCState(org.apache.cassandra.db.commitlog.CommitLogSegment$CDCState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getCDCSpaceInMB()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.net.MessageOut createMessage(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver: void compareResponses()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AsyncRepairCallback: void <init>(org.apache.cassandra.service.DataResolver,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: org.apache.cassandra.db.Keyspace access$000(org.apache.cassandra.service.ReadCallback)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: org.apache.cassandra.db.ReadCommand access$100(org.apache.cassandra.service.ReadCallback)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: org.apache.cassandra.db.ConsistencyLevel access$200(org.apache.cassandra.service.ReadCallback)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionIterators: void consume(org.apache.cassandra.db.partitions.PartitionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: boolean isPaging()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: boolean isPaging()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.CompactionMetrics: void beginCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CollatedViewIndexBuilder: void build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.metrics.CompactionMetrics access$100(org.apache.cassandra.db.compaction.CompactionManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInterruptedException: void <init>(org.apache.cassandra.db.compaction.CompactionInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator: boolean hasNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator: org.apache.cassandra.db.DecoratedKey next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionInfo$Holder: boolean isStopRequested()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.ClusteringComparator getComparator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator fetchPageUnfiltered(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_16__37: java.util.function.Function bootstrap$(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.UnfilteredRowIterator,int,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$nonNull__38: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$begin__39: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_17__44: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_18__43: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_19__42: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_20__41: java.util.function.Consumer bootstrap$(java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$finish__40: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$finish__40: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_20__41: void <init>(java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_19__42: void <init>(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_18__43: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_17__44: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$begin__39: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$nonNull__38: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_indexPartition_16__37: void <init>(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.UnfilteredRowIterator,int,org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator fetchPageUnfiltered(org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.ReadExecutionController)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$UnfilteredPager: void <init>(org.apache.cassandra.service.pager.AbstractQueryPager,org.apache.cassandra.db.filter.DataLimits,int,org.apache.cassandra.service.pager.AbstractQueryPager$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager$UnfilteredPager: void <init>(org.apache.cassandra.service.pager.AbstractQueryPager,org.apache.cassandra.db.filter.DataLimits,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: double getMeanPartitionSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: int getMeanColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void markFlushing(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Barrier: void markBlocking()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void replaceFlushed(org.apache.cassandra.db.Memtable,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void flush(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: java.lang.Throwable abortRunnables(java.util.List,java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: java.util.List flushRunnables(org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void flushAllNonCFSBackedIndexesBlocking()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$Flush: void reclaim(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: org.apache.cassandra.db.lifecycle.LifecycleTransaction offline(org.apache.cassandra.db.compaction.OperationType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.util.concurrent.ExecutorService[] access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.compaction.CompactionStrategyManager access$500(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.slf4j.Logger access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void <init>(org.apache.cassandra.db.lifecycle.Tracker,org.apache.cassandra.db.lifecycle.LogTransaction,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$State: void <init>(org.apache.cassandra.db.lifecycle.LifecycleTransaction$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$State: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$Flush$1: void <init>(org.apache.cassandra.db.ColumnFamilyStore$Flush,org.apache.cassandra.utils.concurrent.OpOrder$Barrier,org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.util.concurrent.ExecutorService access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_flushAllNonCFSBackedIndexesBlocking_12__406: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$getBlockingFlushTask__407: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$getBlockingFlushTask__407: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_flushAllNonCFSBackedIndexesBlocking_12__406: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: java.util.List createFlushRunnables(org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.db.DiskBoundaries getDiskBoundaries()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: void <init>(org.apache.cassandra.db.Memtable,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: void <init>(org.apache.cassandra.db.Memtable,org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.db.Directories$DataDirectory,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: void <init>(org.apache.cassandra.db.Memtable,java.util.concurrent.ConcurrentNavigableMap,org.apache.cassandra.db.Directories$DataDirectory,org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: java.util.concurrent.ConcurrentNavigableMap access$200(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File getWriteableLocationAsFile(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File getLocationForDisk(org.apache.cassandra.db.Directories$DataDirectory)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getSSTablePath(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$StatsCollector: org.apache.cassandra.db.rows.EncodingStats get()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$ColumnsCollector: org.apache.cassandra.db.PartitionColumns get()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.io.sstable.SSTableMultiWriter createFlushWriter(org.apache.cassandra.db.lifecycle.LifecycleTransaction,java.lang.String,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.db.Directories getDirectories()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: java.util.concurrent.atomic.AtomicLong access$300(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: org.apache.cassandra.db.Memtable$ColumnsCollector access$400(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: org.apache.cassandra.db.Memtable$StatsCollector access$500(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: org.apache.cassandra.io.sstable.SSTableMultiWriter createSSTableMultiWriter(org.apache.cassandra.io.sstable.Descriptor,long,long,org.apache.cassandra.io.sstable.metadata.MetadataCollector,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.io.sstable.metadata.MetadataCollector commitLogIntervals(org.apache.cassandra.db.commitlog.IntervalSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: java.util.concurrent.atomic.AtomicReference access$800(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: java.util.concurrent.atomic.AtomicReference access$700(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxIntTracker: void <init>(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector$MinMaxLongTracker: void <init>(long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: java.util.Collection listIndexes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.io.sstable.SSTableMultiWriter createSSTableMultiWriter(org.apache.cassandra.io.sstable.Descriptor,long,long,org.apache.cassandra.io.sstable.metadata.MetadataCollector,org.apache.cassandra.db.SerializationHeader,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String getSSTablePath(java.io.File,org.apache.cassandra.io.sstable.format.Version,org.apache.cassandra.io.sstable.format.SSTableFormat$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableFormat$Type: org.apache.cassandra.io.sstable.format.SSTableFormat$Type current()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$DataDirectoryCandidate: void <init>(org.apache.cassandra.db.Directories$DataDirectory)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.FSDiskFullWriteError: void <init>(java.lang.Throwable,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.BlacklistedDirectories: boolean isUnwritable(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: void sortWriteableCandidates(java.util.List,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: org.apache.cassandra.db.Directories$DataDirectory pickWriteableDirectory(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$DataDirectoryCandidate: void calcFreePerc(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$DataDirectory: long getAvailableSpace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: long getUsableSpace(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getMinFreeSpacePerDriveInBytes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: long handleLargeFileSystem(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.io.sstable.SSTableMultiWriter access$100(org.apache.cassandra.db.Memtable$FlushRunnable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaries: void <init>(org.apache.cassandra.db.Directories$DataDirectory[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$3: void <init>(org.apache.cassandra.db.Directories)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.node.ArrayNode sstableMap(java.util.Collection,org.apache.cassandra.db.compaction.CompactionLogger$CompactionStrategyAndTableFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$describeSSTable__534: org.apache.cassandra.db.compaction.CompactionLogger$CompactionStrategyAndTableFunction bootstrap$(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$startStrategies__535: org.apache.cassandra.db.compaction.CompactionLogger$StrategySummary bootstrap$(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$startStrategies__535: void <init>(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$describeSSTable__534: void <init>(org.apache.cassandra.db.compaction.CompactionLogger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_sstableMap_2__536: java.util.function.Consumer bootstrap$(org.codehaus.jackson.node.ArrayNode,org.apache.cassandra.db.compaction.CompactionLogger$CompactionStrategyAndTableFunction,org.apache.cassandra.db.compaction.CompactionStrategyManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_sstableMap_2__536: void <init>(org.codehaus.jackson.node.ArrayNode,org.apache.cassandra.db.compaction.CompactionLogger$CompactionStrategyAndTableFunction,org.apache.cassandra.db.compaction.CompactionStrategyManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void replaceFlushed(org.apache.cassandra.db.Memtable,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void replaceFlushed(org.apache.cassandra.db.Memtable,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.lang.Throwable notifyAdded(java.lang.Iterable,java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void notifyDiscarded(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void maybeIncrementallyBackup(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function replaceFlushed(org.apache.cassandra.db.Memtable,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$setupOnline__537: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$7: void <init>(org.apache.cassandra.db.Memtable,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$setupOnline__537: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void createLinks(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean isIncrementalBackupsEnabled()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File getBackupsDirectory(org.apache.cassandra.io.sstable.Descriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: java.lang.String getCanonicalPath(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void createHardLink(java.io.File,java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.notifications.MemtableDiscardedNotification: void <init>(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.notifications.SSTableAddedNotification: void <init>(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: boolean access$702(org.apache.cassandra.utils.concurrent.OpOrder$Group,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.OpOrder$Group: org.apache.cassandra.utils.concurrent.WaitQueue access$800(org.apache.cassandra.utils.concurrent.OpOrder$Group)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function markFlushing(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$6: void <init>(org.apache.cassandra.db.Memtable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: java.util.regex.Pattern access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: java.util.regex.Pattern access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: void access$200(org.apache.cassandra.db.commitlog.CommitLogArchiver,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: org.slf4j.Logger access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: void exec(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void exec(java.lang.ProcessBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: void access$000(org.apache.cassandra.hints.HintsWriteExecutor,org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: void waitForModifications()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: org.apache.cassandra.hints.HintsBuffer recycle()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBufferPool: void offer(org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: void flush(org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$lambda_flush_1__499: java.util.function.Consumer bootstrap$(org.apache.cassandra.hints.HintsWriteExecutor,org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer: java.util.Set hostIds()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$lambda_flush_1__499: void <init>(org.apache.cassandra.hints.HintsWriteExecutor,org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: org.slf4j.Logger access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService: void calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService: org.slf4j.Logger access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService: void access$000(org.apache.cassandra.service.PendingRangeCalculatorService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.PendingRangeCalculatorService: void finishUpdate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.lang.String printPendingRanges()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: void putAll(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.locator.PendingRangeMaps calculatePendingRanges(org.apache.cassandra.locator.AbstractReplicationStrategy,org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.utils.BiMultiValMap,java.util.Set,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void updateNormalToken(org.apache.cassandra.dht.Token,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps: void addPendingRange(org.apache.cassandra.dht.Range,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.PendingRangeMaps: void addToMap(org.apache.cassandra.dht.Range,java.net.InetAddress,java.util.NavigableMap,java.util.NavigableMap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: org.apache.cassandra.db.compaction.AbstractCompactionTask getNextBackgroundTask(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: org.slf4j.Logger access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: int getDefaultGcBefore(org.apache.cassandra.db.ColumnFamilyStore,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: int gcBefore(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$lambda_getNextBackgroundTask_0__580: java.util.Comparator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager$lambda_getNextBackgroundTask_0__580: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete: void <init>(org.apache.cassandra.repair.RepairJobDesc,org.apache.cassandra.utils.MerkleTrees)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void traceRepair(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: void lambda$closeAllWriters$0()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$closeWriter__569: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$closeWriter__569: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$Writer: org.apache.cassandra.service.CacheService$CacheType cacheType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$KeyCacheSerializer: void serialize(org.apache.cassandra.cache.CacheKey,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$RowCacheSerializer: void serialize(org.apache.cassandra.cache.CacheKey,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$CounterCacheSerializer: void serialize(org.apache.cassandra.cache.CacheKey,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: java.io.File getCacheDataPath(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: java.io.File getCacheCrcPath(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$Writer: org.apache.cassandra.utils.Pair tempCacheFiles()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$Writer: void deleteOldCacheFiles()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.db.ColumnFamilyStore getColumnFamilyStoreIncludingIndexes(org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.WrappedDataOutputStreamPlus: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$1: java.io.OutputStream getOutputStream(java.io.File,java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: org.apache.cassandra.cache.AutoSavingCache$IStreamFactory access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: org.apache.cassandra.cache.AutoSavingCache$CacheSerializer access$200(org.apache.cassandra.cache.AutoSavingCache)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedSequentialWriter: void <init>(java.io.File,java.io.File,java.io.File,org.apache.cassandra.io.util.SequentialWriterOption)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksumWriter: void writeChunkSize(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksumWriter: void <init>(java.io.DataOutput)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getSavedCachesLocation()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.io.File getSerializedCachePath(org.apache.cassandra.service.CacheService$CacheType,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$CounterCacheSerializer: void serialize(org.apache.cassandra.cache.CounterCacheKey,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$RowCacheSerializer: void serialize(org.apache.cassandra.cache.RowCacheKey,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$KeyCacheSerializer: void serialize(org.apache.cassandra.cache.KeyCacheKey,org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: void serializeForCache(org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void writeBoolean(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$FsyncWritersTask$fsyncWriter__566: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog: void fsyncDirectory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: org.apache.cassandra.hints.HintsCatalog access$200(org.apache.cassandra.hints.HintsWriteExecutor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$FsyncWritersTask$fsyncWriter__566: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask$lambda_run_0__567: java.util.function.Consumer bootstrap$(org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask,org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask$lambda_run_0__567: void <init>(org.apache.cassandra.hints.HintsWriteExecutor$PartiallyFlushBufferPoolTask,org.apache.cassandra.hints.HintsBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void lambda$excise$3(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void excise(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog: org.apache.cassandra.hints.HintsStore getNullable(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor: java.util.concurrent.Future closeWriter(org.apache.cassandra.hints.HintsStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchExecutor: void interruptDispatch(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog: void exciseStore(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsCatalog: void deleteAllHints(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask: boolean cancel(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$closeWriter__568: java.lang.Runnable bootstrap$(org.apache.cassandra.hints.HintsStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsWriteExecutor$closeWriter__568: void <init>(org.apache.cassandra.hints.HintsStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.JVMStabilityInspector: void lambda$userFunctionTimeout$0(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: com.google.common.util.concurrent.RateLimiter access$1400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy: org.apache.cassandra.io.sstable.Descriptor access$1500(org.apache.cassandra.io.sstable.format.SSTableReader$GlobalTidy)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void persistSSTableReadMeter(java.lang.String,java.lang.String,int,org.apache.cassandra.metrics.RestorableMeter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: double twoHourRate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: double fifteenMinuteRate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: void tickIfNecessary()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA: double rate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA: void tick()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$lambda_executeAggregateAsync_1__608: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$lambda_executeAsync_0__582: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache$1$lambda_reload_0__490: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$3: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$13: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$PostFlush: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$lambda_waitForFlushes_0__403: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewBuilder$lambda_run_1__18: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex$lambda_getBuildIndexTask_5__396: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable: java.lang.Object call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ColumnFamilySplit: void <init>(java.lang.String,java.lang.String,long,java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat: java.lang.String access$000(org.apache.cassandra.hadoop.cql3.CqlInputFormat)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat: java.lang.String access$100(org.apache.cassandra.hadoop.cql3.CqlInputFormat)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat: java.util.Map access$200(org.apache.cassandra.hadoop.cql3.CqlInputFormat,java.lang.String,java.lang.String,com.datastax.driver.core.TokenRange,org.apache.hadoop.conf.Configuration,com.datastax.driver.core.Session)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat: org.apache.cassandra.dht.IPartitioner access$300(org.apache.cassandra.hadoop.cql3.CqlInputFormat)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat: org.slf4j.Logger access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: java.lang.Object lambda$getBuildIndexTask$5()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: void buildBlocking()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$RefViewFragment: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CollatedViewIndexBuilder: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Set,org.apache.cassandra.io.sstable.ReducingKeyIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: java.util.concurrent.Future submitIndexBuild(org.apache.cassandra.index.SecondaryIndexBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function selectFunction(org.apache.cassandra.db.lifecycle.SSTableSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex: java.lang.String getSSTableNames(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex$toString__402: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.internal.CassandraIndex$toString__402: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_selectFunction_1__71: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.lifecycle.SSTableSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_selectFunction_1__71: void <init>(org.apache.cassandra.db.lifecycle.SSTableSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$14: void <init>(org.apache.cassandra.db.compaction.CompactionManager,org.apache.cassandra.index.SecondaryIndexBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator: void <init>(org.apache.cassandra.io.sstable.Descriptor,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator$In: void <init>(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexBuilder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: org.apache.cassandra.db.commitlog.CommitLogPosition getCommitLogLowerBound()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$PostFlush: org.apache.cassandra.db.commitlog.CommitLogPosition call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: org.apache.cassandra.db.commitlog.CommitLogPosition getCommitLogUpperBound()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: java.util.Collection getActiveSegments()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: void fail()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void access$600(org.apache.cassandra.db.compaction.CompactionManager,org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.repair.Validator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.utils.concurrent.Refs getSSTablesToValidate(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.repair.Validator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: void add(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController: void <init>(org.apache.cassandra.db.ColumnFamilyStore,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionIterator: void <init>(java.util.List,org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController,int,org.apache.cassandra.metrics.CompactionMetrics)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: long size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: java.util.Collection ranges()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree addMerkleTree(int,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void <init>(org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer: long serializedSize(org.apache.cassandra.utils.MerkleTrees,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer: long serializedSize(org.apache.cassandra.utils.MerkleTree,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: java.util.Map access$200(org.apache.cassandra.utils.MerkleTrees)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: long access$000(org.apache.cassandra.utils.MerkleTree)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: long access$100(org.apache.cassandra.utils.MerkleTree)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.IPartitioner access$200(org.apache.cassandra.utils.MerkleTree)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable: org.apache.cassandra.dht.IPartitionerDependentSerializer access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$Hashable access$300(org.apache.cassandra.utils.MerkleTree)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer: long serializedSize(org.apache.cassandra.utils.MerkleTree$Hashable,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer: long serializedSize(org.apache.cassandra.utils.MerkleTree$Leaf,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer: long serializedSize(org.apache.cassandra.utils.MerkleTree$Inner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner: org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer access$1200()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Leaf: org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer access$1300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable: byte[] hash()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner: org.apache.cassandra.utils.MerkleTree$Hashable access$500(org.apache.cassandra.utils.MerkleTree$Inner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner: org.apache.cassandra.utils.MerkleTree$Hashable access$600(org.apache.cassandra.utils.MerkleTree$Inner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void <init>(org.apache.cassandra.dht.IPartitioner,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void addTrees(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator: void <init>(org.apache.cassandra.utils.MerkleTrees$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void addTree(org.apache.cassandra.utils.MerkleTree)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: boolean validateNonOverlapping(org.apache.cassandra.utils.MerkleTree)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean intersects(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.util.Set intersectionWith(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean contains(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.util.Set rangeSet(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.util.Set intersectionBothWrapping(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.util.Set intersectionOneWrapping(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree addMerkleTree(int,byte,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: void <init>(org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.dht.Range,byte,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Leaf: void <init>(byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable: void <init>(byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: long size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: void <init>(org.apache.cassandra.db.compaction.OperationType,java.util.List,org.apache.cassandra.db.compaction.CompactionController,int,java.util.UUID,org.apache.cassandra.metrics.CompactionMetrics)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$MergeListener listener()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkipper: void <init>(org.apache.cassandra.db.compaction.CompactionController,int,org.apache.cassandra.db.compaction.CompactionIterator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$Purger: void <init>(org.apache.cassandra.db.compaction.CompactionIterator,boolean,org.apache.cassandra.db.compaction.CompactionController,int,org.apache.cassandra.db.compaction.CompactionIterator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$Purger: void <init>(org.apache.cassandra.db.compaction.CompactionIterator,boolean,org.apache.cassandra.db.compaction.CompactionController,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$GarbageSkipper: void <init>(org.apache.cassandra.db.compaction.CompactionController,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$1: void <init>(org.apache.cassandra.db.compaction.CompactionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: void <init>(org.apache.cassandra.db.ColumnFamilyStore,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Set,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: void <init>(org.apache.cassandra.db.ColumnFamilyStore,java.util.Set,int,com.google.common.util.concurrent.RateLimiter,org.apache.cassandra.schema.CompactionParams$TombstoneOption)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: void refreshOverlaps()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$isRepaired__370: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$getMinTimestamp__369: java.util.function.ToLongFunction bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$getMinTimestamp__369: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$isRepaired__370: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: boolean ignoreOverlaps()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.OverlapIterator: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void closeQuietly(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.lang.Iterable getValidColumnFamilies(boolean,boolean,java.lang.String,java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: org.apache.cassandra.db.Keyspace getValidKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.lang.Iterable getValidColumnFamilies(boolean,boolean,java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: java.util.Set getIndexColumnFamilyStores(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: java.lang.String getParentCfsName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: java.lang.String getIndexName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: boolean preservesOrder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator invalids()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: boolean split(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void init(org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void init()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: void init()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$Hashable initHelper(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,byte,byte)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner: org.apache.cassandra.dht.Token midpoint(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Leaf: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner: void <init>(org.apache.cassandra.dht.Token,org.apache.cassandra.utils.MerkleTree$Hashable,org.apache.cassandra.utils.MerkleTree$Hashable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: byte inc(byte)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: boolean split(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$Hashable splitHelper(org.apache.cassandra.utils.MerkleTree$Hashable,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,byte,org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner: void rchild(org.apache.cassandra.utils.MerkleTree$Hashable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner: void lchild(org.apache.cassandra.utils.MerkleTree$Hashable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$StopRecursion$TooDeep: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$StopRecursion: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator: void <init>(org.apache.cassandra.utils.MerkleTrees,org.apache.cassandra.utils.MerkleTrees$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator: void <init>(org.apache.cassandra.utils.MerkleTrees)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRange: void addHash(org.apache.cassandra.utils.MerkleTree$RowHash)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: org.apache.cassandra.utils.MerkleTree$RowHash rowHash(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: boolean findCorrectRange(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean isInRanges(org.apache.cassandra.dht.RingPosition,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator$CountingDigest: void <init>(java.security.MessageDigest)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$RowHash: void <init>(org.apache.cassandra.dht.Token,byte[],long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.security.MessageDigest newMessageDigest(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator$CountingDigest: long access$000(org.apache.cassandra.repair.Validator$CountingDigest)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable: void addHash(byte[],long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable: byte[] binaryHash(byte[],byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: byte[] xor(byte[],byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void logRowCountPerLeaf(org.slf4j.Logger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void logRowSizePerLeaf(org.slf4j.Logger)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.Validator: void completeTree()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRange: void ensureHashInitialised()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: byte[] access$800()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.EstimatedHistogram histogramOfRowSizePerLeaf()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.HistogramBuilder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.HistogramBuilder: org.apache.cassandra.utils.EstimatedHistogram buildWithStdevRangesAroundMean()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.HistogramBuilder: void add(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRangeIterator: java.util.Iterator iterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRangeIterator: void <init>(org.apache.cassandra.utils.MerkleTree)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRange: org.apache.cassandra.utils.MerkleTree$Hashable access$700(org.apache.cassandra.utils.MerkleTree$TreeRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRange: void <init>(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,byte,org.apache.cassandra.utils.MerkleTree$Hashable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.HistogramBuilder: org.apache.cassandra.utils.EstimatedHistogram buildWithStdevRangesAroundMean(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: void add(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.HistogramBuilder: long[] buildRange(long,long,boolean,double,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: java.lang.String nameOfRange(long[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.EstimatedHistogram: void appendRange(java.lang.StringBuilder,long[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.EstimatedHistogram histogramOfRowCountPerLeaf()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds: boolean intersects(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$lambda_getSSTablesToValidate_1__533: com.google.common.base.Predicate bootstrap$(org.apache.cassandra.service.ActiveRepairService$ParentRepairSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View: com.google.common.base.Function select(org.apache.cassandra.db.lifecycle.SSTableSet,com.google.common.base.Predicate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_select_2__87: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.lifecycle.SSTableSet,com.google.common.base.Predicate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.View$lambda_select_2__87: void <init>(org.apache.cassandra.db.lifecycle.SSTableSet,com.google.common.base.Predicate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$lambda_getSSTablesToValidate_1__533: void <init>(org.apache.cassandra.service.ActiveRepairService$ParentRepairSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean intersects(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean intersects(org.apache.cassandra.dht.Bounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$3: java.lang.Integer call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$KeyCacheSerializer: java.util.concurrent.Future deserialize(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$RowCacheSerializer: java.util.concurrent.Future deserialize(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$CounterCacheSerializer: java.util.concurrent.Future deserialize(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask: boolean isDone()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.LengthAvailableInputStream: void <init>(java.io.InputStream,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$1: java.io.InputStream getInputStream(java.io.File,java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedRandomAccessReader: org.apache.cassandra.io.util.RandomAccessReader open(java.io.File,java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator: void <init>(org.apache.cassandra.utils.ChecksumType,org.apache.cassandra.io.util.RandomAccessReader,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksummedRebufferer: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$CounterCacheSerializer$1: void <init>(org.apache.cassandra.service.CacheService$CounterCacheSerializer,org.apache.cassandra.db.ColumnFamilyStore,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask submit(java.util.concurrent.Callable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask newTaskFor(java.util.concurrent.Callable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$LocalSessionFutureTask: void <init>(org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService,java.util.concurrent.Callable,org.apache.cassandra.concurrent.ExecutorLocals)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$RowCacheSerializer$1: void <init>(org.apache.cassandra.service.CacheService$RowCacheSerializer,org.apache.cassandra.db.ColumnFamilyStore,java.nio.ByteBuffer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$KeyCacheSerializer: org.apache.cassandra.io.sstable.format.SSTableReader findDesc(int,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: void skipForCache(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.io.sstable.format.Version)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: void skipForCache(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry: void skipForCache(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime$Serializer: void skip(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache: org.slf4j.Logger access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache: java.lang.String access$200(org.apache.cassandra.auth.AuthCache)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable$FlushRunnable: org.apache.cassandra.io.sstable.SSTableMultiWriter call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: org.slf4j.Logger access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$CounterCacheSerializer$1: org.apache.cassandra.utils.Pair call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyCellName decodeCellName(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.util.NavigableSet singleton(java.lang.Object,java.util.Comparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.CounterCacheKey: org.apache.cassandra.cache.CounterCacheKey create(org.apache.cassandra.utils.Pair,java.nio.ByteBuffer,org.apache.cassandra.db.Clustering,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.CounterCacheKey: void <init>(org.apache.cassandra.utils.Pair,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.CounterCacheKey: java.nio.ByteBuffer makeCellName(org.apache.cassandra.db.Clustering,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CacheService$RowCacheSerializer$1: org.apache.cassandra.utils.Pair call()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.rows.UnfilteredRowIterator filter(org.apache.cassandra.db.rows.UnfilteredRowIterator,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$1: org.apache.cassandra.db.rows.UnfilteredRowIterator filter(org.apache.cassandra.db.rows.UnfilteredRowIterator,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.nio.ByteBuffer lambda$executeAsync$0(org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime,org.apache.cassandra.transport.ProtocolVersion,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime: void setup()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: java.lang.Object lambda$executeAggregateAsync$1(org.apache.cassandra.cql3.functions.UDFunction$ThreadIdAndCpuTime,org.apache.cassandra.transport.ProtocolVersion,java.lang.Object,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$apply__337: void <init>(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$lambda_applyBackPressure_1__338: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$lambda_applyBackPressure_2__339: java.util.function.Function bootstrap$(org.apache.cassandra.net.MessagingService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$lambda_applyBackPressure_2__339: void <init>(org.apache.cassandra.net.MessagingService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$lambda_applyBackPressure_1__338: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch: void <init>(java.util.UUID,long,java.util.Collection,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$ViewWriteMetricsWrapped: void <init>(org.apache.cassandra.service.AbstractWriteResponseHandler,int,org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$WriteResponseHandlerWrapper: void <init>(org.apache.cassandra.service.BatchlogResponseHandler,org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_wrapViewBatchResponseHandler_4__390: java.lang.Runnable bootstrap$(java.util.concurrent.atomic.AtomicLong)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_wrapViewBatchResponseHandler_4__390: void <init>(java.util.concurrent.atomic.AtomicLong)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: void <init>(org.apache.cassandra.service.AbstractWriteResponseHandler,int,org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_mutateMV_0__389: void <init>(java.util.Collection,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Close: void <init>(org.apache.cassandra.db.partitions.UnfilteredPartitionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: boolean selectsKey(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: boolean selectsKey(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadQuery$1: boolean selectsKey(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_selectsKey_2__621: com.google.common.base.Predicate bootstrap$(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_selectsKey_2__621: void <init>(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: boolean contains(org.apache.cassandra.db.PartitionPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: boolean partitionKeyRestrictionsAreSatisfiedBy(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression: org.apache.cassandra.cql3.Operator operator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.Slices clusteringIndexFilterAsSlices()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.db.filter.ColumnFilter queriedColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: boolean affectsAnyViews(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder: org.apache.cassandra.db.Slices$Builder addAll(org.apache.cassandra.db.Slices)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: boolean mayBeAffectedBy(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_selectsClustering_3__620: com.google.common.base.Predicate bootstrap$(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group$lambda_selectsClustering_3__620: void <init>(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: boolean selects(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: boolean selects(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: boolean clusteringKeyRestrictionsAreSatisfiedBy(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.Row withRowDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void <init>(org.apache.cassandra.db.view.View,org.apache.cassandra.db.DecoratedKey,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$DeletionTracker: void <init>(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$DeletionTracker: void update(org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews$1: void <init>(org.apache.cassandra.db.view.TableViews,java.util.Collection,com.google.common.collect.PeekingIterator,org.apache.cassandra.db.view.TableViews$DeletionTracker,java.util.List,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: org.apache.cassandra.db.rows.Row emptyRow(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: java.nio.ByteBuffer[] extractKeyComponents(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation: org.apache.cassandra.db.commitlog.CommitLogPosition getCommitLogPosition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation: void markWritten()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation: org.apache.cassandra.db.commitlog.CommitLogSegment getSegment()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation: java.nio.ByteBuffer getBuffer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerStandard: org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation allocate(org.apache.cassandra.db.Mutation,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation allocate(org.apache.cassandra.db.Mutation,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogService: void finishWriteFor(org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.BatchCommitLogService: void maybeWaitForSync(org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.PeriodicCommitLogService: void maybeWaitForSync(org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogService: void awaitSyncAt(long,com.codahale.metrics.Timer$Context)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation: void awaitDiskSync(com.codahale.metrics.Timer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void waitForSync(int,com.codahale.metrics.Timer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation allocate(org.apache.cassandra.db.Mutation,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC: void throwIfForbidden(org.apache.cassandra.db.Mutation,org.apache.cassandra.db.commitlog.CommitLogSegment)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: boolean trackedByCDC()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation: void <init>(org.apache.cassandra.db.commitlog.CommitLogSegment,org.apache.cassandra.utils.concurrent.OpOrder$Group,int,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void markDirty(org.apache.cassandra.db.Mutation,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void coverInMap(java.util.concurrent.ConcurrentMap,java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntegerInterval: void expandToCover(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntegerInterval: void <init>(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntegerInterval: void <init>(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntegerInterval: long make(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntegerInterval: int upper(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntegerInterval: int lower(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$lambda_forEach_0__422: void <init>(java.util.function.Consumer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean addRecord(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void append(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: boolean isFinal()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_append_6__371: java.util.function.Function bootstrap$(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_append_6__371: void <init>(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$Type: boolean isFinal()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: org.apache.cassandra.db.lifecycle.LogRecord makeRecord(org.apache.cassandra.db.lifecycle.LogRecord$Type,org.apache.cassandra.io.sstable.SSTable,org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean contains(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: org.apache.cassandra.db.lifecycle.LogRecord asType(org.apache.cassandra.db.lifecycle.LogRecord$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$lambda_restoreUpdatedOriginals_0__377: com.google.common.base.Function bootstrap$(org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction$lambda_restoreUpdatedOriginals_0__377: void <init>(org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$abort__225: org.apache.cassandra.utils.Throwables$DiscreteAction bootstrap$(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$abort__225: void <init>(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: java.lang.Throwable abort(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void onMergedPartitionLevelDeletion(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.DeletionTime[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$1$1: void onMergedPartitionLevelDeletion(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.DeletionTime[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.db.partitions.PartitionUpdate update(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator,int,boolean,int,org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener,org.apache.cassandra.db.rows.UnfilteredRowIterators$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: org.apache.cassandra.db.rows.Row mergeStaticRows(java.util.List,org.apache.cassandra.db.Columns,int,org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: org.apache.cassandra.db.rows.EncodingStats mergeStats(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.EncodingStats: org.apache.cassandra.db.rows.EncodingStats mergeWith(org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void onMergedRows(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$1$1: void onMergedRows(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: boolean hasComplex()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger: void <init>(int,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger: org.apache.cassandra.db.rows.Row[] mergedRows()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger: org.apache.cassandra.db.rows.Row merge(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger: void add(int,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$lambda_mergeStaticRows_0__228: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$lambda_mergeStaticRows_0__228: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer: void setActiveDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Deletion: boolean supersedes(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.BTreeRow create(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.rows.Row$Deletion,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer: void <init>(int,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$CellReducer: void <init>(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.ComplexColumnData$Builder builder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows: void diff(org.apache.cassandra.db.rows.RowDiffListener,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1: void onDeletion(int,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Row$Deletion,org.apache.cassandra.db.rows.Row$Deletion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1: void onPrimaryKeyLivenessInfo(int,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows$1: void <init>(org.apache.cassandra.db.rows.Row[],org.apache.cassandra.db.rows.RowDiffListener,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.db.rows.Row$Builder access$300(org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener,int,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.db.rows.Row$Builder currentRow(int,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer: void <init>(org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator,int,boolean,int,org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger: void <init>(int,org.apache.cassandra.db.DeletionTime,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableReader: org.apache.cassandra.db.rows.UnfilteredRowIterator iterator(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Slices,org.apache.cassandra.db.filter.ColumnFilter,boolean,boolean,org.apache.cassandra.io.sstable.format.SSTableReadsListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableReader: org.apache.cassandra.db.rows.UnfilteredRowIterator iterator(org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.db.Slices,org.apache.cassandra.db.filter.ColumnFilter,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.db.Slices,org.apache.cassandra.db.filter.ColumnFilter,boolean,org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.db.Slices,org.apache.cassandra.db.filter.ColumnFilter,boolean,org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.db.Slices,org.apache.cassandra.db.filter.ColumnFilter,boolean,org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry: org.apache.cassandra.db.DeletionTime deletionTime()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry: org.apache.cassandra.db.DeletionTime deletionTime()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: org.apache.cassandra.db.DeletionTime deletionTime()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: org.apache.cassandra.db.DeletionTime deletionTime()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: boolean isIndexed()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Slices: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader createReader(org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator: org.apache.cassandra.db.rows.Row readStaticRow(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.Columns,boolean,org.apache.cassandra.db.UnfilteredDeserializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void skipStaticRow(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$NoRowsReader: void <init>(org.apache.cassandra.db.columniterator.AbstractSSTableIterator,org.apache.cassandra.io.util.FileDataInput,boolean,org.apache.cassandra.db.columniterator.AbstractSSTableIterator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator: org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader createReaderInternal(org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator: org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader createReaderInternal(org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardIndexedReader: void <init>(org.apache.cassandra.db.columniterator.SSTableIterator,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.FileDataInput,boolean,org.apache.cassandra.db.columniterator.SSTableIterator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader: void <init>(org.apache.cassandra.db.columniterator.SSTableIterator,org.apache.cassandra.io.util.FileDataInput,boolean,org.apache.cassandra.db.columniterator.SSTableIterator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardReader: void <init>(org.apache.cassandra.db.columniterator.SSTableIterator,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader: void <init>(org.apache.cassandra.db.columniterator.AbstractSSTableIterator,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableIterator$ForwardIndexedReader: void <init>(org.apache.cassandra.db.columniterator.SSTableIterator,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$IndexState: void <init>(org.apache.cassandra.db.columniterator.AbstractSSTableIterator$Reader,org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.RowIndexEntry,boolean,org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry: org.apache.cassandra.db.RowIndexEntry$IndexInfoRetriever openWithIndex(org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry: org.apache.cassandra.db.RowIndexEntry$IndexInfoRetriever openWithIndex(org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: org.apache.cassandra.db.RowIndexEntry$IndexInfoRetriever openWithIndex(org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: org.apache.cassandra.db.RowIndexEntry$IndexInfoRetriever openWithIndex(org.apache.cassandra.io.util.FileHandle)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry$1: void <init>(org.apache.cassandra.db.RowIndexEntry$IndexedEntry)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: int access$400(org.apache.cassandra.db.DeletionTime,long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: int serializedSize(org.apache.cassandra.db.DeletionTime,long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowInfoRetriever: void <init>(long,int,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.io.ISerializer,org.apache.cassandra.db.RowIndexEntry$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowInfoRetriever: void <init>(long,int,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.io.ISerializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$FileIndexInfoRetriever: void <init>(long,org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.io.ISerializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyIndexInfoRetriever: void <init>(long,int[],org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.io.sstable.IndexInfo$Serializer,org.apache.cassandra.db.RowIndexEntry$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyIndexInfoRetriever: void <init>(long,int[],org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.io.sstable.IndexInfo$Serializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader: void <init>(org.apache.cassandra.db.columniterator.SSTableReversedIterator,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.FileDataInput,boolean,org.apache.cassandra.db.columniterator.SSTableReversedIterator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: void <init>(org.apache.cassandra.db.columniterator.SSTableReversedIterator,org.apache.cassandra.io.util.FileDataInput,boolean,org.apache.cassandra.db.columniterator.SSTableReversedIterator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseReader: void <init>(org.apache.cassandra.db.columniterator.SSTableReversedIterator,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$ReverseIndexedReader: void <init>(org.apache.cassandra.db.columniterator.SSTableReversedIterator,org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.AbstractSSTableIterator$NoRowsReader: void <init>(org.apache.cassandra.db.columniterator.AbstractSSTableIterator,org.apache.cassandra.io.util.FileDataInput,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyUnfilteredPartition: void <init>(org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: long serializedSizeSimple()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstoneList: long serializedSizeCompound(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$Serializer: long serializedSize(org.apache.cassandra.db.ReadResponse,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DigestResponse: java.nio.ByteBuffer access$500(org.apache.cassandra.db.ReadResponse$DigestResponse)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$DataResponse: java.nio.ByteBuffer access$700(org.apache.cassandra.db.ReadResponse$DataResponse)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: long serializedSize(org.apache.cassandra.db.ReadCommand,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: java.util.Iterator iterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: boolean isNamesQuery()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression: java.nio.ByteBuffer getIndexValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: org.apache.cassandra.db.PartitionRangeReadCommand maybeConvertNamesToSlice(org.apache.cassandra.db.PartitionRangeReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange: boolean isNamesQuery()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.PartitionRangeReadCommand withUpdatedDataRange(org.apache.cassandra.db.DataRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: org.apache.cassandra.db.filter.ClusteringIndexSliceFilter access$900(org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer: long serializedSize(org.apache.cassandra.db.ReadCommand,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: org.apache.cassandra.db.Clustering getLastReturned()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: java.nio.ByteBuffer encodeClustering(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: long serializedRowFilterSize(org.apache.cassandra.db.filter.RowFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer: long serializedSize(org.apache.cassandra.gms.EchoMessage,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncationSerializer: long serializedSize(org.apache.cassandra.db.Truncation,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch$Serializer: long serializedSize(org.apache.cassandra.batchlog.Batch,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2Serializer: long serializedSize(org.apache.cassandra.gms.GossipDigestAck2,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointStateSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointStateSerializer: long serializedSize(org.apache.cassandra.gms.EndpointState,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatStateSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer: long serializedSize(org.apache.cassandra.gms.VersionedValue,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer: java.lang.String outValue(org.apache.cassandra.gms.VersionedValue,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatStateSerializer: long serializedSize(org.apache.cassandra.gms.HeartBeatState,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAckSerializer: long serializedSize(org.apache.cassandra.gms.GossipDigestAck,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializationHelper: int serializedSize(java.util.List,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializer: long serializedSize(org.apache.cassandra.gms.GossipDigest,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$MigrationsSerializer: long serializedSize(java.util.Collection,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer: long serializedSize(org.apache.cassandra.repair.messages.RepairMessage,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$Type: org.apache.cassandra.repair.messages.RepairMessage$MessageSerializer access$100(org.apache.cassandra.repair.messages.RepairMessage$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer: long serializedSize(org.apache.cassandra.repair.messages.CleanupMessage,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer: long serializedSize(org.apache.cassandra.repair.messages.SnapshotMessage,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer: long serializedSize(org.apache.cassandra.repair.RepairJobDesc,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer: long serializedSize(org.apache.cassandra.repair.messages.PrepareMessage,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer: long serializedSize(org.apache.cassandra.repair.messages.AnticompactionRequest,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer: long serializedSize(org.apache.cassandra.repair.messages.SyncComplete,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.NodePair$NodePairSerializer: long serializedSize(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.NodePair$NodePairSerializer: long serializedSize(org.apache.cassandra.repair.NodePair,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer: long serializedSize(org.apache.cassandra.repair.messages.SyncRequest,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer: long serializedSize(org.apache.cassandra.repair.messages.ValidationRequest,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer: long serializedSize(org.apache.cassandra.repair.messages.ValidationComplete,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete: boolean success()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintResponse$Serializer: long serializedSize(org.apache.cassandra.hints.HintResponse,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit$CommitSerializer: long serializedSize(org.apache.cassandra.service.paxos.Commit,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WriteResponse$Serializer: long serializedSize(org.apache.cassandra.db.WriteResponse,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BooleanSerializer: long serializedSize(java.lang.Boolean,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer: long serializedSize(org.apache.cassandra.service.paxos.PrepareResponse,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSynSerializer: long serializedSize(org.apache.cassandra.gms.GossipDigestSyn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$CounterMutationSerializer: long serializedSize(org.apache.cassandra.db.CounterMutation,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: org.apache.cassandra.db.Mutation access$000(org.apache.cassandra.db.CounterMutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: org.apache.cassandra.db.ConsistencyLevel access$100(org.apache.cassandra.db.CounterMutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.ChecksumWriter: void writeFullChecksum(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Cleanup: void lambda$tidy$0(org.apache.cassandra.cache.ChunkCache)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: void invalidateFile(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$lambda_invalidateFile_1__483: com.google.common.base.Predicate bootstrap$(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$lambda_invalidateFile_1__483: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void lambda$invalidateCacheAtBoundary$1(org.apache.cassandra.io.util.FileHandle,org.apache.cassandra.cache.ChunkCache)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache: void invalidatePosition(org.apache.cassandra.io.util.FileHandle,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: org.apache.cassandra.io.util.RebuffererFactory rebuffererFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.ChunkCache$CachingRebufferer: void invalidate(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void lambda$setCrcCheckChance$4(double,org.apache.cassandra.io.compress.CompressionMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: void setCrcCheckChance(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle: void lambda$addTo$1(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection,org.apache.cassandra.io.compress.CompressionMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: void addTo(org.apache.cassandra.utils.concurrent.Ref$IdentityCollection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void lambda$handleFSError$2(org.apache.cassandra.io.FSError,org.apache.cassandra.io.FSErrorHandler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DefaultFSErrorHandler: void handleFSError(org.apache.cassandra.io.FSError)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.BlacklistedDirectories: java.io.File maybeMarkUnwritable(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.BlacklistedDirectories: java.io.File maybeMarkUnreadable(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void removeUnreadableSSTables(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void maybeRemoveUnreadableSSTables(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void removeUnreadableSSTables(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker$1: void <init>(org.apache.cassandra.db.lifecycle.Tracker,java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.BlacklistedDirectories: java.io.File getDirectory(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$add__517: void <init>(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Terms$lambda_addFunctions_0__565: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$lambda_addFunctionsTo_0__351: java.util.function.Consumer bootstrap$(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$lambda_addFunctionsTo_0__351: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.selection.Selection wildcardWithGroupBy(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.selection.Selection wildcard(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.selection.Selection fromSelectors(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.VariableSpecifications,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.selection.SelectionColumnMapping,org.apache.cassandra.cql3.selection.SelectorFactories)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.selection.SelectionColumnMapping,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.RawSelector: java.util.List toSelectables(java.util.List,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: org.apache.cassandra.cql3.selection.SelectorFactories createFactoriesAndCollectColumnDefinitions(java.util.List,java.util.List,org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.selection.SelectionColumnMapping collectColumnMappings(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.selection.SelectorFactories)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: boolean processesSelection(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.RawSelector: boolean processesSelection()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$Raw: boolean processesSelection()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw: boolean processesSelection()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectionColumnMapping: org.apache.cassandra.cql3.selection.SelectionColumnMapping newMapping()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1: void addColumnMapping(org.apache.cassandra.cql3.selection.SelectionColumnMapping,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector$1: void addColumnMapping(org.apache.cassandra.cql3.selection.SelectionColumnMapping,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: void addColumnMapping(org.apache.cassandra.cql3.selection.SelectionColumnMapping,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector$1: void addColumnMapping(org.apache.cassandra.cql3.selection.SelectionColumnMapping,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnSpecification: org.apache.cassandra.cql3.ColumnSpecification withAlias(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector$1: void addColumnMapping(org.apache.cassandra.cql3.selection.SelectionColumnMapping,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selector$Factory: org.apache.cassandra.cql3.ColumnSpecification getColumnSpecification(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: java.util.Iterator iterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectionColumnMapping: org.apache.cassandra.cql3.selection.SelectionColumnMapping addMapping(org.apache.cassandra.cql3.ColumnSpecification,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectionColumnMapping: org.apache.cassandra.cql3.selection.SelectionColumnMapping addMapping(org.apache.cassandra.cql3.ColumnSpecification,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectionColumnMapping: com.google.common.collect.Multimap getMappings()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectionColumnMapping: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: void <init>(java.util.List,java.util.List,org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1: boolean isTTLSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1: boolean isWritetimeSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector$1: boolean isAggregateSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: boolean isAggregateSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: boolean isTTLSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: boolean isWritetimeSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selector$Factory: boolean isAggregateSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selector$Factory: boolean isTTLSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selector$Factory: boolean isWritetimeSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WritetimeOrTTL: org.apache.cassandra.cql3.selection.Selector$Factory newSelectorFactory(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithCast: org.apache.cassandra.cql3.selection.Selector$Factory newSelectorFactory(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFieldSelection: org.apache.cassandra.cql3.selection.Selector$Factory newSelectorFactory(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithFunction: org.apache.cassandra.cql3.selection.Selector$Factory newSelectorFactory(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithToJSonFunction: org.apache.cassandra.cql3.selection.Selector$Factory newSelectorFactory(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithTerm: org.apache.cassandra.cql3.selection.Selector$Factory newSelectorFactory(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.cql3.selection.Selector$Factory newSelectorFactory(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.List,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector: org.apache.cassandra.cql3.selection.Selector$Factory newFactory(org.apache.cassandra.config.ColumnDefinition,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector$1: void <init>(org.apache.cassandra.config.ColumnDefinition,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selector$Factory: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$DelayedValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$DelayedValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DelayedValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$DelayedValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$DelayedValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Term$Terminal: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selectable$WithTerm: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector: org.apache.cassandra.cql3.selection.Selector$Factory newFactory(java.lang.String,org.apache.cassandra.cql3.Term,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.TermSelector$1: void <init>(java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TypeCast: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$Raw: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$NullLiteral: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$RawDelayedColumnValue: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$ColumnValue: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$UnsetLiteral: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Raw: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.FunctionCall$Raw: org.apache.cassandra.db.marshal.AbstractType getExactTypeIfKnown(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$DelayedColumnValue: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.VariableSpecifications: void add(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: java.util.List getReturnTypes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ToJsonFct: org.apache.cassandra.cql3.functions.ToJsonFct getInstance(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector: org.apache.cassandra.cql3.selection.Selector$Factory newFactory(org.apache.cassandra.cql3.functions.Function,org.apache.cassandra.cql3.selection.SelectorFactories)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: void <init>(org.apache.cassandra.cql3.functions.Function,org.apache.cassandra.cql3.selection.SelectorFactories)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: boolean doesAggregation()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.ToJsonFct: void <init>(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories$2: void <init>(org.apache.cassandra.cql3.selection.SelectorFactories)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: int fieldPosition(org.apache.cassandra.cql3.FieldIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector: org.apache.cassandra.cql3.selection.Selector$Factory newFactory(org.apache.cassandra.db.marshal.UserType,int,org.apache.cassandra.cql3.selection.Selector$Factory)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.FieldSelector$1: void <init>(org.apache.cassandra.cql3.selection.Selector$Factory,org.apache.cassandra.db.marshal.UserType,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: org.apache.cassandra.cql3.selection.Selector$Factory get(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.CastFcts: java.lang.String getFunctionName(org.apache.cassandra.cql3.CQL3Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector: org.apache.cassandra.cql3.selection.Selector$Factory newFactory(org.apache.cassandra.config.ColumnDefinition,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector$1: void <init>(boolean,org.apache.cassandra.config.ColumnDefinition,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: boolean containsWritetimeSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: boolean containsTTLSelectorFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.RawSelector$1: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.selection.SelectionColumnMapping,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectionColumnMapping: java.util.List getColumnSpecifications()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Iterator allColumnsInSelectOrder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectionColumnMapping: org.apache.cassandra.cql3.selection.SelectionColumnMapping simpleMapping(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$1: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.List access$000(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.List access$100(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Iterator access$200(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Iterator nonPkColumnIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: java.util.Iterator selectOrderIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: java.util.Iterator selectOrderIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables: boolean hasEmptyCompactValue(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$lambda_nonPkColumnIterator_0__484: com.google.common.base.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$lambda_nonPkColumnIterator_0__484: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: java.util.Iterator complexColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: java.util.Iterator simpleColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$lambda_selectOrderIterator_0__442: java.util.Comparator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$lambda_selectOrderIterator_0__442: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw: org.apache.cassandra.config.ColumnDefinition$Raw forColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.ColumnDefinition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$ForColumn: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: boolean containsAComplexColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: boolean containsOnlyStaticColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: void <init>(org.apache.cassandra.cql3.statements.StatementType,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.WhereClause,org.apache.cassandra.cql3.VariableSpecifications,boolean,boolean,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: boolean hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: org.apache.cassandra.cql3.restrictions.Restriction toRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.Relation toSuperColumnAdapter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: org.apache.cassandra.cql3.Relation toSuperColumnAdapter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: boolean onToken()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.Relation toSuperColumnAdapter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: boolean onToken()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: boolean isLIKE()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: org.apache.cassandra.cql3.Operator operator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: boolean hasRestrictionFor(org.apache.cassandra.config.ColumnDefinition$Kind)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: boolean hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: boolean hasSupportingIndex(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: void add(org.apache.cassandra.cql3.restrictions.Restrictions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: boolean needFiltering()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType$4: boolean allowNonPrimaryKeyInWhereClause()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType$4: boolean allowUseOfSecondaryIndices()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType: boolean allowNonPrimaryKeyInWhereClause()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType: boolean isSelect()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType: boolean isUpdate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType: boolean isDelete()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType: boolean allowUseOfSecondaryIndices()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause: boolean containsCustomExpressions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: void validateSecondaryIndexSelections(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: void processClusteringColumnsRestrictions(boolean,boolean,boolean,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: void processPartitionKeyRestrictions(boolean,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: void processCustomIndexExpressions(java.util.List,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: void addRestriction(org.apache.cassandra.cql3.restrictions.Restriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: void <init>(org.apache.cassandra.cql3.statements.StatementType,org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: void <init>(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: void <init>(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: void <init>(java.util.TreeMap,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: void <init>(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.cql3.restrictions.RestrictionSet,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: void <init>(org.apache.cassandra.cql3.restrictions.RestrictionSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: org.apache.cassandra.cql3.restrictions.RestrictionSet addRestriction(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: org.apache.cassandra.config.ColumnDefinition getFirstColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions mergeWith(org.apache.cassandra.cql3.restrictions.Restriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: org.apache.cassandra.config.ColumnDefinition nextColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: java.util.TreeMap mergeRestrictions(java.util.TreeMap,org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: java.util.Set getRestrictions(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: org.apache.cassandra.cql3.restrictions.SingleRestriction mergeRestrictions(org.apache.cassandra.cql3.restrictions.SingleRestriction,org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction mergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction mergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: boolean canBeConvertedToMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: boolean canBeConvertedToMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction: boolean canBeConvertedToMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction: org.apache.cassandra.cql3.restrictions.MultiColumnRestriction toMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: org.apache.cassandra.cql3.restrictions.MultiColumnRestriction toMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction: org.apache.cassandra.cql3.restrictions.MultiColumnRestriction toMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithValues: org.apache.cassandra.cql3.restrictions.MultiColumnRestriction toMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithMarker: org.apache.cassandra.cql3.restrictions.MultiColumnRestriction toMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: org.apache.cassandra.cql3.restrictions.MultiColumnRestriction toMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: org.apache.cassandra.cql3.restrictions.MultiColumnRestriction toMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction: org.apache.cassandra.cql3.restrictions.MultiColumnRestriction toMultiColumnRestriction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$EQRestriction: void <init>(java.util.List,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: void <init>(java.util.List,org.apache.cassandra.cql3.restrictions.TermSlice)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithMarker: void <init>(java.util.List,org.apache.cassandra.cql3.AbstractMarker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$INRestriction: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$InRestrictionWithValues: void <init>(java.util.List,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$NotNullRestriction: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction: java.lang.String getColumnsInCommons(org.apache.cassandra.cql3.restrictions.Restriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: org.apache.cassandra.cql3.restrictions.TermSlice merge(org.apache.cassandra.cql3.restrictions.TermSlice)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: void <init>(org.apache.cassandra.cql3.Term,boolean,org.apache.cassandra.cql3.Term,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction: org.apache.cassandra.cql3.restrictions.SingleRestriction doMergeWith(org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: void copyKeysAndValues(org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction,org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.restrictions.TermSlice)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet: void <init>(org.apache.cassandra.cql3.restrictions.PartitionKeySingleRestrictionSet,org.apache.cassandra.cql3.restrictions.SingleRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: void <init>(org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions,org.apache.cassandra.cql3.restrictions.TokenRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions doMergeWith(org.apache.cassandra.cql3.restrictions.TokenRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction: org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions doMergeWith(org.apache.cassandra.cql3.restrictions.TokenRestriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: org.apache.cassandra.cql3.restrictions.PartitionKeyRestrictions toPartitionKeyRestrictions(org.apache.cassandra.cql3.restrictions.Restriction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: java.lang.String getColumnNamesAsString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.restrictions.TermSlice)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.CustomIndexExpression: void prepareValue(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: boolean has(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: void add(org.apache.cassandra.cql3.restrictions.CustomIndexExpression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: boolean areAllNodesAtLeast30()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: org.apache.cassandra.exceptions.InvalidRequestException invalidIndex(org.apache.cassandra.cql3.IndexName,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: org.apache.cassandra.exceptions.InvalidRequestException nonCustomIndexInExpression(org.apache.cassandra.cql3.IndexName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.IndexRestrictions: org.apache.cassandra.exceptions.InvalidRequestException customExpressionNotSupported(org.apache.cassandra.cql3.IndexName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: boolean hasUnrestrictedPartitionKeyComponents(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean hasUnrestrictedPartitionKeyComponents(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean hasSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType$4: boolean allowPartitionKeyRanges()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType: boolean allowPartitionKeyRanges()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: java.util.Collection getPartitionKeyUnrestrictedComponents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType$1: boolean allowClusteringColumnSlices()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType$2: boolean allowClusteringColumnSlices()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType: boolean allowClusteringColumnSlices()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: boolean hasSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.ClusteringColumnRestrictions: boolean hasContains()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: java.util.Collection getUnrestrictedClusteringColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean hasUnrestrictedClusteringColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation$SuperColumnMultiColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newSliceRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.statements.Bound,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation$SuperColumnMultiColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newEQRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation$SuperColumnSingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newINRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation$SuperColumnSingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newSliceRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.statements.Bound,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation$SuperColumnSingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newEQRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newLikeRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newIsNotRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newContainsRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newINRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newSliceRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.statements.Bound,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newEQRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: org.apache.cassandra.cql3.restrictions.Restriction newLikeRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: org.apache.cassandra.cql3.restrictions.Restriction newIsNotRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: org.apache.cassandra.cql3.restrictions.Restriction newContainsRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: org.apache.cassandra.cql3.restrictions.Restriction newINRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: org.apache.cassandra.cql3.restrictions.Restriction newSliceRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.statements.Bound,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: org.apache.cassandra.cql3.restrictions.Restriction newEQRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newLikeRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newIsNotRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newContainsRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newINRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newSliceRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.statements.Bound,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.restrictions.Restriction newEQRestriction(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.Term toTerm(java.util.List,org.apache.cassandra.cql3.Term$Raw,java.lang.String,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: java.util.List toReceivers(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$EQRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: boolean isEQ()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: boolean isContainsKey()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: boolean isContains()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: boolean isLegalRelationForNonFrozenCollection()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: boolean canHaveOnlyOneValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: boolean isIN()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.ColumnSpecification makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType: org.apache.cassandra.cql3.ColumnSpecification makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType$Kind$1: org.apache.cassandra.cql3.ColumnSpecification makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType$Kind$2: org.apache.cassandra.cql3.ColumnSpecification makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType$Kind$3: org.apache.cassandra.cql3.ColumnSpecification makeCollectionReceiver(org.apache.cassandra.cql3.ColumnSpecification,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: boolean isMapEntryEquality()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractMarker$INRaw: org.apache.cassandra.cql3.Term prepare(java.lang.String,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean referencesDuration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: boolean referencesDuration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: boolean referencesDuration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: boolean referencesDuration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.DurationType: boolean referencesDuration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean referencesDuration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SliceRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.statements.Bound,boolean,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TermSlice: org.apache.cassandra.cql3.restrictions.TermSlice newInstance(org.apache.cassandra.cql3.statements.Bound,boolean,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType$lambda_referencesDuration_1__197: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: java.util.List allTypes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType$lambda_referencesDuration_1__197: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType$lambda_referencesDuration_2__505: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType$lambda_referencesDuration_2__505: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithValues: void <init>(org.apache.cassandra.config.ColumnDefinition,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: java.util.List toTerms(java.util.List,java.util.List,java.lang.String,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$InRestrictionWithMarker: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.AbstractMarker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$INRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.Term toTerm(java.util.List,org.apache.cassandra.cql3.Term$Raw,java.lang.String,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Literal: org.apache.cassandra.cql3.Term prepare(java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$INRaw: org.apache.cassandra.cql3.Term prepare(java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Raw: org.apache.cassandra.cql3.Term prepare(java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Raw: org.apache.cassandra.cql3.AbstractMarker prepare(java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Raw: org.apache.cassandra.cql3.ColumnSpecification makeReceiver(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$Marker: void <init>(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$INRaw: org.apache.cassandra.cql3.AbstractMarker prepare(java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$InMarker: void <init>(int,org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Tuples$INRaw: org.apache.cassandra.cql3.ColumnSpecification makeInReceiver(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$ContainsRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$IsNotNullRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$LikeRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: java.util.List toReceivers(org.apache.cassandra.config.CFMetaData,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: org.apache.cassandra.cql3.Term toTerm(java.util.List,org.apache.cassandra.cql3.Term$Raw,java.lang.String,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: java.util.List getColumnDefinitions(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$EQRestriction: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: void checkContainsNoDuplicates(java.util.List,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RequestValidations: void checkContainsOnly(java.util.List,java.util.List,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction$SliceRestriction: void <init>(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.statements.Bound,boolean,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation$SuperColumnMultiColumnRelation: java.util.List receivers(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.Term$MultiColumnRaw getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: java.util.List receivers(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: java.util.List getEntities()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.MultiColumnRestriction$SliceRestriction: void <init>(java.util.List,org.apache.cassandra.cql3.statements.Bound,boolean,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyEQRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.config.ColumnDefinition$Raw access$200(org.apache.cassandra.cql3.SingleColumnRelation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: java.util.List access$300(org.apache.cassandra.cql3.SingleColumnRelation,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.Term$Raw access$400(org.apache.cassandra.cql3.SingleColumnRelation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeySliceRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.statements.Bound,boolean,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestrictionWithMarkers: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.AbstractMarker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestrictionWithValues: void <init>(org.apache.cassandra.config.ColumnDefinition,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: java.util.List access$000(org.apache.cassandra.cql3.SingleColumnRelation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnKeyINRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiEQRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.SingleColumnRestriction$SuperColumnMultiSliceRestriction: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.statements.Bound,boolean,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation$SuperColumnSingleColumnRelation: void <init>(org.apache.cassandra.cql3.SingleColumnRelation,org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$Raw,java.util.List,org.apache.cassandra.cql3.SingleColumnRelation$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation$SuperColumnMultiColumnRelation: void <init>(org.apache.cassandra.cql3.MultiColumnRelation,java.util.List,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$MultiColumnRaw,java.util.List,org.apache.cassandra.cql3.Tuples$INRaw,org.apache.cassandra.cql3.MultiColumnRelation$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation$SuperColumnMultiColumnRelation: void <init>(org.apache.cassandra.cql3.MultiColumnRelation,java.util.List,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$MultiColumnRaw,java.util.List,org.apache.cassandra.cql3.Tuples$INRaw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: void <init>(java.util.List,org.apache.cassandra.cql3.Operator,org.apache.cassandra.cql3.Term$MultiColumnRaw,java.util.List,org.apache.cassandra.cql3.Tuples$INRaw,org.apache.cassandra.cql3.MultiColumnRelation$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SimpleSelection: boolean isAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing: boolean isAggregate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean isColumnRestrictedByEq(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification: org.apache.cassandra.db.aggregation.AggregationSpecification aggregatePkPrefix(org.apache.cassandra.db.ClusteringComparator,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification$AggregateByPkPrefix: void <init>(org.apache.cassandra.db.ClusteringComparator,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification: void <init>(org.apache.cassandra.db.aggregation.AggregationSpecification$Kind,org.apache.cassandra.db.aggregation.AggregationSpecification$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification: void <init>(org.apache.cassandra.db.aggregation.AggregationSpecification$Kind)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions$isInstance__256: java.util.function.Predicate bootstrap$(java.lang.Class)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: java.util.Set getRestrictions(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: java.util.Set getRestrictions(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSetWrapper: java.util.Set getRestrictions(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: java.util.Set getRestrictions(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: org.apache.cassandra.cql3.restrictions.Restrictions getRestrictions(org.apache.cassandra.config.ColumnDefinition$Kind)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions$lambda_isColumnRestrictedByEq_0__257: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions$lambda_isColumnRestrictedByEq_0__257: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions$isInstance__256: void <init>(java.lang.Class)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$RawStatement: java.util.Map getOrderingIndex(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.selection.Selection,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator: void <init>(int,java.util.Comparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$CompositeComparator: void <init>(java.util.List,java.util.List,org.apache.cassandra.cql3.statements.SelectStatement$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$CompositeComparator: void <init>(java.util.List,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$ColumnComparator: void <init>(org.apache.cassandra.cql3.statements.SelectStatement$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$ColumnComparator: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: java.util.Map getOrderingIndex(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: void addColumnForOrdering(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: int addOrderingColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: int getResultSetIndex(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing: int addOrderingColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection$SelectionWithProcessing: int getResultSetIndex(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: int getColumnIndex(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selector$Factory: boolean isSimpleSelectorFactory(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SimpleSelector$1: boolean isSimpleSelectorFactory(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: int size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: void addSelectorForOrdering(org.apache.cassandra.config.ColumnDefinition,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean needFiltering()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.RestrictionSet: boolean hasMultipleContains()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: java.lang.String getKeyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.lang.Iterable primaryKeyColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: org.apache.cassandra.config.ColumnDefinition getBaseColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: java.nio.ByteBuffer getValueForPK(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: long maxTimestamp()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: boolean hasSamePrimaryKeyColumnsAsBaseTable()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void addCell(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BufferCell: org.apache.cassandra.db.rows.Cell withUpdatedColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: org.apache.cassandra.db.DecoratedKey makeCurrentPartitionKey()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void deleteOldEntryInternal(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: void addDifferentCells(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewUpdateGenerator: long computeTimestampForEntryDeletion(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.ChecksumMismatchException: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: org.apache.cassandra.config.ParameterizedClass createCompressionConfig(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: org.apache.cassandra.hints.HintsDescriptor$EncryptionData createEncryption(com.google.common.collect.ImmutableMap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor$EncryptionData: void <init>(javax.crypto.Cipher,org.apache.cassandra.io.compress.ICompressor,com.google.common.collect.ImmutableMap,org.apache.cassandra.hints.HintsDescriptor$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: org.apache.cassandra.io.compress.ICompressor getCompressor()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: java.util.Map toHeaderParameters()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: javax.crypto.Cipher getEncryptor()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: javax.crypto.Cipher getDecryptor()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.security.EncryptionContext getEncryptionContext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: org.apache.cassandra.security.EncryptionContext createFromMap(java.util.Map,org.apache.cassandra.security.EncryptionContext)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Hex: java.lang.String bytesToHex(byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.TransparentDataEncryptionOptions: void <init>(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.TransparentDataEncryptionOptions: void <init>(java.lang.String,java.lang.String,org.apache.cassandra.config.ParameterizedClass)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.TransparentDataEncryptionOptions: void <init>(boolean,java.lang.String,java.lang.String,org.apache.cassandra.config.ParameterizedClass)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory: javax.crypto.Cipher getDecryptor(java.lang.String,java.lang.String,byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory: javax.crypto.Cipher buildCipher(java.lang.String,java.lang.String,byte[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory: java.security.Key retrieveKey(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory$CachedCipher: void <init>(int,java.lang.String,javax.crypto.Cipher,org.apache.cassandra.security.CipherFactory$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory$CachedCipher: void <init>(int,java.lang.String,javax.crypto.Cipher)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.CipherFactory: javax.crypto.Cipher getEncryptor(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor$EncryptionData: void <init>(javax.crypto.Cipher,org.apache.cassandra.io.compress.ICompressor,com.google.common.collect.ImmutableMap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ParameterizedClass: void <init>(java.lang.String,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.BackPressureState lambda$applyBackPressure$2(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: java.lang.String lambda$toString$3(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: java.lang.String lambda$toString$2(org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: java.lang.String lambda$toString$1(org.apache.cassandra.db.marshal.CollectionType,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: java.lang.String getFilename()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.lang.String lambda$getBuiltIndexes$2(org.apache.cassandra.cql3.UntypedResultSet$Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: org.apache.cassandra.utils.Throwables$DiscreteAction lambda$close$1(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State$lambda_null_0__556: org.apache.cassandra.utils.Throwables$DiscreteAction bootstrap$(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State$lambda_null_0__556: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: org.apache.cassandra.utils.Throwables$DiscreteAction lambda$perform$1(org.apache.cassandra.utils.Throwables$FileOpType,java.lang.String,org.apache.cassandra.utils.Throwables$DiscreteAction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables$lambda_null_0__557: org.apache.cassandra.utils.Throwables$DiscreteAction bootstrap$(org.apache.cassandra.utils.Throwables$DiscreteAction,org.apache.cassandra.utils.Throwables$FileOpType,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables$lambda_null_0__557: void <init>(org.apache.cassandra.utils.Throwables$DiscreteAction,org.apache.cassandra.utils.Throwables$FileOpType,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void lambda$readSchema$4(java.util.Collection,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.LegacySchemaMigrator$Keyspace readKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$Keyspace: void <init>(long,java.lang.String,org.apache.cassandra.schema.KeyspaceParams,java.util.Collection,java.util.Collection,java.util.Collection,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: long readKeyspaceTimestamp(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.KeyspaceParams readKeyspaceParams(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: java.util.Collection readTables(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: java.util.Collection readTypes(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: java.util.Collection readFunctions(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readKeyspace_5__198: java.util.function.Consumer bootstrap$(org.apache.cassandra.schema.Functions$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: java.util.Collection readAggregates(org.apache.cassandra.schema.Functions,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.cql3.UntypedResultSet query(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readAggregates_14__199: java.util.function.Consumer bootstrap$(com.google.common.collect.HashMultimap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readAggregates_15__200: java.util.function.Consumer bootstrap$(java.util.Collection,org.apache.cassandra.schema.Functions,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readAggregates_15__200: void <init>(java.util.Collection,org.apache.cassandra.schema.Functions,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readAggregates_14__199: void <init>(com.google.common.collect.HashMultimap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet executeOnceInternal(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UseStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.TruncateException: void <init>(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.RequestExecutionException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,java.lang.String,java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterViewStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropViewStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropAggregateStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropFunctionStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateFunctionStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTypeStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTriggerStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTriggerStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterKeyspaceStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTableStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropKeyspaceStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateKeyspaceStatement: org.apache.cassandra.transport.Event$SchemaChange announceMigration(org.apache.cassandra.service.QueryState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Void: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$SchemaChange: void <init>(org.apache.cassandra.transport.Event$SchemaChange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.KeyspaceAttributes: org.apache.cassandra.schema.KeyspaceParams asNewKeyspaceParams()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateKeyspaceStatement: java.lang.String keyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Event$SchemaChange: void <init>(org.apache.cassandra.transport.Event$SchemaChange$Change,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewKeyspace(org.apache.cassandra.schema.KeyspaceMetadata,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewKeyspace(org.apache.cassandra.schema.KeyspaceMetadata,long,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceMetadata: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.AlreadyExistsException: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeCreateKeyspaceMutation(org.apache.cassandra.schema.KeyspaceMetadata,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announce(org.apache.cassandra.db.Mutation$SimpleBuilder,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$MutationBuilder: org.apache.cassandra.db.Mutation build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: java.util.concurrent.Future announce(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.Set getLiveMembers()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$1: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void pushSchemaMutation(java.net.InetAddress,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeCreateKeyspaceMutation(java.lang.String,org.apache.cassandra.schema.KeyspaceParams,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_2__100: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_3__101: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_4__102: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_5__103: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_6__104: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_6__104: void <init>(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_5__103: void <init>(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_4__102: void <init>(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_3__101: void <init>(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_makeCreateKeyspaceMutation_2__100: void <init>(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.ReplicationParams: java.util.Map asMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$MutationBuilder: org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder update(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$MutationBuilder: org.apache.cassandra.db.Mutation$SimpleBuilder timestamp(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.DecoratedKey decorate(org.apache.cassandra.config.CFMetaData,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.Mutation$SimpleBuilder simpleBuilder(java.lang.String,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$MutationBuilder: void <init>(java.lang.String,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.AlreadyExistsException: void <init>(java.lang.String,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.ConfigurationException: void <init>(org.apache.cassandra.exceptions.ExceptionCode,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceParams: void validate(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceMetadata: java.lang.Iterable tablesAndViews()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean isNameValid(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceMetadata$validate__305: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceMetadata$validate__305: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views: java.lang.Iterable metadatas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views$lambda_metadatas_0__306: com.google.common.base.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Views$lambda_metadatas_0__306: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.ReplicationParams: void validate(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.AbstractReplicationStrategy: void validateReplicationStrategy(java.lang.String,java.lang.Class,org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.IEndpointSnitch,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.AbstractReplicationStrategy: org.apache.cassandra.locator.AbstractReplicationStrategy createInternal(java.lang.String,java.lang.Class,org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.IEndpointSnitch,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Event$SchemaChange: void <init>(org.apache.cassandra.transport.Event$SchemaChange$Change,org.apache.cassandra.transport.Event$SchemaChange$Target,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Event$SchemaChange: void <init>(org.apache.cassandra.transport.Event$SchemaChange$Change,org.apache.cassandra.transport.Event$SchemaChange$Target,java.lang.String,java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Event: void <init>(org.apache.cassandra.transport.Event$Type,org.apache.cassandra.transport.Event$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Event: void <init>(org.apache.cassandra.transport.Event$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.KeyspaceAttributes: java.util.Map getAllReplicationOptions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PropertyDefinitions: java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PropertyDefinitions: java.lang.String getSimple(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PropertyDefinitions: java.util.Map getMap(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Raw: org.apache.cassandra.cql3.statements.IndexTarget prepare(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexPropDefs: java.util.Map getOptions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes: java.lang.String getAvailableIndexName(java.lang.String,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: org.apache.cassandra.schema.IndexMetadata fromIndexTargets(org.apache.cassandra.config.CFMetaData,java.util.List,java.lang.String,org.apache.cassandra.schema.IndexMetadata$Kind,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement$lambda_announceMigration_0__30: com.google.common.base.Predicate bootstrap$(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceColumnFamilyUpdate(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceColumnFamilyUpdate(org.apache.cassandra.config.CFMetaData,java.util.Collection,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeUpdateTableMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.CFMetaData,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$lambda_announceColumnFamilyUpdate_2__99: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$lambda_announceColumnFamilyUpdate_2__99: void <init>(org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.schema.Triggers getTriggers()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Map getColumnMetadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addTableToSchemaMutation(org.apache.cassandra.config.CFMetaData,boolean,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void dropColumnFromSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addColumnToSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addDroppedColumnToSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.CFMetaData$DroppedColumn,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: com.google.common.collect.MapDifference triggersDiff(org.apache.cassandra.schema.Triggers,org.apache.cassandra.schema.Triggers)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void dropTriggerFromSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.TriggerMetadata,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addTriggerToSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.TriggerMetadata,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: com.google.common.collect.MapDifference indexesDiff(org.apache.cassandra.schema.Indexes,org.apache.cassandra.schema.Indexes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void dropIndexFromSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.IndexMetadata,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addIndexToSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.IndexMetadata,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addUpdatedIndexToSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.schema.IndexMetadata,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$RowBuilder: org.apache.cassandra.db.rows.Row$SimpleBuilder delete()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_indexesDiff_7__110: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_indexesDiff_8__111: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_indexesDiff_8__111: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_indexesDiff_7__110: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_triggersDiff_9__112: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_triggersDiff_10__113: java.util.function.Consumer bootstrap$(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_triggersDiff_10__113: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_triggersDiff_9__112: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.marshal.AbstractType expandUserTypes(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: java.util.List getComponents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: java.util.List expandUserTypes(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$expandUserTypes__140: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$expandUserTypes__140: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.config.ColumnDefinition$ClusteringOrder clusteringOrder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Set flags()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.Set flagsToStrings(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addTableParamsToRowBuilder(org.apache.cassandra.schema.TableParams,org.apache.cassandra.db.rows.Row$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SpeculativeRetryParam: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: java.util.Map asMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: java.util.Map asMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: java.util.Map asMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: java.lang.String chunkLengthInKB()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: boolean isEnabled()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: java.lang.String rowsPerPartitionAsString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CachingParams: java.lang.String keysAsString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$toString__124: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$toLowerCase__125: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$toLowerCase__125: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$toString__124: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: void validate(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompactionParams: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomCalculations: double minSupportedBloomFilterFpChance()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams: void fail(java.lang.String,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: void validateCustomIndexOptions(org.apache.cassandra.config.CFMetaData,java.lang.Class,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: boolean isNameValid(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$lambda_validateCustomIndexOptions_1__539: com.google.common.base.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$lambda_validateCustomIndexOptions_1__539: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement$lambda_announceMigration_0__30: void <init>(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: void <init>(java.lang.String,java.util.Map,org.apache.cassandra.schema.IndexMetadata$Kind)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$lambda_fromIndexTargets_0__80: java.util.function.Function bootstrap$(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$lambda_fromIndexTargets_0__80: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: java.lang.String getDefaultIndexName(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexPropDefs: java.util.Map getRawOptions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget: void <init>(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.cql3.statements.IndexTarget$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropKeyspaceStatement: java.lang.String keyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceKeyspaceDrop(java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeDropKeyspaceMutation(org.apache.cassandra.schema.KeyspaceMetadata,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$PartitionUpdateBuilder: org.apache.cassandra.db.partitions.PartitionUpdate$SimpleBuilder delete()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceColumnFamilyDrop(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeDropTableMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.config.CFMetaData,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void dropDroppedColumnFromSchemaMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.CFMetaData$DroppedColumn,long,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement: org.apache.cassandra.config.CFMetaData lookupIndexedTable()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement$lambda_lookupIndexedTable_0__252: java.util.function.Supplier bootstrap$(org.apache.cassandra.cql3.statements.DropIndexStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement$lambda_lookupIndexedTable_0__252: void <init>(org.apache.cassandra.cql3.statements.DropIndexStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData addColumnDefinition(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition: org.apache.cassandra.config.ViewDefinition copy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition: void renameColumn(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition: boolean includes(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition$Raw$Literal: org.apache.cassandra.cql3.ColumnIdentifier getIdentifier(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatementColumn: org.apache.cassandra.config.ColumnDefinition$Raw getColumnName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatementColumn: java.lang.Boolean getStaticType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatementColumn: org.apache.cassandra.cql3.CQL3Type$Raw getColumnType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: org.apache.cassandra.schema.TableParams asAlteredTableParams(org.apache.cassandra.schema.TableParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.QueryState: long getTimestamp()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: org.apache.cassandra.config.CFMetaData validateColumnFamily(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: java.lang.Iterable findAll(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatement$lambda_announceMigration_0__261: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatement$lambda_announceMigration_0__261: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$lambda_findAll_0__66: com.google.common.base.Predicate bootstrap$(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$lambda_findAll_0__66: void <init>(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: long getTimestamp()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: org.apache.cassandra.schema.TableParams build(org.apache.cassandra.schema.TableParams$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: java.util.UUID getId()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: boolean hasOption(org.apache.cassandra.schema.TableParams$Option)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: double getDouble(org.apache.cassandra.schema.TableParams$Option)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: java.lang.String getString(org.apache.cassandra.schema.TableParams$Option)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: void maybeLogReadRepairChanceDeprecationWarning()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: int getInt(org.apache.cassandra.schema.TableParams$Option)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: java.util.Map getMap(org.apache.cassandra.schema.TableParams$Option)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: java.lang.Double getDeprecatedCrcCheckChance(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.TableParams$Option: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PropertyDefinitions: java.lang.Boolean hasProperty(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PropertyDefinitions: void validate(java.util.Set,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData copy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData copy(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.List copy(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.db.PartitionColumns copy(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData copyOpts(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.config.ColumnDefinition copy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: void renameColumn(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition: java.util.List whereClauseToRelations(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition$lambda_renameColumn_0__605: java.util.function.Function bootstrap$(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: java.lang.String relationsToWhereClause(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.config.ColumnDefinition$Raw getEntity()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: org.apache.cassandra.cql3.Term$Raw getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: java.util.List getInValues()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.MultiColumnRelation: boolean isMultiColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: org.apache.cassandra.cql3.Term$Raw getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.TokenRelation: java.util.List getInValues()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: org.apache.cassandra.cql3.Term$Raw getValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SingleColumnRelation: java.util.List getInValues()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Relation: boolean isMultiColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$toString__268: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$getText__267: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$getText__267: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View$toString__268: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition$lambda_renameColumn_0__605: void <init>(org.apache.cassandra.config.ColumnDefinition$Raw,org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition$whereClause__606: org.apache.cassandra.cql3.CQLFragmentParser$CQLParserFunction bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ViewDefinition$whereClause__606: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.config.ColumnDefinition withNewName(org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: boolean isPartOfCellName(boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: boolean removeColumnDefinition(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData addOrReplaceColumnDefinition(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$lambda_renameColumn_1__609: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$lambda_renameColumn_1__609: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: org.apache.cassandra.db.PartitionColumns without(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns: org.apache.cassandra.db.Columns without(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: java.lang.Object[] remove(java.lang.Object[],java.util.Comparator,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: java.lang.Object[] removeFromLeaf(java.lang.Object[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree: void replaceInSitu(java.lang.Object[],int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: java.lang.Object[] copyIfNeeded(java.lang.Object[],boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: java.lang.Object[] rotateLeft(java.lang.Object[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: java.lang.Object[] rotateRight(java.lang.Object[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: java.lang.Object[] copyWithKeyAndChildRemoved(java.lang.Object[],int,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: java.lang.Object[] merge(java.lang.Object[],java.lang.Object[],java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: int copyKeys(java.lang.Object[],java.lang.Object[],int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: int copyKeys(java.lang.Object[],java.lang.Object[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: int copyChildren(java.lang.Object[],java.lang.Object[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: int copySizeMap(int[],int[],int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: int copyChildren(java.lang.Object[],java.lang.Object[],int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeRemoval: java.lang.Object[] copyWithKeyAndChildInserted(java.lang.Object[],int,java.lang.Object,int,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.KeyspaceAttributes: org.apache.cassandra.schema.KeyspaceParams asAlteredKeyspaceParams(org.apache.cassandra.schema.KeyspaceParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterKeyspaceStatement: java.lang.String keyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceKeyspaceUpdate(org.apache.cassandra.schema.KeyspaceMetadata,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.KeyspaceAttributes: java.lang.String getReplicationStrategyClass()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.TriggerMetadata: org.apache.cassandra.schema.TriggerMetadata create(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.TriggerMetadata: void <init>(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UTName: java.lang.String getStringTypeName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: java.lang.String keyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: org.apache.cassandra.db.marshal.UserType createType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: void checkForDuplicateNames(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewType(org.apache.cassandra.db.marshal.UserType,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeCreateTypeMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.db.marshal.UserType,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addTypeToSchemaMutation(org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$toString__212: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$asCQL3Type__213: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$toString__214: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$toString__214: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$asCQL3Type__213: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$toString__212: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTypeStatement: java.lang.String keyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceTypeDrop(org.apache.cassandra.db.marshal.UserType,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder dropTypeFromSchemaMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.db.marshal.UserType,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.NativeScalarFunction: boolean isCalledOnNullInput()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Functions: boolean typesMatch(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewFunction(org.apache.cassandra.cql3.functions.UDFunction,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeCreateFunctionMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.cql3.functions.UDFunction,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addFunctionToSchemaMutation(org.apache.cassandra.cql3.functions.UDFunction,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: java.util.List functionArgumentsList(org.apache.cassandra.cql3.functions.AbstractFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_addFunctionToSchemaMutation_11__211: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_addFunctionToSchemaMutation_11__211: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$asCQL3Type__215: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$toString__216: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$toString__216: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$asCQL3Type__215: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropFunctionStatement: java.lang.String getMissingFunctionError()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropFunctionStatement: org.apache.cassandra.cql3.functions.Function findFunction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceFunctionDrop(org.apache.cassandra.cql3.functions.UDFunction,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeDropFunctionMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.cql3.functions.UDFunction,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction: boolean isNative()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.NativeFunction: boolean isNative()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: boolean isNative()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewAggregate(org.apache.cassandra.cql3.functions.UDAggregate,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeCreateAggregateMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.cql3.functions.UDAggregate,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addAggregateToSchemaMutation(org.apache.cassandra.cql3.functions.UDAggregate,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$UserDefined: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Tuple: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Custom: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Collection: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Native: java.lang.String toCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: java.nio.ByteBuffer initialCondition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.db.marshal.AbstractType stateType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.cql3.functions.ScalarFunction finalFunction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: org.apache.cassandra.cql3.functions.ScalarFunction stateFunction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Collection: void generateMapCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion,java.lang.StringBuilder,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Collection: void generateSetOrListCQLLiteral(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion,java.lang.StringBuilder,int,org.apache.cassandra.cql3.CQL3Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropAggregateStatement: org.apache.cassandra.db.marshal.AbstractType prepareType(java.lang.String,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceAggregateDrop(org.apache.cassandra.cql3.functions.UDAggregate,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeDropAggregateMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.cql3.functions.UDAggregate,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawUT: boolean canBeNonFrozen()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: boolean canBeNonFrozen()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: boolean isFrozen()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CFProperties: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TableAttributes: org.apache.cassandra.schema.TableParams asNewTableParams()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement: void add(org.apache.cassandra.config.CFMetaData,java.lang.Iterable,org.apache.cassandra.cql3.statements.CreateViewStatement$AddColumn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.cql3.restrictions.StatementRestrictions getRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ParsedStatement: void setBoundVariables(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean enableMaterializedViews()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$lambda_announceMigration_0__265: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement: boolean getColumnIdentifier(org.apache.cassandra.config.CFMetaData,java.util.Set,boolean,org.apache.cassandra.config.ColumnDefinition$Raw,java.util.List,org.apache.cassandra.cql3.restrictions.StatementRestrictions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder createView(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addPartitionKey__262: org.apache.cassandra.cql3.statements.CreateViewStatement$AddColumn bootstrap$(org.apache.cassandra.config.CFMetaData$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addClusteringColumn__263: org.apache.cassandra.cql3.statements.CreateViewStatement$AddColumn bootstrap$(org.apache.cassandra.config.CFMetaData$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addRegularColumn__264: org.apache.cassandra.cql3.statements.CreateViewStatement$AddColumn bootstrap$(org.apache.cassandra.config.CFMetaData$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewView(org.apache.cassandra.config.ViewDefinition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.AlreadyExistsException: void <init>(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeCreateViewMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.config.ViewDefinition,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void addViewToSchemaMutation(org.apache.cassandra.config.ViewDefinition,boolean,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addRegularColumn__264: void <init>(org.apache.cassandra.config.CFMetaData$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addClusteringColumn__263: void <init>(org.apache.cassandra.config.CFMetaData$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addPartitionKey__262: void <init>(org.apache.cassandra.config.CFMetaData$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean isRestricted(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$lambda_announceMigration_0__265: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addRegularColumn__264: void add(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addClusteringColumn__263: void add(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement$addPartitionKey__262: void add(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceViewDrop(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.config.ViewDefinition getView(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeDropViewMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.config.ViewDefinition,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceViewUpdate(org.apache.cassandra.config.ViewDefinition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void addViewUpdateToMutationBuilder(org.apache.cassandra.config.ViewDefinition,org.apache.cassandra.db.Mutation$SimpleBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeUpdateViewMutation(org.apache.cassandra.db.Mutation$SimpleBuilder,org.apache.cassandra.config.ViewDefinition,org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$Add: org.apache.cassandra.db.marshal.UserType makeUpdatedType(org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: java.lang.String keyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: boolean updateDefinition(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition,java.lang.String,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$Renames: org.apache.cassandra.db.marshal.UserType makeUpdatedType(org.apache.cassandra.db.marshal.UserType,org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$lambda_announceMigration_0__266: java.util.function.Supplier bootstrap$(org.apache.cassandra.cql3.statements.AlterTypeStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceTypeUpdate(org.apache.cassandra.db.marshal.UserType,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceTypeDrop(org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.db.marshal.AbstractType updateWith(org.apache.cassandra.db.marshal.AbstractType,java.lang.String,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: java.util.List updateTypes(java.util.List,java.lang.String,java.nio.ByteBuffer,org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$lambda_announceMigration_0__266: void <init>(org.apache.cassandra.cql3.statements.AlterTypeStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: void checkTypeNotUsedByAggregate(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$lambda_checkTypeNotUsedByAggregate_1__271: java.util.function.Predicate bootstrap$(org.apache.cassandra.cql3.statements.AlterTypeStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$lambda_checkTypeNotUsedByAggregate_2__272: java.util.function.Consumer bootstrap$(org.apache.cassandra.cql3.statements.AlterTypeStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$lambda_checkTypeNotUsedByAggregate_2__272: void <init>(org.apache.cassandra.cql3.statements.AlterTypeStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$lambda_checkTypeNotUsedByAggregate_1__271: void <init>(org.apache.cassandra.cql3.statements.AlterTypeStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: boolean referencesUserType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: boolean referencesUserType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType: boolean referencesUserType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ReversedType: boolean referencesUserType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: boolean referencesUserType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: boolean referencesUserType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: boolean referencesUserType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType: boolean referencesUserType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType$lambda_referencesUserType_0__269: java.util.function.Predicate bootstrap$(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.TupleType$lambda_referencesUserType_0__269: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType$lambda_referencesUserType_0__270: java.util.function.Predicate bootstrap$(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractCompositeType$lambda_referencesUserType_0__270: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType$lambda_referencesUserType_1__399: java.util.function.Predicate bootstrap$(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType$lambda_referencesUserType_1__399: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: org.apache.cassandra.config.CFMetaData getCFMetaData()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewColumnFamily(org.apache.cassandra.config.CFMetaData,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewColumnFamily(org.apache.cassandra.config.CFMetaData,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewColumnFamily(org.apache.cassandra.config.CFMetaData,boolean,boolean,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.db.Mutation$SimpleBuilder makeCreateTableMutation(org.apache.cassandra.schema.KeyspaceMetadata,org.apache.cassandra.config.CFMetaData,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: org.apache.cassandra.config.CFMetaData$Builder metadataBuilder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: boolean hasRegulars()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: java.util.Set usedColumnNames()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$Builder: org.apache.cassandra.config.CFMetaData$Builder addStaticColumn(org.apache.cassandra.cql3.ColumnIdentifier,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternalWithoutCondition(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternalWithConditions(org.apache.cassandra.cql3.BatchQueryOptions,org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.BatchQueryOptions: org.apache.cassandra.cql3.BatchQueryOptions withoutPerStatementVariables(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.BatchQueryOptions$WithoutPerStatementVariables: void <init>(org.apache.cassandra.cql3.QueryOptions,java.util.List,org.apache.cassandra.cql3.BatchQueryOptions$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.BatchQueryOptions$WithoutPerStatementVariables: void <init>(org.apache.cassandra.cql3.QueryOptions,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.BatchQueryOptions: void <init>(org.apache.cassandra.cql3.QueryOptions,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: org.apache.cassandra.utils.Pair makeCasRequest(org.apache.cassandra.cql3.BatchQueryOptions,org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.BatchQueryOptions$WithoutPerStatementVariables: org.apache.cassandra.cql3.QueryOptions forStatement(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.db.rows.RowIterator casInternal(org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.cql3.ResultSet buildCasResultSet(java.lang.String,java.lang.String,org.apache.cassandra.db.rows.RowIterator,java.lang.Iterable,boolean,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.cql3.ResultSet buildCasFailureResultSet(org.apache.cassandra.db.rows.RowIterator,java.lang.Iterable,boolean,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.cql3.ResultSet merge(org.apache.cassandra.cql3.ResultSet,org.apache.cassandra.cql3.ResultSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.ColumnDefinition superColumnValueColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: org.apache.cassandra.config.CFMetaData metadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.selection.Selection$ResultSetBuilder resultSetBuilder(org.apache.cassandra.cql3.QueryOptions,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selection: org.apache.cassandra.cql3.selection.Selection forColumns(org.apache.cassandra.config.CFMetaData,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.cql3.statements.SelectStatement forSelection(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.selection.Selection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: org.apache.cassandra.cql3.restrictions.StatementRestrictions empty(org.apache.cassandra.cql3.statements.StatementType,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: org.apache.cassandra.db.partitions.PartitionUpdate makeUpdates(org.apache.cassandra.db.partitions.FilteredPartition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: boolean appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: org.apache.cassandra.db.SinglePartitionReadCommand readCommand(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.TriggerExecutor: org.apache.cassandra.db.partitions.PartitionUpdate execute(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition: org.apache.cassandra.db.rows.RowIterator rowIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: java.util.UUID getTimeUUIDFromMicros(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionIterators: org.apache.cassandra.db.rows.RowIterator getOnlyElement(org.apache.cassandra.db.partitions.PartitionIterator,org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition: org.apache.cassandra.db.partitions.FilteredPartition create(org.apache.cassandra.db.rows.RowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition: void <init>(org.apache.cassandra.db.rows.RowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder build(org.apache.cassandra.db.rows.RowIterator,org.apache.cassandra.db.DeletionInfo,boolean,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: boolean isReverseOrder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: org.apache.cassandra.db.PartitionColumns columns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionIterators$1Close: void <init>(org.apache.cassandra.db.partitions.PartitionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators: org.apache.cassandra.db.rows.RowIterator row(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.EmptyIterators$EmptyRowIterator: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,boolean,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: java.util.UUID getTimeUUID(long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.FilteredPartition$1: void <init>(org.apache.cassandra.db.partitions.FilteredPartition,java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.TriggerExecutor: java.util.List validateForSinglePartition(java.util.UUID,org.apache.cassandra.db.DecoratedKey,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.TriggerExecutor: java.util.List executeInternal(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate merge(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$unfilteredIterator__246: com.google.common.base.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$unfilteredIterator__246: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.TriggerExecutor: org.apache.cassandra.triggers.ITrigger loadTriggerInstance(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.CustomClassLoader: java.lang.Class loadClass(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDFunction$UDFClassLoader: java.lang.Class loadClass(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.TriggerExecutor: void validateSamePartition(java.util.UUID,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.TriggerExecutor: void validate(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: org.apache.cassandra.db.PartitionColumns columnsToRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$ColumnsConditions: boolean appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$NotExistCondition: boolean appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$ExistCondition: boolean appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$SimpleBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$SimpleInBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTInBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTFieldAccessBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTFieldAccessInBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionInBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$ElementAccessBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$ElementAccessInBound: boolean appliesTo(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Bound: boolean compareWithOperator(org.apache.cassandra.cql3.Operator,org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.db.rows.Cell access$1500(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.db.rows.Cell access$1200(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: java.util.Iterator access$1600(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$ElementAccessBound: int getListIndex(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: java.nio.ByteBuffer access$1700(java.util.Iterator,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.db.rows.Cell getCell(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: java.nio.ByteBuffer cellValueAtIndex(java.util.Iterator,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: java.util.Iterator getCells(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.db.rows.Cell getCell(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Bound: boolean isSatisfiedByValue(java.nio.ByteBuffer,org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionBound: boolean valueAppliesTo(org.apache.cassandra.db.marshal.CollectionType,java.util.Iterator,org.apache.cassandra.cql3.Term$Terminal,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionBound: boolean listAppliesTo(org.apache.cassandra.db.marshal.ListType,java.util.Iterator,java.util.List,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionBound: boolean setAppliesTo(org.apache.cassandra.db.marshal.SetType,java.util.Iterator,java.util.Set,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionBound: boolean mapAppliesTo(org.apache.cassandra.db.marshal.MapType,java.util.Iterator,java.util.Map,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: boolean access$1800(int,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: boolean evaluateComparisonWithOperator(int,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionBound: boolean setOrListAppliesTo(org.apache.cassandra.db.marshal.AbstractType,java.util.Iterator,java.util.Iterator,org.apache.cassandra.cql3.Operator,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$RangeDeletion: void applyUpdates(org.apache.cassandra.db.partitions.FilteredPartition,org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$RowUpdate: void applyUpdates(org.apache.cassandra.db.partitions.FilteredPartition,org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: org.apache.cassandra.db.PartitionColumns updatedColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.db.PartitionColumns updatedColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns$Builder: org.apache.cassandra.db.PartitionColumns$Builder addAll(org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$RowUpdate: org.apache.cassandra.cql3.statements.ModificationStatement access$500(org.apache.cassandra.cql3.statements.CQL3CasRequest$RowUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean requiresRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: int getTimeToLive(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DeleteStatement: void addUpdateForKey(org.apache.cassandra.db.partitions.PartitionUpdate,org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement: void addUpdateForKey(org.apache.cassandra.db.partitions.PartitionUpdate,org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.cql3.QueryOptions,long,int,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$SetterByField: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Discarder: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Discarder: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Substracter: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Putter: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Adder: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Appender: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Adder: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Prepender: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DeleterByField: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$ElementDiscarder: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$DiscarderByIndex: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Deleter: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Setter: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Setter: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Setter: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Setter: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$AdderByKey: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$SubtracterByKey: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$SetterByKey: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$SetterByIndex: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$DiscarderByKey: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Setter: void execute(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.StatementType: boolean isInsert()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.util.List getStaticOperations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean updatesStaticRow()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.util.List getRegularOperations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean updatesRegularRows()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: org.apache.cassandra.db.rows.Row buildRow()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void newRow(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void addPrimaryKeyLivenessInfo()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Setter: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: java.util.List regularOperations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: boolean appliesToStaticColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: java.util.List staticOperations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void addCell(org.apache.cassandra.config.ColumnDefinition,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void addTombstone(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void addTombstone(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void addCell(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.rows.CellPath,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: org.apache.cassandra.db.rows.Cell getCellByIndex(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: org.apache.cassandra.db.rows.Row getPrefetchedRow(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: org.apache.cassandra.db.Clustering currentClustering()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists: int access$000(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists: int existingSize(org.apache.cassandra.db.rows.Row,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.Row$Builder copy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: org.apache.cassandra.db.rows.BTreeRow$Builder copy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: void <init>(org.apache.cassandra.db.rows.BTreeRow$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: org.apache.cassandra.utils.btree.BTree$Builder copy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: void <init>(org.apache.cassandra.utils.btree.BTree$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void addCounter(org.apache.cassandra.config.ColumnDefinition,long,org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void setComplexDeletionTimeForOverwrite(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Appender: void doAppend(org.apache.cassandra.cql3.Term$Terminal,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Adder: void doAdd(org.apache.cassandra.cql3.Term$Terminal,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Putter: void doPut(org.apache.cassandra.cql3.Term$Terminal,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.db.rows.CellPath cellPathForField(org.apache.cassandra.cql3.FieldIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Value: org.apache.cassandra.db.marshal.UserType access$000(org.apache.cassandra.cql3.UserTypes$Value)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void setComplexDeletionTime(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$PrecisionTime: org.apache.cassandra.cql3.Lists$PrecisionTime getNext(long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: byte[] getTimeUUIDBytes(long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDGen: long createTimeUnsafe(long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$PrecisionTime: void <init>(long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void addCounter(org.apache.cassandra.config.ColumnDefinition,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: org.apache.cassandra.db.RangeTombstone makeRangeTombstone(org.apache.cassandra.db.ClusteringComparator,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: void addRowDeletion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: org.apache.cassandra.db.DeletionTime deletionTime()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UpdateParameters: org.apache.cassandra.db.RangeTombstone makeRangeTombstone(org.apache.cassandra.db.Slice)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes: int getTimeToLive(org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ExpirationDateOverflowHandling: void maybeApplyExpirationDateOverflowPolicy(org.apache.cassandra.config.CFMetaData,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.lang.Iterable allOperations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Discarder: boolean requiresRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$DiscarderByIndex: boolean requiresRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$SetterByIndex: boolean requiresRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation: boolean requiresRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: java.util.Iterator iterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DeleteStatement: void addUpdateForKey(org.apache.cassandra.db.partitions.PartitionUpdate,org.apache.cassandra.db.Slice,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement: void addUpdateForKey(org.apache.cassandra.db.partitions.PartitionUpdate,org.apache.cassandra.db.Slice,org.apache.cassandra.cql3.UpdateParameters)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean clusteringKeyRestrictionsHasIN()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.lang.Iterable getColumnsWithConditions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean hasIfExistCondition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean hasIfNotExistCondition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: void addConditions(org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean hasConditions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.util.NavigableSet createClustering(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.db.Slices createSlices(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean hasSlices()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.cql3.restrictions.StatementRestrictions getRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.util.List buildPartitionKeyNames(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes: long getTimestamp(long,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: void addRowUpdate(org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.ModificationStatement,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: void addRangeDeletion(org.apache.cassandra.db.Slice,org.apache.cassandra.cql3.statements.ModificationStatement,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,boolean,org.apache.cassandra.db.PartitionColumns,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$RangeDeletion: void <init>(org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.db.Slice,org.apache.cassandra.cql3.statements.ModificationStatement,org.apache.cassandra.cql3.QueryOptions,long,org.apache.cassandra.cql3.statements.CQL3CasRequest$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$RangeDeletion: void <init>(org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.db.Slice,org.apache.cassandra.cql3.statements.ModificationStatement,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$RowUpdate: void <init>(org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.ModificationStatement,org.apache.cassandra.cql3.QueryOptions,long,org.apache.cassandra.cql3.statements.CQL3CasRequest$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$RowUpdate: void <init>(org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.ModificationStatement,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractConditions: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.db.Slices toSlices(java.util.SortedSet,java.util.SortedSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Slice: boolean isEmpty(org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean appliesOnlyToStaticColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CBuilder$1: org.apache.cassandra.db.Clustering build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean appliesOnlyToStaticColumns(org.apache.cassandra.cql3.Operations,org.apache.cassandra.cql3.Conditions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: boolean appliesToRegularColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractConditions: boolean appliesToStaticColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractConditions: boolean appliesToRegularColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: boolean appliesToStaticColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: boolean appliesToRegularColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: void addConditionsTo(org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.IfExistsCondition: void addConditionsTo(org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.IfNotExistsCondition: void addConditionsTo(org.apache.cassandra.cql3.statements.CQL3CasRequest,org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: void addNotExist(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$NotExistCondition: void <init>(org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.CQL3CasRequest$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: void addExistsCondition(org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.CQL3CasRequest$RowCondition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: void setConditionsForRow(org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.CQL3CasRequest$RowCondition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: org.apache.cassandra.cql3.statements.CQL3CasRequest$RowCondition getConditionsForRow(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$NotExistCondition: void <init>(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$RowCondition: void <init>(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: void addExist(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$ExistCondition: void <init>(org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.CQL3CasRequest$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$ExistCondition: void <init>(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest: void addConditions(org.apache.cassandra.db.Clustering,java.util.Collection,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$ColumnsConditions: void addConditions(java.util.Collection,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$ColumnsConditions: void <init>(org.apache.cassandra.db.Clustering,org.apache.cassandra.cql3.statements.CQL3CasRequest$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CQL3CasRequest$ColumnsConditions: void <init>(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$ElementAccessBound: java.nio.ByteBuffer getCollectionElementValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Bound: java.nio.ByteBuffer getCollectionElementValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition$Bound bind(org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$ElementAccessInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$ElementAccessBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTFieldAccessInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTFieldAccessBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$SimpleInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$SimpleBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.cql3.ColumnCondition$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$SimpleBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Bound: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.FieldIdentifier access$1000(org.apache.cassandra.cql3.ColumnCondition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.Term access$1100(org.apache.cassandra.cql3.ColumnCondition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$SimpleInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: java.util.List access$1300(org.apache.cassandra.cql3.ColumnCondition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTFieldAccessBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$UDTFieldAccessInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.Term access$1400(org.apache.cassandra.cql3.ColumnCondition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$CollectionInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$ElementAccessBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$ElementAccessInBound: void <init>(org.apache.cassandra.cql3.ColumnCondition,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: boolean isIfNotExists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractConditions: boolean isIfNotExists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.IfNotExistsCondition: boolean isIfNotExists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: boolean isIfExists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.IfExistsCondition: boolean isIfExists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractConditions: boolean isIfExists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: java.lang.Iterable getColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractConditions: java.lang.Iterable getColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: java.util.Collection getColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_getColumns_0__253: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_getColumns_0__253: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: void apply()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: java.util.Collection getMutations(org.apache.cassandra.cql3.BatchQueryOptions,boolean,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: void addUpdates(org.apache.cassandra.cql3.statements.UpdatesCollector,org.apache.cassandra.cql3.QueryOptions,boolean,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: boolean isLogged()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: int updatedRows()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdatesCollector: void <init>(java.util.Map,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdatesCollector: java.util.Collection toMutations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdatesCollector: void validateIndexedColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractClusteringPrefix: int dataSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$DefaultQueryOptions: org.apache.cassandra.db.ConsistencyLevel getConsistency()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.cql3.UpdateParameters makeUpdateParameters(java.util.Collection,java.util.NavigableSet,org.apache.cassandra.cql3.QueryOptions,boolean,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.cql3.UpdateParameters makeUpdateParameters(java.util.Collection,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.db.filter.DataLimits,boolean,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdatesCollector: org.apache.cassandra.db.partitions.PartitionUpdate getPartitionUpdate(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateKey(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.partitions.PartitionUpdate get(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdatesCollector: org.apache.cassandra.db.Mutation getMutation(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdatesCollector: java.util.Map keyspaceMap(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: void <init>(org.apache.cassandra.db.Mutation,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: org.apache.cassandra.db.Mutation getMutation()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: long getTimestamp(long,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.util.Map readRequiredLists(java.util.Collection,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.db.filter.DataLimits,boolean,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: void validateForRead(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.util.Map asMaterializedMap(org.apache.cassandra.db.partitions.PartitionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: org.apache.cassandra.db.partitions.PartitionIterator execute(org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternalWithoutCondition(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.transport.messages.ResultMessage executeInternalWithCondition(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.cql3.ResultSet buildCasResultSet(org.apache.cassandra.db.rows.RowIterator,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.cql3.statements.CQL3CasRequest makeCasRequest(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: long getTimestamp(org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.db.PartitionColumns conditionColumns()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$SpecificOptions: long access$600(org.apache.cassandra.cql3.QueryOptions$SpecificOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: java.util.Collection getMutations(org.apache.cassandra.cql3.QueryOptions,boolean,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.transport.messages.ResultMessage$Rows executeInternal(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.KeyspaceAttributes: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateKeyspaceNotSystem(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexPropDefs: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: void validateTargetColumnIsMapIfIndexInvolvesKeys(boolean,org.apache.cassandra.cql3.statements.IndexTarget)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: void validateIsSimpleIndexIfTargetColumnNotCollection(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.statements.IndexTarget)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: void validateNotFullIndex(org.apache.cassandra.cql3.statements.IndexTarget)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: void validateForFrozenCollection(org.apache.cassandra.cql3.statements.IndexTarget)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: void validateTargetsForMultiColumnIndex(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget$Type: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.KeyspaceAttributes: java.util.Map getReplicationOptions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: java.lang.String getRoleName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: boolean exists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void ensureNotAnonymous()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: java.lang.String getKeyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: boolean exists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: boolean exists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: boolean exists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.IRoleManager getRoleManager()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthorizationStatement: org.apache.cassandra.auth.IResource maybeCorrectResource(org.apache.cassandra.auth.IResource,org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: java.lang.String getTable()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: java.lang.String getKeyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: boolean isTableLevel()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: boolean isRootLevel()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: boolean hasParent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.UnauthorizedException: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void validateLogin()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleOptions: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleOptions: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: org.apache.cassandra.auth.AuthenticatedUser getUser()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw$RawUT: boolean isUDT()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CQL3Type$Raw: boolean isUDT()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes: boolean isTimestampSet()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes: boolean isTimeToLiveSet()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean isView()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean isCounter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readKeyspace_5__198: void <init>(org.apache.cassandra.schema.Functions$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readFunctions_12__201: java.util.function.Consumer bootstrap$(com.google.common.collect.HashMultimap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readFunctions_13__202: java.util.function.Consumer bootstrap$(java.util.Collection,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readFunctions_13__202: void <init>(java.util.Collection,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readFunctions_12__201: void <init>(com.google.common.collect.HashMultimap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTypes_9__203: java.util.function.Consumer bootstrap$(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTypes_10__204: java.util.function.Consumer bootstrap$(java.util.Collection,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTypes_10__204: void <init>(java.util.Collection,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTypes_9__203: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTables_6__205: java.util.function.Consumer bootstrap$(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTables_7__206: java.util.function.Consumer bootstrap$(java.util.Collection,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTables_7__206: void <init>(java.util.Collection,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTables_6__205: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.util.Map fromJsonMap(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void lambda$readKeyspace$5(org.apache.cassandra.schema.Functions$Builder,org.apache.cassandra.schema.LegacySchemaMigrator$Function)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void lambda$readTables$7(java.util.Collection,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.LegacySchemaMigrator$Table readTable(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$Table: void <init>(long,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: long readTableTimestamp(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.config.CFMetaData readTableMetadata(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.config.CFMetaData decodeTableMetadata(java.lang.String,org.apache.cassandra.cql3.UntypedResultSet$Row,org.apache.cassandra.cql3.UntypedResultSet,org.apache.cassandra.cql3.UntypedResultSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: boolean calculateIsDense(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.cql3.UntypedResultSet,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: java.lang.Iterable filterOutRedundantRowsForSparse(org.apache.cassandra.cql3.UntypedResultSet,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.util.UUID generateLegacyCfId(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: boolean checkNeedsUpgrade(java.lang.Iterable,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: java.util.List createColumnsFromColumnRows(java.lang.Iterable,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,boolean,boolean,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void addDefinitionForUpgrade(java.util.List,java.lang.String,java.lang.String,boolean,boolean,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.Indexes createIndexesFromColumnRows(org.apache.cassandra.config.CFMetaData,java.lang.Iterable,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,boolean,boolean,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void addDroppedColumns(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.marshal.AbstractType,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.TableParams decodeTableParams(org.apache.cassandra.cql3.UntypedResultSet$Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.Triggers createTriggersFromTriggerRows(org.apache.cassandra.cql3.UntypedResultSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_createTriggersFromTriggerRows_8__209: java.util.function.Consumer bootstrap$(org.apache.cassandra.schema.Triggers$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_createTriggersFromTriggerRows_8__209: void <init>(org.apache.cassandra.schema.Triggers$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.CachingParams cachingFromRow(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.CompactionParams compactionFromRow(org.apache.cassandra.cql3.UntypedResultSet$Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: java.lang.Class createCompactionStrategy(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: int componentsCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Indexes$Builder: org.apache.cassandra.schema.Indexes$Builder add(org.apache.cassandra.schema.IndexMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$Kind: org.apache.cassandra.schema.IndexMetadata$Kind valueOf(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.config.ColumnDefinition createColumnFromColumnRow(org.apache.cassandra.cql3.UntypedResultSet$Row,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,boolean,boolean,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata: org.apache.cassandra.schema.IndexMetadata fromLegacyMetadata(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition,java.lang.String,org.apache.cassandra.schema.IndexMetadata$Kind,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.IndexTarget: java.lang.String asCqlString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnIdentifier: java.lang.String toCQLString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.SetType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ListType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: org.apache.cassandra.db.marshal.AbstractType freezeNestedMulticellTypes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.config.ColumnDefinition$Kind deserializeKind(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables: org.apache.cassandra.db.marshal.AbstractType columnDefinitionComparator(java.lang.String,boolean,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.db.marshal.AbstractType parseType(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType$lambda_freezeNestedMulticellTypes_0__432: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.UserType$lambda_freezeNestedMulticellTypes_0__432: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables: org.apache.cassandra.db.CompactTables$DefaultNames defaultNameGenerator(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.config.ColumnDefinition regularDef(java.lang.String,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.config.ColumnDefinition clusteringDef(java.lang.String,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: boolean isEmptyCompactValueColumn(org.apache.cassandra.cql3.UntypedResultSet$Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: boolean hasKind(java.lang.Iterable,org.apache.cassandra.config.ColumnDefinition$Kind)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: boolean hasRegularColumns(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: boolean isCQL3OnlyPKComparator(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void lambda$readTypes$10(java.util.Collection,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.schema.LegacySchemaMigrator$Type readType(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$Type: void <init>(long,org.apache.cassandra.db.marshal.UserType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: long readTypeTimestamp(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: org.apache.cassandra.db.marshal.UserType readTypeMetadata(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTypeMetadata_11__207: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$parseType__208: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$parseType__208: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readTypeMetadata_11__207: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void storeKeyspaceInNewSchemaTables(org.apache.cassandra.schema.LegacySchemaMigrator$Keyspace)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void migrateBuiltIndexesForKeyspace(org.apache.cassandra.schema.LegacySchemaMigrator$Keyspace)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$migrateBuiltIndexesForTable__217: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$migrateBuiltIndexesForTable__217: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void lambda$announceColumnFamilyUpdate$2(org.apache.cassandra.db.Mutation$SimpleBuilder,org.apache.cassandra.config.ViewDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.SelectorFactories: void lambda$addFunctionsTo$0(java.util.List,org.apache.cassandra.cql3.selection.Selector$Factory)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.Selector$Factory: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.selection.AbstractFunctionSelector$1: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.functions.UDAggregate: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: void lambda$addFunctionsTo$1(java.util.List,org.apache.cassandra.cql3.Operation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: void lambda$addFunctionsTo$0(java.util.List,org.apache.cassandra.cql3.Operation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void migrateBuiltIndexesForTable(org.apache.cassandra.schema.LegacySchemaMigrator$Table)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_migrateBuiltIndexesForTable_0__358: java.util.function.Consumer bootstrap$(org.apache.cassandra.schema.LegacySchemaMigrator$Table)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_migrateBuiltIndexesForTable_0__358: void <init>(org.apache.cassandra.schema.LegacySchemaMigrator$Table)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: void lambda$printContentsWithAnyErrors$0(java.lang.StringBuilder,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplica: void printLineWithAnyError(java.lang.StringBuilder,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: void lambda$sstableMap$2(org.codehaus.jackson.node.ArrayNode,org.apache.cassandra.db.compaction.CompactionLogger$CompactionStrategyAndTableFunction,org.apache.cassandra.db.compaction.CompactionStrategyManager,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger$describeSSTable__534: org.codehaus.jackson.JsonNode apply(org.apache.cassandra.db.compaction.AbstractCompactionStrategy,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionLogger: org.codehaus.jackson.JsonNode describeSSTable(org.apache.cassandra.db.compaction.AbstractCompactionStrategy,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: void lambda$addFunctionsTo$2(java.util.List,org.apache.cassandra.cql3.ColumnCondition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: void addFunctionsTo(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: void lambda$addFunctionsTo$1(java.util.List,org.apache.cassandra.cql3.ColumnCondition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations$lambda_addFunctionsTo_0__356: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_addFunctionsTo_1__354: java.util.function.Consumer bootstrap$(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_addFunctionsTo_2__355: java.util.function.Consumer bootstrap$(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_addFunctionsTo_2__355: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$lambda_addFunctionsTo_1__354: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: java.lang.Object set(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RevokePermissionsStatement: void <init>(java.util.Set,org.apache.cassandra.auth.IResource,org.apache.cassandra.cql3.RoleName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListPermissionsStatement: void <init>(java.util.Set,org.apache.cassandra.auth.IResource,org.apache.cassandra.cql3.RoleName,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.RoleName: boolean hasName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void userPassword(org.apache.cassandra.auth.RoleOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: org.apache.cassandra.cql3.Cql_Parser$username_return username()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleOptions: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleOptions: void setOption(org.apache.cassandra.auth.IRoleManager$Option,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateRoleStatement: void <init>(org.apache.cassandra.cql3.RoleName,org.apache.cassandra.auth.RoleOptions,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthenticationStatement: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser$username_return: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterRoleStatement: void <init>(org.apache.cassandra.cql3.RoleName,org.apache.cassandra.auth.RoleOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropRoleStatement: void <init>(org.apache.cassandra.cql3.RoleName,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListUsersStatement: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListRolesStatement: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListRolesStatement: void <init>(org.apache.cassandra.cql3.RoleName,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTriggerStatement: void <init>(org.apache.cassandra.cql3.CFName,java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTriggerStatement: void <init>(org.apache.cassandra.cql3.CFName,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void typeColumns(org.apache.cassandra.cql3.statements.CreateTypeStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: void <init>(org.apache.cassandra.cql3.UTName,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: void addDefinition(org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.cql3.statements.AlterTypeStatement alter(org.apache.cassandra.cql3.UTName,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.cql3.statements.AlterTypeStatement addition(org.apache.cassandra.cql3.UTName,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: org.apache.cassandra.cql3.statements.AlterTypeStatement renames(org.apache.cassandra.cql3.UTName,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$Renames: void <init>(org.apache.cassandra.cql3.UTName,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: void <init>(org.apache.cassandra.cql3.UTName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement$Add: void <init>(org.apache.cassandra.cql3.UTName,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTypeStatement: void <init>(org.apache.cassandra.cql3.UTName,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateFunctionStatement: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.lang.String,java.lang.String,java.util.List,java.util.List,org.apache.cassandra.cql3.CQL3Type$Raw,boolean,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropFunctionStatement: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,java.lang.String,org.apache.cassandra.cql3.CQL3Type$Raw,java.lang.String,org.apache.cassandra.cql3.Term$Raw,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropAggregateStatement: void <init>(org.apache.cassandra.cql3.functions.FunctionName,java.util.List,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void roleOptions(org.apache.cassandra.auth.RoleOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleOptions: com.google.common.base.Optional getSuperuser()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleOptions: com.google.common.base.Optional getLogin()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Cql_Parser: void roleOption(org.apache.cassandra.auth.RoleOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.GrantRoleStatement: void <init>(org.apache.cassandra.cql3.RoleName,org.apache.cassandra.cql3.RoleName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RoleManagementStatement: void <init>(org.apache.cassandra.cql3.RoleName,org.apache.cassandra.cql3.RoleName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RevokeRoleStatement: void <init>(org.apache.cassandra.cql3.RoleName,org.apache.cassandra.cql3.RoleName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.CFName,java.util.List,org.apache.cassandra.cql3.WhereClause,java.util.List,java.util.List,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropViewStatement: void <init>(org.apache.cassandra.cql3.CFName,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterViewStatement: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.cql3.statements.TableAttributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.VariableSpecifications: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: org.apache.cassandra.cql3.Term$Raw term()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: org.apache.cassandra.cql3.CQL3Type$Raw comparatorType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.CqlParser: org.apache.cassandra.cql3.WhereClause$Builder whereClause()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$query__98: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement$Parsed: org.apache.cassandra.cql3.statements.ModificationStatement prepare(org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes$Raw: org.apache.cassandra.cql3.Attributes prepare(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsertJson: org.apache.cassandra.cql3.statements.ModificationStatement prepareInternal(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement$ParsedInsert: org.apache.cassandra.cql3.statements.ModificationStatement prepareInternal(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DeleteStatement$Parsed: org.apache.cassandra.cql3.statements.ModificationStatement prepareInternal(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement$ParsedUpdate: org.apache.cassandra.cql3.statements.ModificationStatement prepareInternal(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement$Parsed: org.apache.cassandra.cql3.Conditions prepareConditions(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement$Parsed: org.apache.cassandra.cql3.ColumnConditions prepareColumnConditions(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: org.apache.cassandra.cql3.ColumnCondition prepare(java.lang.String,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$Builder: org.apache.cassandra.cql3.ColumnConditions build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$Builder: org.apache.cassandra.cql3.ColumnConditions$Builder add(org.apache.cassandra.cql3.ColumnCondition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: org.apache.cassandra.cql3.ColumnConditions$Builder newBuilder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$Builder: void <init>(org.apache.cassandra.cql3.ColumnConditions$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: void <init>(org.apache.cassandra.cql3.ColumnConditions$Builder,org.apache.cassandra.cql3.ColumnConditions$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: void <init>(org.apache.cassandra.cql3.ColumnConditions$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$Builder: java.util.List access$000(org.apache.cassandra.cql3.ColumnConditions$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.AbstractConditions: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions$Builder: java.util.List access$100(org.apache.cassandra.cql3.ColumnConditions$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition$Raw: void validateOperationOnDurations(org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists: org.apache.cassandra.cql3.ColumnSpecification indexSpecOf(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition inCondition(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition inCondition(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition condition(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition inCondition(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition inCondition(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.FieldIdentifier,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition condition(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition inCondition(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition inCondition(org.apache.cassandra.config.ColumnDefinition,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.ColumnCondition condition(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.Term,java.util.List,org.apache.cassandra.cql3.Operator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operator: boolean isSlice()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$SetterByKey: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$SetterByIndex: void collectMarkerSpecification(org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetField: org.apache.cassandra.cql3.Operation prepare(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetElement: org.apache.cassandra.cql3.Operation prepare(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Substraction: org.apache.cassandra.cql3.Operation prepare(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Addition: org.apache.cassandra.cql3.Operation prepare(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Prepend: org.apache.cassandra.cql3.Operation prepare(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetValue: org.apache.cassandra.cql3.Operation prepare(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement$Parsed: org.apache.cassandra.cql3.restrictions.StatementRestrictions newRestrictions(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Operations,org.apache.cassandra.cql3.WhereClause,org.apache.cassandra.cql3.Conditions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: void <init>(org.apache.cassandra.cql3.statements.StatementType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operations: void add(org.apache.cassandra.cql3.Operation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement: void <init>(org.apache.cassandra.cql3.statements.StatementType,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.Operations,org.apache.cassandra.cql3.restrictions.StatementRestrictions,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes,org.apache.cassandra.cql3.statements.UpdateStatement$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.cql3.Conditions rebuildLWTColumnConditions(org.apache.cassandra.cql3.Conditions,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.WhereClause)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.cql3.WhereClause prepareUpdateOperations(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.WhereClause,java.util.List,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Operations)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement$Parsed: org.apache.cassandra.config.ColumnDefinition getColumnDefinition(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Addition: org.apache.cassandra.cql3.Term$Raw value()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Substraction: org.apache.cassandra.cql3.Term$Raw value()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetValue: org.apache.cassandra.cql3.Term$Raw value()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.WhereClause: org.apache.cassandra.cql3.WhereClause copy(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ElementAddition: org.apache.cassandra.cql3.Operation prepare(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ElementAddition: void <init>(org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ElementSubtraction: org.apache.cassandra.cql3.Operation prepare(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ElementSubtraction: void <init>(org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.Term$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: void collectMarkerSpecifications(org.apache.cassandra.cql3.Term$Raw,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetElement: java.lang.String toString(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$SetterByIndex: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$SetterByKey: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$SubtracterByKey: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$AdderByKey: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnCondition: org.apache.cassandra.cql3.Term value()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnConditions: java.util.Collection columnConditions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.utils.Pair getSuperColumnKeyRelation(java.util.List,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UpdateStatement: void <init>(org.apache.cassandra.cql3.statements.StatementType,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.Operations,org.apache.cassandra.cql3.restrictions.StatementRestrictions,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: void <init>(org.apache.cassandra.cql3.statements.StatementType,int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.Operations,org.apache.cassandra.cql3.restrictions.StatementRestrictions,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Setter: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Setter: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Setter: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$Setter: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Prepend: java.lang.String toString(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Prepender: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Addition: java.lang.String toString(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Adder: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Appender: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Adder: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$Putter: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$Substraction: java.lang.String toString(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Substracter: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$Discarder: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$Discarder: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$SetField: java.lang.String toString(org.apache.cassandra.cql3.ColumnSpecification)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$SetterByField: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.FieldIdentifier,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$FieldDeletion: org.apache.cassandra.cql3.Operation prepare(java.lang.String,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$FieldDeletion: org.apache.cassandra.config.ColumnDefinition$Raw affectedColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ElementDeletion: org.apache.cassandra.cql3.Operation prepare(java.lang.String,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ElementDeletion: org.apache.cassandra.config.ColumnDefinition$Raw affectedColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ColumnDeletion: org.apache.cassandra.cql3.Operation prepare(java.lang.String,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operation$ColumnDeletion: org.apache.cassandra.config.ColumnDefinition$Raw affectedColumn()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean hasAllPKColumnsRestrictedByEqualities()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DeleteStatement: void <init>(int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.Operations,org.apache.cassandra.cql3.restrictions.StatementRestrictions,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes,org.apache.cassandra.cql3.statements.DeleteStatement$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: org.apache.cassandra.cql3.WhereClause prepareDeleteOperations(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.WhereClause,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Operations)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Maps$DiscarderByKey: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DeleteStatement: void <init>(int,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.cql3.Operations,org.apache.cassandra.cql3.restrictions.StatementRestrictions,org.apache.cassandra.cql3.Conditions,org.apache.cassandra.cql3.Attributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.StatementRestrictions: boolean isPartitionKeyRestrictionsOnToken()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenRestriction: boolean hasOnlyEqualityRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.restrictions.TokenFilter: boolean hasOnlyEqualityRestrictions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Constants$Deleter: void <init>(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Lists$DiscarderByIndex: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Sets$ElementDiscarder: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UserTypes$DeleterByField: void <init>(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.cql3.FieldIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: void prepareInsertOperations(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.WhereClause$Builder,java.util.List,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Operations)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: void prepareInsertOperations(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.VariableSpecifications,java.util.List,org.apache.cassandra.cql3.WhereClause$Builder,org.apache.cassandra.cql3.Operations)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$PreparedMarker: org.apache.cassandra.cql3.Term$Raw getRawTermForColumn(org.apache.cassandra.config.ColumnDefinition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$PreparedLiteral: org.apache.cassandra.cql3.Term$Raw getRawTermForColumn(org.apache.cassandra.config.ColumnDefinition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$Marker: org.apache.cassandra.cql3.Json$Prepared prepareAndCollectMarkers(org.apache.cassandra.config.CFMetaData,java.util.Collection,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$Literal: org.apache.cassandra.cql3.Json$Prepared prepareAndCollectMarkers(org.apache.cassandra.config.CFMetaData,java.util.Collection,org.apache.cassandra.cql3.VariableSpecifications)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.SuperColumnCompatibility: void prepareInsertJSONOperations(org.apache.cassandra.config.CFMetaData,java.util.List,org.apache.cassandra.cql3.VariableSpecifications,org.apache.cassandra.cql3.Json$Prepared,org.apache.cassandra.cql3.WhereClause$Builder,org.apache.cassandra.cql3.Operations)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$ColumnValue: void <init>(org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$PreparedMarker: org.apache.cassandra.cql3.Json$RawDelayedColumnValue getRawTermForColumn(org.apache.cassandra.config.ColumnDefinition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$RawDelayedColumnValue: void <init>(org.apache.cassandra.cql3.Json$PreparedMarker,org.apache.cassandra.config.ColumnDefinition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$PreparedLiteral: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$Prepared: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$PreparedMarker: void <init>(int,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Json$Marker: org.apache.cassandra.cql3.ColumnSpecification makeReceiver(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes: void <init>(org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Attributes$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes$Raw: org.apache.cassandra.cql3.ColumnSpecification timeToLiveReceiver(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes$Raw: org.apache.cassandra.cql3.ColumnSpecification timestampReceiver(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Attributes: void <init>(org.apache.cassandra.cql3.Term,org.apache.cassandra.cql3.Term)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: void <init>(int,org.apache.cassandra.cql3.statements.BatchStatement$Type,java.util.List,org.apache.cassandra.cql3.Attributes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: java.util.List access$100(org.apache.cassandra.cql3.statements.BatchStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: boolean isTimestampSet()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: boolean isCounter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement$MultiTableColumnsBuilder: void <init>(org.apache.cassandra.cql3.statements.BatchStatement$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement$MultiTableColumnsBuilder: java.util.Map build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement$MultiTableColumnsBuilder: void addAll(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.PartitionColumns)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement$MultiTableColumnsBuilder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ParsedStatement$Prepared: void <init>(org.apache.cassandra.cql3.CQLStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement: java.lang.String columnFamily()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared prepare(org.apache.cassandra.schema.Types)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$RawStatement: org.apache.cassandra.db.marshal.AbstractType getTypeAndRemove(java.util.Map,org.apache.cassandra.cql3.ColumnIdentifier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: void <init>(org.apache.cassandra.cql3.CFName,org.apache.cassandra.schema.TableParams,boolean,java.util.Set,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.regex.Pattern access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.Map access$100(org.apache.cassandra.cql3.statements.CreateTableStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: boolean access$202(org.apache.cassandra.cql3.statements.CreateTableStatement,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.Map access$300(org.apache.cassandra.cql3.statements.CreateTableStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: boolean access$200(org.apache.cassandra.cql3.statements.CreateTableStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.List access$402(org.apache.cassandra.cql3.statements.CreateTableStatement,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.List access$500(org.apache.cassandra.cql3.statements.CreateTableStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.List access$400(org.apache.cassandra.cql3.statements.CreateTableStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.List access$602(org.apache.cassandra.cql3.statements.CreateTableStatement,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.List access$700(org.apache.cassandra.cql3.statements.CreateTableStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: java.util.List access$600(org.apache.cassandra.cql3.statements.CreateTableStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: boolean access$802(org.apache.cassandra.cql3.statements.CreateTableStatement,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: boolean access$902(org.apache.cassandra.cql3.statements.CreateTableStatement,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: boolean access$800(org.apache.cassandra.cql3.statements.CreateTableStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$lambda_new_0__196: java.util.Comparator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement$lambda_new_0__196: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateFunctionStatement: org.apache.cassandra.db.marshal.AbstractType prepareType(java.lang.String,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: org.apache.cassandra.db.marshal.AbstractType prepareType(java.lang.String,org.apache.cassandra.cql3.CQL3Type$Raw)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: java.util.List stateArguments(org.apache.cassandra.db.marshal.AbstractType,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: java.lang.String stateFuncSig(org.apache.cassandra.cql3.functions.FunctionName,org.apache.cassandra.cql3.CQL3Type$Raw,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: java.lang.String getRawKeyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: void lambda$static$1(java.lang.Integer,org.apache.cassandra.cql3.statements.ParsedStatement$Prepared)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Downsampling: int getEffectiveIndexIntervalAfterIndex(int,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Downsampling: java.util.List getOriginalIndexes(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: boolean get(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: boolean get(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.RebufferingInputStream: int skipBytes(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: void <init>(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: void <init>(long,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.DeletionTime,long,int,org.apache.cassandra.io.sstable.IndexInfo$Serializer,org.apache.cassandra.io.sstable.format.Version,int,org.apache.cassandra.db.RowIndexEntry$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry: void <init>(long,long,org.apache.cassandra.db.DeletionTime,long,int,int,org.apache.cassandra.io.ISerializer,org.apache.cassandra.db.RowIndexEntry$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry: org.apache.cassandra.db.RowIndexEntry deserialize(org.apache.cassandra.io.util.DataInputPlus,long,org.apache.cassandra.io.sstable.IndexInfo$Serializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getColumnIndexCacheSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo$Serializer: void skip(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: void <init>(long,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.io.sstable.IndexInfo$Serializer,org.apache.cassandra.db.RowIndexEntry$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: void <init>(java.io.DataInput)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: long getBytesRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$LegacyShallowIndexedEntry: void <init>(long,long,org.apache.cassandra.db.DeletionTime,long,int[],org.apache.cassandra.io.sstable.IndexInfo$Serializer,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: void <init>(long,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.io.sstable.IndexInfo$Serializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$1: void skip(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$NewFormatSerializer: void skip(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedDataInputPlus: int skipBytes(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: void skip(org.apache.cassandra.io.util.DataInputPlus,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$Serializer: void skip(org.apache.cassandra.io.util.DataInputPlus,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer: void skipValues(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.ClusteringPrefix$Kind,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: void skipValuesWithoutSize(org.apache.cassandra.io.util.DataInputPlus,int,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry: void <init>(long,long,org.apache.cassandra.db.DeletionTime,long,int,int,org.apache.cassandra.io.ISerializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: void <init>(long,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.DeletionTime,long,int,org.apache.cassandra.io.sstable.IndexInfo$Serializer,org.apache.cassandra.io.sstable.format.Version,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void incrementReadCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: void mark()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter: void mark(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.RestorableMeter$RestorableEWMA: void update(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$1WithoutPurgeableTombstones: boolean lambda$getPurgeEvaluator$0(java.lang.Long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$ValidationCompactionController: boolean lambda$getPurgeEvaluator$0(java.lang.Long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: boolean lambda$getPurgeEvaluator$2(long,java.lang.Long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: boolean lambda$getPurgeEvaluator$1(java.lang.Long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: boolean lambda$getPurgeEvaluator$0(java.lang.Long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$FiltrationTracker: void <init>(com.google.common.base.Function)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: boolean addAll(int,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution$1: int compare(org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry,org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ReadRateComparator: int compare(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$1: int compare(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: int lambda$getOverlappingLiveSSTables$1(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds$1: int compare(org.apache.cassandra.dht.Bounds,org.apache.cassandra.dht.Bounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$3: int compare(org.apache.cassandra.utils.Pair,org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range$1: int compare(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range$2: int compare(org.apache.cassandra.dht.Range,org.apache.cassandra.dht.Range)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int lambda$static$0(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$2: int compare(org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.MapSerializer: int lambda$new$0(java.util.Comparator,org.apache.cassandra.utils.Pair,org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder$1: int compare(org.apache.cassandra.db.Slice,org.apache.cassandra.db.Slice)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Builder: org.apache.cassandra.db.ClusteringComparator access$300(org.apache.cassandra.db.Slices$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: int lambda$executeLocally$0(org.apache.commons.lang3.tuple.Pair,org.apache.commons.lang3.tuple.Pair)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$5: int compare(org.apache.cassandra.db.LegacyLayout$LegacyCell,org.apache.cassandra.db.LegacyLayout$LegacyCell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$6: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$6: int compare(org.apache.cassandra.db.LegacyLayout$LegacyCellName,org.apache.cassandra.db.LegacyLayout$LegacyCellName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$3: int compare(org.apache.cassandra.db.Directories$DataDirectory,org.apache.cassandra.db.Directories$DataDirectory)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: int lambda$getNextBackgroundTask$0(org.apache.cassandra.db.compaction.AbstractCompactionStrategy,org.apache.cassandra.db.compaction.AbstractCompactionStrategy)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder$CellResolver: java.lang.Object resolve(java.lang.Object[],int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder$CellResolver: org.apache.cassandra.db.rows.ColumnData resolve(java.lang.Object[],int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SimpleBuilders$AbstractBuilder: java.lang.Object ttl(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceStateImpl$1: void <init>(org.apache.cassandra.tracing.TraceStateImpl,org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEvent: int getTotal()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEvent: int getProgressCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEvent: org.apache.cassandra.utils.progress.ProgressEventType getType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEvent: java.lang.String getMessage()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEvent: void <init>(org.apache.cassandra.utils.progress.ProgressEventType,int,int,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.HintedHandoffMetrics$DifferencingCounter: void mark()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.StreamEventJMXNotifier: void onSuccess(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.StreamStateCompositeData: javax.management.openmbean.CompositeData toCompositeData(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalSizeSent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalSizeReceived()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.management.StreamStateCompositeData$1: void <init>(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: long getTotalSizeInProgress(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamCoordinator$1: void onSuccess(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$5: void onSuccess(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void access$600(org.apache.cassandra.service.StorageService,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.AsyncOneResponse: java.lang.Object get(long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper$1: void onSuccess(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper: void access$300(org.apache.cassandra.dht.BootStrapper,java.lang.String,org.apache.cassandra.utils.progress.ProgressEvent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEventNotifierSupport: void fireProgressEvent(java.lang.String,org.apache.cassandra.utils.progress.ProgressEvent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$2: void onSuccess(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void access$000(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: org.slf4j.Logger access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void bootstrapFinished()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void markViewsAsBuilt()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.util.List getUserKeyspaces()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void finishViewBuildStatus(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void setViewBuilt(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper: void access$400(org.apache.cassandra.dht.BootStrapper,java.lang.String,org.apache.cassandra.utils.progress.ProgressEvent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.StreamingRepairTask: void onSuccess(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncComplete: void <init>(org.apache.cassandra.repair.RepairJobDesc,java.net.InetAddress,java.net.InetAddress,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.NodePair: void <init>(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.StreamStateStore: void onSuccess(org.apache.cassandra.streaming.StreamState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void incrementDroppedMessages(org.apache.cassandra.net.MessagingService$Verb)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void incrementDroppedMessages(org.apache.cassandra.net.MessagingService$Verb,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.TableViews: boolean lambda$contains$0(java.lang.String,org.apache.cassandra.db.view.View)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask$1: boolean apply(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$1: boolean apply(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamState$1: boolean apply(org.apache.cassandra.streaming.SessionInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.SessionInfo: boolean isFailed()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor$MigrationSubscriber: boolean lambda$removeInvalidPreparedStatementsForFunction$0(java.lang.String,java.lang.String,org.apache.cassandra.cql3.functions.Function)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: boolean lambda$new$0(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.UnfilteredDeserializer$OldFormatDeserializer$UnfilteredIterator$TombstoneTracker: boolean lambda$isShadowed$1(long,org.apache.cassandra.db.LegacyLayout$LegacyRangeTombstone)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: boolean lambda$selectsClustering$3(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: boolean selectsClustering(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$Group: boolean lambda$selectsKey$2(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.SinglePartitionReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: boolean selectsKey(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: boolean lambda$hasComplexDeletion$6(org.apache.cassandra.utils.WrappedBoolean,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.WrappedBoolean: void set(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: void lambda$hasComplexDeletion$5(org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void lambda$deserializeRowBody$1(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.rows.Row$Builder,org.apache.cassandra.db.LivenessInfo,boolean,org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void readComplexColumn(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,boolean,org.apache.cassandra.db.rows.Row$Builder,org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void readSimpleColumn(org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.rows.Row$Builder,org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: boolean includes(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cell$Serializer: org.apache.cassandra.db.rows.Cell deserialize(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.LivenessInfo,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cell$Serializer: boolean skip(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.SerializationHeader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void skipTimestamp(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer: void skip(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void skipTTL(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void skipLocalDeletionTime(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CollectionType$CollectionPathSerializer: org.apache.cassandra.db.rows.CellPath deserialize(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: java.nio.ByteBuffer maybeClearCounterValue(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: boolean canSkipValue(org.apache.cassandra.db.rows.CellPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: boolean canSkipValue(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void skipComplexColumn(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.SerializationHeader,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.SerializationHelper: boolean isDroppedComplexDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: void skipDeletionTime(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: void collectStats(org.apache.cassandra.db.rows.EncodingStats$Collector)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.UpdateFunction$Simple: void <init>(java.util.function.BiFunction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate$lambda_build_2__188: void <init>(org.apache.cassandra.db.partitions.PartitionUpdate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Helpers$1: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.KeyspaceMetrics$17: void <init>(org.apache.cassandra.metrics.KeyspaceMetrics,org.apache.cassandra.metrics.KeyspaceMetrics$MetricValue)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.AbstractReplicationStrategy: org.apache.cassandra.locator.AbstractReplicationStrategy createReplicationStrategy(java.lang.String,java.lang.Class,org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.IEndpointSnitch,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace$invalidateDiskBoundaries__31: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace$invalidateDiskBoundaries__31: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: long bytesRemaining()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$1: org.apache.cassandra.utils.memory.BufferPool$LocalPool initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPoolRef: void <init>(org.apache.cassandra.utils.memory.BufferPool$LocalPool,java.lang.ref.ReferenceQueue)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.util.concurrent.ConcurrentLinkedQueue access$800()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool: java.lang.ref.ReferenceQueue access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.BufferPool$LocalPool: org.apache.cassandra.utils.memory.BufferPool$Chunk[] access$100(org.apache.cassandra.utils.memory.BufferPool$LocalPool)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.vint.VIntCoding$1: byte[] initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputStreamPlus$1: byte[] initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer$1: org.apache.cassandra.io.util.DataOutputBuffer initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer$1$1: void <init>(org.apache.cassandra.io.util.DataOutputBuffer$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$1: java.lang.Boolean initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities$1: java.security.MessageDigest initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionUtils$1: java.nio.ByteBuffer initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ChecksumType$3: java.util.zip.Checksum initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ChecksumType$2: java.util.zip.Checksum newInstance()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ChecksumType$1: java.util.zip.Checksum newInstance()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.SimpleCachedBufferPool$1: java.nio.ByteBuffer initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer$1: java.text.SimpleDateFormat initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.lang.String access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer$3: java.text.SimpleDateFormat initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.serializers.TimestampSerializer: java.lang.String access$200()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BloomFilter$1: long[] initialValue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: void recordLast(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: void recordLast(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: int counted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: int counted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: int counted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: int countedInCurrentPartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: int countedInCurrentPartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: int countedInCurrentPartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: boolean isExhausted(org.apache.cassandra.db.filter.DataLimits$Counter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: boolean isExhausted(org.apache.cassandra.db.filter.DataLimits$Counter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: int access$500(org.apache.cassandra.service.pager.AbstractQueryPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: int access$502(org.apache.cassandra.service.pager.AbstractQueryPager,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: int access$600(org.apache.cassandra.service.pager.AbstractQueryPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: boolean access$702(org.apache.cassandra.service.pager.AbstractQueryPager,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PagingState$RowMark: org.apache.cassandra.service.pager.PagingState$RowMark create(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.rows.Row,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Clustering$Serializer: java.nio.ByteBuffer serialize(org.apache.cassandra.db.Clustering,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PagingState$RowMark: void <init>(java.nio.ByteBuffer,org.apache.cassandra.transport.ProtocolVersion)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundValidator$RowsTransformation: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand$1UpdateSstablesIterated: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.StoppingTransformation: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Close: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionIterators$1Close: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Transformation: void onPartitionClose()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.io.sstable.metadata.MetadataCollector addCellPerPartitionCount(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.metrics.ClientRequestMetrics access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$1: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: void waitOnFutures(java.util.List,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseIterator: boolean tryGetMoreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection: java.lang.Object moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: java.lang.Object moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$1Extend: java.lang.Object moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Extend: java.lang.Object moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation: java.lang.Object moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionIterators$1Extend: java.lang.Object moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack: void refill(org.apache.cassandra.db.transform.Stack,org.apache.cassandra.db.transform.Stack$MoreContentsHolder,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseIterator: java.lang.Object apply(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BasePartitions: java.lang.Object applyOne(java.lang.Object,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.BaseRows: java.lang.Object applyOne(java.lang.Object,org.apache.cassandra.db.transform.Transformation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.Stack: java.lang.Object[] splice(java.lang.Object[],int,java.lang.Object[],int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionIterators$1Extend: org.apache.cassandra.db.partitions.PartitionIterator moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.transform.RTBoundCloser$RowsTransformation: org.apache.cassandra.db.rows.UnfilteredRowIterator moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundMarker inclusiveClose(boolean,java.nio.ByteBuffer[],org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator singleton(org.apache.cassandra.db.rows.Unfiltered,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.Row,boolean,org.apache.cassandra.db.rows.EncodingStats)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$1: void <init>(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.PartitionColumns,org.apache.cassandra.db.rows.Row,boolean,org.apache.cassandra.db.rows.EncodingStats,org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: org.apache.cassandra.db.ClusteringBound inclusiveClose(boolean,java.nio.ByteBuffer[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1Extend: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$1Extend: org.apache.cassandra.db.rows.UnfilteredRowIterator moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator executeReadCommand(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: org.apache.cassandra.db.PartitionRangeReadCommand makeFetchAdditionalPartitionReadCommand(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: int counted(org.apache.cassandra.db.filter.DataLimits$Counter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: int rowCounted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: int rowCounted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: int rowCounted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: boolean inclusiveRight()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: boolean inclusiveRight()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: boolean inclusiveRight()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: boolean inclusiveRight()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: org.apache.cassandra.db.filter.DataLimits forShortReadRetry(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: org.apache.cassandra.db.filter.DataLimits forShortReadRetry(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: org.apache.cassandra.db.filter.DataLimits forShortReadRetry(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection: org.apache.cassandra.db.rows.UnfilteredRowIterator moreContents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection: org.apache.cassandra.db.SinglePartitionReadCommand makeFetchAdditionalRowsReadCommand(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection$ShortReadRowsProtection: int countedInCurrentPartition(org.apache.cassandra.db.filter.DataLimits$Counter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: org.apache.cassandra.db.filter.DataLimits$Counter access$700(org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: org.apache.cassandra.db.filter.DataLimits$Counter access$800(org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: java.net.InetAddress access$900(org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection: org.apache.cassandra.db.partitions.UnfilteredPartitionIterator access$1000(org.apache.cassandra.service.DataResolver$ShortReadPartitionsProtection,org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits$ThriftCounter: int rowCountedInCurrentPartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits$GroupByAwareCounter: int rowCountedInCurrentPartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits$CQLCounter: int rowCountedInCurrentPartition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$4: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$2: org.apache.cassandra.db.rows.UnfilteredRowIterator next()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: boolean lambda$new$0()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: boolean atSegmentBufferLimit()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.SimpleCachedBufferPool: boolean atLimit()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: boolean usesBufferPool(org.apache.cassandra.db.commitlog.CommitLog)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog$Configuration: boolean useEncryption()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog$Configuration: boolean useCompression()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager: void maybeFlushToReclaim()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getTotalCommitlogSpaceInMB()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: org.apache.cassandra.db.commitlog.CommitLogSegment createSegment(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CompressedSegment: void <init>(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.MemoryMappedSegment: void <init>(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void writeLogHeader()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.FileDirectSegment: void writeLogHeader()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: java.util.Map additionalHeaderParameters()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedSegment: java.util.Map additionalHeaderParameters()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: void writeHeader(java.nio.ByteBuffer,org.apache.cassandra.db.commitlog.CommitLogDescriptor,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: java.lang.String constructParametersString(org.apache.cassandra.config.ParameterizedClass,org.apache.cassandra.security.EncryptionContext,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void <init>(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedSegment: java.nio.ByteBuffer createBuffer(org.apache.cassandra.db.commitlog.CommitLog)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog$Configuration: org.apache.cassandra.config.ParameterizedClass getCompressorClass()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog$Configuration: org.apache.cassandra.security.EncryptionContext getEncryptionContext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CompressedSegment: java.nio.ByteBuffer createBuffer(org.apache.cassandra.db.commitlog.CommitLog)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: java.lang.String fileName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.MemoryMappedSegment: java.nio.ByteBuffer createBuffer(org.apache.cassandra.db.commitlog.CommitLog)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: void <init>(long,org.apache.cassandra.config.ParameterizedClass,org.apache.cassandra.security.EncryptionContext)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: long getNextId()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: int getfd(java.nio.channels.FileChannel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: int getfd(java.io.FileDescriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog$Configuration: org.apache.cassandra.io.compress.ICompressor getCompressor()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.SimpleCachedBufferPool: java.nio.ByteBuffer createBuffer(org.apache.cassandra.io.compress.BufferType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.FileDirectSegment: void <init>(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.SimpleCachedBufferPool: void setPreferredReusableBufferType(org.apache.cassandra.io.compress.BufferType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: void setDiscarded()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.NativeAllocator: void setDiscarded()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator: void setDiscarded()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.SlabAllocator: void setDiscarded()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.SlabAllocator$Region: java.nio.ByteBuffer access$100(org.apache.cassandra.utils.memory.SlabAllocator$Region)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableAllocator$SubAllocator: void releaseAll()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: void released(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: void reclaimed(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtableCleanerThread: void trigger()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: boolean updateNextClean()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: long used()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool: java.util.concurrent.atomic.AtomicLongFieldUpdater access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: void adjustAllocated(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool: java.util.concurrent.atomic.AtomicLongFieldUpdater access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.NativeAllocator$Region: long access$400(org.apache.cassandra.utils.memory.NativeAllocator$Region)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: com.google.common.util.concurrent.RateLimiter getRateLimiter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: java.util.Set getFullyExpiredSSTables()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: java.util.Collection finish()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: boolean append(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter: long estimatedKeys()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: int getLevel()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.compaction.writers.CompactionAwareWriter getCompactionAwareWriter(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.Directories,org.apache.cassandra.db.lifecycle.LifecycleTransaction,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: org.apache.cassandra.db.Directories getDirectories()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$7$1: org.apache.cassandra.db.compaction.CompactionController getCompactionController(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: void checkAvailableDiskSpace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask$1: void <init>(org.apache.cassandra.db.compaction.CompactionTask)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: long getTotalSourceCQLRows()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: long[] getMergedRowCounts()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: void <init>(org.apache.cassandra.db.compaction.OperationType,java.util.List,org.apache.cassandra.db.compaction.CompactionController,int,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean isSnapshotBeforeCompaction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: org.apache.cassandra.utils.concurrent.Refs ref(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void compactionRateLimiterAcquire(com.google.common.util.concurrent.RateLimiter,long,long,double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: long getTotalBytes(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: java.lang.String updateCompactionHistory(java.lang.String,java.lang.String,long[],long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemoryPerSecond(long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: long addToTotalBytesCompacted(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.String prettyPrintMemoryPerSecond(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void updateCompactionHistory(java.lang.String,java.lang.String,long,long,long,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: boolean reduceScopeForLimitedSpace(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: boolean partialCompactionsAcceptable()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.Directories,org.apache.cassandra.db.lifecycle.LifecycleTransaction,java.util.Set,boolean,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.Directories,org.apache.cassandra.db.lifecycle.LifecycleTransaction,java.util.Set,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: long getMaxDataAge(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: org.apache.cassandra.io.sstable.SSTableRewriter construct(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,boolean,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: long getMinRepairedAt(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: void <init>(org.apache.cassandra.db.lifecycle.LifecycleTransaction,long,long,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: long calculateOpenInterval(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getSSTablePreempiveOpenIntervalInMB()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter: boolean realAppend(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter: void switchCompactionLocation(org.apache.cassandra.db.Directories$DataDirectory)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.writers.CompactionAwareWriter: org.apache.cassandra.db.Directories getDirectories()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: void <init>(java.lang.Iterable,org.apache.cassandra.db.ClusteringComparator,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: org.apache.cassandra.db.SerializationHeader make(org.apache.cassandra.config.CFMetaData,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: org.apache.cassandra.io.sstable.format.SSTableWriter create(org.apache.cassandra.io.sstable.Descriptor,java.lang.Long,java.lang.Long,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.sstable.metadata.MetadataCollector,org.apache.cassandra.db.SerializationHeader,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: java.util.Collection observers(org.apache.cassandra.io.sstable.Descriptor,java.util.Collection,org.apache.cassandra.db.compaction.OperationType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat$WriterFactory: org.apache.cassandra.io.sstable.format.SSTableWriter open(org.apache.cassandra.io.sstable.Descriptor,long,long,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.sstable.metadata.MetadataCollector,org.apache.cassandra.db.SerializationHeader,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigFormat: org.apache.cassandra.io.sstable.format.SSTableWriter$Factory getWriterFactory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void <init>(org.apache.cassandra.io.sstable.Descriptor,long,long,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.sstable.metadata.MetadataCollector,org.apache.cassandra.db.SerializationHeader,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: org.apache.cassandra.io.ISerializer indexInfoSerializer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.db.RowIndexEntry$IndexSerializer getRowIndexEntrySerializer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: void <init>(org.apache.cassandra.io.sstable.Descriptor,long,long,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.sstable.metadata.MetadataCollector,org.apache.cassandra.db.SerializationHeader,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressedSequentialWriter: void <init>(java.io.File,java.lang.String,java.io.File,org.apache.cassandra.io.util.SequentialWriterOption,org.apache.cassandra.schema.CompressionParams,org.apache.cassandra.io.sstable.metadata.MetadataCollector)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: void <init>(org.apache.cassandra.io.sstable.format.big.BigTableWriter,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: void <init>(org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.io.util.SequentialWriter,org.apache.cassandra.io.sstable.format.Version,java.util.Collection,org.apache.cassandra.io.ISerializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption$Builder: org.apache.cassandra.io.util.SequentialWriterOption build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption$Builder: org.apache.cassandra.io.util.SequentialWriterOption$Builder trickleFsyncByteInterval(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption$Builder: org.apache.cassandra.io.util.SequentialWriterOption$Builder trickleFsync(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: org.apache.cassandra.io.util.SequentialWriterOption$Builder newBuilder()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean getTrickleFsync()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getTrickleFsyncIntervalInKb()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$withChunkCache__520: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.util.FileHandle$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$withChunkCache__520: void <init>(org.apache.cassandra.io.util.FileHandle$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption$Builder: void <init>(org.apache.cassandra.io.util.SequentialWriterOption$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: void <init>(int,org.apache.cassandra.io.compress.BufferType,boolean,int,boolean,org.apache.cassandra.io.util.SequentialWriterOption$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: void <init>(int,org.apache.cassandra.io.compress.BufferType,boolean,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriter: void setPostFlushListener(java.lang.Runnable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.util.SequentialWriterOption access$800(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: java.util.Optional access$900(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$withChunkCache__521: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.util.FileHandle$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$lambda_new_0__522: java.lang.Runnable bootstrap$(org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$lambda_new_1__523: java.lang.Runnable bootstrap$(org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$lambda_new_1__523: void <init>(org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$lambda_new_0__522: void <init>(org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter$withChunkCache__521: void <init>(org.apache.cassandra.io.util.FileHandle$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: org.apache.cassandra.io.compress.BufferType bufferType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption: int bufferSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption$Builder: org.apache.cassandra.io.util.SequentialWriterOption$Builder finishOnClose(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption$Builder: org.apache.cassandra.io.util.SequentialWriterOption$Builder bufferType(org.apache.cassandra.io.compress.BufferType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SequentialWriterOption$Builder: org.apache.cassandra.io.util.SequentialWriterOption$Builder bufferSize(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: org.apache.cassandra.io.compress.CompressionMetadata$Writer open(org.apache.cassandra.schema.CompressionParams,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata$Writer: void <init>(org.apache.cassandra.schema.CompressionParams,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.sstable.format.SSTableWriter$TransactionalProxy txnProxy()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: java.util.Set components(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$TransactionalProxy: void <init>(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter$TransactionalProxy: void <init>(org.apache.cassandra.io.sstable.format.SSTableWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: org.apache.cassandra.io.sstable.IndexInfo$Serializer indexInfoSerializer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SerializationHeader: java.util.Collection orderByDescendingGeneration(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.io.sstable.metadata.MetadataCollector sstableLevel(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$Builder: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$Builder: org.apache.cassandra.db.commitlog.IntervalSet build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$Builder: void addAll(org.apache.cassandra.db.commitlog.IntervalSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet$Builder: void add(java.lang.Comparable,java.lang.Comparable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: org.apache.cassandra.db.RowIndexEntry append(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: void maybeReopenEarly(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.db.RowIndexEntry append(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: void buildRowIndex(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: int indexInfoSerializedSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: java.util.List indexSamples()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: int[] offsets()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.io.sstable.metadata.MetadataCollector addPartitionSizeInBytes(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: java.nio.ByteBuffer buffer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: void maybeLogLargePartitionWarning(org.apache.cassandra.db.DecoratedKey,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: long beforeAppend(org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$StatsCollector: void <init>(org.apache.cassandra.io.sstable.metadata.MetadataCollector)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$lambda_append_0__562: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.sstable.format.big.BigTableWriter,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: org.apache.cassandra.db.RowIndexEntry create(long,long,org.apache.cassandra.db.DeletionTime,long,int,int,java.util.List,int[],org.apache.cassandra.io.ISerializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: void <init>(long,org.apache.cassandra.db.DeletionTime,long,org.apache.cassandra.io.sstable.IndexInfo[],int[],int,org.apache.cassandra.io.ISerializer,org.apache.cassandra.db.RowIndexEntry$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: void <init>(long,org.apache.cassandra.db.DeletionTime,long,org.apache.cassandra.io.sstable.IndexInfo[],int[],int,org.apache.cassandra.io.ISerializer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$lambda_append_0__562: void <init>(org.apache.cassandra.io.sstable.format.big.BigTableWriter,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getCompactionLargePartitionWarningThreshold()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataCollector: org.apache.cassandra.io.sstable.metadata.MetadataCollector addKey(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: void serialize(org.apache.cassandra.db.RowIndexEntry,org.apache.cassandra.io.util.DataOutputPlus,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.db.RowIndexEntry$IndexSerializer access$1000(org.apache.cassandra.io.sstable.format.big.BigTableWriter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.slf4j.Logger access$1100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry: void serialize(org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.io.sstable.IndexInfo$Serializer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$ShallowIndexedEntry: void serialize(org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.io.sstable.IndexInfo$Serializer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$IndexedEntry: void serialize(org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.io.sstable.IndexInfo$Serializer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo$Serializer: void serialize(org.apache.cassandra.io.sstable.IndexInfo,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$1: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$NewFormatSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$NewFormatSerializer: void serialize(org.apache.cassandra.db.ClusteringPrefix,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: void serialize(org.apache.cassandra.db.ClusteringPrefix,org.apache.cassandra.io.util.DataOutputPlus,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$1: void serialize(org.apache.cassandra.db.ClusteringPrefix,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MurmurHash: long hash2_64(java.nio.ByteBuffer,int,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: void finish()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: void add(org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: void writePartitionHeader(org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: void serializeStaticRow(org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex$lambda_writePartitionHeader_0__563: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex$lambda_writePartitionHeader_0__563: void <init>(org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: void addIndexBlock()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: long currentPosition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex$lambda_add_1__564: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getColumnIndexSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex$lambda_add_1__564: void <init>(org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo$Serializer: long serializedSize(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo$Serializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnIndex: org.apache.cassandra.io.util.DataOutputBuffer reuseOrAllocateBuffer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: void clear()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexInfo$Serializer: long serializedSize(org.apache.cassandra.io.sstable.IndexInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$1: long serializedSize(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$NewFormatSerializer: long serializedSize(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TypeSizes: int sizeofVInt(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$NewFormatSerializer: long serializedSize(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringPrefix$Serializer: long serializedSize(org.apache.cassandra.db.ClusteringPrefix,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Serializers$1: long serializedSize(org.apache.cassandra.db.ClusteringPrefix)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RowIndexEntry$Serializer: void serializeOffsets(org.apache.cassandra.io.util.DataOutputBuffer,int[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter: org.apache.cassandra.io.sstable.format.SSTableReader openEarly()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: void trySkipCache(java.lang.String,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: void trySkipCache(int,long,long,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.big.BigTableWriter$IndexWriter: org.apache.cassandra.io.sstable.IndexSummaryBuilder$ReadableBoundary getMaxReadable()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: org.apache.cassandra.io.sstable.IndexSummaryBuilder$ReadableBoundary getLastReadableBoundary()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: java.util.List finished()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional: org.apache.cassandra.utils.concurrent.Transactional$AbstractTransactional$State state()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: long getMinTimestamp()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$isRepaired__13: com.google.common.base.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController$isRepaired__13: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: boolean isMarkedCompacted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void setRate(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getCompactionThroughputMbPerSec()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceStateImpl: void mutateWithCatch(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void mutate(java.util.Collection,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.service.AbstractWriteResponseHandler mutateCounter(org.apache.cassandra.db.CounterMutation,java.lang.String,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void hintMutations(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void hintMutation(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation: org.apache.cassandra.net.MessageOut makeMutationMessage()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.WriteResponseHandler: void <init>(java.net.InetAddress,org.apache.cassandra.db.WriteType,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.net.InetAddress findSuitableEndpoint(java.lang.String,org.apache.cassandra.db.DecoratedKey,java.lang.String,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.service.AbstractWriteResponseHandler applyCounterMutationOnCoordinator(org.apache.cassandra.db.CounterMutation,java.lang.String,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_findSuitableEndpoint_5__353: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_findSuitableEndpoint_5__353: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_findSuitableEndpoint_5__353: boolean test(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: boolean lambda$findSuitableEndpoint$5(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.WriteResponseHandler: void <init>(java.net.InetAddress,org.apache.cassandra.db.WriteType,java.lang.Runnable,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.logging.LoggingSupportFactory: org.apache.cassandra.utils.logging.LoggingSupport getLoggingSupport()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.logging.NoOpFallbackLoggingSupport: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.Object instanceOrConstruct(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.Object construct(java.lang.Class,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Memtable: boolean isExpired()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationTask$1: void <init>(org.apache.cassandra.service.MigrationTask,java.util.concurrent.CountDownLatch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.db.SystemKeyspace$BootstrapState getBootstrapState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$BootstrapState: org.apache.cassandra.db.SystemKeyspace$BootstrapState valueOf(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void reloadSSTableMetadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void doAntiCompaction(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRange: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range$OrderedRangeContainmentChecker: boolean contains(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range$OrderedRangeContainmentChecker: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: org.apache.cassandra.io.sstable.SSTableRewriter setRepairedAt(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: org.apache.cassandra.io.sstable.SSTableRewriter constructWithoutEarlyOpening(org.apache.cassandra.db.lifecycle.LifecycleTransaction,boolean,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.io.sstable.format.SSTableWriter createWriterForAntiCompaction(org.apache.cassandra.db.ColumnFamilyStore,java.io.File,int,long,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.StatsMetadata: org.apache.cassandra.io.sstable.metadata.StatsMetadata mutateRepairedAt(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.metadata.MetadataSerializer: void rewriteSSTableMetadata(org.apache.cassandra.io.sstable.Descriptor,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: java.lang.String tmpFilenameFor(org.apache.cassandra.io.sstable.Component)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: boolean delete(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.io.sstable.format.SSTableReader access$500(org.apache.cassandra.db.compaction.CompactionManager,org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.io.sstable.Descriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.io.sstable.format.SSTableReader lookupSSTable(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.io.sstable.Descriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: boolean pointInTimeExceeded(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$AlwaysReplayFilter: java.lang.Iterable filter(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter: java.lang.Iterable filter(org.apache.cassandra.db.Mutation)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: org.apache.cassandra.db.commitlog.CommitLogReplayer$ReplayFilter access$000(org.apache.cassandra.db.commitlog.CommitLogReplayer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: boolean access$100(org.apache.cassandra.db.commitlog.CommitLogReplayer,java.util.UUID,org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: java.util.concurrent.atomic.AtomicInteger access$200(org.apache.cassandra.db.commitlog.CommitLogReplayer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: java.util.Set access$300(org.apache.cassandra.db.commitlog.CommitLogReplayer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: boolean shouldReplay(java.util.UUID,org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.IntervalSet: boolean contains(java.lang.Comparable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter$1: void <init>(org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: long maxTimestamp()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.MutableDeletionInfo: long maxTimestamp()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: long maxMarkedAt()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: byte[] access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: org.slf4j.Logger access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.AsyncRepairCallback: org.apache.cassandra.service.DataResolver access$000(org.apache.cassandra.service.AsyncRepairCallback)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment: void waitForFinalSync()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_null_3__23: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isLegacyFile__22: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void lambda$null$3(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void lambda$executePreJoinTasks$2(boolean,org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void executePreJoinTasksBlocking(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_executePreJoinTasksBlocking_13__485: java.util.function.Function bootstrap$(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_executePreJoinTasksBlocking_13__485: void <init>(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: void lambda$innerList$1(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: void classifyFiles(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: void classifyFiles(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: void readTxnLog(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: org.apache.cassandra.db.lifecycle.LogFile make(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: org.apache.cassandra.db.lifecycle.LogFile make(java.lang.String,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: void <init>(org.apache.cassandra.db.compaction.OperationType,java.util.UUID,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.OperationType: org.apache.cassandra.db.compaction.OperationType fromFileName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.OperationType: org.apache.cassandra.db.compaction.OperationType[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void addReplicas(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$addReplica__619: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogReplicaSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$addReplica__619: void <init>(org.apache.cassandra.db.lifecycle.LogReplicaSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_close_7__527: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_close_7__527: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean verify()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$CorruptTransactionLogException: void <init>(java.lang.String,org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: boolean readRecords(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: org.apache.cassandra.db.lifecycle.LogRecord setErrorInReplicas(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: org.apache.cassandra.db.lifecycle.LogRecord getLastRecord()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$verifyRecord__598: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$isInvalidOrPartial__599: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$lambda_verify_0__600: java.util.function.Predicate bootstrap$(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$verifyRecordWithCorruptedLastRecord__601: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$lambda_verify_1__602: java.util.function.Predicate bootstrap$(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$isInvalid__603: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$setErrorInReplicas__604: java.util.function.Function bootstrap$(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$setErrorInReplicas__604: void <init>(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$isInvalid__603: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$lambda_verify_1__602: void <init>(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$verifyRecordWithCorruptedLastRecord__601: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$lambda_verify_0__600: void <init>(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$isInvalidOrPartial__599: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$verifyRecord__598: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void setErrorInReplicas(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_setErrorInReplicas_3__610: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_setErrorInReplicas_3__610: void <init>(org.apache.cassandra.db.lifecycle.LogRecord)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: void setError(org.apache.cassandra.db.lifecycle.LogRecord,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: java.lang.String fileName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: void setPartial()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$readLines__611: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_readRecords_2__612: java.util.function.BinaryOperator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$init__613: java.util.function.Supplier bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$size__614: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$max__615: java.util.function.BinaryOperator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: boolean isPrefixMatch(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: org.apache.cassandra.db.lifecycle.LogRecord make(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: org.apache.cassandra.db.lifecycle.LogRecord setError(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$Type: org.apache.cassandra.db.lifecycle.LogRecord$Type fromPrefix(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$Type: org.apache.cassandra.db.lifecycle.LogRecord$Type valueOf(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$Status: void setError(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$max__615: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$size__614: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$init__613: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_readRecords_2__612: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$readLines__611: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: void setTemporary(org.apache.cassandra.db.lifecycle.LogFile,java.util.Collection,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean exists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: java.util.Map getFilesOfType(java.nio.file.Path,java.util.NavigableSet,org.apache.cassandra.db.lifecycle.LogRecord$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: boolean allFilesPresent(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_classifyFiles_4__590: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_classifyFiles_4__590: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_allFilesPresent_5__591: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_allFilesPresent_5__591: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$matches__592: java.util.function.Predicate bootstrap$(org.apache.cassandra.db.lifecycle.LogRecord$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$isValid__593: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$lambda_getFilesOfType_3__594: java.util.function.Predicate bootstrap$(java.nio.file.Path)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$lambda_getFilesOfType_4__595: java.util.function.Consumer bootstrap$(java.util.Map,java.util.NavigableSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$lambda_getFilesOfType_4__595: void <init>(java.util.Map,java.util.NavigableSet)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$lambda_getFilesOfType_3__594: void <init>(java.nio.file.Path)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$isValid__593: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$matches__592: void <init>(org.apache.cassandra.db.lifecycle.LogRecord$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean committed()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean aborted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: boolean isLastRecordValidWithType(org.apache.cassandra.db.lifecycle.LogRecord$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: boolean isValid()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord$Status: boolean hasError()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: boolean exists()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$exists__617: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$logicalAnd__618: java.util.function.BinaryOperator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$logicalAnd__618: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$exists__617: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$stream__596: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_setTemporary_6__597: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogAwareFileLister)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$lambda_setTemporary_6__597: void <init>(org.apache.cassandra.db.lifecycle.LogAwareFileLister)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister$stream__596: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isDirectory__27: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_null_4__28: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_null_4__28: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isDirectory__27: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDescriptor: boolean isHintFileName(java.nio.file.Path)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: boolean lambda$applyBackPressure$1(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: boolean lambda$list$3(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean lambda$executePreJoinTasks$1(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: boolean lambda$make$0(java.lang.Long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogAwareFileLister: boolean lambda$innerList$0(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: boolean lambda$visitDirectory$0(java.util.function.Predicate,java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isDirectory__48: boolean test(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isLegacyFile__22: boolean test(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isDirectory__27: boolean test(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: void abort()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: org.apache.cassandra.db.lifecycle.LogRecord makeAbort(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: void <init>(org.apache.cassandra.db.lifecycle.LogRecord$Type,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: void commit()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogRecord: org.apache.cassandra.db.lifecycle.LogRecord makeCommit(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: void lambda$null$0(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: void lambda$null$0(org.apache.cassandra.utils.Throwables$DiscreteAction,org.apache.cassandra.utils.Throwables$FileOpType,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$TransactionTidier$abort__33: void <init>(org.apache.cassandra.db.lifecycle.LogFile)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: java.lang.Throwable delete(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: java.lang.Throwable syncDirectory(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile: void deleteFilesForRecordsOfType(org.apache.cassandra.db.lifecycle.LogRecord$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet: java.lang.Throwable syncDirectory(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_syncDirectory_0__530: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_syncDirectory_0__530: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$matches__528: java.util.function.Predicate bootstrap$(org.apache.cassandra.db.lifecycle.LogRecord$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$deleteRecordFiles__529: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$deleteRecordFiles__529: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogFile$matches__528: void <init>(org.apache.cassandra.db.lifecycle.LogRecord$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_delete_1__531: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogReplicaSet$lambda_delete_1__531: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: java.lang.Throwable access$900(org.apache.cassandra.io.util.MmappedRegions$State,java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State: java.lang.Throwable close(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State$lambda_close_1__481: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: java.lang.Throwable perform(java.lang.Throwable,java.lang.String,org.apache.cassandra.utils.Throwables$FileOpType,java.util.stream.Stream)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables$lambda_perform_1__482: java.util.function.Function bootstrap$(org.apache.cassandra.utils.Throwables$FileOpType,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables$lambda_perform_1__482: void <init>(org.apache.cassandra.utils.Throwables$FileOpType,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions$State$lambda_close_1__481: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Cleanup$lambda_tidy_0__480: java.util.function.Consumer bootstrap$(org.apache.cassandra.io.util.FileHandle$Cleanup)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.compress.CompressionMetadata: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.AbstractReaderFileProxy: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.CompressedChunkReader$Mmap: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MmappedRegions: void closeQuietly()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileHandle$Cleanup$lambda_tidy_0__480: void <init>(org.apache.cassandra.io.util.FileHandle$Cleanup)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OpenBitSet: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.obs.OffHeapBitSet: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier$1: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier,org.apache.cassandra.utils.concurrent.OpOrder$Barrier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$SSTableTidier: void run()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void clearSSTableReadMeter(java.lang.String,java.lang.String,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTable: java.util.Set discoverComponentsFor(org.apache.cassandra.io.sstable.Descriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Component: boolean equals(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void deleteWithConfirm(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Component: void <init>(org.apache.cassandra.io.sstable.Component$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator: void close()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_minDeletionTime_1__174: void <init>(org.apache.cassandra.utils.WrappedInt)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$lambda_minDeletionTime_0__173: void <init>(org.apache.cassandra.utils.WrappedInt)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$lambda_inOrderInclusionTester_1__311: java.util.function.Predicate bootstrap$(org.apache.cassandra.utils.SearchIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Columns$lambda_inOrderInclusionTester_1__311: void <init>(org.apache.cassandra.utils.SearchIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$2: org.apache.cassandra.db.rows.Row computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.rows.Row access$200(org.apache.cassandra.db.LegacyLayout$CellGrouper,com.google.common.collect.PeekingIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$1: org.apache.cassandra.db.RangeTombstone computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.RangeTombstone access$100(org.apache.cassandra.db.RangeTombstoneList,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$2: org.apache.cassandra.db.RangeTombstone computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager$1: org.apache.cassandra.cql3.UntypedResultSet$Row computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.cql3.ResultSet process(org.apache.cassandra.db.partitions.PartitionIterator,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.PartitionRangeQueryPager: org.apache.cassandra.db.ReadExecutionController executionController()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.SinglePartitionPager: org.apache.cassandra.db.ReadExecutionController executionController()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: org.apache.cassandra.db.ReadExecutionController executionController()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.QueryPager$1: org.apache.cassandra.db.ReadExecutionController executionController()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager: org.apache.cassandra.service.pager.QueryPager access$500(org.apache.cassandra.cql3.UntypedResultSet$FromPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager: int access$600(org.apache.cassandra.cql3.UntypedResultSet$FromPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager: org.apache.cassandra.cql3.statements.SelectStatement access$700(org.apache.cassandra.cql3.UntypedResultSet$FromPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromPager: java.util.List access$800(org.apache.cassandra.cql3.UntypedResultSet$FromPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.AbstractQueryPager: org.apache.cassandra.db.ReadExecutionController executionController()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$ManyToOne: void advance()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$ManyToOne: java.lang.Object consume()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$CellReducer: void onKeyChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$CellReducer: java.lang.Object getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows$1: void onKeyChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer: void onKeyChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows$1: java.lang.Object getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer: java.lang.Object getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Reducer: void onKeyChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1: void onKeyChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer: void onKeyChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator$1: java.lang.Object getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1: java.lang.Object getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer: java.lang.Object getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$1: void onKeyChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3: void onKeyChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Candidate: void consume(org.apache.cassandra.utils.MergeIterator$Reducer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$1: java.lang.Object getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3: java.lang.Object getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$ManyToOne: int consumeHeap(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3: void reduce(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$CellReducer: void reduce(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows$1: void reduce(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer: void reduce(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator$1: void reduce(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1: void reduce(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer: void reduce(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Candidate: boolean isLowerBound()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$1: void reduce(int,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$1: void reduce(int,org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer: void reduce(int,org.apache.cassandra.db.rows.Unfiltered)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger: void add(int,org.apache.cassandra.db.rows.RangeTombstoneMarker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1: void reduce(int,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator$1: void reduce(int,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer: void reduce(int,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer: boolean useColumnDefinition(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Rows$1: void reduce(int,org.apache.cassandra.db.rows.ColumnData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$CellReducer: void reduce(int,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3: void reduce(int,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3: org.apache.cassandra.db.rows.UnfilteredRowIterator getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3$1: void <init>(org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$3,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$1: org.apache.cassandra.db.LegacyLayout$LegacyAtom getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator$MergeReducer: org.apache.cassandra.db.rows.Unfiltered getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void onMergedRangeTombstoneMarkers(org.apache.cassandra.db.rows.RangeTombstoneMarker,org.apache.cassandra.db.rows.RangeTombstoneMarker[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$1$1: void onMergedRangeTombstoneMarkers(org.apache.cassandra.db.rows.RangeTombstoneMarker,org.apache.cassandra.db.rows.RangeTombstoneMarker[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger: org.apache.cassandra.db.DeletionTime activeDeletion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger: org.apache.cassandra.db.Clustering mergedClustering()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger: org.apache.cassandra.db.rows.RangeTombstoneMarker merge()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger: org.apache.cassandra.db.rows.RangeTombstoneMarker[] mergedMarkers()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.BTreeRow emptyRow(org.apache.cassandra.db.Clustering)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: void <init>(org.apache.cassandra.db.Clustering,java.lang.Object[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger: org.apache.cassandra.db.DeletionTime currentOpenDeletionTimeInMerged()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger: void updateOpenMarkers()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundMarker inclusiveOpen(boolean,java.nio.ByteBuffer[],org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundMarker exclusiveOpen(boolean,java.nio.ByteBuffer[],org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneBoundMarker: org.apache.cassandra.db.rows.RangeTombstoneBoundMarker exclusiveClose(boolean,java.nio.ByteBuffer[],org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: org.apache.cassandra.db.ClusteringBound exclusiveClose(boolean,java.nio.ByteBuffer[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary: org.apache.cassandra.db.ClusteringBound exclusiveOpen(boolean,java.nio.ByteBuffer[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: java.lang.String makeResponsesDebugString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void internalOnMergedRangeTombstoneMarkers(org.apache.cassandra.db.rows.RangeTombstoneMarker,org.apache.cassandra.db.rows.RangeTombstoneMarker[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$lambda_onMergedRangeTombstoneMarkers_0__547: com.google.common.base.Function bootstrap$(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$lambda_onMergedRangeTombstoneMarkers_0__547: void <init>(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void closeOpenMarker(int,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.db.DeletionTime partitionLevelRepairDeletion(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: org.apache.cassandra.db.DeletionTime currentDeletion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ResponseResolver: java.lang.Iterable getMessages()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$lambda_makeResponsesDebugString_1__548: com.google.common.base.Function bootstrap$(org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$lambda_makeResponsesDebugString_1__548: void <init>(org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$1: org.apache.cassandra.db.rows.UnfilteredRowIterator getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener: org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener getRowMergeListener(org.apache.cassandra.db.DecoratedKey,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$1: org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener getRowMergeListener(org.apache.cassandra.db.DecoratedKey,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators: org.apache.cassandra.db.rows.UnfilteredRowIterator merge(java.util.List,int,org.apache.cassandra.db.rows.UnfilteredRowIterators$MergeListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator$1$1: void <init>(org.apache.cassandra.db.compaction.CompactionIterator$1,org.apache.cassandra.index.transactions.CompactionTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: void access$200(org.apache.cassandra.db.compaction.CompactionIterator,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: org.apache.cassandra.db.compaction.CompactionController access$400(org.apache.cassandra.db.compaction.CompactionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: int access$500(org.apache.cassandra.db.compaction.CompactionIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionIterator: void updateCounterFor(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener: boolean isReversed(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener: org.apache.cassandra.db.PartitionColumns columns(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void <init>(org.apache.cassandra.service.DataResolver$RepairMergeListener,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.PartitionColumns,boolean,org.apache.cassandra.service.DataResolver$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener: void <init>(org.apache.cassandra.service.DataResolver$RepairMergeListener,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.PartitionColumns,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1: void <init>(org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener,org.apache.cassandra.service.DataResolver$RepairMergeListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.ReducingKeyIterator$1: org.apache.cassandra.db.DecoratedKey getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger: void clear()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RangeTombstoneMarker$Merger: void clear()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$ColumnDataReducer: org.apache.cassandra.db.rows.ColumnData getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$Builder: void newColumn(org.apache.cassandra.config.ColumnDefinition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$CellReducer: void setActiveDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$Builder: void addComplexDeletion(org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$Builder: void addCell(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData$Builder: org.apache.cassandra.db.rows.ComplexColumnData build()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTree$Builder: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1: void onCell(int,org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1: void onComplexDeletion(int,org.apache.cassandra.db.Clustering,org.apache.cassandra.config.ColumnDefinition,org.apache.cassandra.db.DeletionTime,org.apache.cassandra.db.DeletionTime)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DataResolver$RepairMergeListener$MergeListener$1: boolean isQueried(org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Row$Merger$CellReducer: org.apache.cassandra.db.rows.Cell getReduced()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$ManyToOne: void replaceAndSink(org.apache.cassandra.utils.MergeIterator$Candidate,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Candidate: org.apache.cassandra.utils.MergeIterator$Candidate advance()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Candidate: boolean needsAdvance()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MergeIterator$Candidate: int compareTo(org.apache.cassandra.utils.MergeIterator$Candidate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cell$lambda_static_0__60: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$lambda_static_0__54: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$lambda_legacyAtomComparator_0__106: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: int lambda$legacyAtomComparator$0(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.LegacyLayout$LegacyAtom,org.apache.cassandra.db.LegacyLayout$LegacyAtom)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: boolean equalValues(org.apache.cassandra.db.ClusteringPrefix,org.apache.cassandra.db.ClusteringPrefix,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.UnfilteredPartitionIterators: int lambda$static$0(org.apache.cassandra.db.rows.UnfilteredRowIterator,org.apache.cassandra.db.rows.UnfilteredRowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DecoratedKey$1: int compare(org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.DecoratedKey)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.Cell: int lambda$static$0(org.apache.cassandra.db.rows.Cell,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition$SlicesIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.AbstractBTreePartition: org.apache.cassandra.db.rows.UnfilteredRowIterator access$300(org.apache.cassandra.db.partitions.AbstractBTreePartition,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.Slice,boolean,org.apache.cassandra.db.partitions.AbstractBTreePartition$Holder,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$4: org.apache.cassandra.db.RangeTombstone computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.ClusteringComparator access$300(org.apache.cassandra.db.RangeTombstoneList)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.ClusteringBound[] access$500(org.apache.cassandra.db.RangeTombstoneList)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.RangeTombstone access$600(org.apache.cassandra.db.RangeTombstoneList,int,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.ClusteringBound[] access$200(org.apache.cassandra.db.RangeTombstoneList)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.RangeTombstone access$400(org.apache.cassandra.db.RangeTombstoneList,int,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.RangeTombstone rangeTombstoneWithNewStart(int,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList: org.apache.cassandra.db.RangeTombstone rangeTombstoneWithNewEnd(int,org.apache.cassandra.db.ClusteringBound)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.RangeTombstoneList$3: org.apache.cassandra.db.RangeTombstone computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter$1: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData$1: org.apache.cassandra.config.ColumnDefinition computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$FromResultSet$1: org.apache.cassandra.cql3.UntypedResultSet$Row computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer$1: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: org.apache.cassandra.db.rows.Unfiltered deserialize(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.rows.Row$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: org.apache.cassandra.db.rows.Unfiltered deserializeOne(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper,org.apache.cassandra.db.rows.Row$Builder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$Builder: boolean isSorted()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ClusteringBoundOrBoundary$Serializer: org.apache.cassandra.db.ClusteringBoundOrBoundary deserialize(org.apache.cassandra.io.util.DataInputPlus,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$7: org.apache.cassandra.db.LegacyLayout$LegacyCell computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyCell readLegacyCell(org.apache.cassandra.config.CFMetaData,java.io.DataInput,org.apache.cassandra.db.rows.SerializationHelper$Flag)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$UnfilteredRowMergeIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractRow: java.lang.String toString(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIteratorWithLowerBound: java.util.Comparator comparator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeIterator: org.apache.cassandra.service.StorageProxy$RangeForQuery computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: java.util.List filterForQuery(org.apache.cassandra.db.Keyspace,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeForQuery: void <init>(org.apache.cassandra.dht.AbstractBounds,java.util.List,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftResultsMerger$SuperColumnsPartitionMerger$1: org.apache.cassandra.db.rows.Cell computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator: org.apache.cassandra.db.DecoratedKey computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator$In: boolean isEOF()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.KeyIterator$In: org.apache.cassandra.io.util.DataInputPlus get()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager$PagersIterator: org.apache.cassandra.db.rows.RowIterator computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: org.apache.cassandra.service.pager.SinglePartitionPager[] access$000(org.apache.cassandra.service.pager.MultiPartitionPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: int access$100(org.apache.cassandra.service.pager.MultiPartitionPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.MultiPartitionPager: org.apache.cassandra.db.filter.DataLimits access$200(org.apache.cassandra.service.pager.MultiPartitionPager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellIterator: org.apache.cassandra.db.rows.Cell computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeCommandIterator: org.apache.cassandra.db.rows.RowIterator computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeCommandIterator: org.apache.cassandra.db.partitions.PartitionIterator sendNextRequests()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeCommandIterator: org.apache.cassandra.service.StorageProxy$SingleRangeResponse query(org.apache.cassandra.service.StorageProxy$RangeForQuery,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: org.apache.cassandra.db.PartitionRangeReadCommand forSubRange(org.apache.cassandra.dht.AbstractBounds,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ReadCallback: void assureSufficientLiveNodes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SingleRangeResponse: void <init>(org.apache.cassandra.service.ReadCallback,org.apache.cassandra.service.StorageProxy$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SingleRangeResponse: void <init>(org.apache.cassandra.service.ReadCallback)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByPagingLimits: org.apache.cassandra.db.filter.DataLimits withoutState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLPagingLimits: org.apache.cassandra.db.filter.DataLimits withoutState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: org.apache.cassandra.db.filter.DataLimits withoutState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLGroupByLimits: org.apache.cassandra.db.filter.DataLimits withoutState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$CQLLimits: org.apache.cassandra.db.filter.DataLimits withoutState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$RangeMerger: org.apache.cassandra.service.StorageProxy$RangeForQuery computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.ExcludingBounds: org.apache.cassandra.dht.AbstractBounds withNewRight(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.IncludingExcludingBounds: org.apache.cassandra.dht.AbstractBounds withNewRight(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: org.apache.cassandra.dht.AbstractBounds withNewRight(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Range: org.apache.cassandra.dht.AbstractBounds withNewRight(org.apache.cassandra.dht.RingPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: boolean isSufficientLiveNodes(org.apache.cassandra.db.Keyspace,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.List access$200(java.util.List,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: java.util.List intersection(java.util.List,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$3: org.apache.cassandra.db.LegacyLayout$LegacyCell computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$4: org.apache.cassandra.db.LegacyLayout$LegacyCell computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyCell access$500(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyCell makeLegacyCell(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeRangeIterator: org.apache.cassandra.utils.MerkleTree$TreeRange computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SingleRangeResponse: org.apache.cassandra.db.rows.RowIterator computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$SingleRangeResponse: void waitForResponse()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: org.apache.cassandra.db.rows.Cell computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: java.util.Iterator makeComplexIterator(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: int getComplexIdxAndIncrement()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: int getSimpleIdxAndIncrement()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: int getComplexIdx()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow$CellInLegacyOrderIterator: int getSimpleIdx()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: java.util.Iterator reverseIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredRowIterators$1: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$OldFormatTombstoneIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableSimpleIterator$CurrentFormatTombstoneIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.UnfilteredSerializer: org.apache.cassandra.db.rows.Unfiltered deserializeTombstonesOnly(org.apache.cassandra.io.util.FileDataInput,org.apache.cassandra.db.SerializationHeader,org.apache.cassandra.db.rows.SerializationHelper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsBuffer$1: java.nio.ByteBuffer computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.columniterator.SSTableReversedIterator$SkipLastIterator: org.apache.cassandra.db.rows.Unfiltered computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: int compareCollectionMembers(java.nio.ByteBuffer,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: int compareCollectionMembers(java.nio.ByteBuffer,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.AbstractType getComparator(int,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.CompositeType: org.apache.cassandra.db.marshal.AbstractType getComparator(int,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.MapType: int compareMaps(org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SegmentIterator: org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: void handleUnrecoverableError(org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$NoOpSegmenter: boolean tolerateSegmentErrors(int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$CompressedSegmenter: org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment nextSegment(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter: org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment nextSegment(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$NoOpSegmenter: org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment nextSegment(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadException: void <init>(java.lang.String,org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadErrorReason,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: org.apache.cassandra.db.commitlog.CommitLogDescriptor access$000(org.apache.cassandra.db.commitlog.CommitLogSegmentReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: org.apache.cassandra.io.util.RandomAccessReader access$100(org.apache.cassandra.db.commitlog.CommitLogSegmentReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: int access$200(org.apache.cassandra.db.commitlog.CommitLogSegmentReader,org.apache.cassandra.db.commitlog.CommitLogDescriptor,int,org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: org.apache.cassandra.db.commitlog.CommitLogSegmentReader$Segmenter access$300(org.apache.cassandra.db.commitlog.CommitLogSegmentReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: org.apache.cassandra.db.commitlog.CommitLogReadHandler access$500(org.apache.cassandra.db.commitlog.CommitLogSegmentReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: boolean access$400(org.apache.cassandra.db.commitlog.CommitLogSegmentReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: int readSyncMarker(org.apache.cassandra.db.commitlog.CommitLogDescriptor,int,org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.RandomAccessReader: long getPosition()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SegmentReadException: void <init>(java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SyncSegment: void <init>(org.apache.cassandra.io.util.FileDataInput,int,int,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream: void <init>(java.lang.String,long,int,int,org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream$ChunkProvider)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileSegmentInputStream: void <init>(java.nio.ByteBuffer,java.lang.String,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: boolean shouldSkipSegmentOnError(org.apache.cassandra.db.commitlog.CommitLogReadHandler$CommitLogReadException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$CommitLogReplayException: void <init>(java.lang.String,java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$2: org.apache.cassandra.dht.Token computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator: org.apache.cassandra.utils.MerkleTree$TreeRange computeNext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator: org.apache.cassandra.utils.MerkleTree$TreeRange nextIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$TreeRangeIterator invalids()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntervalTree: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.IntervalTree: org.slf4j.Logger access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: com.google.common.collect.Multimap getPendingRangesMM(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTypeStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterViewStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropViewStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateViewStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RoleManagementStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropAggregateStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropFunctionStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateFunctionStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTypeStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTypeStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTriggerStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTriggerStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListRolesStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropRoleStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterRoleStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthenticationStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateRoleStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListPermissionsStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthorizationStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.PermissionsManagementStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterKeyspaceStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterTableStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropIndexStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropTableStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropKeyspaceStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateIndexStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SchemaAlteringStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateKeyspaceStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TruncateStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TruncateStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UseStatement: void checkAccess(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void hasColumnFamilyAccess(java.lang.String,java.lang.String,org.apache.cassandra.auth.Permission)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void hasAccess(java.lang.String,org.apache.cassandra.auth.Permission,org.apache.cassandra.auth.DataResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void ensureHasPermission(org.apache.cassandra.auth.Permission,org.apache.cassandra.auth.IResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void preventSystemKSSchemaModification(java.lang.String,org.apache.cassandra.auth.DataResource,org.apache.cassandra.auth.Permission)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void validateKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: boolean isKeyspaceLevel()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.SchemaConstants: boolean isReplicatedSystemKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: boolean hasParent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: boolean hasParent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: boolean hasParent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void checkPermissionOnResourceChain(org.apache.cassandra.auth.Permission,org.apache.cassandra.auth.IResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: java.util.Set authorize(org.apache.cassandra.auth.IResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.Resources: java.util.List chain(org.apache.cassandra.auth.IResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: org.apache.cassandra.auth.IResource getParent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: org.apache.cassandra.auth.IResource getParent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: org.apache.cassandra.auth.IResource getParent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: org.apache.cassandra.auth.IResource getParent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.Set getUnreachableMembers()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.Set getLiveRingMembers(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.TruncateResponseHandler: void get()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.TruncateResponseHandler: void <init>(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Truncation: org.apache.cassandra.net.MessageOut createMessage()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Truncation: void <init>(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: boolean isAnyStorageHostDown()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.Set getUnreachableTokenOwners()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void hasAllKeyspacesAccess(org.apache.cassandra.auth.Permission)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateTableStatement: void grantPermissionsToCreator(org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateAggregateStatement: void grantPermissionsToCreator(org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateFunctionStatement: void grantPermissionsToCreator(org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SchemaAlteringStatement: void grantPermissionsToCreator(org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateKeyspaceStatement: void grantPermissionsToCreator(org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void hasKeyspaceAccess(java.lang.String,org.apache.cassandra.auth.Permission)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListRolesStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListPermissionsStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RevokePermissionsStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.GrantPermissionsStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListPermissionsStatement: org.apache.cassandra.transport.messages.ResultMessage resultMessage(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListPermissionsStatement: java.util.Set list(org.apache.cassandra.service.ClientState,org.apache.cassandra.auth.IResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: void addColumnValue(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: java.util.List lastRow()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListRolesStatement: org.apache.cassandra.transport.messages.ResultMessage resultMessage(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListRolesStatement: org.apache.cassandra.transport.messages.ResultMessage formatResults(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ListUsersStatement: org.apache.cassandra.transport.messages.ResultMessage formatResults(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.Roles: boolean hasSuperuserStatus(org.apache.cassandra.auth.RoleResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RolesCache: java.util.Set getRoles(org.apache.cassandra.auth.RoleResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthCache: java.lang.Object get(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthenticationStatement: void checkPermission(org.apache.cassandra.service.ClientState,org.apache.cassandra.auth.Permission,org.apache.cassandra.auth.RoleResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.RevokeRoleStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.GrantRoleStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.DropRoleStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AlterRoleStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateRoleStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.CreateRoleStatement: void grantPermissionsToCreator(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleOptions: java.util.Map getOptions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void ensureIsSuper(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.IAuthenticator getAuthenticator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void ensureHasPermission(org.apache.cassandra.auth.Permission,org.apache.cassandra.cql3.functions.Function)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.View: org.apache.cassandra.config.CFMetaData findBaseTable(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: void hasColumnFamilyAccess(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.auth.Permission)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.BatchQueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.BatchQueryOptions: long getTimestamp(org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: org.apache.cassandra.transport.messages.ResultMessage execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.BatchQueryOptions,boolean,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: void executeWithoutConditions(java.util.Collection,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: org.apache.cassandra.transport.messages.ResultMessage executeWithConditions(org.apache.cassandra.cql3.BatchQueryOptions,org.apache.cassandra.service.QueryState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.BatchQueryOptions: org.apache.cassandra.db.ConsistencyLevel getConsistency()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.BatchQueryOptions: org.apache.cassandra.db.ConsistencyLevel getSerialConsistency()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.db.ConsistencyLevel getSerialConsistency()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions$SpecificOptions: org.apache.cassandra.db.ConsistencyLevel access$500(org.apache.cassandra.cql3.QueryOptions$SpecificOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.rows.RowIterator cas(java.lang.String,java.lang.String,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.service.CASRequest,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: void validateForCas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: void validateForCasCommit(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest: org.apache.cassandra.db.partitions.PartitionUpdate makeUpdates(org.apache.cassandra.db.partitions.FilteredPartition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest: boolean appliesTo(org.apache.cassandra.db.partitions.FilteredPartition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest: org.apache.cassandra.db.SinglePartitionReadCommand readCommand(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.rows.RowIterator readOne(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.db.ConsistencyLevel,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.db.rows.RowIterator readOne(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionColumns: org.apache.cassandra.db.PartitionColumns withoutStatics()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.filter.DataLimits thriftLimits(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.rows.RowIterator toRowIterator(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,java.util.Iterator,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo: org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo live()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$ThriftLimits: void <init>(int,int,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest: org.apache.cassandra.db.rows.UnfilteredRowIterator expectedToUnfilteredRowIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.utils.SearchIterator searchIterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.rows.UnfilteredRowIterator toUnfilteredRowIterator(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.LegacyLayout$LegacyDeletionInfo,java.util.Iterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: void requireNetworkTopologyStrategy(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: void verifyBatchType(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: void verifyBatchSize(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void mutateWithTriggers(java.util.Collection,org.apache.cassandra.db.ConsistencyLevel,boolean,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.TriggerExecutor: java.util.Collection execute(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void mutateAtomically(java.util.Collection,org.apache.cassandra.db.ConsistencyLevel,boolean,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: void assureSufficientLiveNodes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.service.StorageProxy$BatchlogEndpoints getBatchlogEndpoints(java.lang.String,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_mutateAtomically_1__352: org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanupCallback bootstrap$(org.apache.cassandra.service.StorageProxy$BatchlogEndpoints,java.util.UUID,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: org.apache.cassandra.service.StorageProxy$WriteResponseHandlerWrapper wrapBatchResponseHandler(org.apache.cassandra.db.Mutation,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.db.WriteType,org.apache.cassandra.service.BatchlogResponseHandler$BatchlogCleanup,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void syncWriteToBatchlog(java.util.Collection,org.apache.cassandra.service.StorageProxy$BatchlogEndpoints,java.util.UUID,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy: void syncWriteBatchedMutations(java.util.List,java.lang.String,org.apache.cassandra.concurrent.Stage)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.BatchlogResponseHandler: void get()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch: int size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: org.apache.cassandra.db.Mutation getStoreMutation(org.apache.cassandra.batchlog.Batch,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: java.nio.ByteBuffer getSerializedMutations(int,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_syncWriteToBatchlog_2__45: java.lang.Runnable bootstrap$(org.apache.cassandra.batchlog.Batch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_syncWriteToBatchlog_2__45: void <init>(org.apache.cassandra.batchlog.Batch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$lambda_mutateAtomically_1__352: void <init>(org.apache.cassandra.service.StorageProxy$BatchlogEndpoints,java.util.UUID,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: java.util.Map getDatacenterRacks()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.locator.TokenMetadata$Topology getTopology()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.locator.TokenMetadata cachedOnlyTokenMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$EndpointFilter: java.util.Collection filter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$EndpointFilter: void <init>(java.lang.String,com.google.common.collect.Multimap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$BatchlogEndpoints: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$EndpointFilter: int getRandomInt(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$EndpointFilter: void shuffle(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$EndpointFilter: boolean isValid(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.triggers.TriggerExecutor: java.util.Collection mergeMutations(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation: org.apache.cassandra.db.Mutation merge(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: int dataSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getBatchSizeWarnThreshold()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getBatchSizeFailThreshold()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.AbstractCell: int dataSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.ComplexColumnData: int dataSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DeletionTime: int dataSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.CellPath: int dataSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getUnloggedBatchAcrossPartitionsWarnThreshold()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.transport.messages.ResultMessage executeWithoutCondition(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: org.apache.cassandra.transport.messages.ResultMessage executeWithCondition(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: void validateForWrite(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ConsistencyLevel: void validateCounterForWrite(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.transport.messages.ResultMessage$Rows execute(org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: org.apache.cassandra.transport.messages.ResultMessage$Rows execute(org.apache.cassandra.db.ReadQuery,org.apache.cassandra.cql3.QueryOptions,org.apache.cassandra.service.QueryState,int,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager: org.apache.cassandra.cql3.statements.SelectStatement$Pager forDistributedQuery(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager: void <init>(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,org.apache.cassandra.cql3.statements.SelectStatement$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement$Pager$NormalPager: void <init>(org.apache.cassandra.service.pager.QueryPager,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadQuery$1: org.apache.cassandra.db.partitions.PartitionIterator execute(org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: org.apache.cassandra.tracing.TraceState begin(java.lang.String,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Rows: org.apache.cassandra.thrift.CqlResult toThriftResult()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$SchemaChange: org.apache.cassandra.thrift.CqlResult toThriftResult()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$SetKeyspace: org.apache.cassandra.thrift.CqlResult toThriftResult()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Void: org.apache.cassandra.thrift.CqlResult toThriftResult()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage process(java.lang.String,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,java.util.Map,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: java.lang.String uncompress(java.nio.ByteBuffer,org.apache.cassandra.thrift.Compression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: org.apache.cassandra.cql3.QueryHandler getCQLQueryHandler()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.db.ConsistencyLevel fromThrift(org.apache.cassandra.thrift.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.cql3.QueryOptions fromThrift(org.apache.cassandra.db.ConsistencyLevel,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: java.lang.RuntimeException rethrow(org.apache.cassandra.exceptions.RequestExecutionException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.thrift.InvalidRequestException toThrift(org.apache.cassandra.exceptions.RequestValidationException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.thrift.TimedOutException toThrift(org.apache.cassandra.exceptions.RequestFailureException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.thrift.TimedOutException toThrift(org.apache.cassandra.exceptions.RequestTimeoutException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: org.apache.cassandra.thrift.TimedOutException setPaxos_in_progress(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: org.apache.cassandra.thrift.TimedOutException setAcknowledged_by_batchlog(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: org.apache.cassandra.thrift.TimedOutException setAcknowledged_by(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: void setAcknowledged_byIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: void setAcknowledged_by_batchlogIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: void setPaxos_in_progressIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ByteBufferUtil: java.lang.String string(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage process(java.lang.String,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryOptions: org.apache.cassandra.cql3.QueryOptions prepare(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SelectStatement: int getBoundTerms()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.ModificationStatement: int getBoundTerms()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.BatchStatement: int getBoundTerms()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthenticationStatement: int getBoundTerms()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.AuthorizationStatement: int getBoundTerms()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.SchemaAlteringStatement: int getBoundTerms()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.TruncateStatement: int getBoundTerms()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.statements.UseStatement: int getBoundTerms()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: void <init>(org.apache.cassandra.thrift.CqlResultType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet: org.apache.cassandra.thrift.CqlResult toThriftResult()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata: void <init>(java.util.Map,java.util.Map,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: org.apache.cassandra.thrift.Column setValue(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: void <init>(java.nio.ByteBuffer,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: org.apache.cassandra.thrift.CqlResult setSchema(org.apache.cassandra.thrift.CqlMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: org.apache.cassandra.thrift.CqlResult setRows(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$ResultMetadata: int access$000(org.apache.cassandra.cql3.ResultSet$ResultMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: void stop()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TracingImpl: void stopSessionImpl()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TracingImpl: org.apache.cassandra.tracing.TraceStateImpl getStateImpl()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceKeyspace: org.apache.cassandra.db.Mutation makeStopSessionMutation(java.nio.ByteBuffer,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.ExpiredTraceState: org.apache.cassandra.tracing.TraceState getDelegate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.ExpiredTraceState: void waitForPendingEvents()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TracingImpl: org.apache.cassandra.tracing.TraceState begin(java.lang.String,java.net.InetAddress,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceKeyspace: org.apache.cassandra.db.Mutation makeStartSessionMutation(java.nio.ByteBuffer,java.net.InetAddress,java.util.Map,java.lang.String,long,java.lang.String,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: void handleMutation(org.apache.cassandra.db.Mutation,int,int,org.apache.cassandra.db.commitlog.CommitLogDescriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: int getMessagingVersion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataInputBuffer: void <init>(byte[],int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataInputBuffer: java.nio.ByteBuffer slice(byte[],int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$MutationInitiator: java.util.concurrent.Future initiateMutation(org.apache.cassandra.db.Mutation,long,int,int,org.apache.cassandra.db.commitlog.CommitLogReplayer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$MutationInitiator$1: void <init>(org.apache.cassandra.db.commitlog.CommitLogReplayer$MutationInitiator,org.apache.cassandra.db.Mutation,org.apache.cassandra.db.commitlog.CommitLogReplayer,long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask submit(java.lang.Runnable,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: java.util.Collection sstablesInBounds(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void maybeResetTraceSessionWrapper(java.lang.Runnable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SnapshotDeletingTask: void rescheduleFailedTasks()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper: void access$000(org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftSessionManager: void setCurrentSocket(java.net.SocketAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: org.apache.thrift.transport.TTransportFactory access$100(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: org.apache.thrift.transport.TTransportFactory access$200(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: org.apache.thrift.TProcessorFactory access$300(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: org.apache.thrift.protocol.TProtocolFactory access$400(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: org.apache.thrift.protocol.TProtocolFactory access$500(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: boolean access$600(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: org.apache.thrift.protocol.TProtocolFactory access$700(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: org.apache.thrift.protocol.TProtocolFactory access$800(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: java.util.concurrent.atomic.AtomicInteger access$1000(org.apache.cassandra.thrift.CustomTThreadPoolServer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer: org.slf4j.Logger access$900()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedStreamWriter$lambda_write_0__50: com.google.common.base.Function bootstrap$(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.utils.Pair,long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedStreamWriter$lambda_write_0__50: void <init>(org.apache.cassandra.io.util.ChannelProxy,org.apache.cassandra.utils.Pair,long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$SocketThread: boolean authenticate(java.net.Socket)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.IncomingStreamingConnection: void <init>(int,java.net.Socket,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.IncomingTcpConnection: void <init>(int,boolean,java.net.Socket,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void validateMagic(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: int getBits(int,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getInternodeRecvBufferSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.auth.IInternodeAuthenticator getInternodeAuthenticator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String[] getAllDataFileLocations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isDirectory__48: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_migrateDataDirs_5__49: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$lambda_migrateDataDirs_5__49: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace$isDirectory__48: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Clock: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Message: java.util.Set access$200()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Server: org.slf4j.Logger access$900()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Server$LatestEvent: org.apache.cassandra.transport.Server$LatestEvent forStatusChange(org.apache.cassandra.transport.Event$StatusChange$Status,org.apache.cassandra.transport.Server$LatestEvent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Server$LatestEvent: void <init>(org.apache.cassandra.transport.Event$StatusChange$Status,org.apache.cassandra.transport.Event$TopologyChange$Change)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.NIODataInputStream: void <init>(java.nio.channels.ReadableByteChannel,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.NIODataInputStream: java.nio.ByteBuffer makeBuffer(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void receive(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: long readConstructionTime(java.net.InetAddress,org.apache.cassandra.io.util.DataInputPlus,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: org.apache.cassandra.net.MessageIn read(org.apache.cassandra.io.util.DataInputPlus,int,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSynSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAckSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2Serializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch$Serializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation$MutationSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$Serializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BooleanSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WriteResponse$Serializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintResponse$Serializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$MigrationsSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$CounterMutationSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.net.CallbackInfo getRegisteredCallback(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$CallbackDeterminedSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper$StringSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SnapshotCommandSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintMessage$Serializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.PingMessage$PingMessageSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit$CommitSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncationSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.ForwardingVersionedSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: org.apache.cassandra.net.MessageIn create(java.net.InetAddress,java.lang.Object,java.util.Map,org.apache.cassandra.net.MessagingService$Verb,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: org.apache.cassandra.db.ReadCommand deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: org.apache.cassandra.db.SinglePartitionReadCommand deserializeSliceCommand(org.apache.cassandra.io.util.DataInputPlus,boolean,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: org.apache.cassandra.db.SinglePartitionReadCommand deserializeNamesCommand(org.apache.cassandra.io.util.DataInputPlus,boolean,org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyType: org.apache.cassandra.db.ReadCommand$LegacyType fromSerializedValue(byte)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: org.apache.cassandra.utils.Pair deserializeNamesSelectionAndFilter(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand legacyNamesCommand(boolean,int,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.filter.ClusteringIndexNamesFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: org.apache.cassandra.utils.Pair deserializeSlicePartitionFilter(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: org.apache.cassandra.db.filter.ColumnFilter getColumnSelectionForSlice(boolean,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: org.apache.cassandra.db.SinglePartitionReadCommand legacySliceCommand(boolean,int,org.apache.cassandra.config.CFMetaData,int,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.filter.ClusteringIndexSliceFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: org.apache.cassandra.db.ReadCommand deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: org.apache.cassandra.schema.IndexMetadata deserializeIndexMetadata(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Serializer: org.apache.cassandra.db.filter.ColumnFilter deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Serializer: org.apache.cassandra.db.filter.RowFilter deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Serializer: org.apache.cassandra.db.filter.DataLimits deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Kind: org.apache.cassandra.db.ReadCommand$Kind[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: boolean isDigest(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: boolean isForThrift(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: boolean hasIndex(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Kind: org.apache.cassandra.db.ReadCommand$SelectionDeserializer access$700(org.apache.cassandra.db.ReadCommand$Kind)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification$Serializer: org.apache.cassandra.db.aggregation.AggregationSpecification deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupingState$Serializer: org.apache.cassandra.db.aggregation.GroupingState deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits: void <init>(int,int,org.apache.cassandra.db.filter.DataLimits$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Kind: org.apache.cassandra.db.filter.DataLimits$Kind[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.filter.DataLimits access$1400(int,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits: org.apache.cassandra.db.filter.DataLimits cqlLimits(int,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$SuperColumnCountingLimits: void <init>(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification$Kind: org.apache.cassandra.db.aggregation.AggregationSpecification$Kind[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftFilter: void <init>(java.util.List,org.apache.cassandra.db.filter.RowFilter$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression$Serializer: org.apache.cassandra.db.filter.RowFilter$Expression deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$Serializer: org.apache.cassandra.schema.IndexMetadata deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftExpression: void <init>(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.cql3.Operator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression$Kind: org.apache.cassandra.db.filter.RowFilter$Expression$Kind[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression: org.apache.cassandra.db.filter.RowFilter$UserExpression access$700(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operator: org.apache.cassandra.cql3.Operator readFrom(java.io.DataInput)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operator: org.apache.cassandra.cql3.Operator[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression: org.apache.cassandra.db.filter.RowFilter$UserExpression deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry: org.apache.cassandra.db.filter.RowFilter$UserExpression$Deserializer getDeserializer(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftExpression: org.apache.cassandra.config.ColumnDefinition makeDefinition(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$Serializer$lambda_deserialize_0__342: java.util.function.Supplier bootstrap$(org.apache.cassandra.config.CFMetaData,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$Serializer$lambda_deserialize_0__342: void <init>(org.apache.cassandra.config.CFMetaData,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$ThriftFilter: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Serializer: org.apache.cassandra.db.filter.ColumnSubselection deserialize(org.apache.cassandra.io.util.DataInputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Kind: org.apache.cassandra.db.filter.ColumnSubselection$Kind[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: org.apache.cassandra.db.ReadCommand deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer: java.lang.Object deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: org.apache.cassandra.db.filter.RowFilter deserializeRowFilter(org.apache.cassandra.io.util.DataInputPlus,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: org.apache.cassandra.db.filter.RowFilter create(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer: org.apache.cassandra.dht.AbstractBounds deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$TokenSerializer: java.lang.Object deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionPosition$RowPositionSerializer: java.lang.Object deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionPosition$RowPositionSerializer: org.apache.cassandra.db.PartitionPosition deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$TokenSerializer: org.apache.cassandra.dht.Token deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionPosition$Kind: org.apache.cassandra.db.PartitionPosition$Kind fromOrdinal(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer: org.apache.cassandra.db.ReadCommand deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.AbstractClusteringPrefix: boolean equals(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer: org.apache.cassandra.db.ReadResponse deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRemoteDataResponse: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$Serializer: org.apache.cassandra.db.ReadResponse deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$RemoteDataResponse: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncationSerializer: org.apache.cassandra.db.Truncation deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer: org.apache.cassandra.repair.messages.RepairMessage deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$Type: org.apache.cassandra.repair.messages.RepairMessage$Type fromByte(byte)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$Type: org.apache.cassandra.repair.messages.RepairMessage$Type[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer: org.apache.cassandra.repair.messages.CleanupMessage deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.CleanupMessage: void <init>(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer: org.apache.cassandra.repair.messages.SnapshotMessage deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SnapshotMessage: void <init>(org.apache.cassandra.repair.RepairJobDesc)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer: org.apache.cassandra.repair.RepairJobDesc deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairJobDesc: void <init>(java.util.UUID,java.util.UUID,java.lang.String,java.lang.String,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: org.apache.cassandra.dht.IPartitioner globalPartitioner()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer: org.apache.cassandra.repair.messages.PrepareMessage deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.PrepareMessage: void <init>(java.util.UUID,java.util.List,java.util.Collection,boolean,long,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer: org.apache.cassandra.repair.messages.AnticompactionRequest deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.AnticompactionRequest: void <init>(java.util.UUID,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer: org.apache.cassandra.repair.messages.SyncComplete deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.NodePair$NodePairSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncComplete: void <init>(org.apache.cassandra.repair.RepairJobDesc,org.apache.cassandra.repair.NodePair,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.NodePair$NodePairSerializer: org.apache.cassandra.repair.NodePair deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer: org.apache.cassandra.repair.messages.SyncRequest deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncRequest: void <init>(org.apache.cassandra.repair.RepairJobDesc,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer: org.apache.cassandra.repair.messages.ValidationRequest deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationRequest: void <init>(org.apache.cassandra.repair.RepairJobDesc,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer: org.apache.cassandra.repair.messages.ValidationComplete deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer: org.apache.cassandra.utils.MerkleTrees deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.IPartitioner partitioner()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer: org.apache.cassandra.utils.MerkleTree deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees: void <init>(org.apache.cassandra.dht.IPartitioner,java.util.Collection,org.apache.cassandra.utils.MerkleTrees$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer: java.lang.Object deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: org.apache.cassandra.dht.IPartitioner newPartitioner(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: long access$102(org.apache.cassandra.utils.MerkleTree,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$Hashable access$302(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree$Hashable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: org.apache.cassandra.dht.IPartitioner newPartitioner(java.lang.String,java.util.Optional)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer: org.apache.cassandra.utils.MerkleTree$Hashable deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer: org.apache.cassandra.utils.MerkleTree$Leaf deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer: org.apache.cassandra.utils.MerkleTree$Inner deserialize(java.io.DataInput,org.apache.cassandra.dht.IPartitioner,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit$CommitSerializer: org.apache.cassandra.service.paxos.Commit deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.PingMessage$PingMessageSerializer: org.apache.cassandra.net.PingMessage deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.PingMessage: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintMessage$Serializer: org.apache.cassandra.hints.HintMessage deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintMessage: void <init>(java.util.UUID,org.apache.cassandra.hints.Hint)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.Hint$Serializer: org.apache.cassandra.hints.Hint deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintMessage: void <init>(java.util.UUID,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.Hint: void <init>(org.apache.cassandra.db.Mutation,long,int,org.apache.cassandra.hints.Hint$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SnapshotCommandSerializer: org.apache.cassandra.db.SnapshotCommand deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SnapshotCommand: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper$StringSerializer: java.lang.String deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap: java.lang.Object get(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$CounterMutationSerializer: org.apache.cassandra.db.CounterMutation deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer: org.apache.cassandra.db.TruncateResponse deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$MigrationsSerializer: java.util.Collection deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintResponse$Serializer: org.apache.cassandra.hints.HintResponse deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WriteResponse$Serializer: org.apache.cassandra.db.WriteResponse deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WriteResponse: org.apache.cassandra.db.WriteResponse access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BooleanSerializer: java.lang.Boolean deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer: org.apache.cassandra.service.paxos.PrepareResponse deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer: org.apache.cassandra.gms.EchoMessage deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch$Serializer: org.apache.cassandra.batchlog.Batch deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch$Serializer: java.util.Collection readEncodedMutations(org.apache.cassandra.io.util.DataInputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch: org.apache.cassandra.batchlog.Batch createRemote(java.util.UUID,long,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch$Serializer: java.util.Collection decodeMutations(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2Serializer: org.apache.cassandra.gms.GossipDigestAck2 deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointStateSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointStateSerializer: org.apache.cassandra.gms.EndpointState deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatStateSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer: org.apache.cassandra.gms.VersionedValue deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: void <init>(java.lang.String,int,org.apache.cassandra.gms.VersionedValue$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatStateSerializer: org.apache.cassandra.gms.HeartBeatState deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAckSerializer: org.apache.cassandra.gms.GossipDigestAck deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializationHelper: java.util.List deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializer: java.lang.Object deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializer: org.apache.cassandra.gms.GossipDigest deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSynSerializer: org.apache.cassandra.gms.GossipDigestSyn deserialize(org.apache.cassandra.io.util.DataInputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.MessagingMetrics: void addTimeTaken(java.net.InetAddress,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean hasCrossNodeTimeout()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.MessagingMetrics$lambda_addTimeTaken_0__340: java.util.function.Function bootstrap$(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.MessagingMetrics$lambda_addTimeTaken_0__340: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageIn: org.apache.cassandra.concurrent.Stage getMessageType()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: org.apache.cassandra.tracing.TraceState initializeFromMessage(org.apache.cassandra.net.MessageIn)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageDeliveryTask: void <init>(org.apache.cassandra.net.MessageIn,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService: void execute(java.lang.Runnable,org.apache.cassandra.concurrent.ExecutorLocals)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.StageManager$TracingExecutor: void execute(java.lang.Runnable,org.apache.cassandra.concurrent.ExecutorLocals)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor: void execute(java.lang.Runnable,org.apache.cassandra.concurrent.ExecutorLocals)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.ExecutorLocals: org.apache.cassandra.concurrent.ExecutorLocals create(org.apache.cassandra.tracing.TraceState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$LocalSessionWrapper: void <init>(java.lang.Runnable,org.apache.cassandra.concurrent.ExecutorLocals)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: boolean acquireReference()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TracingImpl: org.apache.cassandra.tracing.TraceState newTraceState(java.net.InetAddress,java.util.UUID,org.apache.cassandra.tracing.Tracing$TraceType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: org.apache.cassandra.tracing.TraceState get(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.ExpiredTraceState: void <init>(org.apache.cassandra.tracing.TraceState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing$TraceType: org.apache.cassandra.tracing.Tracing$TraceType deserialize(byte)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceState: void <init>(java.net.InetAddress,java.util.UUID,org.apache.cassandra.tracing.Tracing$TraceType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing$TraceType: int getTTL()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceStateImpl: void <init>(java.net.InetAddress,java.util.UUID,org.apache.cassandra.tracing.Tracing$TraceType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: org.apache.cassandra.streaming.StreamPlan transferRanges(java.net.InetAddress,java.net.InetAddress,java.lang.String,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.Map getTransferredRanges(java.lang.String,java.lang.String,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.UntypedResultSet$Row: java.util.Set getSet(java.lang.String,org.apache.cassandra.db.marshal.AbstractType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.dht.Range byteBufferToRange(java.nio.ByteBuffer,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$lambda_snapshotWithoutFlush_2__47: com.google.common.base.Predicate bootstrap$(com.google.common.base.Predicate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File getSnapshotDirectory(org.apache.cassandra.io.sstable.Descriptor,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$lambda_snapshotWithoutFlush_2__47: void <init>(com.google.common.base.Predicate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: com.clearspring.analytics.stream.cardinality.ICardinality mergeCardinalities(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void <init>(org.apache.cassandra.db.lifecycle.Tracker,org.apache.cassandra.db.compaction.OperationType,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.AuthenticationException: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.PasswordAuthenticator: org.slf4j.Logger access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: void notifyTruncated(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void saveTruncationRecord(org.apache.cassandra.db.ColumnFamilyStore,long,org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void access$900(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.Map truncationAsMapEntry(org.apache.cassandra.db.ColumnFamilyStore,long,org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: java.nio.ByteBuffer asNewBuffer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataOutputBuffer: byte[] toByteArray()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.notifications.TruncationNotification: void <init>(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.SSTableRewriter: java.util.List finish()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: boolean needsCleanup(org.apache.cassandra.io.sstable.format.SSTableReader,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: org.apache.cassandra.io.sstable.format.SSTableWriter createWriter(org.apache.cassandra.db.ColumnFamilyStore,java.io.File,long,long,org.apache.cassandra.io.sstable.format.SSTableReader,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableWriter: org.apache.cassandra.io.sstable.format.SSTableWriter create(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.io.sstable.Descriptor,long,long,int,org.apache.cassandra.db.SerializationHeader,java.util.Collection,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: org.apache.cassandra.utils.Pair getWindowBoundsInMillis(java.util.concurrent.TimeUnit,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: org.apache.cassandra.config.CFMetaData validateColumnFamily(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateColumnParent(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.thrift.ColumnParent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validatePredicate(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SlicePredicate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateIndexClauses(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.thrift.IndexClause)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.db.filter.RowFilter rowFilterFromThrift(org.apache.cassandra.config.CFMetaData,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: void addThriftExpression(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.cql3.Operator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: org.apache.cassandra.db.filter.RowFilter forThrift(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operator: org.apache.cassandra.cql3.Operator valueOf(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: boolean validateFilterClauses(org.apache.cassandra.config.CFMetaData,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: boolean isEmpty(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: org.apache.cassandra.db.marshal.AbstractType getThriftColumnNameComparator(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.marshal.AbstractType makeLegacyComparator(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: org.apache.cassandra.db.marshal.ColumnToCollectionType getInstance(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.ColumnToCollectionType: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateRange(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.thrift.ColumnParent,org.apache.cassandra.thrift.SliceRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateColumnNames(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.thrift.ColumnParent,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateColumnNames(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType$lambda_new_0__161: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.marshal.AbstractType: int lambda$new$0(java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.TopKSampler: boolean access$000(org.apache.cassandra.utils.TopKSampler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.TopKSampler: com.clearspring.analytics.stream.StreamSummary access$100(org.apache.cassandra.utils.TopKSampler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.TopKSampler: org.slf4j.Logger access$200()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlInputFormat$SplitCallable: void <init>(org.apache.cassandra.hadoop.cql3.CqlInputFormat,com.datastax.driver.core.TokenRange,java.util.Set,org.apache.hadoop.conf.Configuration,com.datastax.driver.core.Session)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.HadoopCompat: org.apache.hadoop.conf.Configuration getConfiguration(org.apache.hadoop.mapreduce.JobContext)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: java.lang.String getInputKeyspace(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: java.lang.String getInputColumnFamily(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: org.apache.cassandra.dht.IPartitioner getInputPartitioner(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: java.lang.String getInputInitialAddress(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.datastax.driver.core.Cluster getInputCluster(java.lang.String[],org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: org.apache.cassandra.thrift.KeyRange getInputKeyRange(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: org.apache.cassandra.thrift.KeyRange keyRangeFromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardSchemeFactory: org.apache.thrift.scheme.IScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardSchemeFactory: org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardScheme: void <init>(org.apache.cassandra.thrift.InvalidRequestException$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleSchemeFactory: org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleScheme: void <init>(org.apache.cassandra.thrift.InvalidRequestException$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardSchemeFactory: org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardScheme: void <init>(org.apache.cassandra.thrift.TimedOutException$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleSchemeFactory: org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleScheme: void <init>(org.apache.cassandra.thrift.TimedOutException$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardSchemeFactory: org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardScheme: void <init>(org.apache.cassandra.thrift.ColumnParent$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleSchemeFactory: org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleScheme: void <init>(org.apache.cassandra.thrift.ColumnParent$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultStandardSchemeFactory: org.apache.cassandra.thrift.CASResult$CASResultStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void <init>(org.apache.cassandra.thrift.CASResult$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultTupleSchemeFactory: org.apache.cassandra.thrift.CASResult$CASResultTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultTupleScheme: void <init>(org.apache.cassandra.thrift.CASResult$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeStandardSchemeFactory: org.apache.cassandra.thrift.SliceRange$SliceRangeStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeStandardScheme: void <init>(org.apache.cassandra.thrift.SliceRange$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeTupleSchemeFactory: org.apache.cassandra.thrift.SliceRange$SliceRangeTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeTupleScheme: void <init>(org.apache.cassandra.thrift.SliceRange$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardSchemeFactory: org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardScheme: void <init>(org.apache.cassandra.thrift.NotFoundException$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleSchemeFactory: org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleScheme: void <init>(org.apache.cassandra.thrift.NotFoundException$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardSchemeFactory: org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardScheme: void <init>(org.apache.cassandra.thrift.UnavailableException$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleSchemeFactory: org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleScheme: void <init>(org.apache.cassandra.thrift.UnavailableException$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeStandardSchemeFactory: org.apache.cassandra.thrift.KeyRange$KeyRangeStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeStandardScheme: void <init>(org.apache.cassandra.thrift.KeyRange$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeTupleSchemeFactory: org.apache.cassandra.thrift.KeyRange$KeyRangeTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeTupleScheme: void <init>(org.apache.cassandra.thrift.KeyRange$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardSchemeFactory: org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardScheme: void <init>(org.apache.cassandra.thrift.Cassandra$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleSchemeFactory: org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleScheme: void <init>(org.apache.cassandra.thrift.Cassandra$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardSchemeFactory: org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardScheme: void <init>(org.apache.cassandra.thrift.Cassandra$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleSchemeFactory: org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme: void <init>(org.apache.cassandra.thrift.Cassandra$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardSchemeFactory: org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardScheme: void <init>(org.apache.cassandra.thrift.Cassandra$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleSchemeFactory: org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleScheme: void <init>(org.apache.cassandra.thrift.Cassandra$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardSchemeFactory: org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardScheme: void <init>(org.apache.cassandra.thrift.Cassandra$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleSchemeFactory: org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleScheme: void <init>(org.apache.cassandra.thrift.Cassandra$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardSchemeFactory: org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardScheme: void <init>(org.apache.cassandra.thrift.CqlPreparedResult$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleSchemeFactory: org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleScheme: void <init>(org.apache.cassandra.thrift.CqlPreparedResult$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultStandardSchemeFactory: org.apache.cassandra.thrift.CqlResult$CqlResultStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultStandardScheme: void <init>(org.apache.cassandra.thrift.CqlResult$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultTupleSchemeFactory: org.apache.cassandra.thrift.CqlResult$CqlResultTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultTupleScheme: void <init>(org.apache.cassandra.thrift.CqlResult$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowStandardSchemeFactory: org.apache.cassandra.thrift.CqlRow$CqlRowStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowStandardScheme: void <init>(org.apache.cassandra.thrift.CqlRow$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowTupleSchemeFactory: org.apache.cassandra.thrift.CqlRow$CqlRowTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowTupleScheme: void <init>(org.apache.cassandra.thrift.CqlRow$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnStandardSchemeFactory: org.apache.cassandra.thrift.Column$ColumnStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnStandardScheme: void <init>(org.apache.cassandra.thrift.Column$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnTupleSchemeFactory: org.apache.cassandra.thrift.Column$ColumnTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnTupleScheme: void <init>(org.apache.cassandra.thrift.Column$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardSchemeFactory: org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardScheme: void <init>(org.apache.cassandra.thrift.CqlMetadata$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleSchemeFactory: org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleScheme: void <init>(org.apache.cassandra.thrift.CqlMetadata$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Column)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: void setNameIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: void setTtlIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: void setTimestampIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: void setValueIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Column)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlRow)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: void setColumnsIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: void setKeyIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlRow)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResultType: org.apache.cassandra.thrift.CqlResultType findByValue(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlPreparedResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlPreparedResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_local_ring_result)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: void setIreIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: void setSuccessIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_local_ring_result)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_local_ring_args)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_local_ring_args)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_ring_result)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: void setIreIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: void setSuccessIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_ring_result)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_ring_args)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_ring_args)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.KeyRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void setRow_filterIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void setEnd_tokenIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void setStart_tokenIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void setEnd_keyIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void setStart_keyIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void setCountIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.KeyRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: boolean isSetCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.UnavailableException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.UnavailableException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.NotFoundException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.NotFoundException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.SliceRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.SliceRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CASResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CASResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.ColumnParent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.ColumnParent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.TimedOutException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.TimedOutException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.InvalidRequestException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: void setWhyIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.InvalidRequestException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeStandardSchemeFactory: org.apache.cassandra.thrift.TokenRange$TokenRangeStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeStandardScheme: void <init>(org.apache.cassandra.thrift.TokenRange$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeTupleSchemeFactory: org.apache.cassandra.thrift.TokenRange$TokenRangeTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeTupleScheme: void <init>(org.apache.cassandra.thrift.TokenRange$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardSchemeFactory: org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardScheme: void <init>(org.apache.cassandra.thrift.IndexExpression$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleSchemeFactory: org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleScheme: void <init>(org.apache.cassandra.thrift.IndexExpression$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.IndexExpression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: void setValueIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: void setOpIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: void setColumn_nameIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexOperator: org.apache.cassandra.thrift.IndexOperator findByValue(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.IndexExpression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.TokenRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: void setEndpoint_detailsIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: void setRpc_endpointsIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: void setEndpointsIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: void setEnd_tokenIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: void setStart_tokenIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.TokenRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardSchemeFactory: org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardScheme: void <init>(org.apache.cassandra.thrift.EndpointDetails$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleSchemeFactory: org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleScheme getScheme()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleScheme: void <init>(org.apache.cassandra.thrift.EndpointDetails$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleScheme: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.EndpointDetails)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: void setHostIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: void setRackIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: void setDatacenterIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardScheme: void read(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.EndpointDetails)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: int getInputNativePort(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.datastax.driver.core.Cluster getCluster(java.lang.String[],org.apache.hadoop.conf.Configuration,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getAuthProvider(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getSSLOptions(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getProtocolVersion(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.datastax.driver.core.policies.LoadBalancingPolicy getReadLoadBalancingPolicy(java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.datastax.driver.core.SocketOptions getReadSocketOptions(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.datastax.driver.core.QueryOptions getReadQueryOptions(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.datastax.driver.core.PoolingOptions getReadPoolingOptions(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputCoreConnections(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputMaxConnections(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputMaxSimultReqPerConnections(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getIntSetting(java.lang.String,org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: java.lang.String getReadConsistencyLevel(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputPageRowSize(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeConnectionTimeout(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeReadConnectionTimeout(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeReceiveBufferSize(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeSendBufferSize(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeSolinger(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeTcpNodelay(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeReuseAddress(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeKeepAlive(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getBooleanSetting(java.lang.String,org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeSSLTruststorePath(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeSSLKeystorePath(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeSSLTruststorePassword(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeSSLKeystorePassword(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeSSLCipherSuites(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: javax.net.ssl.SSLContext getSSLContext(com.google.common.base.Optional,com.google.common.base.Optional,com.google.common.base.Optional,com.google.common.base.Optional)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getStringSetting(java.lang.String,org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getInputNativeAuthProvider(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.google.common.base.Optional getDefaultAuthProvider(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: com.datastax.driver.core.AuthProvider getClientAuthProvider(java.lang.String,org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.HadoopCompat: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry$lambda_registerUserExpressionClass_0__36: java.util.function.Function bootstrap$(org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter: org.slf4j.Logger access$1000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry$lambda_registerUserExpressionClass_0__36: void <init>(org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: void reset(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void softCloseSocket()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.ConnectionMetrics: void release()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void updatePreferredIP(java.net.InetAddress,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewBuilder$lambda_buildKey_0__35: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.DecoratedKey,java.util.concurrent.atomic.AtomicLong)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewBuilder$lambda_buildKey_0__35: void <init>(org.apache.cassandra.db.DecoratedKey,java.util.concurrent.atomic.AtomicLong)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.metrics.RestorableMeter getReadMeter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ReadRateComparator: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.RewindableDataInputStreamPlus: void <init>(java.io.InputStream,int,int,java.io.File,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReader: org.slf4j.Logger access$000()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReader$StreamDeserializer: java.io.File getTempBufferFile(org.apache.cassandra.config.CFMetaData,long,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.AbstractCompactionTask: org.apache.cassandra.db.compaction.AbstractCompactionTask setUserDefined(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionTask: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.AbstractCompactionTask: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer: void fixOptionalSliceParameters(org.apache.cassandra.thrift.ColumnSlice)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Mx4jTool: java.lang.String getAddress()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Mx4jTool: int getPort()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: java.util.Set getInvalidMutations()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection$QueuedMessage: boolean shouldRetry()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection$RetriedQueuedMessage: boolean shouldRetry()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TracingImpl: void trace(java.nio.ByteBuffer,java.lang.String,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.Tracing: void doneWithNonLocalSession(org.apache.cassandra.tracing.TraceState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void writeInternal(org.apache.cassandra.net.MessageOut,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection$RetriedQueuedMessage: void <init>(org.apache.cassandra.net.OutboundTcpConnection$QueuedMessage)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis: long convert(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessageOut: void serialize(org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus: void writeUTF(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$Serializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BooleanSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WriteResponse$Serializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit$CommitSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintResponse$Serializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$MigrationsSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAckSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2Serializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch$Serializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncationSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.ForwardingVersionedSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.UUIDSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Mutation$MutationSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$CounterMutationSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSynSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$Verb: org.apache.cassandra.net.MessagingService$Verb convertForMessagingServiceVersion(org.apache.cassandra.net.MessagingService$Verb,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSynSerializer: void serialize(org.apache.cassandra.gms.GossipDigestSyn,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializationHelper: void serialize(java.util.List,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestSerializer: void serialize(org.apache.cassandra.gms.GossipDigest,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CounterMutation$CounterMutationSerializer: void serialize(org.apache.cassandra.db.CounterMutation,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncateResponse$TruncateResponseSerializer: void serialize(org.apache.cassandra.db.TruncateResponse,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void serialize(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void serializeNamesCommand(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void serializeSliceCommand(org.apache.cassandra.db.SinglePartitionReadCommand,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyType: org.apache.cassandra.db.ReadCommand$LegacyType fromPartitionFilterKind(org.apache.cassandra.db.filter.ClusteringIndexFilter$Kind)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void serializeSlices(org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.Slices,boolean,boolean,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: int updateLimitForQuery(int,org.apache.cassandra.db.Slices)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void serializeSlice(org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.Slice,boolean,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void serializeStaticSlice(org.apache.cassandra.io.util.DataOutputPlus,boolean,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void serializeNamesFilter(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: void serialize(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionRangeReadCommand: void serializeSelection(org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SinglePartitionReadCommand: void serializeSelection(org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Serializer: void serialize(org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Serializer: void serialize(org.apache.cassandra.db.filter.RowFilter,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.DataLimits$Serializer: void serialize(org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.io.util.DataOutputPlus,int,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.IndexMetadata$Serializer: void serialize(org.apache.cassandra.schema.IndexMetadata,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: int digestFlag(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: int thriftFlag(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand: org.apache.cassandra.schema.IndexMetadata access$600(org.apache.cassandra.db.ReadCommand)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$Serializer: int indexFlag(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.AggregationSpecification$Serializer: void serialize(org.apache.cassandra.db.aggregation.AggregationSpecification,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.aggregation.GroupingState$Serializer: void serialize(org.apache.cassandra.db.aggregation.GroupingState,org.apache.cassandra.io.util.DataOutputPlus,int,org.apache.cassandra.db.ClusteringComparator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$Expression$Serializer: void serialize(org.apache.cassandra.db.filter.RowFilter$Expression,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.Operator: void writeTo(java.io.DataOutput)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression: void access$500(org.apache.cassandra.db.filter.RowFilter$UserExpression,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression: void serialize(org.apache.cassandra.db.filter.RowFilter$UserExpression,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.RowFilter$UserExpression$DeserializerRegistry: java.lang.Integer getId(org.apache.cassandra.db.filter.RowFilter$UserExpression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnSubselection$Serializer: void serialize(org.apache.cassandra.db.filter.ColumnSubselection,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ColumnFilter$Serializer: int makeHeaderByte(org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.AbstractClusteringIndexFilter$FilterSerializer: void serialize(org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexNamesFilter: void serializeInternal(org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.filter.ClusteringIndexSliceFilter: void serializeInternal(org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Slices$Serializer: void serialize(org.apache.cassandra.db.Slices,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Slice$Serializer: void serialize(org.apache.cassandra.db.Slice,org.apache.cassandra.io.util.DataOutputPlus,int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Serializer: void serialize(org.apache.cassandra.db.DataRange,org.apache.cassandra.io.util.DataOutputPlus,int,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DataRange$Paging: boolean access$200(org.apache.cassandra.db.DataRange$Paging)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer: void serialize(org.apache.cassandra.dht.AbstractBounds,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$TokenSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionPosition$RowPositionSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds$AbstractBoundsSerializer: int kindFlags(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.PartitionPosition$RowPositionSerializer: void serialize(org.apache.cassandra.db.PartitionPosition,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Token$TokenSerializer: void serialize(org.apache.cassandra.dht.Token,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: void serialize(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyReadCommandSerializer: void access$800(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.filter.ClusteringIndexNamesFilter,org.apache.cassandra.io.util.DataOutputPlus)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyRangeSliceCommandSerializer: void serializeRowFilter(org.apache.cassandra.io.util.DataOutputPlus,org.apache.cassandra.db.filter.RowFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadCommand$LegacyPagedRangeCommandSerializer: void serialize(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$LegacyRangeSliceReplySerializer: void serialize(org.apache.cassandra.db.ReadResponse,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ReadResponse$Serializer: void serialize(org.apache.cassandra.db.ReadResponse,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EchoMessage$EchoMessageSerializer: void serialize(org.apache.cassandra.gms.EchoMessage,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.TruncationSerializer: void serialize(org.apache.cassandra.db.Truncation,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.Batch$Serializer: void serialize(org.apache.cassandra.batchlog.Batch,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAck2Serializer: void serialize(org.apache.cassandra.gms.GossipDigestAck2,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointStateSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointStateSerializer: void serialize(org.apache.cassandra.gms.EndpointState,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatStateSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueSerializer: void serialize(org.apache.cassandra.gms.VersionedValue,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatStateSerializer: void serialize(org.apache.cassandra.gms.HeartBeatState,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.GossipDigestAckSerializer: void serialize(org.apache.cassandra.gms.GossipDigestAck,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager$MigrationsSerializer: void serialize(java.util.Collection,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$RepairMessageSerializer: void serialize(org.apache.cassandra.repair.messages.RepairMessage,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.RepairMessage$Type: byte access$000(org.apache.cassandra.repair.messages.RepairMessage$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.CleanupMessage$CleanupMessageSerializer: void serialize(org.apache.cassandra.repair.messages.CleanupMessage,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SnapshotMessage$SnapshotMessageSerializer: void serialize(org.apache.cassandra.repair.messages.SnapshotMessage,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.RepairJobDesc$RepairJobDescSerializer: void serialize(org.apache.cassandra.repair.RepairJobDesc,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void validatePartitioner(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void validatePartitioner(org.apache.cassandra.dht.AbstractBounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.PrepareMessage$PrepareMessageSerializer: void serialize(org.apache.cassandra.repair.messages.PrepareMessage,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.AnticompactionRequest$AnticompactionRequestSerializer: void serialize(org.apache.cassandra.repair.messages.AnticompactionRequest,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncComplete$SyncCompleteSerializer: void serialize(org.apache.cassandra.repair.messages.SyncComplete,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.NodePair$NodePairSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.NodePair$NodePairSerializer: void serialize(org.apache.cassandra.repair.NodePair,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.SyncRequest$SyncRequestSerializer: void serialize(org.apache.cassandra.repair.messages.SyncRequest,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationRequest$ValidationRequestSerializer: void serialize(org.apache.cassandra.repair.messages.ValidationRequest,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.messages.ValidationComplete$ValidationCompleteSerializer: void serialize(org.apache.cassandra.repair.messages.ValidationComplete,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer: void serialize(org.apache.cassandra.utils.MerkleTrees,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$MerkleTreeSerializer: void serialize(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Hashable$HashableSerializer: void serialize(org.apache.cassandra.utils.MerkleTree$Hashable,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Leaf$LeafSerializer: void serialize(org.apache.cassandra.utils.MerkleTree$Leaf,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$Inner$InnerSerializer: void serialize(org.apache.cassandra.utils.MerkleTree$Inner,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintResponse$Serializer: void serialize(org.apache.cassandra.hints.HintResponse,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.Commit$CommitSerializer: void serialize(org.apache.cassandra.service.paxos.Commit,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WriteResponse$Serializer: void serialize(org.apache.cassandra.db.WriteResponse,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BooleanSerializer: void serialize(java.lang.Boolean,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.paxos.PrepareResponse$PrepareResponseSerializer: void serialize(org.apache.cassandra.service.paxos.PrepareResponse,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TracingImpl$1: void <init>(org.apache.cassandra.tracing.TracingImpl,java.nio.ByteBuffer,java.lang.String,java.lang.String,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$Client: java.util.List describe_ring(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$Client: java.util.List describe_local_ring(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: org.apache.cassandra.thrift.Cassandra$Client getClientFromOutputAddressList(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: java.lang.String getOutputKeyspace(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: boolean getOutputLocalDCOnly(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: java.lang.String getOutputInitialAddress(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: int getOutputRpcPort(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: org.apache.cassandra.thrift.Cassandra$Client getClientFromAddressList(org.apache.hadoop.conf.Configuration,java.lang.String[],int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: org.apache.cassandra.thrift.Cassandra$Client createConnection(org.apache.hadoop.conf.Configuration,java.lang.String,java.lang.Integer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$Client: void <init>(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: org.apache.cassandra.thrift.ITransportFactory getClientTransportFactory(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: org.apache.cassandra.thrift.ITransportFactory getClientTransportFactory(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: java.util.Map getOptions(org.apache.hadoop.conf.Configuration,java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$Client: void send_describe_local_ring(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$Client: java.util.List recv_describe_local_ring()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: boolean isSetSuccess()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: void read(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args: org.apache.cassandra.thrift.Cassandra$describe_local_ring_args setKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args: void write(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args: void write(org.apache.thrift.protocol.TProtocol)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.thrift.TBase)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata$CqlMetadataStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlMetadata: org.apache.thrift.protocol.TField access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Column)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column$ColumnStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Column)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Column: org.apache.thrift.protocol.TField access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlRow)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow$CqlRowStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlRow)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlRow: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult$CqlResultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlResult: org.apache.thrift.protocol.TField access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlPreparedResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult$CqlPreparedResultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CqlPreparedResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: org.apache.thrift.protocol.TField access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_local_ring_result)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result$describe_local_ring_resultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_local_ring_result)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: org.apache.thrift.protocol.TStruct access$38400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: org.apache.thrift.protocol.TField access$38500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_result: org.apache.thrift.protocol.TField access$38600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_local_ring_args)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args$describe_local_ring_argsStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_local_ring_args)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args: org.apache.thrift.protocol.TStruct access$37800()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args: org.apache.thrift.protocol.TField access$37900()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_local_ring_args: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_ring_result)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result$describe_ring_resultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_ring_result)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: org.apache.thrift.protocol.TStruct access$37100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: org.apache.thrift.protocol.TField access$37200()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: org.apache.thrift.protocol.TField access$37300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_ring_args)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args$describe_ring_argsStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.Cassandra$describe_ring_args)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args: void validate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args: org.apache.thrift.protocol.TStruct access$36500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args: org.apache.thrift.protocol.TField access$36600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.KeyRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange$KeyRangeStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.KeyRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: org.apache.thrift.protocol.TField access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: org.apache.thrift.protocol.TField access$800()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.KeyRange: org.apache.thrift.protocol.TField access$900()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.UnavailableException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException$UnavailableExceptionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.UnavailableException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.UnavailableException: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.NotFoundException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException$NotFoundExceptionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.NotFoundException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.SliceRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange$SliceRangeStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.SliceRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: org.apache.thrift.protocol.TField access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CASResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult$CASResultStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.CASResult)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.ColumnParent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent$ColumnParentStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.ColumnParent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.TimedOutException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException$TimedOutExceptionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.TimedOutException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TimedOutException: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.InvalidRequestException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException$InvalidRequestExceptionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.InvalidRequestException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.InvalidRequestException: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.TokenRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: org.apache.thrift.protocol.TField access$700()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange: org.apache.thrift.protocol.TField access$800()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.TokenRange$TokenRangeTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.TokenRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.IndexExpression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.IndexExpression$IndexExpressionTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.IndexExpression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsStandardScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.EndpointDetails)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: org.apache.thrift.protocol.TStruct access$300()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: org.apache.thrift.protocol.TField access$400()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: org.apache.thrift.protocol.TField access$500()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails: org.apache.thrift.protocol.TField access$600()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.EndpointDetails$EndpointDetailsTupleScheme: void write(org.apache.thrift.protocol.TProtocol,org.apache.cassandra.thrift.EndpointDetails)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$Client: void send_describe_ring(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$Client: java.util.List recv_describe_ring()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_result: boolean isSetSuccess()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.Cassandra$describe_ring_args: org.apache.cassandra.thrift.Cassandra$describe_ring_args setKeyspace(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void messageReceived(org.apache.cassandra.streaming.messages.StreamMessage)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$MessageHandler: java.nio.channels.ReadableByteChannel getReadChannel(java.net.Socket)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage: org.apache.cassandra.streaming.messages.StreamMessage deserialize(java.nio.channels.ReadableByteChannel,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage$Type: org.apache.cassandra.streaming.messages.StreamMessage$Type get(byte)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage$Type: org.apache.cassandra.streaming.messages.StreamMessage$Type[] values()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void sessionFailed()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void complete()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void received(java.util.UUID,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void receive(org.apache.cassandra.streaming.messages.IncomingFileMessage)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void prepare(java.util.Collection,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void prepareReceiving(org.apache.cassandra.streaming.StreamSummary)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask: void <init>(org.apache.cassandra.streaming.StreamSession,java.util.UUID,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.ReceivedMessage: void <init>(java.util.UUID,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void updateTopology()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void gossipSnitchInfo()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.PropertyFileSnitch: boolean livenessCheck(java.util.HashMap,java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.Set getLiveRingMembers()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue datacenter(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue rack(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: void updateTopology()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata$Topology: void updateEndpoints()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void access$000(org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDC$CDCSizeTracker: void addFlushedSize(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void maybeInitializeLocalState(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$GossipTask: void <init>(org.apache.cassandra.gms.Gossiper,org.apache.cassandra.gms.Gossiper$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$GossipTask: void <init>(org.apache.cassandra.gms.Gossiper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.HeartBeatState: void <init>(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$6: void <init>(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream: long getFilePointer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream: boolean isEOF()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream: void seek(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileSegmentInputStream: long getFilePointer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileSegmentInputStream: boolean isEOF()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileSegmentInputStream: void seek(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker: void addProcessedMutation()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker: void requestTermination()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker: boolean shouldContinue()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader$CommitLogFormat: long calculateClaimedChecksum(org.apache.cassandra.io.util.FileDataInput,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader$CommitLogFormat: void updateChecksum(java.util.zip.CRC32,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader$CommitLogFormat: long calculateClaimedCRC32(org.apache.cassandra.io.util.FileDataInput,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileSegmentInputStream: long size()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileSegmentInputStream: java.lang.String getPath()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.Set getEndpointStates()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: void addSourceFilter(org.apache.cassandra.dht.RangeStreamer$ISourceFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: void <init>(org.apache.cassandra.locator.TokenMetadata,java.util.Collection,java.net.InetAddress,java.lang.String,boolean,org.apache.cassandra.locator.IEndpointSnitch,org.apache.cassandra.dht.StreamStateStore,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer$FailureDetectorSourceFilter: void <init>(org.apache.cassandra.gms.IFailureDetector)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer$ExcludeLocalNodeFilter: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper$1: void <init>(org.apache.cassandra.dht.BootStrapper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: void <init>(java.lang.String,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap getAllRangesWithSourcesFor(java.lang.String,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap getAllRangesWithStrictSourcesFor(java.lang.String,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: boolean useStrictSourcesForRanges(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap getRangeFetchMap(com.google.common.collect.Multimap,java.util.Collection,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer$ExcludeLocalNodeFilter: boolean shouldInclude(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer$FailureDetectorSourceFilter: boolean shouldInclude(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.btree.BTreeSet: boolean removeAll(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.StreamStateStore: java.util.Set getAvailableRanges(java.lang.String,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.Set getAvailableRanges(java.lang.String,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchExecutor: org.slf4j.Logger access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.ConnectionHandler$OutgoingMessageHandler: void sendMessage(org.apache.cassandra.io.util.DataOutputStreamPlus,org.apache.cassandra.streaming.messages.StreamMessage)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage: void serialize(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage: void sent()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.KeepAliveMessage$1: void serialize(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.PrepareMessage$1: void serialize(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.OutgoingFileMessage$1: void serialize(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.ReceivedMessage$1: void serialize(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.RetryMessage$1: void serialize(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.CompleteMessage$1: void serialize(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.SessionFailedMessage$1: void serialize(org.apache.cassandra.streaming.messages.StreamMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.StreamMessage$Type: byte access$000(org.apache.cassandra.streaming.messages.StreamMessage$Type)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.SessionFailedMessage$1: void serialize(org.apache.cassandra.streaming.messages.SessionFailedMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.CompleteMessage$1: void serialize(org.apache.cassandra.streaming.messages.CompleteMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.RetryMessage$1: void serialize(org.apache.cassandra.streaming.messages.RetryMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.ReceivedMessage$1: void serialize(org.apache.cassandra.streaming.messages.ReceivedMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.OutgoingFileMessage$1: void serialize(org.apache.cassandra.streaming.messages.OutgoingFileMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSession: void fileSent(org.apache.cassandra.streaming.messages.FileMessageHeader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.PrepareMessage$1: void serialize(org.apache.cassandra.streaming.messages.PrepareMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer: void serialize(java.lang.Object,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamSummary$StreamSummarySerializer: void serialize(org.apache.cassandra.streaming.StreamSummary,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamRequest$StreamRequestSerializer: void serialize(org.apache.cassandra.streaming.StreamRequest,org.apache.cassandra.io.util.DataOutputPlus,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.messages.KeepAliveMessage$1: void serialize(org.apache.cassandra.streaming.messages.KeepAliveMessage,org.apache.cassandra.io.util.DataOutputStreamPlus,int,org.apache.cassandra.streaming.StreamSession)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: boolean equalsIgnoringCompression(org.apache.cassandra.db.commitlog.CommitLogDescriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: org.apache.cassandra.db.commitlog.CommitLogDescriptor fromHeader(java.io.File,org.apache.cassandra.security.EncryptionContext)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: org.apache.cassandra.io.compress.ICompressor createCompressor(org.apache.cassandra.config.ParameterizedClass)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getCommitLogLocation()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: org.apache.cassandra.db.commitlog.CommitLogDescriptor readHeader(java.io.DataInput,org.apache.cassandra.security.EncryptionContext)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: org.apache.cassandra.config.ParameterizedClass parseCompression(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageProxy$10: void <init>(java.util.Map,java.util.concurrent.CountDownLatch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: void <init>(org.apache.cassandra.db.commitlog.CommitLog,org.apache.cassandra.db.commitlog.CommitLogPosition,java.util.Map,org.apache.cassandra.db.commitlog.CommitLogReplayer$ReplayFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$AlwaysReplayFilter: boolean includes(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter: boolean includes(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$ReplayFilter: org.apache.cassandra.db.commitlog.CommitLogReplayer$ReplayFilter create()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.db.commitlog.CommitLogPosition getTruncatedPosition(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: org.apache.cassandra.db.commitlog.IntervalSet persistedIntervals(java.lang.Iterable,org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: org.apache.cassandra.db.commitlog.CommitLogPosition firstNotCovered(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.String toString(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$lambda_firstNotCovered_0__79: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$lambda_firstNotCovered_0__79: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$AlwaysReplayFilter: void <init>(org.apache.cassandra.db.commitlog.CommitLogReplayer$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$CustomReplayFilter: void <init>(com.google.common.collect.Multimap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$ReplayFilter: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer$AlwaysReplayFilter: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.SlabAllocator$Region: void <init>(java.nio.ByteBuffer,org.apache.cassandra.utils.memory.SlabAllocator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.SlabAllocator$Region: void <init>(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedInputStream: long getBytesRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedInputStream: void <init>(java.io.InputStream)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReader$StreamDeserializer: void cleanup()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReader$StreamDeserializer: org.apache.cassandra.db.DecoratedKey partitionKey()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MemoryInputStream: void <init>(org.apache.cassandra.io.util.Memory)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MemoryInputStream: void <init>(org.apache.cassandra.io.util.Memory,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.MemoryInputStream: java.nio.ByteBuffer getByteBuffer(long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: java.util.List createSSTableAndLengthPairs(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: java.util.List getBuckets(java.util.Collection,double,double,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: java.util.List mostInterestingBucket(java.util.List,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy: java.util.List trimToThreshold(java.util.Set,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: org.apache.cassandra.utils.Pair trimToThresholdWithHotness(java.util.List,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$1: int compare(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$1: int compare(org.apache.cassandra.utils.Pair,org.apache.cassandra.utils.Pair)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$1: long avgSize(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$2: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: java.util.Map getHotnessMap(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: double hotness(org.apache.cassandra.io.sstable.format.SSTableReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$3: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest$CompactionCandidate: void <init>(java.util.Collection,int,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean getDisableSTCSInL0()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.NotFoundException: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateColumnPath(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.thrift.ColumnPath)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.db.LegacyLayout$LegacyCellName decodeCellName(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.StartupException: void <init>(int,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.io.File getHintsDirectory()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: boolean verifyFullPermissions(java.io.File,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories$FileAction: boolean hasPrivilege(java.io.File,org.apache.cassandra.db.Directories$FileAction)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn: void captureWarnings()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn: void resetWarnings()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn: java.util.List getWarnings()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Message$UnexpectedChannelExceptionHandler: void <init>(io.netty.channel.Channel,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Message$Dispatcher$FlushItem: void <init>(io.netty.channel.ChannelHandlerContext,java.lang.Object,org.apache.cassandra.transport.Frame,org.apache.cassandra.transport.Message$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Message: org.apache.cassandra.transport.Message setStreamId(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ErrorMessage: org.apache.cassandra.transport.messages.ErrorMessage fromException(java.lang.Throwable,com.google.common.base.Predicate)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Message$UnexpectedChannelExceptionHandler: boolean apply(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ErrorMessage: void <init>(org.apache.cassandra.exceptions.TransportException,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.ServerError: void <init>(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ErrorMessage$WrappedException: int access$200(org.apache.cassandra.transport.messages.ErrorMessage$WrappedException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ErrorMessage: void <init>(org.apache.cassandra.exceptions.TransportException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Message$Dispatcher$FlushItem: void <init>(io.netty.channel.ChannelHandlerContext,java.lang.Object,org.apache.cassandra.transport.Frame)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn$State: java.util.List access$100(org.apache.cassandra.service.ClientWarn$State)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientWarn$State: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: void replacedEndpoint(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: java.util.Collection valueSet()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: org.apache.cassandra.utils.BiMultiValMap getBootstrapTokens()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Set getLeavingEndpoints()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Set getMovingEndpoints()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void finishJoiningRing(boolean,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void maybeAddOrUpdateKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean bootstrap(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean allowSimultaneousMoves()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean shouldBootstrap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean isAutoBootstrap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: boolean bootstrapInProgress()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: boolean bootstrapComplete()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void setBootstrapState(org.apache.cassandra.db.SystemKeyspace$BootstrapState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_joinTokenRing_0__26: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper: java.util.Collection getBootstrapTokens(org.apache.cassandra.locator.TokenMetadata,java.net.InetAddress,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.Collection getSavedTokens()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.tracing.TraceKeyspace: org.apache.cassandra.schema.KeyspaceMetadata metadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.SystemDistributedKeyspace: org.apache.cassandra.schema.KeyspaceMetadata metadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceParams: org.apache.cassandra.schema.KeyspaceParams simple(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables: org.apache.cassandra.schema.Tables of(org.apache.cassandra.config.CFMetaData[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.KeyspaceMetadata: org.apache.cassandra.schema.KeyspaceMetadata create(java.lang.String,org.apache.cassandra.schema.KeyspaceParams,org.apache.cassandra.schema.Tables)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Tables$Builder: org.apache.cassandra.schema.Tables$Builder add(org.apache.cassandra.config.CFMetaData[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.ReplicationParams: org.apache.cassandra.schema.ReplicationParams simple(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String getAllocateTokensForKeyspace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.util.Collection getInitialTokens()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper: java.util.Collection getSpecifiedTokens(org.apache.cassandra.locator.TokenMetadata,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper: java.util.Collection allocateTokens(org.apache.cassandra.locator.TokenMetadata,java.net.InetAddress,java.lang.String,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper: java.util.Collection getRandomTokens(org.apache.cassandra.locator.TokenMetadata,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: java.util.Collection allocateTokens(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.AbstractReplicationStrategy,java.net.InetAddress,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocator: java.util.Collection addUnit(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: java.util.Collection addUnit(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: org.apache.cassandra.dht.tokenallocator.TokenAllocation$StrategyAdapter getStrategy(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.AbstractReplicationStrategy,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: org.apache.cassandra.dht.tokenallocator.TokenAllocator create(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.dht.tokenallocator.TokenAllocation$StrategyAdapter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: java.util.Collection adjustForCrossDatacenterClashes(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.dht.tokenallocator.TokenAllocation$StrategyAdapter,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: org.apache.commons.math3.stat.descriptive.SummaryStatistics replicatedOwnershipStats(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.AbstractReplicationStrategy,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: java.lang.String statToString(org.apache.commons.math3.stat.descriptive.SummaryStatistics)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$2: boolean inAllocationRing(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$3: boolean inAllocationRing(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$4: boolean inAllocationRing(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$1: boolean inAllocationRing(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: java.util.Map evaluateReplicatedOwnership(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.AbstractReplicationStrategy)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: void addOwnership(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.AbstractReplicationStrategy,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner: org.apache.cassandra.dht.Token midpoint(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$LocalToken: double size(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner$LongToken: double size(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.ComparableObjectToken: double size(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: org.apache.cassandra.dht.tokenallocator.TokenAllocation$StrategyAdapter getStrategy(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.NetworkTopologyStrategy,org.apache.cassandra.locator.IEndpointSnitch,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation: org.apache.cassandra.dht.tokenallocator.TokenAllocation$StrategyAdapter getStrategy(org.apache.cassandra.locator.TokenMetadata,org.apache.cassandra.locator.SimpleStrategy,java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$1: void <init>(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$2: void <init>(java.lang.String,org.apache.cassandra.locator.IEndpointSnitch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$3: void <init>(int,org.apache.cassandra.locator.IEndpointSnitch,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$4: void <init>(int,java.lang.String,org.apache.cassandra.locator.IEndpointSnitch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$LocalToken: org.apache.cassandra.dht.Token increaseSlightly()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Murmur3Partitioner$LongToken: org.apache.cassandra.dht.Token increaseSlightly()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.ComparableObjectToken: org.apache.cassandra.dht.Token increaseSlightly()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.locator.TokenMetadata: java.util.Map getNormalAndBootstrappingTokenToEndpointMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorFactory: org.apache.cassandra.dht.tokenallocator.TokenAllocator createTokenAllocator(java.util.NavigableMap,org.apache.cassandra.dht.tokenallocator.ReplicationStrategy,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$2: int replicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$3: int replicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$4: int replicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$1: int replicas()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocator: void <init>(java.util.NavigableMap,org.apache.cassandra.dht.tokenallocator.ReplicationStrategy,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: void <init>(java.util.NavigableMap,org.apache.cassandra.dht.tokenallocator.ReplicationStrategy,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase: void <init>(java.util.NavigableMap,org.apache.cassandra.dht.tokenallocator.ReplicationStrategy,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList removeFrom(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: double evaluateImprovement(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo,double,double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: void confirmCandidate(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo createCandidates(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo,double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo createTokenInfos(java.util.Map,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: java.util.Collection generateRandomTokens(java.lang.Object,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase: java.util.Map createUnitInfos(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: double optimalTokenOwnership(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: int unitCount()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo: void <init>(java.lang.Object,double,java.util.Map,org.apache.cassandra.dht.tokenallocator.ReplicationStrategy)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$Weighted: void <init>(double,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo access$000(java.lang.Object,java.util.Map,org.apache.cassandra.dht.tokenallocator.ReplicationStrategy)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo: void <init>(java.lang.Object,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo getGroup(java.lang.Object,java.util.Map,org.apache.cassandra.dht.tokenallocator.ReplicationStrategy)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$2: java.lang.Object getGroup(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$3: java.lang.Object getGroup(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$4: java.lang.Object getGroup(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$1: java.lang.Object getGroup(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo: void <init>(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$1: java.lang.Object getGroup(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$4: java.lang.Object getGroup(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$3: java.lang.Object getGroup(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocation$2: java.lang.Object getGroup(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList insertAfter(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: void populateTokenInfoAndAdjustUnit(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo: void <init>(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$BaseTokenInfo: void <init>(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList: void <init>(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$CircularList: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: org.apache.cassandra.dht.Token populateTokenInfo(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$BaseTokenInfo,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$GroupVisitor: boolean add(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo prevInRing()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo prevInRing()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$PopulateVisitor: void <init>(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator,org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$GroupVisitor: void clean()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$GroupVisitor: boolean seen(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$GroupVisitor: boolean visitedAll()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$PopulateVisitor: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo prevSeen(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$PopulateVisitor: void setPrevSeen(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$ReplicationVisitor: void setPrevSeen(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$ReplicationVisitor: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo prevSeen(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$GroupInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$PopulateVisitor: void <init>(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$GroupVisitor: void <init>(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator,org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$GroupVisitor: void <init>(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: void populateCandidate(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo: void <init>(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: double applyOwnershipAdjustment(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$BaseTokenInfo,org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,double,org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$UnitAdjustmentTracker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: org.apache.cassandra.dht.Token findUpdatedReplicationStart(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo,org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$CandidateInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$UnitAdjustmentTracker: void <init>(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$UnitAdjustmentTracker: double calculateUnitChange(double,double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$ReplicationVisitor: void <init>(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator,org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$ReplicationVisitor: void <init>(org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: double access$200(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: double sq(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator$UnitAdjustmentTracker: void add(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo,double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator: org.apache.cassandra.dht.Token furtherStartToken(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocator: void populateTokenInfoAndAdjustUnit(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocator: org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$TokenInfo createTokenInfos(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.tokenallocator.NoReplicationTokenAllocator: java.util.Collection generateRandomTokens(org.apache.cassandra.dht.tokenallocator.TokenAllocatorBase$UnitInfo,int,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: boolean isReadyForBootstrap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void waitUntilReadyForBootstrap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationTask: java.util.concurrent.ConcurrentLinkedQueue getInflightTasks()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.util.Collection tokensFromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.Collection deserializeTokens(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_joinTokenRing_0__26: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isSeed()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue tokens(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue bootReplacing(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue bootstrapping(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void invalidateDiskBoundaries()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean seenAnySeed()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.BootStrapper: void <init>(java.net.InetAddress,java.util.Collection,org.apache.cassandra.locator.TokenMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEventNotifierSupport: void addProgressListener(org.apache.cassandra.utils.progress.ProgressListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$2: void <init>(org.apache.cassandra.service.StorageService,java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void updateTokens(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void resetAvailableRanges()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.progress.ProgressEventNotifierSupport: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void invalidateDiskBoundaries()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaryManager: void invalidate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.DiskBoundaries: void invalidate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: java.lang.String makeTokenString(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: java.lang.String access$200(java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: java.lang.String versionString(java.lang.String[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.TokenSerializer: void serialize(org.apache.cassandra.dht.IPartitioner,java.util.Collection,java.io.DataOutput)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void forceAnnounceNewColumnFamily(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void doAuthSetup()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void executePreJoinTasks(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_executePreJoinTasks_1__439: java.util.function.Predicate bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_executePreJoinTasks_2__440: java.util.function.Consumer bootstrap$(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_executePreJoinTasks_2__440: void <init>(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$lambda_executePreJoinTasks_1__439: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void setGossipTokens(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.Collection getLocalTokens()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue normal(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void register(org.apache.cassandra.service.MigrationListener)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthMigrationListener: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthKeyspace: org.apache.cassandra.schema.KeyspaceMetadata metadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationListener: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.BiMultiValMap: void <init>(org.apache.cassandra.utils.BiMultiValMap)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeDifference: void setRows(long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeDifference: void setSize(long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MerkleTree$TreeDifference: void <init>(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,byte)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceColumnFamilyDrop(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: boolean areAllNodesAtLeast22()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraRoleManager: org.slf4j.Logger access$100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraRoleManager: void access$500(org.apache.cassandra.auth.CassandraRoleManager,java.util.concurrent.Callable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraRoleManager: boolean access$602(org.apache.cassandra.auth.CassandraRoleManager,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.config.CFMetaData fromThriftForUpdate(org.apache.cassandra.thrift.CfDef,org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceColumnFamilyUpdate(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.config.CFMetaData internalFromThrift(org.apache.cassandra.thrift.CfDef,boolean,java.util.Collection,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData compression(org.apache.cassandra.schema.CompressionParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData comment(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData speculativeRetry(org.apache.cassandra.schema.SpeculativeRetryParam)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData maxIndexInterval(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData minIndexInterval(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData dcLocalReadRepairChance(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData defaultTimeToLive(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData readRepairChance(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData caching(org.apache.cassandra.schema.CachingParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData memtableFlushPeriod(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData bloomFilterFpChance(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData compaction(org.apache.cassandra.schema.CompactionParams)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.CFMetaData: org.apache.cassandra.config.CFMetaData gcGraceSeconds(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: void applyImplicitDefaults(org.apache.cassandra.thrift.CfDef)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: boolean isSuper(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: java.util.List fromThrift(java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.ColumnDefinition: org.apache.cassandra.config.ColumnDefinition partitionKeyDef(java.lang.String,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: void addDefaultCQLMetadata(java.util.Collection,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.schema.Indexes indexDefsFromThrift(org.apache.cassandra.config.CFMetaData,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.schema.CompactionParams compactionParamsFromThrift(org.apache.cassandra.thrift.CfDef)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.schema.CachingParams cachingFromThrift(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.schema.Triggers triggerDefinitionsFromThrift(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.schema.CompressionParams compressionParametersFromThrift(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.Triggers$Builder: org.apache.cassandra.schema.Triggers$Builder add(org.apache.cassandra.schema.TriggerMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.schema.CachingParams cachingFromTrhfit(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: int fromThriftCellsPerRow(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.config.ColumnDefinition fromThrift(java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.thrift.ColumnDef)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.CompactTables$DefaultNames: java.lang.String defaultPartitionKeyName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.CompressionParams: java.lang.Class klass()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnectionPool: java.net.Socket newSocket()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: boolean shouldCompressConnection()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: int handshakeVersion(java.io.DataInputStream)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: boolean isLocalDC(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean getInterDCTcpNoDelay()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getInternodeSendBufferSize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection: void writeHeader(java.io.DataOutput,int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: org.apache.cassandra.config.Config$InternodeCompression internodeCompression()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection$lambda_handshakeVersion_1__393: java.lang.Runnable bootstrap$(org.apache.cassandra.net.OutboundTcpConnection,java.util.concurrent.atomic.AtomicInteger,java.io.DataInputStream,java.util.concurrent.CountDownLatch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory: java.lang.Thread createThread(java.lang.Runnable,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.NamedThreadFactory: java.lang.Thread createThread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.OutboundTcpConnection$lambda_handshakeVersion_1__393: void <init>(org.apache.cassandra.net.OutboundTcpConnection,java.util.concurrent.atomic.AtomicInteger,java.io.DataInputStream,java.util.concurrent.CountDownLatch)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.BTreeRow noCellLiveRow(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.LivenessInfo)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Map genBounds(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Set overlappingWithBounds(org.apache.cassandra.io.sstable.format.SSTableReader,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Set overlapping(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Set overlapping(java.util.Collection,java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: java.util.Set overlappingWithBounds(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: boolean intersects(org.apache.cassandra.dht.Bounds)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy$contains__21: com.google.common.base.Predicate bootstrap$(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.AbstractCompactionStrategy: java.lang.Iterable filterSuspectSSTables(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.AbstractCompactionStrategy$1: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy$contains__21: void <init>(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector$State: void <init>(double,double,org.apache.cassandra.service.GCInspector$State)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector$GCState: java.lang.String[] access$000(org.apache.cassandra.service.GCInspector$GCState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: void rescheduleFailedDeletions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: void rescheduleFailedDeletions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledManifest: void <init>(org.apache.cassandra.db.ColumnFamilyStore,int,int,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: float usedRatio()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.memory.MemtablePool$SubPool: float reclaimingRatio()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String access$800(float,float)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.String ratio(float,float)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader$ReadStatusTracker: void <init>(int,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: java.util.Iterator iterator()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader: void <init>(org.apache.cassandra.db.commitlog.CommitLogReadHandler,org.apache.cassandra.db.commitlog.CommitLogDescriptor,org.apache.cassandra.io.util.RandomAccessReader,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$NoOpSegmenter: void <init>(org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.EncryptionContext: boolean isEnabled()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogDescriptor: org.apache.cassandra.security.EncryptionContext getEncryptionContext()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter: void <init>(org.apache.cassandra.db.commitlog.CommitLogDescriptor,org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$CompressedSegmenter: void <init>(org.apache.cassandra.db.commitlog.CommitLogDescriptor,org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$CompressedSegmenter: void <init>(org.apache.cassandra.io.compress.ICompressor,org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter: void <init>(org.apache.cassandra.io.util.RandomAccessReader,org.apache.cassandra.security.EncryptionContext)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter$lambda_new_0__394: org.apache.cassandra.db.commitlog.EncryptedFileSegmentInputStream$ChunkProvider bootstrap$(org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter,org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter$lambda_new_0__394: void <init>(org.apache.cassandra.db.commitlog.CommitLogSegmentReader$EncryptedSegmenter,org.apache.cassandra.io.util.RandomAccessReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegmentReader$SegmentIterator: void <init>(org.apache.cassandra.db.commitlog.CommitLogSegmentReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Prepared: org.apache.cassandra.thrift.CqlPreparedResult toThriftPreparedResult()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage$Prepared prepare(java.lang.String,org.apache.cassandra.service.QueryState,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage$Prepared prepare(java.lang.String,org.apache.cassandra.service.QueryState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage$Prepared prepare(java.lang.String,org.apache.cassandra.service.ClientState,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage$Prepared getStoredPreparedStatement(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage$Prepared storePreparedStatement(java.lang.String,java.lang.String,org.apache.cassandra.cql3.statements.ParsedStatement$Prepared,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Prepared: void <init>(org.apache.cassandra.utils.MD5Digest,org.apache.cassandra.cql3.statements.ParsedStatement$Prepared)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: long capacityToBytes(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: java.lang.Integer computeThriftId(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Prepared: org.apache.cassandra.transport.messages.ResultMessage$Prepared forThrift(int,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.utils.MD5Digest computeId(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MD5Digest: org.apache.cassandra.utils.MD5Digest compute(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MD5Digest: org.apache.cassandra.utils.MD5Digest compute(byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.MD5Digest: void <init>(byte[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Prepared: void <init>(org.apache.cassandra.utils.MD5Digest,int,org.apache.cassandra.cql3.ResultSet$PreparedMetadata,org.apache.cassandra.cql3.ResultSet$ResultMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$PreparedMetadata: void <init>(java.util.List,short[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ResultSet$PreparedMetadata: void <init>(java.util.EnumSet,java.util.List,short[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.messages.ResultMessage$Prepared: org.apache.cassandra.cql3.ResultSet$ResultMetadata extractResultMetadata(org.apache.cassandra.cql3.CQLStatement)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.ColumnSpecification: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: org.apache.cassandra.thrift.CqlPreparedResult setVariable_names(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: org.apache.cassandra.thrift.CqlPreparedResult setVariable_types(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: void <init>(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: void setCountIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CqlPreparedResult: void setItemIdIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: void <init>(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.pager.QueryPagers: int countPaged(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.filter.ColumnFilter,org.apache.cassandra.db.filter.ClusteringIndexFilter,org.apache.cassandra.db.filter.DataLimits,org.apache.cassandra.db.ConsistencyLevel,org.apache.cassandra.service.ClientState,int,int,boolean,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: void setCountIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.SliceRange: void setReversedIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: void <init>(java.lang.String,java.lang.String,java.lang.String,long,java.util.concurrent.TimeUnit)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: org.apache.cassandra.db.commitlog.CommitLogArchiver disabled()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: void <init>(int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,org.apache.cassandra.concurrent.NamedThreadFactory,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,org.apache.cassandra.concurrent.NamedThreadFactory,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics: void <init>(java.util.concurrent.ThreadPoolExecutor,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetricNameFactory: void <init>(java.lang.String,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$1: void <init>(org.apache.cassandra.metrics.ThreadPoolMetrics,java.util.concurrent.ThreadPoolExecutor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$2: void <init>(org.apache.cassandra.metrics.ThreadPoolMetrics,java.util.concurrent.ThreadPoolExecutor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$3: void <init>(org.apache.cassandra.metrics.ThreadPoolMetrics,java.util.concurrent.ThreadPoolExecutor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.metrics.ThreadPoolMetrics$4: void <init>(org.apache.cassandra.metrics.ThreadPoolMetrics,java.util.concurrent.ThreadPoolExecutor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest: void <init>(java.util.List,org.apache.cassandra.db.partitions.PartitionUpdate,int,org.apache.cassandra.thrift.CassandraServer$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult: void <init>(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult: org.apache.cassandra.thrift.CASResult setCurrent_values(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$lambda_cas_0__20: com.google.common.base.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate fromIterator(org.apache.cassandra.db.rows.RowIterator,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.LegacyLayout: org.apache.cassandra.utils.Pair fromRowIterator(org.apache.cassandra.db.rows.RowIterator)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.RowIterators: org.apache.cassandra.db.rows.RowIterator withOnlyQueriedData(org.apache.cassandra.db.rows.RowIterator,org.apache.cassandra.db.filter.ColumnFilter)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateTtl(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.thrift.Column)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: java.nio.ByteBuffer summarize(java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$lambda_cas_0__20: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CASResult: void setSuccessIsSet(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CassandraServer$ThriftCASRequest: void <init>(java.util.List,org.apache.cassandra.db.partitions.PartitionUpdate,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ColumnParent: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int getMaxIndexSummarySize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: double getEffectiveIndexInterval()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int getMinIndexInterval()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int getIndexSummarySamplingLevel()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: int getIndexSummarySize()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.format.SSTableReader cloneWithNewSummarySamplingLevel(org.apache.cassandra.db.ColumnFamilyStore,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution$ResampleEntry: void <init>(org.apache.cassandra.io.sstable.format.SSTableReader,long,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: int calculateSamplingLevel(int,int,long,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: int entriesAtSamplingLevel(int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryRedistribution$1: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: double getEffectiveIndexInterval()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: void saveSummary(org.apache.cassandra.io.sstable.IndexSummary)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.format.SSTableReader: org.apache.cassandra.io.sstable.IndexSummary buildSummaryAtLevel(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummaryBuilder: org.apache.cassandra.io.sstable.IndexSummary downsample(org.apache.cassandra.io.sstable.IndexSummary,int,int,org.apache.cassandra.dht.IPartitioner)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: long getEndInSummary(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: org.apache.cassandra.io.util.Memory getEntries()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.IndexSummary: long getEntriesLength()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.lang.Iterable filterOldSSTables(java.util.List,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List createSSTableAndMinTimestampPairs(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getBuckets(java.util.Collection,long,int,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List newestBucket(java.util.List,int,int,long,long,long,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target: boolean onTarget(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target getInitialTarget(long,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy: java.util.List getSTCSBuckets(java.util.Collection,org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target: void <init>(long,long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target: int compareToTimestamp(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$2: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target: org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$Target nextTarget(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$1: void <init>(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: void clear()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void truncate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_truncate_0__73: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace$lambda_truncate_0__73: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$unload__457: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$unload__458: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$unload__458: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$unload__457: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.concurrent.Refs: boolean tryRef(org.apache.cassandra.utils.concurrent.RefCounted)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceKeyspaceDrop(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$RangeRelocator: java.util.concurrent.Future stream()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$RangeRelocator: boolean streamsNeeded()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$RangeRelocator: void <init>(org.apache.cassandra.service.StorageService,java.util.Collection,java.util.List,org.apache.cassandra.service.StorageService$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$RangeRelocator: void <init>(org.apache.cassandra.service.StorageService,java.util.Collection,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: org.apache.cassandra.locator.TokenMetadata access$1000(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean access$1100()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.RangeStreamer: com.google.common.collect.Multimap getWorkMap(com.google.common.collect.Multimap,java.lang.String,org.apache.cassandra.gms.IFailureDetector,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamPlan: boolean isEmpty()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: java.util.concurrent.Future startBatchlogReplay()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$replayFailedBatches__401: java.lang.Runnable bootstrap$(org.apache.cassandra.batchlog.BatchlogManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$replayFailedBatches__401: void <init>(org.apache.cassandra.batchlog.BatchlogManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateKeyRange(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.thrift.KeyRange)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftValidation: void validateKeyspaceNotYetExisting(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.config.CFMetaData fromThrift(org.apache.cassandra.thrift.CfDef)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.schema.KeyspaceMetadata fromThrift(org.apache.cassandra.thrift.KsDef,org.apache.cassandra.config.CFMetaData[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewKeyspace(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void pause()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.Tracker: java.util.Set getCompacting()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void resume()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: void waitForCessation(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: boolean isCompacting(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.RateBasedBackPressure$lambda_apply_0__19: java.util.concurrent.Callable bootstrap$(org.apache.cassandra.net.RateBasedBackPressure)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.RateBasedBackPressure$lambda_apply_0__19: void <init>(org.apache.cassandra.net.RateBasedBackPressure)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: boolean isSafeForStartup(java.net.InetAddress,java.util.UUID,boolean,java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper$2: void <init>(org.apache.cassandra.gms.Gossiper)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftConversion: org.apache.cassandra.thrift.UnavailableException toThrift(org.apache.cassandra.exceptions.UnavailableException)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.Collection getLocalRanges(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.UUID getLocalHostId()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: boolean isViewBuilt(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: boolean isViewStatusReplicated(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: org.apache.cassandra.utils.Pair getViewBuildStatus(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void beginViewBuild(java.lang.String,java.lang.String,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.repair.SystemDistributedKeyspace: void startViewBuild(java.lang.String,java.lang.String,java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void updateViewBuildStatus(java.lang.String,java.lang.String,org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewBuilder$lambda_run_1__18: java.util.concurrent.Callable bootstrap$(org.apache.cassandra.db.view.ViewBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewBuilder$lambda_run_1__18: void <init>(org.apache.cassandra.db.view.ViewBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$1: java.lang.String toString(org.apache.cassandra.dht.Token)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet process(java.lang.String,org.apache.cassandra.db.ConsistencyLevel,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.QueryState: org.apache.cassandra.service.QueryState forInternalCalls()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.QueryState: void <init>(org.apache.cassandra.service.ClientState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.LocalPartitioner$1: org.apache.cassandra.dht.Token fromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.UUID setLocalHostId(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$contains__17: com.google.common.base.Predicate bootstrap$(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionController: java.util.Set getFullyExpiredSSTables(org.apache.cassandra.db.ColumnFamilyStore,java.lang.Iterable,java.lang.Iterable,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.DateTieredCompactionStrategy$contains__17: void <init>(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$contains__16: com.google.common.base.Predicate bootstrap$(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy: int getEstimatedCompactionsByTasks(org.apache.cassandra.db.ColumnFamilyStore,java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy$contains__16: void <init>(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.statements.ParsedStatement$Prepared getPreparedForThrift(java.lang.Integer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.transport.messages.ResultMessage processPrepared(org.apache.cassandra.cql3.CQLStatement,org.apache.cassandra.service.QueryState,org.apache.cassandra.cql3.QueryOptions,java.util.Map,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor: java.util.List getTemporaryFiles()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LifecycleTransaction: boolean removeUnfinishedLeftovers(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: boolean removeUnfinishedLeftovers(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.util.List getCFDirectories()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction: boolean removeUnfinishedLeftovers(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$list__105: java.util.function.Consumer bootstrap$(org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName: boolean removeUnfinishedLeftovers()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName: void <init>(org.apache.cassandra.db.lifecycle.LogTransaction$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName$removeUnfinishedLeftovers__176: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName$removeUnfinishedLeftovers__176: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.lifecycle.LogTransaction$list__105: void <init>(org.apache.cassandra.db.lifecycle.LogTransaction$LogFilesByName)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.util.List listEphemeralSnapshots()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.util.List listSnapshots()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.io.File getEphemeralSnapshotMarkerFile(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor$lambda_getTemporaryFiles_0__543: java.io.FilenameFilter bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.sstable.Descriptor$lambda_getTemporaryFiles_0__543: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthenticationProxy$JMXCallbackHandler: void <init>(java.lang.Object,org.apache.cassandra.auth.jmx.AuthenticationProxy$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthenticationProxy$lambda_authenticate_0__14: java.security.PrivilegedAction bootstrap$(javax.security.auth.Subject)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthenticationProxy$lambda_authenticate_0__14: void <init>(javax.security.auth.Subject)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.jmx.AuthenticationProxy$JMXCallbackHandler: void <init>(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraAuthorizer$2: void <init>(org.apache.cassandra.auth.CassandraAuthorizer,org.apache.cassandra.auth.IResource)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.Resources: org.apache.cassandra.auth.IResource fromName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: java.lang.String getName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: java.lang.String getName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: java.lang.String getName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: java.lang.String getName()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.RoleResource: org.apache.cassandra.auth.RoleResource fromName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.DataResource: org.apache.cassandra.auth.DataResource fromName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: org.apache.cassandra.auth.FunctionResource fromName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.JMXResource: org.apache.cassandra.auth.JMXResource fromName(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: java.util.List argsListFromString(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.FunctionResource: java.lang.String argListAsString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.sasi.TermIterator: void releaseIndex(java.util.Set,org.apache.cassandra.index.sasi.SSTableIndex)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.sasi.TermIterator: void releaseQuietly(org.apache.cassandra.index.sasi.SSTableIndex)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$CustomConstructor: void <init>(java.lang.Class)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker: void check()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.exceptions.ConfigurationException: void <init>(java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataIntegrityMetadata: org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator checksumValidator(org.apache.cassandra.io.sstable.Descriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.DataIntegrityMetadata$ChecksumValidator: void <init>(org.apache.cassandra.io.sstable.Descriptor)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void enableAutoCompaction()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void reload()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema loadFromDisk()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: java.lang.Iterable getTablesAndViews(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void populateTokenMetadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void registerDaemon(org.apache.cassandra.service.CassandraDaemon)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void initServer()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.DefaultFSErrorHandler: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon$2: void <init>(org.apache.cassandra.service.CassandraDaemon)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: int recoverSegmentsOnDisk()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator: void migrate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator: void <init>(java.io.File,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.ThriftServer: void <init>(java.net.InetAddress,int,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.NativeTransportService: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: void setFSErrorHandler(org.apache.cassandra.io.FSErrorHandler)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.WindowsFailedSnapshotTracker: void deleteOldSnapshots()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.ThreadAwareSecurityManager: void install()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibrary: void tryMlockall()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: boolean snapshotOnVersionChange()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void persistLocalMetadata()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void migrate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void setInitialized()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector: void register()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.LegacyBatchlogMigrator: void migrate()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: void finishStartup()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: void preloadPreparedStatement()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon$lambda_setup_0__12: java.lang.Runnable bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: java.lang.Runnable getBackgroundCompactionTaskSubmitter()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.net.InetAddress getRpcAddress()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getRpcPort()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getRpcListenBacklog()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$2: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.CassandraDaemon$lambda_setup_0__12: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$CustomConstructor: java.util.Map createDefaultMap()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$CustomConstructor: java.util.Set createDefaultSet()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker$1: void set(java.lang.Object,java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker$1: java.lang.Class[] getActualTypeArguments()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker$1: void <init>(org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker,java.lang.String,java.lang.Class,org.yaml.snakeyaml.introspector.Property)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker: java.util.Set access$000(org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$PropertiesChecker$1: java.lang.Object get(java.lang.Object)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$CustomConstructor: java.util.List createDefaultList(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.YamlConfigurationLoader$CustomConstructor: java.util.Set createDefaultSet(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.List loadPreparedStatements()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: void saveSystemKeyspacesSchema()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector$State: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector$GCState: void <init>(java.lang.management.GarbageCollectorMXBean,boolean,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector: boolean assumeGCIsPartiallyConcurrent(java.lang.management.GarbageCollectorMXBean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.GCInspector: boolean assumeGCIsOldGen(java.lang.management.GarbageCollectorMXBean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: java.util.Collection readSchema()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void unloadLegacySchemaTables()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$storeKeyspaceInNewSchemaTables__68: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$migrateBuiltIndexesForKeyspace__69: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator: void truncateLegacySchemaTables()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$unload__92: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_unloadLegacySchemaTables_1__93: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_unloadLegacySchemaTables_1__93: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$unload__92: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_truncateLegacySchemaTables_2__94: java.util.function.Consumer bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_truncateLegacySchemaTables_2__94: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$migrateBuiltIndexesForKeyspace__69: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$storeKeyspaceInNewSchemaTables__68: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readSchema_3__96: java.util.function.Consumer bootstrap$(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readSchema_4__97: java.util.function.Consumer bootstrap$(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readSchema_4__97: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.LegacySchemaMigrator$lambda_readSchema_3__96: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.CassandraVersion: java.lang.String toString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.String getReleaseVersionString()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void snapshot(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Directories: java.util.List getKSChildDirectories(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.Keyspace: void snapshot(java.lang.String,java.lang.String,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryDarwin: int callMlockall(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryWindows: int callMlockall(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.NativeLibraryLinux: int callMlockall(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.ThreadAwareSecurityManager: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: boolean isSubDirectory(java.io.File,java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator: int calculatePageSize(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator: void migrateLegacyHints()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator: void compactLegacyHints()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator: void forceCompaction(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator$lambda_compactLegacyHints_0__423: java.util.function.Consumer bootstrap$(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator$lambda_compactLegacyHints_0__423: void <init>(java.util.Collection)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: java.util.concurrent.Future submitUserDefined(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$12: void <init>(org.apache.cassandra.db.compaction.CompactionManager,java.util.Collection,org.apache.cassandra.db.ColumnFamilyStore,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator$lambda_migrateLegacyHints_1__424: java.util.function.Consumer bootstrap$(org.apache.cassandra.hints.LegacyHintsMigrator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.LegacyHintsMigrator$lambda_migrateLegacyHints_1__424: void <init>(org.apache.cassandra.hints.LegacyHintsMigrator,java.nio.ByteBuffer)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver: void maybeArchive(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog: int recoverFiles(java.io.File[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogSegment$CommitLogSegmentFileComparator: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog$lambda_recoverSegmentsOnDisk_0__425: java.io.FilenameFilter bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLog$lambda_recoverSegmentsOnDisk_0__425: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReplayer: void replayFiles(java.io.File[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: void readAllFiles(org.apache.cassandra.db.commitlog.CommitLogReadHandler,java.io.File[],org.apache.cassandra.db.commitlog.CommitLogPosition)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: java.util.List filterCommitLogFiles(java.io.File[])>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogReader: boolean shouldSkip(java.io.File)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.commitlog.CommitLogArchiver$2: void <init>(org.apache.cassandra.db.commitlog.CommitLogArchiver,java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: com.google.common.collect.SetMultimap loadTokens()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void initServer(int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue hibernate(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void prepareToJoin()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: void loadRingState()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: boolean isReplacing()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService$1: void <init>(org.apache.cassandra.service.StorageService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache: com.google.common.util.concurrent.ListenableFuture loadSavedAsync()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.ClientState: org.apache.cassandra.utils.CassandraVersion[] getCQLSupportedVersion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.ProtocolVersion: java.util.List supportedVersions()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$3: void <init>(org.apache.cassandra.cache.AutoSavingCache)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cache.AutoSavingCache$4: void <init>(org.apache.cassandra.cache.AutoSavingCache,long,com.google.common.util.concurrent.ListeningExecutorService)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: java.util.Map loadHostIds()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.EndpointState: void setHeartBeatState(org.apache.cassandra.gms.HeartBeatState)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue networkVersion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue hostId(java.util.UUID)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue rpcaddress(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue releaseVersion()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.StorageService: java.util.UUID prepareForReplacement()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster: void startBroadcasting()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsService: void startDispatch()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager: void start()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void listen()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: boolean isListening()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: boolean wasDecommissioned()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.util.Collection getReplaceTokens()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.util.UUID getReplaceNode()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.net.InetAddress getBroadcastRpcAddress()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.SystemKeyspace: int incrementAndGetGeneration()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.net.InetAddress getBroadcastRpcAddress()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.ExpiringMap: void reset()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: void listen(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean shouldListenOnBroadcastAddress()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService: java.util.List getServerSockets(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.MessagingService$SocketThread: void <init>(java.net.ServerSocket,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.SSLFactory: javax.net.ssl.SSLServerSocket getServerSocket(org.apache.cassandra.config.EncryptionOptions,java.net.InetAddress,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.FBUtilities: java.lang.String getNetworkInterface(java.net.InetAddress)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.security.SSLFactory: void prepareSocket(javax.net.ssl.SSLServerSocket,org.apache.cassandra.config.EncryptionOptions)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$replayFailedBatches__438: java.lang.Runnable bootstrap$(org.apache.cassandra.batchlog.BatchlogManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.batchlog.BatchlogManager$replayFailedBatches__438: void <init>(org.apache.cassandra.batchlog.BatchlogManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hints.HintsDispatchTrigger: void <init>(org.apache.cassandra.hints.HintsCatalog,org.apache.cassandra.hints.HintsWriteExecutor,org.apache.cassandra.hints.HintsDispatchExecutor,java.util.concurrent.atomic.AtomicBoolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.LoadBroadcaster$1: void <init>(org.apache.cassandra.service.LoadBroadcaster)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue: byte[] toBytes()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.Gossiper: java.util.Map doShadowRound()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.gms.VersionedValue$VersionedValueFactory: org.apache.cassandra.gms.VersionedValue releaseVersion(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema loadFromDisk(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema: org.apache.cassandra.config.Schema load(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Keyspaces fetchNonSystemKeyspaces()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.schema.SchemaKeyspace: org.apache.cassandra.schema.Keyspaces fetchKeyspacesWithout(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$load__463: java.util.function.Consumer bootstrap$(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.Schema$load__463: void <init>(org.apache.cassandra.config.Schema)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.DefaultValue: boolean isModified()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionStrategyManager: void maybeReload(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager: void reload()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_reload_0__584: java.util.function.Predicate bootstrap$(org.apache.cassandra.schema.Indexes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$removeIndex__585: java.util.function.Consumer bootstrap$(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$removeIndex__585: void <init>(org.apache.cassandra.index.SecondaryIndexManager)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_reload_0__584: void <init>(org.apache.cassandra.schema.Indexes)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore: void enableAutoCompaction(boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.LeveledCompactionTask: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,int,int,long,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader$RowIterator: void <init>(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.ConfigHelper: int getInputSplitSize(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: java.lang.String getInputcolumns(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: java.lang.String getInputWhereClauses(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlConfigHelper: java.lang.String getInputCql(org.apache.hadoop.conf.Configuration)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: org.apache.cassandra.dht.IPartitioner access$100(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: com.datastax.driver.core.Session access$400(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: java.lang.String access$200(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: org.apache.cassandra.hadoop.ColumnFamilySplit access$300(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: com.datastax.driver.core.Cluster access$800(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: java.lang.String access$700(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: java.lang.String access$600(org.apache.cassandra.hadoop.cql3.CqlRecordReader,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: java.lang.String access$500(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.hadoop.cql3.CqlRecordReader: java.util.LinkedHashMap access$900(org.apache.cassandra.hadoop.cql3.CqlRecordReader)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.AbstractCompactionTask: org.apache.cassandra.db.compaction.AbstractCompactionTask setCompactionType(org.apache.cassandra.db.compaction.OperationType)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask: void access$000(org.apache.cassandra.streaming.StreamReceiveTask)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask: void access$100(org.apache.cassandra.streaming.StreamReceiveTask)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask: org.slf4j.Logger access$200()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable$lambda_run_0__11: java.util.function.Consumer bootstrap$(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds: java.util.Set getNonOverlappingBounds(java.lang.Iterable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.Bounds$1: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.StreamReceiveTask$OnCompletionRunnable$lambda_run_0__11: void <init>(java.util.List)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.transport.Server$LatestEvent: org.apache.cassandra.transport.Server$LatestEvent forTopologyChange(org.apache.cassandra.transport.Event$TopologyChange$Change,org.apache.cassandra.transport.Server$LatestEvent)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.PasswordAuthenticator$NoSuchCredentialsException: void <init>(org.apache.cassandra.auth.PasswordAuthenticator$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.CassandraRoleManager: org.apache.cassandra.db.ConsistencyLevel consistencyForRole(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.PasswordAuthenticator$NoSuchCredentialsException: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess: void <init>(org.apache.cassandra.thrift.CustomTThreadPoolServer,org.apache.thrift.transport.TTransport,org.apache.cassandra.thrift.CustomTThreadPoolServer$1)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess: void <init>(org.apache.cassandra.thrift.CustomTThreadPoolServer,org.apache.thrift.transport.TTransport)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.AbstractCompactionTask: int execute(org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutorStatsCollector)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$7$1: void <init>(org.apache.cassandra.db.compaction.CompactionManager$7,org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.lifecycle.LifecycleTransaction,int)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionTask: int executeInternal(org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutorStatsCollector)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBestIndexFor_21__9: java.util.function.Predicate bootstrap$(org.apache.cassandra.db.filter.RowFilter$Expression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$add__10: java.util.function.Consumer bootstrap$(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBestIndexFor_22__6: java.util.Comparator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBestIndexFor_23__7: java.util.function.Supplier bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBestIndexFor_24__8: java.util.function.Function bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBestIndexFor_24__8: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBestIndexFor_23__7: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBestIndexFor_22__6: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$add__10: void <init>(java.util.Set)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.index.SecondaryIndexManager$lambda_getBestIndexFor_21__9: void <init>(org.apache.cassandra.db.filter.RowFilter$Expression)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.TimeWindowCompactionStrategyOptions: void <init>(java.util.Map)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceNewColumnFamily(org.apache.cassandra.config.CFMetaData)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.cql3.QueryProcessor: org.apache.cassandra.cql3.UntypedResultSet process(java.lang.String,org.apache.cassandra.db.ConsistencyLevel)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.view.ViewBuilder: void <init>(org.apache.cassandra.db.ColumnFamilyStore,org.apache.cassandra.db.view.View)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager: java.util.concurrent.Future submitViewBuilder(org.apache.cassandra.db.view.ViewBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.compaction.CompactionManager$16: void <init>(org.apache.cassandra.db.compaction.CompactionManager,org.apache.cassandra.db.view.ViewBuilder)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.AuthenticatedUser: void <init>(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.auth.PasswordAuthenticator: boolean checkpw(java.lang.String,java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$lambda_getOverlappingLiveSSTables_1__2: java.util.Comparator bootstrap$()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.dht.AbstractBounds: org.apache.cassandra.dht.AbstractBounds bounds(org.apache.cassandra.dht.RingPosition,boolean,org.apache.cassandra.dht.RingPosition,boolean)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.ColumnFamilyStore$lambda_getOverlappingLiveSSTables_1__2: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.service.MigrationManager: void announceKeyspaceUpdate(org.apache.cassandra.schema.KeyspaceMetadata)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: long getTotalCompressedBytesRead()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: void position(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream: void <init>(java.io.InputStream,org.apache.cassandra.streaming.compress.CompressionInfo,org.apache.cassandra.utils.ChecksumType,java.util.function.Supplier)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.TrackedInputStream: void reset(long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedStreamReader$getCrcCheckChance__1: java.util.function.Supplier bootstrap$(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.utils.Throwables: java.util.Optional extractIOExceptionCause(java.lang.Throwable)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedStreamReader$getCrcCheckChance__1: void <init>(org.apache.cassandra.db.ColumnFamilyStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.streaming.compress.CompressedInputStream$Reader: void <init>(org.apache.cassandra.streaming.compress.CompressedInputStream,java.io.InputStream,org.apache.cassandra.streaming.compress.CompressionInfo,java.util.concurrent.BlockingQueue)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.rows.BTreeRow: org.apache.cassandra.db.rows.BTreeRow singleCellRow(org.apache.cassandra.db.Clustering,org.apache.cassandra.db.rows.Cell)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate singleRowUpdate(org.apache.cassandra.config.CFMetaData,java.nio.ByteBuffer,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate singleRowUpdate(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.db.partitions.PartitionUpdate: org.apache.cassandra.db.partitions.PartitionUpdate singleRowUpdate(org.apache.cassandra.config.CFMetaData,org.apache.cassandra.db.DecoratedKey,org.apache.cassandra.db.rows.Row,org.apache.cassandra.db.rows.Row)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getGCLogThreshold()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long getGCWarnThreshold()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: int getCounterCacheKeysToSave()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SsdDiskOptimizationStrategy: void <init>(double)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.SpinningDiskOptimizationStrategy: void <init>()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$SafeFileStore: long getTotalSpace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$SafeFileStore: long getUnallocatedSpace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: boolean hasLargeAddressSpace()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String storagedirFor(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.nio.file.FileStore guessFileStore(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: java.lang.String storagedir(java.lang.String)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.config.DatabaseDescriptor: long saturatedSum(long,long)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.net.RateBasedBackPressure: org.apache.cassandra.config.ParameterizedClass withDefaultParams()>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: java.nio.file.FileStore getFileStore(java.nio.file.Path)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils$SafeFileStore: void <init>(java.nio.file.FileStore)>
2020-05-18 22:39:09 [INFO] - Start to analyze <org.apache.cassandra.io.util.FileUtils: long access$000(long)>